/*
#############################################################################################
# Global Agenda (1.5.1.5) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: TgGame_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function TgGame.TgAnimNodeBlendByVerticalAim.OnBecomeRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgAnimNodeBlendByVerticalAim::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 33760 ];

	UTgAnimNodeBlendByVerticalAim_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByVerticalAim.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UTgAnimNodeBlendByVerticalAim::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 33756 ];

	UTgAnimNodeBlendByVerticalAim_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgCaptureComponent.ForceFullUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgCaptureComponent::ForceFullUpdate ( )
{
	static UFunction* pFnForceFullUpdate = NULL;

	if ( ! pFnForceFullUpdate )
		pFnForceFullUpdate = (UFunction*) UObject::GObjObjects()->Data[ 34704 ];

	UTgCaptureComponent_execForceFullUpdate_Parms ForceFullUpdate_Parms;

	pFnForceFullUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceFullUpdate, &ForceFullUpdate_Parms, NULL );

	pFnForceFullUpdate->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.ShowMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgChestActor::eventShowMesh ( )
{
	static UFunction* pFnShowMesh = NULL;

	if ( ! pFnShowMesh )
		pFnShowMesh = (UFunction*) UObject::GObjObjects()->Data[ 34757 ];

	ATgChestActor_eventShowMesh_Parms ShowMesh_Parms;

	this->ProcessEvent ( pFnShowMesh, &ShowMesh_Parms, NULL );
};

// Function TgGame.TgChestActor.HideMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgChestActor::eventHideMesh ( )
{
	static UFunction* pFnHideMesh = NULL;

	if ( ! pFnHideMesh )
		pFnHideMesh = (UFunction*) UObject::GObjObjects()->Data[ 34755 ];

	ATgChestActor_eventHideMesh_Parms HideMesh_Parms;

	this->ProcessEvent ( pFnHideMesh, &HideMesh_Parms, NULL );
};

// Function TgGame.TgChestActor.AdjustClientChestState
// [0x00020102] 
// Parameters infos:

void ATgChestActor::AdjustClientChestState ( )
{
	static UFunction* pFnAdjustClientChestState = NULL;

	if ( ! pFnAdjustClientChestState )
		pFnAdjustClientChestState = (UFunction*) UObject::GObjObjects()->Data[ 34754 ];

	ATgChestActor_execAdjustClientChestState_Parms AdjustClientChestState_Parms;

	this->ProcessEvent ( pFnAdjustClientChestState, &AdjustClientChestState_Parms, NULL );
};

// Function TgGame.TgChestActor.RemoveUserPrompt
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::RemoveUserPrompt ( )
{
	static UFunction* pFnRemoveUserPrompt = NULL;

	if ( ! pFnRemoveUserPrompt )
		pFnRemoveUserPrompt = (UFunction*) UObject::GObjObjects()->Data[ 34753 ];

	ATgChestActor_execRemoveUserPrompt_Parms RemoveUserPrompt_Parms;

	pFnRemoveUserPrompt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveUserPrompt, &RemoveUserPrompt_Parms, NULL );

	pFnRemoveUserPrompt->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgChestActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 34751 ];

	ATgChestActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgChestActor.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgChestActor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34748 ];

	ATgChestActor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgChestActor.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgChestActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34742 ];

	ATgChestActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgChestActor.DisplayUseMessage
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )
// unsigned long                  bDisplay                       ( CPF_Parm )

void ATgChestActor::DisplayUseMessage ( class ATgPawn* aPawn, unsigned long bDisplay )
{
	static UFunction* pFnDisplayUseMessage = NULL;

	if ( ! pFnDisplayUseMessage )
		pFnDisplayUseMessage = (UFunction*) UObject::GObjObjects()->Data[ 34738 ];

	ATgChestActor_execDisplayUseMessage_Parms DisplayUseMessage_Parms;
	DisplayUseMessage_Parms.aPawn = aPawn;
	DisplayUseMessage_Parms.bDisplay = bDisplay;

	this->ProcessEvent ( pFnDisplayUseMessage, &DisplayUseMessage_Parms, NULL );
};

// Function TgGame.TgChestActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgChestActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 34736 ];

	ATgChestActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgChestActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgChestActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34735 ];

	ATgChestActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgChestActor.ForceNetRelevant
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::ForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 34734 ];

	ATgChestActor_execForceNetRelevant_Parms ForceNetRelevant_Parms;

	pFnForceNetRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );

	pFnForceNetRelevant->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.CloseChest
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::CloseChest ( )
{
	static UFunction* pFnCloseChest = NULL;

	if ( ! pFnCloseChest )
		pFnCloseChest = (UFunction*) UObject::GObjObjects()->Data[ 34733 ];

	ATgChestActor_execCloseChest_Parms CloseChest_Parms;

	pFnCloseChest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseChest, &CloseChest_Parms, NULL );

	pFnCloseChest->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.LootChest
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::LootChest ( )
{
	static UFunction* pFnLootChest = NULL;

	if ( ! pFnLootChest )
		pFnLootChest = (UFunction*) UObject::GObjObjects()->Data[ 34732 ];

	ATgChestActor_execLootChest_Parms LootChest_Parms;

	pFnLootChest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLootChest, &LootChest_Parms, NULL );

	pFnLootChest->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.OpenChest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )

void ATgChestActor::OpenChest ( class ATgPawn* aPawn )
{
	static UFunction* pFnOpenChest = NULL;

	if ( ! pFnOpenChest )
		pFnOpenChest = (UFunction*) UObject::GObjObjects()->Data[ 34730 ];

	ATgChestActor_execOpenChest_Parms OpenChest_Parms;
	OpenChest_Parms.aPawn = aPawn;

	pFnOpenChest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenChest, &OpenChest_Parms, NULL );

	pFnOpenChest->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.RespawnChest
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::RespawnChest ( )
{
	static UFunction* pFnRespawnChest = NULL;

	if ( ! pFnRespawnChest )
		pFnRespawnChest = (UFunction*) UObject::GObjObjects()->Data[ 34729 ];

	ATgChestActor_execRespawnChest_Parms RespawnChest_Parms;

	pFnRespawnChest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRespawnChest, &RespawnChest_Parms, NULL );

	pFnRespawnChest->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.SpawnChest
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::SpawnChest ( )
{
	static UFunction* pFnSpawnChest = NULL;

	if ( ! pFnSpawnChest )
		pFnSpawnChest = (UFunction*) UObject::GObjObjects()->Data[ 34728 ];

	ATgChestActor_execSpawnChest_Parms SpawnChest_Parms;

	pFnSpawnChest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnChest, &SpawnChest_Parms, NULL );

	pFnSpawnChest->FunctionFlags |= 0x400;
};

// Function TgGame.TgChestActor.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgChestActor::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 34727 ];

	ATgChestActor_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgCollisionProxy.GetNearByPlayersTaskforce
// [0x00424102] 
// Parameters infos:
// unsigned long                  bEndWhenMultipleFound          ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  NearByPlayerTaskForces         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ATgCollisionProxy::GetNearByPlayersTaskforce ( unsigned long bEndWhenMultipleFound, TArray< int >* NearByPlayerTaskForces )
{
	static UFunction* pFnGetNearByPlayersTaskforce = NULL;

	if ( ! pFnGetNearByPlayersTaskforce )
		pFnGetNearByPlayersTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 34798 ];

	ATgCollisionProxy_execGetNearByPlayersTaskforce_Parms GetNearByPlayersTaskforce_Parms;
	GetNearByPlayersTaskforce_Parms.bEndWhenMultipleFound = bEndWhenMultipleFound;

	this->ProcessEvent ( pFnGetNearByPlayersTaskforce, &GetNearByPlayersTaskforce_Parms, NULL );

	if ( NearByPlayerTaskForces )
		memcpy ( NearByPlayerTaskForces, &GetNearByPlayersTaskforce_Parms.NearByPlayerTaskForces, 0xC );
};

// Function TgGame.TgCollisionProxy.GetNearByPlayers
// [0x00024102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bOnlyValid                     ( CPF_OptionalParm | CPF_Parm )

int ATgCollisionProxy::GetNearByPlayers ( unsigned long bOnlyValid )
{
	static UFunction* pFnGetNearByPlayers = NULL;

	if ( ! pFnGetNearByPlayers )
		pFnGetNearByPlayers = (UFunction*) UObject::GObjObjects()->Data[ 34792 ];

	ATgCollisionProxy_execGetNearByPlayers_Parms GetNearByPlayers_Parms;
	GetNearByPlayers_Parms.bOnlyValid = bOnlyValid;

	this->ProcessEvent ( pFnGetNearByPlayers, &GetNearByPlayers_Parms, NULL );

	return GetNearByPlayers_Parms.ReturnValue;
};

// Function TgGame.TgCollisionProxy.OnPlayerRemoved
// [0x00020100] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )

void ATgCollisionProxy::OnPlayerRemoved ( class ATgPawn* aPawn )
{
	static UFunction* pFnOnPlayerRemoved = NULL;

	if ( ! pFnOnPlayerRemoved )
		pFnOnPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 34790 ];

	ATgCollisionProxy_execOnPlayerRemoved_Parms OnPlayerRemoved_Parms;
	OnPlayerRemoved_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnOnPlayerRemoved, &OnPlayerRemoved_Parms, NULL );
};

// Function TgGame.TgCollisionProxy.OnPlayerAdded
// [0x00020100] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )

void ATgCollisionProxy::OnPlayerAdded ( class ATgPawn* aPawn )
{
	static UFunction* pFnOnPlayerAdded = NULL;

	if ( ! pFnOnPlayerAdded )
		pFnOnPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 34788 ];

	ATgCollisionProxy_execOnPlayerAdded_Parms OnPlayerAdded_Parms;
	OnPlayerAdded_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnOnPlayerAdded, &OnPlayerAdded_Parms, NULL );
};

// Function TgGame.TgCollisionProxy.CheckNearByPlayers
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void ATgCollisionProxy::CheckNearByPlayers ( class ATgPawn* aPawn, unsigned long bAdd )
{
	static UFunction* pFnCheckNearByPlayers = NULL;

	if ( ! pFnCheckNearByPlayers )
		pFnCheckNearByPlayers = (UFunction*) UObject::GObjObjects()->Data[ 34782 ];

	ATgCollisionProxy_execCheckNearByPlayers_Parms CheckNearByPlayers_Parms;
	CheckNearByPlayers_Parms.aPawn = aPawn;
	CheckNearByPlayers_Parms.bAdd = bAdd;

	this->ProcessEvent ( pFnCheckNearByPlayers, &CheckNearByPlayers_Parms, NULL );
};

// Function TgGame.TgCollisionProxy.ForceClearNearByPlayersList
// [0x00020102] 
// Parameters infos:

void ATgCollisionProxy::ForceClearNearByPlayersList ( )
{
	static UFunction* pFnForceClearNearByPlayersList = NULL;

	if ( ! pFnForceClearNearByPlayersList )
		pFnForceClearNearByPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 34780 ];

	ATgCollisionProxy_execForceClearNearByPlayersList_Parms ForceClearNearByPlayersList_Parms;

	this->ProcessEvent ( pFnForceClearNearByPlayersList, &ForceClearNearByPlayersList_Parms, NULL );
};

// Function TgGame.TgCollisionProxy.ShouldIgnoreActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 aPawn                          ( CPF_Parm )

bool ATgCollisionProxy::eventShouldIgnoreActor ( class ATgPawn* aPawn )
{
	static UFunction* pFnShouldIgnoreActor = NULL;

	if ( ! pFnShouldIgnoreActor )
		pFnShouldIgnoreActor = (UFunction*) UObject::GObjObjects()->Data[ 34777 ];

	ATgCollisionProxy_eventShouldIgnoreActor_Parms ShouldIgnoreActor_Parms;
	ShouldIgnoreActor_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnShouldIgnoreActor, &ShouldIgnoreActor_Parms, NULL );

	return ShouldIgnoreActor_Parms.ReturnValue;
};

// Function TgGame.TgCollisionProxy.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgCollisionProxy::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34774 ];

	ATgCollisionProxy_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgCollisionProxy.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgCollisionProxy::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34768 ];

	ATgCollisionProxy_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgCollisionProxy_Vortex.OnPlayerRemoved
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )

void ATgCollisionProxy_Vortex::OnPlayerRemoved ( class ATgPawn* aPawn )
{
	static UFunction* pFnOnPlayerRemoved = NULL;

	if ( ! pFnOnPlayerRemoved )
		pFnOnPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 34831 ];

	ATgCollisionProxy_Vortex_execOnPlayerRemoved_Parms OnPlayerRemoved_Parms;
	OnPlayerRemoved_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnOnPlayerRemoved, &OnPlayerRemoved_Parms, NULL );
};

// Function TgGame.TgCollisionProxy_Vortex.OnPlayerAdded
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 aPawn                          ( CPF_Parm )

void ATgCollisionProxy_Vortex::OnPlayerAdded ( class ATgPawn* aPawn )
{
	static UFunction* pFnOnPlayerAdded = NULL;

	if ( ! pFnOnPlayerAdded )
		pFnOnPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 34829 ];

	ATgCollisionProxy_Vortex_execOnPlayerAdded_Parms OnPlayerAdded_Parms;
	OnPlayerAdded_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnOnPlayerAdded, &OnPlayerAdded_Parms, NULL );
};

// Function TgGame.TgCollisionProxy_Vortex.ShouldIgnoreActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 aPawn                          ( CPF_Parm )

bool ATgCollisionProxy_Vortex::eventShouldIgnoreActor ( class ATgPawn* aPawn )
{
	static UFunction* pFnShouldIgnoreActor = NULL;

	if ( ! pFnShouldIgnoreActor )
		pFnShouldIgnoreActor = (UFunction*) UObject::GObjObjects()->Data[ 34824 ];

	ATgCollisionProxy_Vortex_eventShouldIgnoreActor_Parms ShouldIgnoreActor_Parms;
	ShouldIgnoreActor_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnShouldIgnoreActor, &ShouldIgnoreActor_Parms, NULL );

	return ShouldIgnoreActor_Parms.ReturnValue;
};

// Function TgGame.TgCollisionProxy_Vortex.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgCollisionProxy_Vortex::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34822 ];

	ATgCollisionProxy_Vortex_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgCollisionProxy_Vortex.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgCollisionProxy_Vortex::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34817 ];

	ATgCollisionProxy_Vortex_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDebug.WriteLoginInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 NameString                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

void UTgDebug::eventWriteLoginInfo ( struct FString NameString, struct FString Password )
{
	static UFunction* pFnWriteLoginInfo = NULL;

	if ( ! pFnWriteLoginInfo )
		pFnWriteLoginInfo = (UFunction*) UObject::GObjObjects()->Data[ 34900 ];

	UTgDebug_eventWriteLoginInfo_Parms WriteLoginInfo_Parms;
	memcpy ( &WriteLoginInfo_Parms.NameString, &NameString, 0xC );
	memcpy ( &WriteLoginInfo_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnWriteLoginInfo, &WriteLoginInfo_Parms, NULL );
};

// Function TgGame.TgDoor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDoor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 37348 ];

	ATgDoor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDoor.UpdateState
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bOpen                          ( CPF_Parm )

void ATgDoor::eventUpdateState ( unsigned long bOpen )
{
	static UFunction* pFnUpdateState = NULL;

	if ( ! pFnUpdateState )
		pFnUpdateState = (UFunction*) UObject::GObjObjects()->Data[ 37346 ];

	ATgDoor_eventUpdateState_Parms UpdateState_Parms;
	UpdateState_Parms.bOpen = bOpen;

	this->ProcessEvent ( pFnUpdateState, &UpdateState_Parms, NULL );
};

// Function TgGame.TgDoor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgDoor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 37344 ];

	ATgDoor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgDoor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgDoor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 37343 ];

	ATgDoor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDoor.UpdateMICs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDoor::UpdateMICs ( )
{
	static UFunction* pFnUpdateMICs = NULL;

	if ( ! pFnUpdateMICs )
		pFnUpdateMICs = (UFunction*) UObject::GObjObjects()->Data[ 37342 ];

	ATgDoor_execUpdateMICs_Parms UpdateMICs_Parms;

	pFnUpdateMICs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMICs, &UpdateMICs_Parms, NULL );

	pFnUpdateMICs->FunctionFlags |= 0x400;
};

// Function TgGame.TgDoor.BuildDoor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDoor::BuildDoor ( )
{
	static UFunction* pFnBuildDoor = NULL;

	if ( ! pFnBuildDoor )
		pFnBuildDoor = (UFunction*) UObject::GObjObjects()->Data[ 37341 ];

	ATgDoor_execBuildDoor_Parms BuildDoor_Parms;

	pFnBuildDoor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildDoor, &BuildDoor_Parms, NULL );

	pFnBuildDoor->FunctionFlags |= 0x400;
};

// Function TgGame.TgDynamicSMActor.CanApplyEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDynamicSMActor::CanApplyEffects ( )
{
	static UFunction* pFnCanApplyEffects = NULL;

	if ( ! pFnCanApplyEffects )
		pFnCanApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 37505 ];

	ATgDynamicSMActor_execCanApplyEffects_Parms CanApplyEffects_Parms;

	this->ProcessEvent ( pFnCanApplyEffects, &CanApplyEffects_Parms, NULL );

	return CanApplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgDynamicSMActor.Detach
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDynamicSMActor::Detach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 37503 ];

	ATgDynamicSMActor_execDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.Attach
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDynamicSMActor::Attach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 37501 ];

	ATgDynamicSMActor_execAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.HideMesh
// [0x00020102] 
// Parameters infos:

void ATgDynamicSMActor::HideMesh ( )
{
	static UFunction* pFnHideMesh = NULL;

	if ( ! pFnHideMesh )
		pFnHideMesh = (UFunction*) UObject::GObjObjects()->Data[ 37499 ];

	ATgDynamicSMActor_execHideMesh_Parms HideMesh_Parms;

	this->ProcessEvent ( pFnHideMesh, &HideMesh_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.DrawHealth
// [0x00820102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgDynamicSMActor::DrawHealth ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawHealth = NULL;

	if ( ! pFnDrawHealth )
		pFnDrawHealth = (UFunction*) UObject::GObjObjects()->Data[ 37481 ];

	ATgDynamicSMActor_execDrawHealth_Parms DrawHealth_Parms;
	DrawHealth_Parms.PC = PC;
	DrawHealth_Parms.Canvas = Canvas;
	memcpy ( &DrawHealth_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawHealth_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnDrawHealth, &DrawHealth_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.GetSize
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDynamicSMActor::GetSize ( )
{
	static UFunction* pFnGetSize = NULL;

	if ( ! pFnGetSize )
		pFnGetSize = (UFunction*) UObject::GObjObjects()->Data[ 37477 ];

	ATgDynamicSMActor_execGetSize_Parms GetSize_Parms;

	this->ProcessEvent ( pFnGetSize, &GetSize_Parms, NULL );

	return GetSize_Parms.ReturnValue;
};

// Function TgGame.TgDynamicSMActor.ProcessEffect
// [0x00024102] 
// Parameters infos:
// class UTgEffectGroup*          Effect                         ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgDynamicSMActor::ProcessEffect ( class UTgEffectGroup* Effect, unsigned long bRemove, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 37470 ];

	ATgDynamicSMActor_execProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.Effect = Effect;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.PlaySpecialFx
// [0x00020102] 
// Parameters infos:
// struct FName                   nDisplayMode                   ( CPF_Parm )

void ATgDynamicSMActor::PlaySpecialFx ( struct FName nDisplayMode )
{
	static UFunction* pFnPlaySpecialFx = NULL;

	if ( ! pFnPlaySpecialFx )
		pFnPlaySpecialFx = (UFunction*) UObject::GObjObjects()->Data[ 37468 ];

	ATgDynamicSMActor_execPlaySpecialFx_Parms PlaySpecialFx_Parms;
	memcpy ( &PlaySpecialFx_Parms.nDisplayMode, &nDisplayMode, 0x8 );

	this->ProcessEvent ( pFnPlaySpecialFx, &PlaySpecialFx_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDynamicSMActor::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 37467 ];

	ATgDynamicSMActor_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.DestroyIt
// [0x00024102] 
// Parameters infos:
// unsigned long                  bSkipFx                        ( CPF_OptionalParm | CPF_Parm )

void ATgDynamicSMActor::DestroyIt ( unsigned long bSkipFx )
{
	static UFunction* pFnDestroyIt = NULL;

	if ( ! pFnDestroyIt )
		pFnDestroyIt = (UFunction*) UObject::GObjObjects()->Data[ 37465 ];

	ATgDynamicSMActor_execDestroyIt_Parms DestroyIt_Parms;
	DestroyIt_Parms.bSkipFx = bSkipFx;

	this->ProcessEvent ( pFnDestroyIt, &DestroyIt_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgDynamicSMActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 37457 ];

	ATgDynamicSMActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDynamicSMActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 37455 ];

	ATgDynamicSMActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgDynamicSMActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 37452 ];

	ATgDynamicSMActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgDynamicSMActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 37450 ];

	ATgDynamicSMActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgDynamicSMActor.ForceNetRelevant
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDynamicSMActor::ForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 37449 ];

	ATgDynamicSMActor_execForceNetRelevant_Parms ForceNetRelevant_Parms;

	pFnForceNetRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );

	pFnForceNetRelevant->FunctionFlags |= 0x400;
};

// Function TgGame.TgDynamicSMActor.SwapMeshToDestroyed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDynamicSMActor::SwapMeshToDestroyed ( )
{
	static UFunction* pFnSwapMeshToDestroyed = NULL;

	if ( ! pFnSwapMeshToDestroyed )
		pFnSwapMeshToDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 37448 ];

	ATgDynamicSMActor_execSwapMeshToDestroyed_Parms SwapMeshToDestroyed_Parms;

	pFnSwapMeshToDestroyed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMeshToDestroyed, &SwapMeshToDestroyed_Parms, NULL );

	pFnSwapMeshToDestroyed->FunctionFlags |= 0x400;
};

// Function TgGame.TgDynamicSMActor.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDynamicSMActor::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 37447 ];

	ATgDynamicSMActor_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgDynamicDestructible.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDynamicDestructible::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 37513 ];

	ATgDynamicDestructible_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDynamicDestructible.InitializeById
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDestructibleId                ( CPF_Parm )

void ATgDynamicDestructible::InitializeById ( int nDestructibleId )
{
	static UFunction* pFnInitializeById = NULL;

	if ( ! pFnInitializeById )
		pFnInitializeById = (UFunction*) UObject::GObjObjects()->Data[ 37511 ];

	ATgDynamicDestructible_execInitializeById_Parms InitializeById_Parms;
	InitializeById_Parms.nDestructibleId = nDestructibleId;

	pFnInitializeById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeById, &InitializeById_Parms, NULL );

	pFnInitializeById->FunctionFlags |= 0x400;
};

// Function TgGame.TgFlagCaptureVolume.GetDisplayLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgFlagCaptureVolume::GetDisplayLocation ( )
{
	static UFunction* pFnGetDisplayLocation = NULL;

	if ( ! pFnGetDisplayLocation )
		pFnGetDisplayLocation = (UFunction*) UObject::GObjObjects()->Data[ 38267 ];

	ATgFlagCaptureVolume_execGetDisplayLocation_Parms GetDisplayLocation_Parms;

	this->ProcessEvent ( pFnGetDisplayLocation, &GetDisplayLocation_Parms, NULL );

	return GetDisplayLocation_Parms.ReturnValue;
};

// Function TgGame.TgFlagCaptureVolume.CanCapture
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Pawn                           ( CPF_Parm )

bool ATgFlagCaptureVolume::CanCapture ( class APawn* Pawn )
{
	static UFunction* pFnCanCapture = NULL;

	if ( ! pFnCanCapture )
		pFnCanCapture = (UFunction*) UObject::GObjObjects()->Data[ 38262 ];

	ATgFlagCaptureVolume_execCanCapture_Parms CanCapture_Parms;
	CanCapture_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnCanCapture, &CanCapture_Parms, NULL );

	return CanCapture_Parms.ReturnValue;
};

// Function TgGame.TgFlagCaptureVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgFlagCaptureVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 38253 ];

	ATgFlagCaptureVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgFlagCaptureVolume.PreBeginPlay
// [0x00020002] 
// Parameters infos:

void ATgFlagCaptureVolume::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38252 ];

	ATgFlagCaptureVolume_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgFlagCaptureVolume.setupFlagCapVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgFlagCaptureVolume::setupFlagCapVolume ( )
{
	static UFunction* pFnsetupFlagCapVolume = NULL;

	if ( ! pFnsetupFlagCapVolume )
		pFnsetupFlagCapVolume = (UFunction*) UObject::GObjObjects()->Data[ 38251 ];

	ATgFlagCaptureVolume_execsetupFlagCapVolume_Parms setupFlagCapVolume_Parms;

	pFnsetupFlagCapVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnsetupFlagCapVolume, &setupFlagCapVolume_Parms, NULL );

	pFnsetupFlagCapVolume->FunctionFlags |= 0x400;
};

// Function TgGame.TgFracturedStaticMeshActor.ProcessEffect
// [0x00024102] 
// Parameters infos:
// class UTgEffectGroup*          Effect                         ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgFracturedStaticMeshActor::ProcessEffect ( class UTgEffectGroup* Effect, unsigned long bRemove, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 38289 ];

	ATgFracturedStaticMeshActor_execProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.Effect = Effect;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgFracturedStaticMeshActor.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgFracturedStaticMeshActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 38281 ];

	ATgFracturedStaticMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgFracturedStaticMeshActor.CanApplyEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgFracturedStaticMeshActor::CanApplyEffects ( )
{
	static UFunction* pFnCanApplyEffects = NULL;

	if ( ! pFnCanApplyEffects )
		pFnCanApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 38279 ];

	ATgFracturedStaticMeshActor_execCanApplyEffects_Parms CanApplyEffects_Parms;

	this->ProcessEvent ( pFnCanApplyEffects, &CanApplyEffects_Parms, NULL );

	return CanApplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgFracturedStaticMeshActor.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgFracturedStaticMeshActor::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 38278 ];

	ATgFracturedStaticMeshActor_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgFracturedStaticMeshActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgFracturedStaticMeshActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38277 ];

	ATgFracturedStaticMeshActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgFracturedStaticMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgFracturedStaticMeshActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 38275 ];

	ATgFracturedStaticMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgHexLandMarkActor.HideMesh
// [0x00020102] 
// Parameters infos:

void ATgHexLandMarkActor::HideMesh ( )
{
	static UFunction* pFnHideMesh = NULL;

	if ( ! pFnHideMesh )
		pFnHideMesh = (UFunction*) UObject::GObjObjects()->Data[ 39140 ];

	ATgHexLandMarkActor_execHideMesh_Parms HideMesh_Parms;

	this->ProcessEvent ( pFnHideMesh, &HideMesh_Parms, NULL );
};

// Function TgGame.TgHexLandMarkActor.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgHexLandMarkActor::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 39139 ];

	ATgHexLandMarkActor_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgHexLandMarkActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgHexLandMarkActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 39137 ];

	ATgHexLandMarkActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgHexLandMarkActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgHexLandMarkActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39136 ];

	ATgHexLandMarkActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgHexLandMarkActor.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHexLandMarkActor::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 39135 ];

	ATgHexLandMarkActor_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.CheckLevelUnlocks
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsTutorial                    ( CPF_Parm )

void ATgHUD::eventCheckLevelUnlocks ( unsigned long bIsTutorial )
{
	static UFunction* pFnCheckLevelUnlocks = NULL;

	if ( ! pFnCheckLevelUnlocks )
		pFnCheckLevelUnlocks = (UFunction*) UObject::GObjObjects()->Data[ 39593 ];

	ATgHUD_eventCheckLevelUnlocks_Parms CheckLevelUnlocks_Parms;
	CheckLevelUnlocks_Parms.bIsTutorial = bIsTutorial;

	this->ProcessEvent ( pFnCheckLevelUnlocks, &CheckLevelUnlocks_Parms, NULL );
};

// Function TgGame.TgHUD.OpenIntroScene
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FadeTime                       ( CPF_OptionalParm | CPF_Parm )
// float                          TotalTime                      ( CPF_OptionalParm | CPF_Parm )

class UUIScene* ATgHUD::eventOpenIntroScene ( float FadeTime, float TotalTime )
{
	static UFunction* pFnOpenIntroScene = NULL;

	if ( ! pFnOpenIntroScene )
		pFnOpenIntroScene = (UFunction*) UObject::GObjObjects()->Data[ 39589 ];

	ATgHUD_eventOpenIntroScene_Parms OpenIntroScene_Parms;
	OpenIntroScene_Parms.FadeTime = FadeTime;
	OpenIntroScene_Parms.TotalTime = TotalTime;

	this->ProcessEvent ( pFnOpenIntroScene, &OpenIntroScene_Parms, NULL );

	return OpenIntroScene_Parms.ReturnValue;
};

// Function TgGame.TgHUD.ClearTriggeredSceneInfo
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ATgHUD::eventClearTriggeredSceneInfo ( )
{
	static UFunction* pFnClearTriggeredSceneInfo = NULL;

	if ( ! pFnClearTriggeredSceneInfo )
		pFnClearTriggeredSceneInfo = (UFunction*) UObject::GObjObjects()->Data[ 39588 ];

	ATgHUD_eventClearTriggeredSceneInfo_Parms ClearTriggeredSceneInfo_Parms;

	this->ProcessEvent ( pFnClearTriggeredSceneInfo, &ClearTriggeredSceneInfo_Parms, NULL );
};

// Function TgGame.TgHUD.SetTriggeredSceneInfo
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  triggeredActor                 ( CPF_Parm )

void ATgHUD::eventSetTriggeredSceneInfo ( class AActor* triggeredActor )
{
	static UFunction* pFnSetTriggeredSceneInfo = NULL;

	if ( ! pFnSetTriggeredSceneInfo )
		pFnSetTriggeredSceneInfo = (UFunction*) UObject::GObjObjects()->Data[ 39586 ];

	ATgHUD_eventSetTriggeredSceneInfo_Parms SetTriggeredSceneInfo_Parms;
	SetTriggeredSceneInfo_Parms.triggeredActor = triggeredActor;

	this->ProcessEvent ( pFnSetTriggeredSceneInfo, &SetTriggeredSceneInfo_Parms, NULL );
};

// Function TgGame.TgHUD.UpdateScoreBoard
// [0x00020000] 
// Parameters infos:
// unsigned long                  bPlayerVictor                  ( CPF_Parm )
// unsigned long                  bTie                           ( CPF_Parm )

void ATgHUD::UpdateScoreBoard ( unsigned long bPlayerVictor, unsigned long bTie )
{
	static UFunction* pFnUpdateScoreBoard = NULL;

	if ( ! pFnUpdateScoreBoard )
		pFnUpdateScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 39583 ];

	ATgHUD_execUpdateScoreBoard_Parms UpdateScoreBoard_Parms;
	UpdateScoreBoard_Parms.bPlayerVictor = bPlayerVictor;
	UpdateScoreBoard_Parms.bTie = bTie;

	this->ProcessEvent ( pFnUpdateScoreBoard, &UpdateScoreBoard_Parms, NULL );
};

// Function TgGame.TgHUD.ShowEndRaidScreen
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bAttackerWon                   ( CPF_Parm )

void ATgHUD::eventShowEndRaidScreen ( unsigned long bAttackerWon )
{
	static UFunction* pFnShowEndRaidScreen = NULL;

	if ( ! pFnShowEndRaidScreen )
		pFnShowEndRaidScreen = (UFunction*) UObject::GObjObjects()->Data[ 39581 ];

	ATgHUD_eventShowEndRaidScreen_Parms ShowEndRaidScreen_Parms;
	ShowEndRaidScreen_Parms.bAttackerWon = bAttackerWon;

	this->ProcessEvent ( pFnShowEndRaidScreen, &ShowEndRaidScreen_Parms, NULL );
};

// Function TgGame.TgHUD.ShowEndTrainingMissionScreen
// [0x00020000] 
// Parameters infos:
// struct FTG_TRAINING_END_INFO   endInfo                        ( CPF_Parm )

void ATgHUD::ShowEndTrainingMissionScreen ( struct FTG_TRAINING_END_INFO endInfo )
{
	static UFunction* pFnShowEndTrainingMissionScreen = NULL;

	if ( ! pFnShowEndTrainingMissionScreen )
		pFnShowEndTrainingMissionScreen = (UFunction*) UObject::GObjObjects()->Data[ 39579 ];

	ATgHUD_execShowEndTrainingMissionScreen_Parms ShowEndTrainingMissionScreen_Parms;
	memcpy ( &ShowEndTrainingMissionScreen_Parms.endInfo, &endInfo, 0x14 );

	this->ProcessEvent ( pFnShowEndTrainingMissionScreen, &ShowEndTrainingMissionScreen_Parms, NULL );
};

// Function TgGame.TgHUD.ShowQuestEndMissionScene
// [0x00020000] 
// Parameters infos:
// unsigned long                  MissionVictor                  ( CPF_Parm )
// unsigned long                  PlayerVictor                   ( CPF_Parm )
// unsigned long                  bTie                           ( CPF_Parm )

void ATgHUD::ShowQuestEndMissionScene ( unsigned long MissionVictor, unsigned long PlayerVictor, unsigned long bTie )
{
	static UFunction* pFnShowQuestEndMissionScene = NULL;

	if ( ! pFnShowQuestEndMissionScene )
		pFnShowQuestEndMissionScene = (UFunction*) UObject::GObjObjects()->Data[ 39346 ];

	ATgHUD_execShowQuestEndMissionScene_Parms ShowQuestEndMissionScene_Parms;
	ShowQuestEndMissionScene_Parms.MissionVictor = MissionVictor;
	ShowQuestEndMissionScene_Parms.PlayerVictor = PlayerVictor;
	ShowQuestEndMissionScene_Parms.bTie = bTie;

	this->ProcessEvent ( pFnShowQuestEndMissionScene, &ShowQuestEndMissionScene_Parms, NULL );
};

// Function TgGame.TgHUD.ShowEndMissionScreen
// [0x00020000] 
// Parameters infos:
// unsigned long                  MissionVictor                  ( CPF_Parm )
// unsigned long                  PlayerVictor                   ( CPF_Parm )
// unsigned long                  bTie                           ( CPF_Parm )

void ATgHUD::ShowEndMissionScreen ( unsigned long MissionVictor, unsigned long PlayerVictor, unsigned long bTie )
{
	static UFunction* pFnShowEndMissionScreen = NULL;

	if ( ! pFnShowEndMissionScreen )
		pFnShowEndMissionScreen = (UFunction*) UObject::GObjObjects()->Data[ 39342 ];

	ATgHUD_execShowEndMissionScreen_Parms ShowEndMissionScreen_Parms;
	ShowEndMissionScreen_Parms.MissionVictor = MissionVictor;
	ShowEndMissionScreen_Parms.PlayerVictor = PlayerVictor;
	ShowEndMissionScreen_Parms.bTie = bTie;

	this->ProcessEvent ( pFnShowEndMissionScreen, &ShowEndMissionScreen_Parms, NULL );
};

// Function TgGame.TgHUD.OpenScoreboard
// [0x00020A00] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgHUD::OpenScoreboard ( )
{
	static UFunction* pFnOpenScoreboard = NULL;

	if ( ! pFnOpenScoreboard )
		pFnOpenScoreboard = (UFunction*) UObject::GObjObjects()->Data[ 39341 ];

	ATgHUD_execOpenScoreboard_Parms OpenScoreboard_Parms;

	this->ProcessEvent ( pFnOpenScoreboard, &OpenScoreboard_Parms, NULL );
};

// Function TgGame.TgHUD.ToggleDrawAllHUD
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void ATgHUD::ToggleDrawAllHUD ( )
{
	static UFunction* pFnToggleDrawAllHUD = NULL;

	if ( ! pFnToggleDrawAllHUD )
		pFnToggleDrawAllHUD = (UFunction*) UObject::GObjObjects()->Data[ 39340 ];

	ATgHUD_execToggleDrawAllHUD_Parms ToggleDrawAllHUD_Parms;

	this->ProcessEvent ( pFnToggleDrawAllHUD, &ToggleDrawAllHUD_Parms, NULL );
};

// Function TgGame.TgHUD.ToggleDrawPawnHUD
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void ATgHUD::ToggleDrawPawnHUD ( )
{
	static UFunction* pFnToggleDrawPawnHUD = NULL;

	if ( ! pFnToggleDrawPawnHUD )
		pFnToggleDrawPawnHUD = (UFunction*) UObject::GObjObjects()->Data[ 39339 ];

	ATgHUD_execToggleDrawPawnHUD_Parms ToggleDrawPawnHUD_Parms;

	this->ProcessEvent ( pFnToggleDrawPawnHUD, &ToggleDrawPawnHUD_Parms, NULL );
};

// Function TgGame.TgHUD.ForceUpdateDeviceBar
// [0x00024000] 
// Parameters infos:
// int                            nActiveDeviceId                ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::ForceUpdateDeviceBar ( int nActiveDeviceId )
{
	static UFunction* pFnForceUpdateDeviceBar = NULL;

	if ( ! pFnForceUpdateDeviceBar )
		pFnForceUpdateDeviceBar = (UFunction*) UObject::GObjObjects()->Data[ 39337 ];

	ATgHUD_execForceUpdateDeviceBar_Parms ForceUpdateDeviceBar_Parms;
	ForceUpdateDeviceBar_Parms.nActiveDeviceId = nActiveDeviceId;

	this->ProcessEvent ( pFnForceUpdateDeviceBar, &ForceUpdateDeviceBar_Parms, NULL );
};

// Function TgGame.TgHUD.UpdateReleaseTime
// [0x00024000] 
// Parameters infos:
// float                          fReleaseTime                   ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::UpdateReleaseTime ( float fReleaseTime )
{
	static UFunction* pFnUpdateReleaseTime = NULL;

	if ( ! pFnUpdateReleaseTime )
		pFnUpdateReleaseTime = (UFunction*) UObject::GObjObjects()->Data[ 39335 ];

	ATgHUD_execUpdateReleaseTime_Parms UpdateReleaseTime_Parms;
	UpdateReleaseTime_Parms.fReleaseTime = fReleaseTime;

	this->ProcessEvent ( pFnUpdateReleaseTime, &UpdateReleaseTime_Parms, NULL );
};

// Function TgGame.TgHUD.ShowReleaseDialog
// [0x00024000] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )
// struct FDeathZoomInfo          Info                           ( CPF_OptionalParm | CPF_Parm )
// float                          fReleaseTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCanManuallyRelease            ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::ShowReleaseDialog ( unsigned long bShow, struct FDeathZoomInfo Info, float fReleaseTime, unsigned long bCanManuallyRelease )
{
	static UFunction* pFnShowReleaseDialog = NULL;

	if ( ! pFnShowReleaseDialog )
		pFnShowReleaseDialog = (UFunction*) UObject::GObjObjects()->Data[ 39330 ];

	ATgHUD_execShowReleaseDialog_Parms ShowReleaseDialog_Parms;
	ShowReleaseDialog_Parms.bShow = bShow;
	memcpy ( &ShowReleaseDialog_Parms.Info, &Info, 0x1C );
	ShowReleaseDialog_Parms.fReleaseTime = fReleaseTime;
	ShowReleaseDialog_Parms.bCanManuallyRelease = bCanManuallyRelease;

	this->ProcessEvent ( pFnShowReleaseDialog, &ShowReleaseDialog_Parms, NULL );
};

// Function TgGame.TgHUD.TriggerCloseTgUIScene
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool ATgHUD::eventTriggerCloseTgUIScene ( class UUIScene* Scene )
{
	static UFunction* pFnTriggerCloseTgUIScene = NULL;

	if ( ! pFnTriggerCloseTgUIScene )
		pFnTriggerCloseTgUIScene = (UFunction*) UObject::GObjObjects()->Data[ 39327 ];

	ATgHUD_eventTriggerCloseTgUIScene_Parms TriggerCloseTgUIScene_Parms;
	TriggerCloseTgUIScene_Parms.Scene = Scene;

	this->ProcessEvent ( pFnTriggerCloseTgUIScene, &TriggerCloseTgUIScene_Parms, NULL );

	return TriggerCloseTgUIScene_Parms.ReturnValue;
};

// Function TgGame.TgHUD.GetTgUISceneDriver
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

class UObject* ATgHUD::GetTgUISceneDriver ( class UUIScene* Scene )
{
	static UFunction* pFnGetTgUISceneDriver = NULL;

	if ( ! pFnGetTgUISceneDriver )
		pFnGetTgUISceneDriver = (UFunction*) UObject::GObjObjects()->Data[ 39324 ];

	ATgHUD_execGetTgUISceneDriver_Parms GetTgUISceneDriver_Parms;
	GetTgUISceneDriver_Parms.Scene = Scene;

	pFnGetTgUISceneDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTgUISceneDriver, &GetTgUISceneDriver_Parms, NULL );

	pFnGetTgUISceneDriver->FunctionFlags |= 0x400;

	return GetTgUISceneDriver_Parms.ReturnValue;
};

// Function TgGame.TgHUD.TriggerOpenTgUIScene
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIScene*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

class UUIScene* ATgHUD::TriggerOpenTgUIScene ( class UUIScene* Scene )
{
	static UFunction* pFnTriggerOpenTgUIScene = NULL;

	if ( ! pFnTriggerOpenTgUIScene )
		pFnTriggerOpenTgUIScene = (UFunction*) UObject::GObjObjects()->Data[ 39321 ];

	ATgHUD_execTriggerOpenTgUIScene_Parms TriggerOpenTgUIScene_Parms;
	TriggerOpenTgUIScene_Parms.Scene = Scene;

	pFnTriggerOpenTgUIScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerOpenTgUIScene, &TriggerOpenTgUIScene_Parms, NULL );

	pFnTriggerOpenTgUIScene->FunctionFlags |= 0x400;

	return TriggerOpenTgUIScene_Parms.ReturnValue;
};

// Function TgGame.TgHUD.IsMissionScene
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIScene*                Scene                          ( CPF_Parm )

bool ATgHUD::eventIsMissionScene ( class UUIScene* Scene )
{
	static UFunction* pFnIsMissionScene = NULL;

	if ( ! pFnIsMissionScene )
		pFnIsMissionScene = (UFunction*) UObject::GObjObjects()->Data[ 39318 ];

	ATgHUD_eventIsMissionScene_Parms IsMissionScene_Parms;
	IsMissionScene_Parms.Scene = Scene;

	this->ProcessEvent ( pFnIsMissionScene, &IsMissionScene_Parms, NULL );

	return IsMissionScene_Parms.ReturnValue;
};

// Function TgGame.TgHUD.HideWorldInteractionText
// [0x00020000] 
// Parameters infos:

void ATgHUD::HideWorldInteractionText ( )
{
	static UFunction* pFnHideWorldInteractionText = NULL;

	if ( ! pFnHideWorldInteractionText )
		pFnHideWorldInteractionText = (UFunction*) UObject::GObjObjects()->Data[ 39317 ];

	ATgHUD_execHideWorldInteractionText_Parms HideWorldInteractionText_Parms;

	this->ProcessEvent ( pFnHideWorldInteractionText, &HideWorldInteractionText_Parms, NULL );
};

// Function TgGame.TgHUD.ShowWorldInteractionTextById
// [0x00020000] 
// Parameters infos:
// int                            nMsgId                         ( CPF_Parm )

void ATgHUD::ShowWorldInteractionTextById ( int nMsgId )
{
	static UFunction* pFnShowWorldInteractionTextById = NULL;

	if ( ! pFnShowWorldInteractionTextById )
		pFnShowWorldInteractionTextById = (UFunction*) UObject::GObjObjects()->Data[ 39315 ];

	ATgHUD_execShowWorldInteractionTextById_Parms ShowWorldInteractionTextById_Parms;
	ShowWorldInteractionTextById_Parms.nMsgId = nMsgId;

	this->ProcessEvent ( pFnShowWorldInteractionTextById, &ShowWorldInteractionTextById_Parms, NULL );
};

// Function TgGame.TgHUD.ShowWorldInteractionText
// [0x00020000] 
// Parameters infos:
// struct FString                 sMsg                           ( CPF_Parm | CPF_NeedCtorLink )

void ATgHUD::ShowWorldInteractionText ( struct FString sMsg )
{
	static UFunction* pFnShowWorldInteractionText = NULL;

	if ( ! pFnShowWorldInteractionText )
		pFnShowWorldInteractionText = (UFunction*) UObject::GObjObjects()->Data[ 39313 ];

	ATgHUD_execShowWorldInteractionText_Parms ShowWorldInteractionText_Parms;
	memcpy ( &ShowWorldInteractionText_Parms.sMsg, &sMsg, 0xC );

	this->ProcessEvent ( pFnShowWorldInteractionText, &ShowWorldInteractionText_Parms, NULL );
};

// Function TgGame.TgHUD.HideProgressBar
// [0x00024000] 
// Parameters infos:
// unsigned long                  bWorldInteractionBar           ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::HideProgressBar ( unsigned long bWorldInteractionBar )
{
	static UFunction* pFnHideProgressBar = NULL;

	if ( ! pFnHideProgressBar )
		pFnHideProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 39311 ];

	ATgHUD_execHideProgressBar_Parms HideProgressBar_Parms;
	HideProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnHideProgressBar, &HideProgressBar_Parms, NULL );
};

// Function TgGame.TgHUD.StartProgressBar
// [0x00024000] 
// Parameters infos:
// float                          fDuration                      ( CPF_Parm )
// struct FString                 sLabel                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWorldInteractionBar           ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::StartProgressBar ( float fDuration, struct FString sLabel, unsigned long bWorldInteractionBar )
{
	static UFunction* pFnStartProgressBar = NULL;

	if ( ! pFnStartProgressBar )
		pFnStartProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 39307 ];

	ATgHUD_execStartProgressBar_Parms StartProgressBar_Parms;
	StartProgressBar_Parms.fDuration = fDuration;
	memcpy ( &StartProgressBar_Parms.sLabel, &sLabel, 0xC );
	StartProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnStartProgressBar, &StartProgressBar_Parms, NULL );
};

// Function TgGame.TgHUD.UpdateSelectedDevice
// [0x00020100] 
// Parameters infos:
// class ATgDevice*               Dev                            ( CPF_Parm )

void ATgHUD::UpdateSelectedDevice ( class ATgDevice* Dev )
{
	static UFunction* pFnUpdateSelectedDevice = NULL;

	if ( ! pFnUpdateSelectedDevice )
		pFnUpdateSelectedDevice = (UFunction*) UObject::GObjObjects()->Data[ 39305 ];

	ATgHUD_execUpdateSelectedDevice_Parms UpdateSelectedDevice_Parms;
	UpdateSelectedDevice_Parms.Dev = Dev;

	this->ProcessEvent ( pFnUpdateSelectedDevice, &UpdateSelectedDevice_Parms, NULL );
};

// Function TgGame.TgHUD.UsePickupDevice
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::UsePickupDevice ( )
{
	static UFunction* pFnUsePickupDevice = NULL;

	if ( ! pFnUsePickupDevice )
		pFnUsePickupDevice = (UFunction*) UObject::GObjObjects()->Data[ 39303 ];

	ATgHUD_execUsePickupDevice_Parms UsePickupDevice_Parms;

	this->ProcessEvent ( pFnUsePickupDevice, &UsePickupDevice_Parms, NULL );

	return UsePickupDevice_Parms.ReturnValue;
};

// Function TgGame.TgHUD.UpdateDeployPointCount
// [0x00020000] 
// Parameters infos:

void ATgHUD::UpdateDeployPointCount ( )
{
	static UFunction* pFnUpdateDeployPointCount = NULL;

	if ( ! pFnUpdateDeployPointCount )
		pFnUpdateDeployPointCount = (UFunction*) UObject::GObjObjects()->Data[ 39302 ];

	ATgHUD_execUpdateDeployPointCount_Parms UpdateDeployPointCount_Parms;

	this->ProcessEvent ( pFnUpdateDeployPointCount, &UpdateDeployPointCount_Parms, NULL );
};

// Function TgGame.TgHUD.OpenDeployPointMenu
// [0x00020000] 
// Parameters infos:

void ATgHUD::OpenDeployPointMenu ( )
{
	static UFunction* pFnOpenDeployPointMenu = NULL;

	if ( ! pFnOpenDeployPointMenu )
		pFnOpenDeployPointMenu = (UFunction*) UObject::GObjObjects()->Data[ 39301 ];

	ATgHUD_execOpenDeployPointMenu_Parms OpenDeployPointMenu_Parms;

	this->ProcessEvent ( pFnOpenDeployPointMenu, &OpenDeployPointMenu_Parms, NULL );
};

// Function TgGame.TgHUD.SetReticuleVisibility
// [0x00020000] 
// Parameters infos:
// unsigned long                  bCrossHairVisible              ( CPF_Parm )
// unsigned long                  bWeaponStatusVisible           ( CPF_Parm )

void ATgHUD::SetReticuleVisibility ( unsigned long bCrossHairVisible, unsigned long bWeaponStatusVisible )
{
	static UFunction* pFnSetReticuleVisibility = NULL;

	if ( ! pFnSetReticuleVisibility )
		pFnSetReticuleVisibility = (UFunction*) UObject::GObjObjects()->Data[ 39298 ];

	ATgHUD_execSetReticuleVisibility_Parms SetReticuleVisibility_Parms;
	SetReticuleVisibility_Parms.bCrossHairVisible = bCrossHairVisible;
	SetReticuleVisibility_Parms.bWeaponStatusVisible = bWeaponStatusVisible;

	this->ProcessEvent ( pFnSetReticuleVisibility, &SetReticuleVisibility_Parms, NULL );
};

// Function TgGame.TgHUD.HideTaskForce
// [0x00020000] 
// Parameters infos:

void ATgHUD::HideTaskForce ( )
{
	static UFunction* pFnHideTaskForce = NULL;

	if ( ! pFnHideTaskForce )
		pFnHideTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 39297 ];

	ATgHUD_execHideTaskForce_Parms HideTaskForce_Parms;

	this->ProcessEvent ( pFnHideTaskForce, &HideTaskForce_Parms, NULL );
};

// Function TgGame.TgHUD.ShowTaskForce
// [0x00020000] 
// Parameters infos:

void ATgHUD::ShowTaskForce ( )
{
	static UFunction* pFnShowTaskForce = NULL;

	if ( ! pFnShowTaskForce )
		pFnShowTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 39296 ];

	ATgHUD_execShowTaskForce_Parms ShowTaskForce_Parms;

	this->ProcessEvent ( pFnShowTaskForce, &ShowTaskForce_Parms, NULL );
};

// Function TgGame.TgHUD.ShouldDrawPawnHUD
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::ShouldDrawPawnHUD ( )
{
	static UFunction* pFnShouldDrawPawnHUD = NULL;

	if ( ! pFnShouldDrawPawnHUD )
		pFnShouldDrawPawnHUD = (UFunction*) UObject::GObjObjects()->Data[ 39294 ];

	ATgHUD_execShouldDrawPawnHUD_Parms ShouldDrawPawnHUD_Parms;

	this->ProcessEvent ( pFnShouldDrawPawnHUD, &ShouldDrawPawnHUD_Parms, NULL );

	return ShouldDrawPawnHUD_Parms.ReturnValue;
};

// Function TgGame.TgHUD.PlayHitEffect
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// struct FVector                 HitDir                         ( CPF_Parm )

void ATgHUD::PlayHitEffect ( float Damage, struct FVector HitDir )
{
	static UFunction* pFnPlayHitEffect = NULL;

	if ( ! pFnPlayHitEffect )
		pFnPlayHitEffect = (UFunction*) UObject::GObjObjects()->Data[ 39291 ];

	ATgHUD_execPlayHitEffect_Parms PlayHitEffect_Parms;
	PlayHitEffect_Parms.Damage = Damage;
	memcpy ( &PlayHitEffect_Parms.HitDir, &HitDir, 0xC );

	this->ProcessEvent ( pFnPlayHitEffect, &PlayHitEffect_Parms, NULL );
};

// Function TgGame.TgHUD.AddNewDisplayMessage
// [0x00020000] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgHUD::AddNewDisplayMessage ( struct FString sMessage )
{
	static UFunction* pFnAddNewDisplayMessage = NULL;

	if ( ! pFnAddNewDisplayMessage )
		pFnAddNewDisplayMessage = (UFunction*) UObject::GObjObjects()->Data[ 39289 ];

	ATgHUD_execAddNewDisplayMessage_Parms AddNewDisplayMessage_Parms;
	memcpy ( &AddNewDisplayMessage_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnAddNewDisplayMessage, &AddNewDisplayMessage_Parms, NULL );
};

// Function TgGame.TgHUD.AddNewKilledTarget
// [0x00020000] 
// Parameters infos:
// struct FString                 KilledName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  KillerWasPlayer                ( CPF_Parm )

void ATgHUD::AddNewKilledTarget ( struct FString KilledName, struct FString KillerName, unsigned long KillerWasPlayer )
{
	static UFunction* pFnAddNewKilledTarget = NULL;

	if ( ! pFnAddNewKilledTarget )
		pFnAddNewKilledTarget = (UFunction*) UObject::GObjObjects()->Data[ 39285 ];

	ATgHUD_execAddNewKilledTarget_Parms AddNewKilledTarget_Parms;
	memcpy ( &AddNewKilledTarget_Parms.KilledName, &KilledName, 0xC );
	memcpy ( &AddNewKilledTarget_Parms.KillerName, &KillerName, 0xC );
	AddNewKilledTarget_Parms.KillerWasPlayer = KillerWasPlayer;

	this->ProcessEvent ( pFnAddNewKilledTarget, &AddNewKilledTarget_Parms, NULL );
};

// Function TgGame.TgHUD.CloseGUIItems
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgHUD::eventCloseGUIItems ( )
{
	static UFunction* pFnCloseGUIItems = NULL;

	if ( ! pFnCloseGUIItems )
		pFnCloseGUIItems = (UFunction*) UObject::GObjObjects()->Data[ 39284 ];

	ATgHUD_eventCloseGUIItems_Parms CloseGUIItems_Parms;

	this->ProcessEvent ( pFnCloseGUIItems, &CloseGUIItems_Parms, NULL );
};

// Function TgGame.TgHUD.OpenGUIItems
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgHUD::eventOpenGUIItems ( )
{
	static UFunction* pFnOpenGUIItems = NULL;

	if ( ! pFnOpenGUIItems )
		pFnOpenGUIItems = (UFunction*) UObject::GObjObjects()->Data[ 39283 ];

	ATgHUD_eventOpenGUIItems_Parms OpenGUIItems_Parms;

	this->ProcessEvent ( pFnOpenGUIItems, &OpenGUIItems_Parms, NULL );
};

// Function TgGame.TgHUD.SetZoomScope
// [0x00020000] 
// Parameters infos:
// struct FName                   ScopeName                      ( CPF_Parm )

void ATgHUD::SetZoomScope ( struct FName ScopeName )
{
	static UFunction* pFnSetZoomScope = NULL;

	if ( ! pFnSetZoomScope )
		pFnSetZoomScope = (UFunction*) UObject::GObjObjects()->Data[ 39281 ];

	ATgHUD_execSetZoomScope_Parms SetZoomScope_Parms;
	memcpy ( &SetZoomScope_Parms.ScopeName, &ScopeName, 0x8 );

	this->ProcessEvent ( pFnSetZoomScope, &SetZoomScope_Parms, NULL );
};

// Function TgGame.TgHUD.CancelActiveCombat
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelActiveCombat ( )
{
	static UFunction* pFnCancelActiveCombat = NULL;

	if ( ! pFnCancelActiveCombat )
		pFnCancelActiveCombat = (UFunction*) UObject::GObjObjects()->Data[ 39280 ];

	ATgHUD_execCancelActiveCombat_Parms CancelActiveCombat_Parms;

	this->ProcessEvent ( pFnCancelActiveCombat, &CancelActiveCombat_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayActiveCombat
// [0x00024000] 
// Parameters infos:
// int                            nStateParam                    ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::DisplayActiveCombat ( int nStateParam )
{
	static UFunction* pFnDisplayActiveCombat = NULL;

	if ( ! pFnDisplayActiveCombat )
		pFnDisplayActiveCombat = (UFunction*) UObject::GObjObjects()->Data[ 39278 ];

	ATgHUD_execDisplayActiveCombat_Parms DisplayActiveCombat_Parms;
	DisplayActiveCombat_Parms.nStateParam = nStateParam;

	this->ProcessEvent ( pFnDisplayActiveCombat, &DisplayActiveCombat_Parms, NULL );
};

// Function TgGame.TgHUD.CancelInBombRange
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelInBombRange ( )
{
	static UFunction* pFnCancelInBombRange = NULL;

	if ( ! pFnCancelInBombRange )
		pFnCancelInBombRange = (UFunction*) UObject::GObjObjects()->Data[ 39277 ];

	ATgHUD_execCancelInBombRange_Parms CancelInBombRange_Parms;

	this->ProcessEvent ( pFnCancelInBombRange, &CancelInBombRange_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayInBombRange
// [0x00020000] 
// Parameters infos:

void ATgHUD::DisplayInBombRange ( )
{
	static UFunction* pFnDisplayInBombRange = NULL;

	if ( ! pFnDisplayInBombRange )
		pFnDisplayInBombRange = (UFunction*) UObject::GObjObjects()->Data[ 39276 ];

	ATgHUD_execDisplayInBombRange_Parms DisplayInBombRange_Parms;

	this->ProcessEvent ( pFnDisplayInBombRange, &DisplayInBombRange_Parms, NULL );
};

// Function TgGame.TgHUD.CancelBeingDetected
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelBeingDetected ( )
{
	static UFunction* pFnCancelBeingDetected = NULL;

	if ( ! pFnCancelBeingDetected )
		pFnCancelBeingDetected = (UFunction*) UObject::GObjObjects()->Data[ 39275 ];

	ATgHUD_execCancelBeingDetected_Parms CancelBeingDetected_Parms;

	this->ProcessEvent ( pFnCancelBeingDetected, &CancelBeingDetected_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayBeingDetected
// [0x00024000] 
// Parameters infos:
// int                            nStateParam                    ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::DisplayBeingDetected ( int nStateParam )
{
	static UFunction* pFnDisplayBeingDetected = NULL;

	if ( ! pFnDisplayBeingDetected )
		pFnDisplayBeingDetected = (UFunction*) UObject::GObjObjects()->Data[ 39273 ];

	ATgHUD_execDisplayBeingDetected_Parms DisplayBeingDetected_Parms;
	DisplayBeingDetected_Parms.nStateParam = nStateParam;

	this->ProcessEvent ( pFnDisplayBeingDetected, &DisplayBeingDetected_Parms, NULL );
};

// Function TgGame.TgHUD.CancelBeingTargeted
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelBeingTargeted ( )
{
	static UFunction* pFnCancelBeingTargeted = NULL;

	if ( ! pFnCancelBeingTargeted )
		pFnCancelBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 39272 ];

	ATgHUD_execCancelBeingTargeted_Parms CancelBeingTargeted_Parms;

	this->ProcessEvent ( pFnCancelBeingTargeted, &CancelBeingTargeted_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayBeingTargeted
// [0x00020002] 
// Parameters infos:

void ATgHUD::DisplayBeingTargeted ( )
{
	static UFunction* pFnDisplayBeingTargeted = NULL;

	if ( ! pFnDisplayBeingTargeted )
		pFnDisplayBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 39271 ];

	ATgHUD_execDisplayBeingTargeted_Parms DisplayBeingTargeted_Parms;

	this->ProcessEvent ( pFnDisplayBeingTargeted, &DisplayBeingTargeted_Parms, NULL );
};

// Function TgGame.TgHUD.CancelBeingLocked
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelBeingLocked ( )
{
	static UFunction* pFnCancelBeingLocked = NULL;

	if ( ! pFnCancelBeingLocked )
		pFnCancelBeingLocked = (UFunction*) UObject::GObjObjects()->Data[ 39270 ];

	ATgHUD_execCancelBeingLocked_Parms CancelBeingLocked_Parms;

	this->ProcessEvent ( pFnCancelBeingLocked, &CancelBeingLocked_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayBeingLocked
// [0x00020002] 
// Parameters infos:

void ATgHUD::DisplayBeingLocked ( )
{
	static UFunction* pFnDisplayBeingLocked = NULL;

	if ( ! pFnDisplayBeingLocked )
		pFnDisplayBeingLocked = (UFunction*) UObject::GObjObjects()->Data[ 39269 ];

	ATgHUD_execDisplayBeingLocked_Parms DisplayBeingLocked_Parms;

	this->ProcessEvent ( pFnDisplayBeingLocked, &DisplayBeingLocked_Parms, NULL );
};

// Function TgGame.TgHUD.CancelBodyUnderAttack
// [0x00020000] 
// Parameters infos:

void ATgHUD::CancelBodyUnderAttack ( )
{
	static UFunction* pFnCancelBodyUnderAttack = NULL;

	if ( ! pFnCancelBodyUnderAttack )
		pFnCancelBodyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 39268 ];

	ATgHUD_execCancelBodyUnderAttack_Parms CancelBodyUnderAttack_Parms;

	this->ProcessEvent ( pFnCancelBodyUnderAttack, &CancelBodyUnderAttack_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayBodyUnderAttack
// [0x00020002] 
// Parameters infos:
// int                            Damage                         ( CPF_Parm )

void ATgHUD::DisplayBodyUnderAttack ( int Damage )
{
	static UFunction* pFnDisplayBodyUnderAttack = NULL;

	if ( ! pFnDisplayBodyUnderAttack )
		pFnDisplayBodyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 39266 ];

	ATgHUD_execDisplayBodyUnderAttack_Parms DisplayBodyUnderAttack_Parms;
	DisplayBodyUnderAttack_Parms.Damage = Damage;

	this->ProcessEvent ( pFnDisplayBodyUnderAttack, &DisplayBodyUnderAttack_Parms, NULL );
};

// Function TgGame.TgHUD.DisplayHit
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitDir                         ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ATgHUD::DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType )
{
	static UFunction* pFnDisplayHit = NULL;

	if ( ! pFnDisplayHit )
		pFnDisplayHit = (UFunction*) UObject::GObjObjects()->Data[ 39262 ];

	ATgHUD_execDisplayHit_Parms DisplayHit_Parms;
	memcpy ( &DisplayHit_Parms.HitDir, &HitDir, 0xC );
	DisplayHit_Parms.Damage = Damage;
	DisplayHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDisplayHit, &DisplayHit_Parms, NULL );
};

// Function TgGame.TgHUD.SetMouseTargetDrawScale
// [0x00020000] 
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void ATgHUD::SetMouseTargetDrawScale ( float NewScale )
{
	static UFunction* pFnSetMouseTargetDrawScale = NULL;

	if ( ! pFnSetMouseTargetDrawScale )
		pFnSetMouseTargetDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 39260 ];

	ATgHUD_execSetMouseTargetDrawScale_Parms SetMouseTargetDrawScale_Parms;
	SetMouseTargetDrawScale_Parms.NewScale = NewScale;

	this->ProcessEvent ( pFnSetMouseTargetDrawScale, &SetMouseTargetDrawScale_Parms, NULL );
};

// Function TgGame.TgHUD.GetCurrTargetMode
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgHUD::GetCurrTargetMode ( )
{
	static UFunction* pFnGetCurrTargetMode = NULL;

	if ( ! pFnGetCurrTargetMode )
		pFnGetCurrTargetMode = (UFunction*) UObject::GObjObjects()->Data[ 39258 ];

	ATgHUD_execGetCurrTargetMode_Parms GetCurrTargetMode_Parms;

	this->ProcessEvent ( pFnGetCurrTargetMode, &GetCurrTargetMode_Parms, NULL );

	return GetCurrTargetMode_Parms.ReturnValue;
};

// Function TgGame.TgHUD.GetMouseHoverActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgHUD::GetMouseHoverActor ( )
{
	static UFunction* pFnGetMouseHoverActor = NULL;

	if ( ! pFnGetMouseHoverActor )
		pFnGetMouseHoverActor = (UFunction*) UObject::GObjObjects()->Data[ 39256 ];

	ATgHUD_execGetMouseHoverActor_Parms GetMouseHoverActor_Parms;

	this->ProcessEvent ( pFnGetMouseHoverActor, &GetMouseHoverActor_Parms, NULL );

	return GetMouseHoverActor_Parms.ReturnValue;
};

// Function TgGame.TgHUD.GetMouseHitNormal
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgHUD::GetMouseHitNormal ( )
{
	static UFunction* pFnGetMouseHitNormal = NULL;

	if ( ! pFnGetMouseHitNormal )
		pFnGetMouseHitNormal = (UFunction*) UObject::GObjObjects()->Data[ 39254 ];

	ATgHUD_execGetMouseHitNormal_Parms GetMouseHitNormal_Parms;

	this->ProcessEvent ( pFnGetMouseHitNormal, &GetMouseHitNormal_Parms, NULL );

	return GetMouseHitNormal_Parms.ReturnValue;
};

// Function TgGame.TgHUD.GetMouseHoverLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgHUD::GetMouseHoverLocation ( )
{
	static UFunction* pFnGetMouseHoverLocation = NULL;

	if ( ! pFnGetMouseHoverLocation )
		pFnGetMouseHoverLocation = (UFunction*) UObject::GObjObjects()->Data[ 39252 ];

	ATgHUD_execGetMouseHoverLocation_Parms GetMouseHoverLocation_Parms;

	this->ProcessEvent ( pFnGetMouseHoverLocation, &GetMouseHoverLocation_Parms, NULL );

	return GetMouseHoverLocation_Parms.ReturnValue;
};

// Function TgGame.TgHUD.SetShowRangeTargeter
// [0x00024000] 
// Parameters infos:
// unsigned long                  bInAimingMode                  ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::SetShowRangeTargeter ( unsigned long bInAimingMode )
{
	static UFunction* pFnSetShowRangeTargeter = NULL;

	if ( ! pFnSetShowRangeTargeter )
		pFnSetShowRangeTargeter = (UFunction*) UObject::GObjObjects()->Data[ 39250 ];

	ATgHUD_execSetShowRangeTargeter_Parms SetShowRangeTargeter_Parms;
	SetShowRangeTargeter_Parms.bInAimingMode = bInAimingMode;

	this->ProcessEvent ( pFnSetShowRangeTargeter, &SetShowRangeTargeter_Parms, NULL );
};

// Function TgGame.TgHUD.CheckShouldSkipEndMission
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::CheckShouldSkipEndMission ( )
{
	static UFunction* pFnCheckShouldSkipEndMission = NULL;

	if ( ! pFnCheckShouldSkipEndMission )
		pFnCheckShouldSkipEndMission = (UFunction*) UObject::GObjObjects()->Data[ 39248 ];

	ATgHUD_execCheckShouldSkipEndMission_Parms CheckShouldSkipEndMission_Parms;

	pFnCheckShouldSkipEndMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckShouldSkipEndMission, &CheckShouldSkipEndMission_Parms, NULL );

	pFnCheckShouldSkipEndMission->FunctionFlags |= 0x400;

	return CheckShouldSkipEndMission_Parms.ReturnValue;
};

// Function TgGame.TgHUD.UpdateRangedTargeterState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eNewState                      ( CPF_Parm )

void ATgHUD::UpdateRangedTargeterState ( unsigned char eNewState )
{
	static UFunction* pFnUpdateRangedTargeterState = NULL;

	if ( ! pFnUpdateRangedTargeterState )
		pFnUpdateRangedTargeterState = (UFunction*) UObject::GObjObjects()->Data[ 39245 ];

	ATgHUD_execUpdateRangedTargeterState_Parms UpdateRangedTargeterState_Parms;
	UpdateRangedTargeterState_Parms.eNewState = eNewState;

	pFnUpdateRangedTargeterState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRangedTargeterState, &UpdateRangedTargeterState_Parms, NULL );

	pFnUpdateRangedTargeterState->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.ResubmitPopups
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHUD::ResubmitPopups ( )
{
	static UFunction* pFnResubmitPopups = NULL;

	if ( ! pFnResubmitPopups )
		pFnResubmitPopups = (UFunction*) UObject::GObjObjects()->Data[ 39244 ];

	ATgHUD_execResubmitPopups_Parms ResubmitPopups_Parms;

	pFnResubmitPopups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResubmitPopups, &ResubmitPopups_Parms, NULL );

	pFnResubmitPopups->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.HideObjectiveNames
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::HideObjectiveNames ( )
{
	static UFunction* pFnHideObjectiveNames = NULL;

	if ( ! pFnHideObjectiveNames )
		pFnHideObjectiveNames = (UFunction*) UObject::GObjObjects()->Data[ 39242 ];

	ATgHUD_execHideObjectiveNames_Parms HideObjectiveNames_Parms;

	pFnHideObjectiveNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideObjectiveNames, &HideObjectiveNames_Parms, NULL );

	pFnHideObjectiveNames->FunctionFlags |= 0x400;

	return HideObjectiveNames_Parms.ReturnValue;
};

// Function TgGame.TgHUD.HideObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::HideObjectives ( )
{
	static UFunction* pFnHideObjectives = NULL;

	if ( ! pFnHideObjectives )
		pFnHideObjectives = (UFunction*) UObject::GObjObjects()->Data[ 39240 ];

	ATgHUD_execHideObjectives_Parms HideObjectives_Parms;

	pFnHideObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideObjectives, &HideObjectives_Parms, NULL );

	pFnHideObjectives->FunctionFlags |= 0x400;

	return HideObjectives_Parms.ReturnValue;
};

// Function TgGame.TgHUD.HideEnemyTags
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::HideEnemyTags ( )
{
	static UFunction* pFnHideEnemyTags = NULL;

	if ( ! pFnHideEnemyTags )
		pFnHideEnemyTags = (UFunction*) UObject::GObjObjects()->Data[ 39238 ];

	ATgHUD_execHideEnemyTags_Parms HideEnemyTags_Parms;

	pFnHideEnemyTags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideEnemyTags, &HideEnemyTags_Parms, NULL );

	pFnHideEnemyTags->FunctionFlags |= 0x400;

	return HideEnemyTags_Parms.ReturnValue;
};

// Function TgGame.TgHUD.ShowCombatText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::ShowCombatText ( )
{
	static UFunction* pFnShowCombatText = NULL;

	if ( ! pFnShowCombatText )
		pFnShowCombatText = (UFunction*) UObject::GObjObjects()->Data[ 39236 ];

	ATgHUD_execShowCombatText_Parms ShowCombatText_Parms;

	pFnShowCombatText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCombatText, &ShowCombatText_Parms, NULL );

	pFnShowCombatText->FunctionFlags |= 0x400;

	return ShowCombatText_Parms.ReturnValue;
};

// Function TgGame.TgHUD.ShowDeployableHealthBars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgHUD::ShowDeployableHealthBars ( )
{
	static UFunction* pFnShowDeployableHealthBars = NULL;

	if ( ! pFnShowDeployableHealthBars )
		pFnShowDeployableHealthBars = (UFunction*) UObject::GObjObjects()->Data[ 39234 ];

	ATgHUD_execShowDeployableHealthBars_Parms ShowDeployableHealthBars_Parms;

	pFnShowDeployableHealthBars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowDeployableHealthBars, &ShowDeployableHealthBars_Parms, NULL );

	pFnShowDeployableHealthBars->FunctionFlags |= 0x400;

	return ShowDeployableHealthBars_Parms.ReturnValue;
};

// Function TgGame.TgHUD.UpdateUITextBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  TextBoxBitfield                ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// int                            messageID                      ( CPF_Parm )

void ATgHUD::UpdateUITextBox ( unsigned char TextBoxBitfield, float Duration, int messageID )
{
	static UFunction* pFnUpdateUITextBox = NULL;

	if ( ! pFnUpdateUITextBox )
		pFnUpdateUITextBox = (UFunction*) UObject::GObjObjects()->Data[ 39230 ];

	ATgHUD_execUpdateUITextBox_Parms UpdateUITextBox_Parms;
	UpdateUITextBox_Parms.TextBoxBitfield = TextBoxBitfield;
	UpdateUITextBox_Parms.Duration = Duration;
	UpdateUITextBox_Parms.messageID = messageID;

	pFnUpdateUITextBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateUITextBox, &UpdateUITextBox_Parms, NULL );

	pFnUpdateUITextBox->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateUITimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ClockStateBitfield             ( CPF_Parm )
// float                          TimerDuration                  ( CPF_Parm )

void ATgHUD::UpdateUITimer ( unsigned char ClockStateBitfield, float TimerDuration )
{
	static UFunction* pFnUpdateUITimer = NULL;

	if ( ! pFnUpdateUITimer )
		pFnUpdateUITimer = (UFunction*) UObject::GObjObjects()->Data[ 39227 ];

	ATgHUD_execUpdateUITimer_Parms UpdateUITimer_Parms;
	UpdateUITimer_Parms.ClockStateBitfield = ClockStateBitfield;
	UpdateUITimer_Parms.TimerDuration = TimerDuration;

	pFnUpdateUITimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateUITimer, &UpdateUITimer_Parms, NULL );

	pFnUpdateUITimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.ResetDeviceHudTimersUI
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            DeviceEqpPoint                 ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::ResetDeviceHudTimersUI ( int DeviceEqpPoint )
{
	static UFunction* pFnResetDeviceHudTimersUI = NULL;

	if ( ! pFnResetDeviceHudTimersUI )
		pFnResetDeviceHudTimersUI = (UFunction*) UObject::GObjObjects()->Data[ 39225 ];

	ATgHUD_execResetDeviceHudTimersUI_Parms ResetDeviceHudTimersUI_Parms;
	ResetDeviceHudTimersUI_Parms.DeviceEqpPoint = DeviceEqpPoint;

	pFnResetDeviceHudTimersUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDeviceHudTimersUI, &ResetDeviceHudTimersUI_Parms, NULL );

	pFnResetDeviceHudTimersUI->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateDeviceBarUIItems
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHUD::UpdateDeviceBarUIItems ( )
{
	static UFunction* pFnUpdateDeviceBarUIItems = NULL;

	if ( ! pFnUpdateDeviceBarUIItems )
		pFnUpdateDeviceBarUIItems = (UFunction*) UObject::GObjObjects()->Data[ 39224 ];

	ATgHUD_execUpdateDeviceBarUIItems_Parms UpdateDeviceBarUIItems_Parms;

	pFnUpdateDeviceBarUIItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeviceBarUIItems, &UpdateDeviceBarUIItems_Parms, NULL );

	pFnUpdateDeviceBarUIItems->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateInHandDevicesUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               pDevice                        ( CPF_Parm )

void ATgHUD::UpdateInHandDevicesUI ( class ATgDevice* pDevice )
{
	static UFunction* pFnUpdateInHandDevicesUI = NULL;

	if ( ! pFnUpdateInHandDevicesUI )
		pFnUpdateInHandDevicesUI = (UFunction*) UObject::GObjObjects()->Data[ 39222 ];

	ATgHUD_execUpdateInHandDevicesUI_Parms UpdateInHandDevicesUI_Parms;
	UpdateInHandDevicesUI_Parms.pDevice = pDevice;

	pFnUpdateInHandDevicesUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateInHandDevicesUI, &UpdateInHandDevicesUI_Parms, NULL );

	pFnUpdateInHandDevicesUI->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateHiddenDevicesUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHUD::UpdateHiddenDevicesUI ( )
{
	static UFunction* pFnUpdateHiddenDevicesUI = NULL;

	if ( ! pFnUpdateHiddenDevicesUI )
		pFnUpdateHiddenDevicesUI = (UFunction*) UObject::GObjObjects()->Data[ 39221 ];

	ATgHUD_execUpdateHiddenDevicesUI_Parms UpdateHiddenDevicesUI_Parms;

	pFnUpdateHiddenDevicesUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHiddenDevicesUI, &UpdateHiddenDevicesUI_Parms, NULL );

	pFnUpdateHiddenDevicesUI->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateMouseTargetMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  NewMode                        ( CPF_Parm )

void ATgHUD::UpdateMouseTargetMode ( unsigned char NewMode )
{
	static UFunction* pFnUpdateMouseTargetMode = NULL;

	if ( ! pFnUpdateMouseTargetMode )
		pFnUpdateMouseTargetMode = (UFunction*) UObject::GObjObjects()->Data[ 39218 ];

	ATgHUD_execUpdateMouseTargetMode_Parms UpdateMouseTargetMode_Parms;
	UpdateMouseTargetMode_Parms.NewMode = NewMode;

	pFnUpdateMouseTargetMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMouseTargetMode, &UpdateMouseTargetMode_Parms, NULL );

	pFnUpdateMouseTargetMode->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UseCrosshairForReticule
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   CrosshairName                  ( CPF_Parm )

void ATgHUD::UseCrosshairForReticule ( struct FName CrosshairName )
{
	static UFunction* pFnUseCrosshairForReticule = NULL;

	if ( ! pFnUseCrosshairForReticule )
		pFnUseCrosshairForReticule = (UFunction*) UObject::GObjObjects()->Data[ 39216 ];

	ATgHUD_execUseCrosshairForReticule_Parms UseCrosshairForReticule_Parms;
	memcpy ( &UseCrosshairForReticule_Parms.CrosshairName, &CrosshairName, 0x8 );

	pFnUseCrosshairForReticule->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUseCrosshairForReticule, &UseCrosshairForReticule_Parms, NULL );

	pFnUseCrosshairForReticule->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateModeEquipTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIsActive                      ( CPF_Parm )
// float                          fEquipTime                     ( CPF_Parm )

void ATgHUD::UpdateModeEquipTimer ( int nIsActive, float fEquipTime )
{
	static UFunction* pFnUpdateModeEquipTimer = NULL;

	if ( ! pFnUpdateModeEquipTimer )
		pFnUpdateModeEquipTimer = (UFunction*) UObject::GObjObjects()->Data[ 39213 ];

	ATgHUD_execUpdateModeEquipTimer_Parms UpdateModeEquipTimer_Parms;
	UpdateModeEquipTimer_Parms.nIsActive = nIsActive;
	UpdateModeEquipTimer_Parms.fEquipTime = fEquipTime;

	pFnUpdateModeEquipTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateModeEquipTimer, &UpdateModeEquipTimer_Parms, NULL );

	pFnUpdateModeEquipTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.TriggerDeviceRefresh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHUD::TriggerDeviceRefresh ( )
{
	static UFunction* pFnTriggerDeviceRefresh = NULL;

	if ( ! pFnTriggerDeviceRefresh )
		pFnTriggerDeviceRefresh = (UFunction*) UObject::GObjObjects()->Data[ 39212 ];

	ATgHUD_execTriggerDeviceRefresh_Parms TriggerDeviceRefresh_Parms;

	pFnTriggerDeviceRefresh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerDeviceRefresh, &TriggerDeviceRefresh_Parms, NULL );

	pFnTriggerDeviceRefresh->FunctionFlags |= 0x400;
};

// Function TgGame.TgHUD.UpdateDeviceSlotTimers
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nDeviceMode                    ( CPF_Parm )
// float                          fSetup                         ( CPF_Parm )
// float                          fRecharge                      ( CPF_Parm )
// float                          fElaspedCooldown               ( CPF_OptionalParm | CPF_Parm )

void ATgHUD::UpdateDeviceSlotTimers ( int nDeviceInstanceId, int nDeviceMode, float fSetup, float fRecharge, float fElaspedCooldown )
{
	static UFunction* pFnUpdateDeviceSlotTimers = NULL;

	if ( ! pFnUpdateDeviceSlotTimers )
		pFnUpdateDeviceSlotTimers = (UFunction*) UObject::GObjObjects()->Data[ 39206 ];

	ATgHUD_execUpdateDeviceSlotTimers_Parms UpdateDeviceSlotTimers_Parms;
	UpdateDeviceSlotTimers_Parms.nDeviceInstanceId = nDeviceInstanceId;
	UpdateDeviceSlotTimers_Parms.nDeviceMode = nDeviceMode;
	UpdateDeviceSlotTimers_Parms.fSetup = fSetup;
	UpdateDeviceSlotTimers_Parms.fRecharge = fRecharge;
	UpdateDeviceSlotTimers_Parms.fElaspedCooldown = fElaspedCooldown;

	pFnUpdateDeviceSlotTimers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeviceSlotTimers, &UpdateDeviceSlotTimers_Parms, NULL );

	pFnUpdateDeviceSlotTimers->FunctionFlags |= 0x400;
};

// Function TgGame.TgInterpActor.PlaySpecialFx
// [0x00020102] 
// Parameters infos:

void ATgInterpActor::PlaySpecialFx ( )
{
	static UFunction* pFnPlaySpecialFx = NULL;

	if ( ! pFnPlaySpecialFx )
		pFnPlaySpecialFx = (UFunction*) UObject::GObjObjects()->Data[ 39632 ];

	ATgInterpActor_execPlaySpecialFx_Parms PlaySpecialFx_Parms;

	this->ProcessEvent ( pFnPlaySpecialFx, &PlaySpecialFx_Parms, NULL );
};

// Function TgGame.TgInterpActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgInterpActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 39630 ];

	ATgInterpActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgInterpActor.OnTriggerInterpActor
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_TriggerInterpActor* Action                         ( CPF_Parm )

void ATgInterpActor::OnTriggerInterpActor ( class UTgSeqAct_TriggerInterpActor* Action )
{
	static UFunction* pFnOnTriggerInterpActor = NULL;

	if ( ! pFnOnTriggerInterpActor )
		pFnOnTriggerInterpActor = (UFunction*) UObject::GObjObjects()->Data[ 39626 ];

	ATgInterpActor_execOnTriggerInterpActor_Parms OnTriggerInterpActor_Parms;
	OnTriggerInterpActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTriggerInterpActor, &OnTriggerInterpActor_Parms, NULL );
};

// Function TgGame.TgInterpActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgInterpActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39625 ];

	ATgInterpActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgInterpActor.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgInterpActor::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 39624 ];

	ATgInterpActor_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgKAsset_ClientSideSim.OnHit
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void ATgKAsset_ClientSideSim::OnHit ( struct FVector HitLocation, struct FVector HitNormal, class AActor* SourceActor, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnOnHit = NULL;

	if ( ! pFnOnHit )
		pFnOnHit = (UFunction*) UObject::GObjObjects()->Data[ 39919 ];

	ATgKAsset_ClientSideSim_execOnHit_Parms OnHit_Parms;
	memcpy ( &OnHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnHit_Parms.HitNormal, &HitNormal, 0xC );
	OnHit_Parms.SourceActor = SourceActor;
	memcpy ( &OnHit_Parms.HitInfo, &HitInfo, 0x1C );

	pFnOnHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnHit, &OnHit_Parms, NULL );

	pFnOnHit->FunctionFlags |= 0x400;
};

// Function TgGame.TgManifestGroup.OnAllManifestsLoaded
// [0x00120000] 
// Parameters infos:

void UTgManifestGroup::OnAllManifestsLoaded ( )
{
	static UFunction* pFnOnAllManifestsLoaded = NULL;

	if ( ! pFnOnAllManifestsLoaded )
		pFnOnAllManifestsLoaded = (UFunction*) UObject::GObjObjects()->Data[ 40105 ];

	UTgManifestGroup_execOnAllManifestsLoaded_Parms OnAllManifestsLoaded_Parms;

	this->ProcessEvent ( pFnOnAllManifestsLoaded, &OnAllManifestsLoaded_Parms, NULL );
};

// Function TgGame.TgMeshAssembly.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMeshAssembly::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34093 ];

	ATgMeshAssembly_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgMeshAssembly.ForceNetRelevant
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMeshAssembly::ForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 34092 ];

	ATgMeshAssembly_execForceNetRelevant_Parms ForceNetRelevant_Parms;

	pFnForceNetRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );

	pFnForceNetRelevant->FunctionFlags |= 0x400;
};

// Function TgGame.TgMeshAssembly.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMeshAssembly::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 34091 ];

	ATgMeshAssembly_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgNewsStand.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgNewsStand::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 40449 ];

	ATgNewsStand_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgNewsStand.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgNewsStand::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40448 ];

	ATgNewsStand_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgNewsStand.RegisterNewsChannel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNewsStand::RegisterNewsChannel ( )
{
	static UFunction* pFnRegisterNewsChannel = NULL;

	if ( ! pFnRegisterNewsChannel )
		pFnRegisterNewsChannel = (UFunction*) UObject::GObjObjects()->Data[ 40447 ];

	ATgNewsStand_execRegisterNewsChannel_Parms RegisterNewsChannel_Parms;

	pFnRegisterNewsChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterNewsChannel, &RegisterNewsChannel_Parms, NULL );

	pFnRegisterNewsChannel->FunctionFlags |= 0x400;
};

// Function TgGame.TgObject.GetHealTargetColor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UTgObject::GetHealTargetColor ( )
{
	static UFunction* pFnGetHealTargetColor = NULL;

	if ( ! pFnGetHealTargetColor )
		pFnGetHealTargetColor = (UFunction*) UObject::GObjObjects()->Data[ 40466 ];

	UTgObject_execGetHealTargetColor_Parms GetHealTargetColor_Parms;

	pFnGetHealTargetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHealTargetColor, &GetHealTargetColor_Parms, NULL );

	pFnGetHealTargetColor->FunctionFlags |= 0x400;

	return GetHealTargetColor_Parms.ReturnValue;
};

// Function TgGame.TgObject.GetTeamColor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UTgObject::GetTeamColor ( )
{
	static UFunction* pFnGetTeamColor = NULL;

	if ( ! pFnGetTeamColor )
		pFnGetTeamColor = (UFunction*) UObject::GObjObjects()->Data[ 40464 ];

	UTgObject_execGetTeamColor_Parms GetTeamColor_Parms;

	pFnGetTeamColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamColor, &GetTeamColor_Parms, NULL );

	pFnGetTeamColor->FunctionFlags |= 0x400;

	return GetTeamColor_Parms.ReturnValue;
};

// Function TgGame.TgObject.GetEnemyColor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UTgObject::GetEnemyColor ( )
{
	static UFunction* pFnGetEnemyColor = NULL;

	if ( ! pFnGetEnemyColor )
		pFnGetEnemyColor = (UFunction*) UObject::GObjObjects()->Data[ 35343 ];

	UTgObject_execGetEnemyColor_Parms GetEnemyColor_Parms;

	pFnGetEnemyColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemyColor, &GetEnemyColor_Parms, NULL );

	pFnGetEnemyColor->FunctionFlags |= 0x400;

	return GetEnemyColor_Parms.ReturnValue;
};

// Function TgGame.TgObject.GetFriendlyColor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UTgObject::GetFriendlyColor ( )
{
	static UFunction* pFnGetFriendlyColor = NULL;

	if ( ! pFnGetFriendlyColor )
		pFnGetFriendlyColor = (UFunction*) UObject::GObjObjects()->Data[ 35342 ];

	UTgObject_execGetFriendlyColor_Parms GetFriendlyColor_Parms;

	pFnGetFriendlyColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFriendlyColor, &GetFriendlyColor_Parms, NULL );

	pFnGetFriendlyColor->FunctionFlags |= 0x400;

	return GetFriendlyColor_Parms.ReturnValue;
};

// Function TgGame.TgObject.GetPlayerColor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UTgObject::GetPlayerColor ( )
{
	static UFunction* pFnGetPlayerColor = NULL;

	if ( ! pFnGetPlayerColor )
		pFnGetPlayerColor = (UFunction*) UObject::GObjObjects()->Data[ 40460 ];

	UTgObject_execGetPlayerColor_Parms GetPlayerColor_Parms;

	pFnGetPlayerColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerColor, &GetPlayerColor_Parms, NULL );

	pFnGetPlayerColor->FunctionFlags |= 0x400;

	return GetPlayerColor_Parms.ReturnValue;
};

// Function TgGame.TgObject.StartFire
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UTgObject::eventStartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 40459 ];

	UTgObject_eventStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgObject.SetTaskForceNumber
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UTgObject::eventSetTaskForceNumber ( )
{
	static UFunction* pFnSetTaskForceNumber = NULL;

	if ( ! pFnSetTaskForceNumber )
		pFnSetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 40458 ];

	UTgObject_eventSetTaskForceNumber_Parms SetTaskForceNumber_Parms;

	this->ProcessEvent ( pFnSetTaskForceNumber, &SetTaskForceNumber_Parms, NULL );
};

// Function TgGame.TgObject.InitializeDefaultProps
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UTgObject::eventInitializeDefaultProps ( )
{
	static UFunction* pFnInitializeDefaultProps = NULL;

	if ( ! pFnInitializeDefaultProps )
		pFnInitializeDefaultProps = (UFunction*) UObject::GObjObjects()->Data[ 40457 ];

	UTgObject_eventInitializeDefaultProps_Parms InitializeDefaultProps_Parms;

	this->ProcessEvent ( pFnInitializeDefaultProps, &InitializeDefaultProps_Parms, NULL );
};

// Function TgGame.TgObject.SortDamageDisplay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UTgObject::eventSortDamageDisplay ( )
{
	static UFunction* pFnSortDamageDisplay = NULL;

	if ( ! pFnSortDamageDisplay )
		pFnSortDamageDisplay = (UFunction*) UObject::GObjObjects()->Data[ 40456 ];

	UTgObject_eventSortDamageDisplay_Parms SortDamageDisplay_Parms;

	this->ProcessEvent ( pFnSortDamageDisplay, &SortDamageDisplay_Parms, NULL );
};

// Function TgGame.TgObject.IsFriendlyWithLocalPawn
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UTgObject::eventIsFriendlyWithLocalPawn ( )
{
	static UFunction* pFnIsFriendlyWithLocalPawn = NULL;

	if ( ! pFnIsFriendlyWithLocalPawn )
		pFnIsFriendlyWithLocalPawn = (UFunction*) UObject::GObjObjects()->Data[ 40455 ];

	UTgObject_eventIsFriendlyWithLocalPawn_Parms IsFriendlyWithLocalPawn_Parms;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPawn, &IsFriendlyWithLocalPawn_Parms, NULL );
};

// Function TgGame.TgPostProcessVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPostProcessVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46201 ];

	ATgPostProcessVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgProperty.Copy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UTgProperty*             pProperty                      ( CPF_Parm )

void UTgProperty::eventCopy ( class UTgProperty* pProperty )
{
	static UFunction* pFnCopy = NULL;

	if ( ! pFnCopy )
		pFnCopy = (UFunction*) UObject::GObjObjects()->Data[ 46905 ];

	UTgProperty_eventCopy_Parms Copy_Parms;
	Copy_Parms.pProperty = pProperty;

	this->ProcessEvent ( pFnCopy, &Copy_Parms, NULL );
};

// Function TgGame.TgRandomSMActor.HideMesh
// [0x00020102] 
// Parameters infos:

void ATgRandomSMActor::HideMesh ( )
{
	static UFunction* pFnHideMesh = NULL;

	if ( ! pFnHideMesh )
		pFnHideMesh = (UFunction*) UObject::GObjObjects()->Data[ 46919 ];

	ATgRandomSMActor_execHideMesh_Parms HideMesh_Parms;

	this->ProcessEvent ( pFnHideMesh, &HideMesh_Parms, NULL );
};

// Function TgGame.TgRandomSMActor.SetLightEnvironmentToNotBeDynamic
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ATgRandomSMActor::SetLightEnvironmentToNotBeDynamic ( )
{
	static UFunction* pFnSetLightEnvironmentToNotBeDynamic = NULL;

	if ( ! pFnSetLightEnvironmentToNotBeDynamic )
		pFnSetLightEnvironmentToNotBeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 46918 ];

	ATgRandomSMActor_execSetLightEnvironmentToNotBeDynamic_Parms SetLightEnvironmentToNotBeDynamic_Parms;

	this->ProcessEvent ( pFnSetLightEnvironmentToNotBeDynamic, &SetLightEnvironmentToNotBeDynamic_Parms, NULL );
};

// Function TgGame.TgRandomSMActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgRandomSMActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46916 ];

	ATgRandomSMActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgRandomSMActor.TogglePaths
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgRandomSMActor::TogglePaths ( unsigned long bOn )
{
	static UFunction* pFnTogglePaths = NULL;

	if ( ! pFnTogglePaths )
		pFnTogglePaths = (UFunction*) UObject::GObjObjects()->Data[ 46914 ];

	ATgRandomSMActor_execTogglePaths_Parms TogglePaths_Parms;
	TogglePaths_Parms.bOn = bOn;

	pFnTogglePaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTogglePaths, &TogglePaths_Parms, NULL );

	pFnTogglePaths->FunctionFlags |= 0x400;
};

// Function TgGame.TgRandomSMActor.ToggleDisplay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgRandomSMActor::ToggleDisplay ( unsigned long bOn )
{
	static UFunction* pFnToggleDisplay = NULL;

	if ( ! pFnToggleDisplay )
		pFnToggleDisplay = (UFunction*) UObject::GObjObjects()->Data[ 46912 ];

	ATgRandomSMActor_execToggleDisplay_Parms ToggleDisplay_Parms;
	ToggleDisplay_Parms.bOn = bOn;

	pFnToggleDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleDisplay, &ToggleDisplay_Parms, NULL );

	pFnToggleDisplay->FunctionFlags |= 0x400;
};

// Function TgGame.TgRandomSMManager.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgRandomSMManager::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46930 ];

	ATgRandomSMManager_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgRandomSMManager.ManageRandomSMActors
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRandomSMManager::ManageRandomSMActors ( )
{
	static UFunction* pFnManageRandomSMActors = NULL;

	if ( ! pFnManageRandomSMActors )
		pFnManageRandomSMActors = (UFunction*) UObject::GObjObjects()->Data[ 46929 ];

	ATgRandomSMManager_execManageRandomSMActors_Parms ManageRandomSMActors_Parms;

	pFnManageRandomSMActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnManageRandomSMActors, &ManageRandomSMActors_Parms, NULL );

	pFnManageRandomSMActors->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_MICParameterEvent.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UTgSeqEvent_MICParameterEvent::SetVectorParameterValue ( struct FName ParamName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 47387 ];

	UTgSeqEvent_MICParameterEvent_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParamName, &ParamName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_MICParameterEvent.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void UTgSeqEvent_MICParameterEvent::SetScalarParameterValue ( struct FName ParamName, float fValue )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 47384 ];

	UTgSeqEvent_MICParameterEvent_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParamName, &ParamName, 0x8 );
	SetScalarParameterValue_Parms.fValue = fValue;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_ObjectiveBasedMIC.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqEvent_ObjectiveBasedMIC::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47401 ];

	UTgSeqEvent_ObjectiveBasedMIC_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgSeqEvent_ObjectiveBasedMIC.SetMICFromObjectiveMICInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FObjectiveMICInfo       oi                             ( CPF_Parm )

void UTgSeqEvent_ObjectiveBasedMIC::SetMICFromObjectiveMICInfo ( struct FObjectiveMICInfo oi )
{
	static UFunction* pFnSetMICFromObjectiveMICInfo = NULL;

	if ( ! pFnSetMICFromObjectiveMICInfo )
		pFnSetMICFromObjectiveMICInfo = (UFunction*) UObject::GObjObjects()->Data[ 47399 ];

	UTgSeqEvent_ObjectiveBasedMIC_execSetMICFromObjectiveMICInfo_Parms SetMICFromObjectiveMICInfo_Parms;
	memcpy ( &SetMICFromObjectiveMICInfo_Parms.oi, &oi, 0x14 );

	pFnSetMICFromObjectiveMICInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMICFromObjectiveMICInfo, &SetMICFromObjectiveMICInfo_Parms, NULL );

	pFnSetMICFromObjectiveMICInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpriteComponent.SetColor
// [0x00024002] 
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned char                  A                              ( CPF_OptionalParm | CPF_Parm )

void UTgSpriteComponent::SetColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 48400 ];

	UTgSpriteComponent_execSetColor_Parms SetColor_Parms;
	SetColor_Parms.R = R;
	SetColor_Parms.G = G;
	SetColor_Parms.B = B;
	SetColor_Parms.A = A;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );
};

// Function TgGame.TgTeamMarker.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgTeamMarker::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 48477 ];

	ATgTeamMarker_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgTeamMarker.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgTeamMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48476 ];

	ATgTeamMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgTeleportPlayerVolume.Touch
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgTeleportPlayerVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48569 ];

	ATgTeleportPlayerVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgTimerManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgTimerManager::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 48639 ];

	ATgTimerManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgTimerManager.CloseAllTimers
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFireEvent                     ( CPF_OptionalParm | CPF_Parm )

void ATgTimerManager::CloseAllTimers ( unsigned long bFireEvent )
{
	static UFunction* pFnCloseAllTimers = NULL;

	if ( ! pFnCloseAllTimers )
		pFnCloseAllTimers = (UFunction*) UObject::GObjObjects()->Data[ 48637 ];

	ATgTimerManager_execCloseAllTimers_Parms CloseAllTimers_Parms;
	CloseAllTimers_Parms.bFireEvent = bFireEvent;

	pFnCloseAllTimers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseAllTimers, &CloseAllTimers_Parms, NULL );

	pFnCloseAllTimers->FunctionFlags |= 0x400;
};

// Function TgGame.TgTimerManager.IsActiveTimers
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgTimerManager::IsActiveTimers ( )
{
	static UFunction* pFnIsActiveTimers = NULL;

	if ( ! pFnIsActiveTimers )
		pFnIsActiveTimers = (UFunction*) UObject::GObjObjects()->Data[ 48635 ];

	ATgTimerManager_execIsActiveTimers_Parms IsActiveTimers_Parms;

	pFnIsActiveTimers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActiveTimers, &IsActiveTimers_Parms, NULL );

	pFnIsActiveTimers->FunctionFlags |= 0x400;

	return IsActiveTimers_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.RepEvent
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

bool ATgTimerManager::RepEvent ( struct FName VarName )
{
	static UFunction* pFnRepEvent = NULL;

	if ( ! pFnRepEvent )
		pFnRepEvent = (UFunction*) UObject::GObjObjects()->Data[ 48632 ];

	ATgTimerManager_execRepEvent_Parms RepEvent_Parms;
	memcpy ( &RepEvent_Parms.VarName, &VarName, 0x8 );

	pFnRepEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRepEvent, &RepEvent_Parms, NULL );

	pFnRepEvent->FunctionFlags |= 0x400;

	return RepEvent_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.UnRegisterForEvents
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// class UObject*                 HostObject                     ( CPF_Parm )

bool ATgTimerManager::UnRegisterForEvents ( unsigned char byTimerIndex, class UObject* HostObject )
{
	static UFunction* pFnUnRegisterForEvents = NULL;

	if ( ! pFnUnRegisterForEvents )
		pFnUnRegisterForEvents = (UFunction*) UObject::GObjObjects()->Data[ 48628 ];

	ATgTimerManager_execUnRegisterForEvents_Parms UnRegisterForEvents_Parms;
	UnRegisterForEvents_Parms.byTimerIndex = byTimerIndex;
	UnRegisterForEvents_Parms.HostObject = HostObject;

	pFnUnRegisterForEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterForEvents, &UnRegisterForEvents_Parms, NULL );

	pFnUnRegisterForEvents->FunctionFlags |= 0x400;

	return UnRegisterForEvents_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.RegisterForEvents
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// class UObject*                 HostObject                     ( CPF_Parm )
// struct FName                   nmFunc                         ( CPF_Parm )

bool ATgTimerManager::RegisterForEvents ( unsigned char byTimerIndex, class UObject* HostObject, struct FName nmFunc )
{
	static UFunction* pFnRegisterForEvents = NULL;

	if ( ! pFnRegisterForEvents )
		pFnRegisterForEvents = (UFunction*) UObject::GObjObjects()->Data[ 48623 ];

	ATgTimerManager_execRegisterForEvents_Parms RegisterForEvents_Parms;
	RegisterForEvents_Parms.byTimerIndex = byTimerIndex;
	RegisterForEvents_Parms.HostObject = HostObject;
	memcpy ( &RegisterForEvents_Parms.nmFunc, &nmFunc, 0x8 );

	pFnRegisterForEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterForEvents, &RegisterForEvents_Parms, NULL );

	pFnRegisterForEvents->FunctionFlags |= 0x400;

	return RegisterForEvents_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.GetPercentRemaining
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )

float ATgTimerManager::GetPercentRemaining ( unsigned char byTimerIndex )
{
	static UFunction* pFnGetPercentRemaining = NULL;

	if ( ! pFnGetPercentRemaining )
		pFnGetPercentRemaining = (UFunction*) UObject::GObjObjects()->Data[ 48620 ];

	ATgTimerManager_execGetPercentRemaining_Parms GetPercentRemaining_Parms;
	GetPercentRemaining_Parms.byTimerIndex = byTimerIndex;

	pFnGetPercentRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPercentRemaining, &GetPercentRemaining_Parms, NULL );

	pFnGetPercentRemaining->FunctionFlags |= 0x400;

	return GetPercentRemaining_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.GetTimeRemaining
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )

float ATgTimerManager::GetTimeRemaining ( unsigned char byTimerIndex )
{
	static UFunction* pFnGetTimeRemaining = NULL;

	if ( ! pFnGetTimeRemaining )
		pFnGetTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 48617 ];

	ATgTimerManager_execGetTimeRemaining_Parms GetTimeRemaining_Parms;
	GetTimeRemaining_Parms.byTimerIndex = byTimerIndex;

	pFnGetTimeRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeRemaining, &GetTimeRemaining_Parms, NULL );

	pFnGetTimeRemaining->FunctionFlags |= 0x400;

	return GetTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.GetTimeElapsed
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )

float ATgTimerManager::GetTimeElapsed ( unsigned char byTimerIndex )
{
	static UFunction* pFnGetTimeElapsed = NULL;

	if ( ! pFnGetTimeElapsed )
		pFnGetTimeElapsed = (UFunction*) UObject::GObjObjects()->Data[ 48614 ];

	ATgTimerManager_execGetTimeElapsed_Parms GetTimeElapsed_Parms;
	GetTimeElapsed_Parms.byTimerIndex = byTimerIndex;

	pFnGetTimeElapsed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeElapsed, &GetTimeElapsed_Parms, NULL );

	pFnGetTimeElapsed->FunctionFlags |= 0x400;

	return GetTimeElapsed_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.IsPaused
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )

bool ATgTimerManager::IsPaused ( unsigned char byTimerIndex )
{
	static UFunction* pFnIsPaused = NULL;

	if ( ! pFnIsPaused )
		pFnIsPaused = (UFunction*) UObject::GObjObjects()->Data[ 48611 ];

	ATgTimerManager_execIsPaused_Parms IsPaused_Parms;
	IsPaused_Parms.byTimerIndex = byTimerIndex;

	pFnIsPaused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPaused, &IsPaused_Parms, NULL );

	pFnIsPaused->FunctionFlags |= 0x400;

	return IsPaused_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.IsSet
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )

bool ATgTimerManager::IsSet ( unsigned char byTimerIndex )
{
	static UFunction* pFnIsSet = NULL;

	if ( ! pFnIsSet )
		pFnIsSet = (UFunction*) UObject::GObjObjects()->Data[ 48608 ];

	ATgTimerManager_execIsSet_Parms IsSet_Parms;
	IsSet_Parms.byTimerIndex = byTimerIndex;

	pFnIsSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSet, &IsSet_Parms, NULL );

	pFnIsSet->FunctionFlags |= 0x400;

	return IsSet_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.Close
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// unsigned long                  bFireEvent                     ( CPF_OptionalParm | CPF_Parm )

bool ATgTimerManager::Close ( unsigned char byTimerIndex, unsigned long bFireEvent )
{
	static UFunction* pFnClose = NULL;

	if ( ! pFnClose )
		pFnClose = (UFunction*) UObject::GObjObjects()->Data[ 48604 ];

	ATgTimerManager_execClose_Parms Close_Parms;
	Close_Parms.byTimerIndex = byTimerIndex;
	Close_Parms.bFireEvent = bFireEvent;

	pFnClose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClose, &Close_Parms, NULL );

	pFnClose->FunctionFlags |= 0x400;

	return Close_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )

bool ATgTimerManager::Pause ( unsigned char byTimerIndex, float fTime )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 48600 ];

	ATgTimerManager_execPause_Parms Pause_Parms;
	Pause_Parms.byTimerIndex = byTimerIndex;
	Pause_Parms.fTime = fTime;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;

	return Pause_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.Update
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )

bool ATgTimerManager::Update ( unsigned char byTimerIndex, float fTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48596 ];

	ATgTimerManager_execUpdate_Parms Update_Parms;
	Update_Parms.byTimerIndex = byTimerIndex;
	Update_Parms.fTime = fTime;

	pFnUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	pFnUpdate->FunctionFlags |= 0x400;

	return Update_Parms.ReturnValue;
};

// Function TgGame.TgTimerManager.Start
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  byTimerIndex                   ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )
// unsigned long                  bRepeat                        ( CPF_OptionalParm | CPF_Parm )

bool ATgTimerManager::Start ( unsigned char byTimerIndex, float fTime, unsigned long bRepeat )
{
	static UFunction* pFnStart = NULL;

	if ( ! pFnStart )
		pFnStart = (UFunction*) UObject::GObjObjects()->Data[ 48591 ];

	ATgTimerManager_execStart_Parms Start_Parms;
	Start_Parms.byTimerIndex = byTimerIndex;
	Start_Parms.fTime = fTime;
	Start_Parms.bRepeat = bRepeat;

	pFnStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStart, &Start_Parms, NULL );

	pFnStart->FunctionFlags |= 0x400;

	return Start_Parms.ReturnValue;
};

// Function TgGame.TgViewportClient.AddDeferredManifest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgObjectReferencer*     ObjReferencer                  ( CPF_Parm )

void UTgViewportClient::AddDeferredManifest ( class UTgObjectReferencer* ObjReferencer )
{
	static UFunction* pFnAddDeferredManifest = NULL;

	if ( ! pFnAddDeferredManifest )
		pFnAddDeferredManifest = (UFunction*) UObject::GObjObjects()->Data[ 49265 ];

	UTgViewportClient_execAddDeferredManifest_Parms AddDeferredManifest_Parms;
	AddDeferredManifest_Parms.ObjReferencer = ObjReferencer;

	pFnAddDeferredManifest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDeferredManifest, &AddDeferredManifest_Parms, NULL );

	pFnAddDeferredManifest->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendBySpeed.OnInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgAnimBlendBySpeed::eventOnInit ( )
{
	static UFunction* pFnOnInit = NULL;

	if ( ! pFnOnInit )
		pFnOnInit = (UFunction*) UObject::GObjObjects()->Data[ 33526 ];

	UTgAnimBlendBySpeed_eventOnInit_Parms OnInit_Parms;

	this->ProcessEvent ( pFnOnInit, &OnInit_Parms, NULL );
};

// Function TgGame.TgAnimBlendBySpeed.FindSynchAnimNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimNodeSynch*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmNodeName                     ( CPF_Parm )

class UAnimNodeSynch* UTgAnimBlendBySpeed::FindSynchAnimNode ( struct FName nmNodeName )
{
	static UFunction* pFnFindSynchAnimNode = NULL;

	if ( ! pFnFindSynchAnimNode )
		pFnFindSynchAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 33523 ];

	UTgAnimBlendBySpeed_execFindSynchAnimNode_Parms FindSynchAnimNode_Parms;
	memcpy ( &FindSynchAnimNode_Parms.nmNodeName, &nmNodeName, 0x8 );

	pFnFindSynchAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSynchAnimNode, &FindSynchAnimNode_Parms, NULL );

	pFnFindSynchAnimNode->FunctionFlags |= 0x400;

	return FindSynchAnimNode_Parms.ReturnValue;
};

// Function TgGame.TgAnimBlendPerBone.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UTgAnimBlendPerBone::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 33542 ];

	UTgAnimBlendPerBone_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByDeviceMode.PlayCollapseAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendByDeviceMode::PlayCollapseAnimation ( )
{
	static UFunction* pFnPlayCollapseAnimation = NULL;

	if ( ! pFnPlayCollapseAnimation )
		pFnPlayCollapseAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33623 ];

	UTgAnimNodeBlendByDeviceMode_execPlayCollapseAnimation_Parms PlayCollapseAnimation_Parms;

	pFnPlayCollapseAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCollapseAnimation, &PlayCollapseAnimation_Parms, NULL );

	pFnPlayCollapseAnimation->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByDeviceMode.ChangeMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NewModeIndex                   ( CPF_Parm )

void UTgAnimNodeBlendByDeviceMode::ChangeMode ( int NewModeIndex )
{
	static UFunction* pFnChangeMode = NULL;

	if ( ! pFnChangeMode )
		pFnChangeMode = (UFunction*) UObject::GObjObjects()->Data[ 33621 ];

	UTgAnimNodeBlendByDeviceMode_execChangeMode_Parms ChangeMode_Parms;
	ChangeMode_Parms.NewModeIndex = NewModeIndex;

	pFnChangeMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeMode, &ChangeMode_Parms, NULL );

	pFnChangeMode->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByDeviceMode.PlayDeployAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendByDeviceMode::PlayDeployAnimation ( )
{
	static UFunction* pFnPlayDeployAnimation = NULL;

	if ( ! pFnPlayDeployAnimation )
		pFnPlayDeployAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33620 ];

	UTgAnimNodeBlendByDeviceMode_execPlayDeployAnimation_Parms PlayDeployAnimation_Parms;

	pFnPlayDeployAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayDeployAnimation, &PlayDeployAnimation_Parms, NULL );

	pFnPlayDeployAnimation->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByOffhand.PlayOffhandAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   m_nOffhandUseType              ( CPF_Parm )

void UTgAnimNodeBlendByOffhand::PlayOffhandAnimation ( struct FName m_nOffhandUseType )
{
	static UFunction* pFnPlayOffhandAnimation = NULL;

	if ( ! pFnPlayOffhandAnimation )
		pFnPlayOffhandAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33702 ];

	UTgAnimNodeBlendByOffhand_execPlayOffhandAnimation_Parms PlayOffhandAnimation_Parms;
	memcpy ( &PlayOffhandAnimation_Parms.m_nOffhandUseType, &m_nOffhandUseType, 0x8 );

	pFnPlayOffhandAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayOffhandAnimation, &PlayOffhandAnimation_Parms, NULL );

	pFnPlayOffhandAnimation->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList.SetTimedActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

void UTgAnimNodeBlendList::SetTimedActiveChild ( int ChildIndex, float BlendTime, float Duration )
{
	static UFunction* pFnSetTimedActiveChild = NULL;

	if ( ! pFnSetTimedActiveChild )
		pFnSetTimedActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 33144 ];

	UTgAnimNodeBlendList_execSetTimedActiveChild_Parms SetTimedActiveChild_Parms;
	SetTimedActiveChild_Parms.ChildIndex = ChildIndex;
	SetTimedActiveChild_Parms.BlendTime = BlendTime;
	SetTimedActiveChild_Parms.Duration = Duration;

	pFnSetTimedActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimedActiveChild, &SetTimedActiveChild_Parms, NULL );

	pFnSetTimedActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList.SetNextActiveChildIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NewActiveChild                 ( CPF_Parm )

void UTgAnimNodeBlendList::SetNextActiveChildIndex ( int NewActiveChild )
{
	static UFunction* pFnSetNextActiveChildIndex = NULL;

	if ( ! pFnSetNextActiveChildIndex )
		pFnSetNextActiveChildIndex = (UFunction*) UObject::GObjObjects()->Data[ 33142 ];

	UTgAnimNodeBlendList_execSetNextActiveChildIndex_Parms SetNextActiveChildIndex_Parms;
	SetNextActiveChildIndex_Parms.NewActiveChild = NewActiveChild;

	pFnSetNextActiveChildIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNextActiveChildIndex, &SetNextActiveChildIndex_Parms, NULL );

	pFnSetNextActiveChildIndex->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UTgAnimNodeBlendList::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 33139 ];

	UTgAnimNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendBase.GetBlendTime
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChildIndex                     ( CPF_Parm )
// unsigned long                  bGetDefault                    ( CPF_OptionalParm | CPF_Parm )

float UTgAnimBlendBase::GetBlendTime ( int ChildIndex, unsigned long bGetDefault )
{
	static UFunction* pFnGetBlendTime = NULL;

	if ( ! pFnGetBlendTime )
		pFnGetBlendTime = (UFunction*) UObject::GObjObjects()->Data[ 33151 ];

	UTgAnimBlendBase_execGetBlendTime_Parms GetBlendTime_Parms;
	GetBlendTime_Parms.ChildIndex = ChildIndex;
	GetBlendTime_Parms.bGetDefault = bGetDefault;

	pFnGetBlendTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBlendTime, &GetBlendTime_Parms, NULL );

	pFnGetBlendTime->FunctionFlags |= 0x400;

	return GetBlendTime_Parms.ReturnValue;
};

// Function TgGame.TgAnimBlendByFall.GetBlendTime
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChildIndex                     ( CPF_Parm )
// unsigned long                  bGetDefault                    ( CPF_OptionalParm | CPF_Parm )

float UTgAnimBlendByFall::GetBlendTime ( int ChildIndex, unsigned long bGetDefault )
{
	static UFunction* pFnGetBlendTime = NULL;

	if ( ! pFnGetBlendTime )
		pFnGetBlendTime = (UFunction*) UObject::GObjObjects()->Data[ 33235 ];

	UTgAnimBlendByFall_execGetBlendTime_Parms GetBlendTime_Parms;
	GetBlendTime_Parms.ChildIndex = ChildIndex;
	GetBlendTime_Parms.bGetDefault = bGetDefault;

	pFnGetBlendTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBlendTime, &GetBlendTime_Parms, NULL );

	pFnGetBlendTime->FunctionFlags |= 0x400;

	return GetBlendTime_Parms.ReturnValue;
};

// Function TgGame.TgAnimBlendByGrapple.OnBecomeRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgAnimBlendByGrapple::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 33255 ];

	UTgAnimBlendByGrapple_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByHanging.PlayBuildupDismountAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgAnimNodeBlendByHanging::PlayBuildupDismountAnim ( )
{
	static UFunction* pFnPlayBuildupDismountAnim = NULL;

	if ( ! pFnPlayBuildupDismountAnim )
		pFnPlayBuildupDismountAnim = (UFunction*) UObject::GObjObjects()->Data[ 33634 ];

	UTgAnimNodeBlendByHanging_execPlayBuildupDismountAnim_Parms PlayBuildupDismountAnim_Parms;

	pFnPlayBuildupDismountAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayBuildupDismountAnim, &PlayBuildupDismountAnim_Parms, NULL );

	pFnPlayBuildupDismountAnim->FunctionFlags |= 0x400;

	return PlayBuildupDismountAnim_Parms.ReturnValue;
};

// Function TgGame.TgAnimNodeBlendByHanging.SetHangSurfaceType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  NewSurfaceType                 ( CPF_Parm )

void UTgAnimNodeBlendByHanging::SetHangSurfaceType ( unsigned char NewSurfaceType )
{
	static UFunction* pFnSetHangSurfaceType = NULL;

	if ( ! pFnSetHangSurfaceType )
		pFnSetHangSurfaceType = (UFunction*) UObject::GObjObjects()->Data[ 33632 ];

	UTgAnimNodeBlendByHanging_execSetHangSurfaceType_Parms SetHangSurfaceType_Parms;
	SetHangSurfaceType_Parms.NewSurfaceType = NewSurfaceType;

	pFnSetHangSurfaceType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHangSurfaceType, &SetHangSurfaceType_Parms, NULL );

	pFnSetHangSurfaceType->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByKnockdown.SetDownStateAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFaceDown                      ( CPF_Parm )

void UTgAnimNodeBlendByKnockdown::SetDownStateAnim ( unsigned long bFaceDown )
{
	static UFunction* pFnSetDownStateAnim = NULL;

	if ( ! pFnSetDownStateAnim )
		pFnSetDownStateAnim = (UFunction*) UObject::GObjObjects()->Data[ 33648 ];

	UTgAnimNodeBlendByKnockdown_execSetDownStateAnim_Parms SetDownStateAnim_Parms;
	SetDownStateAnim_Parms.bFaceDown = bFaceDown;

	pFnSetDownStateAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDownStateAnim, &SetDownStateAnim_Parms, NULL );

	pFnSetDownStateAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByDeviceType.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UTgAnimBlendByDeviceType::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 33174 ];

	UTgAnimBlendByDeviceType_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByRangeUseType.PlayPutAwayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          putAwayTime                    ( CPF_Parm )

void UTgAnimBlendByRangeUseType::PlayPutAwayAnim ( float putAwayTime )
{
	static UFunction* pFnPlayPutAwayAnim = NULL;

	if ( ! pFnPlayPutAwayAnim )
		pFnPlayPutAwayAnim = (UFunction*) UObject::GObjObjects()->Data[ 33481 ];

	UTgAnimBlendByRangeUseType_execPlayPutAwayAnim_Parms PlayPutAwayAnim_Parms;
	PlayPutAwayAnim_Parms.putAwayTime = putAwayTime;

	pFnPlayPutAwayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayPutAwayAnim, &PlayPutAwayAnim_Parms, NULL );

	pFnPlayPutAwayAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByRangeUseType.PlayFireAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimBlendByRangeUseType::PlayFireAnim ( )
{
	static UFunction* pFnPlayFireAnim = NULL;

	if ( ! pFnPlayFireAnim )
		pFnPlayFireAnim = (UFunction*) UObject::GObjObjects()->Data[ 33480 ];

	UTgAnimBlendByRangeUseType_execPlayFireAnim_Parms PlayFireAnim_Parms;

	pFnPlayFireAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFireAnim, &PlayFireAnim_Parms, NULL );

	pFnPlayFireAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByRangeUseType.PlayEquipAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          EquipTime                      ( CPF_Parm )

void UTgAnimBlendByRangeUseType::PlayEquipAnim ( float EquipTime )
{
	static UFunction* pFnPlayEquipAnim = NULL;

	if ( ! pFnPlayEquipAnim )
		pFnPlayEquipAnim = (UFunction*) UObject::GObjObjects()->Data[ 33478 ];

	UTgAnimBlendByRangeUseType_execPlayEquipAnim_Parms PlayEquipAnim_Parms;
	PlayEquipAnim_Parms.EquipTime = EquipTime;

	pFnPlayEquipAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayEquipAnim, &PlayEquipAnim_Parms, NULL );

	pFnPlayEquipAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByRangeUseType.PlayBuildupAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BuildupTime                    ( CPF_Parm )

void UTgAnimBlendByRangeUseType::PlayBuildupAnim ( float BuildupTime )
{
	static UFunction* pFnPlayBuildupAnim = NULL;

	if ( ! pFnPlayBuildupAnim )
		pFnPlayBuildupAnim = (UFunction*) UObject::GObjObjects()->Data[ 33476 ];

	UTgAnimBlendByRangeUseType_execPlayBuildupAnim_Parms PlayBuildupAnim_Parms;
	PlayBuildupAnim_Parms.BuildupTime = BuildupTime;

	pFnPlayBuildupAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayBuildupAnim, &PlayBuildupAnim_Parms, NULL );

	pFnPlayBuildupAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByRangeUseType.PlayActiveAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimBlendByRangeUseType::PlayActiveAnim ( )
{
	static UFunction* pFnPlayActiveAnim = NULL;

	if ( ! pFnPlayActiveAnim )
		pFnPlayActiveAnim = (UFunction*) UObject::GObjObjects()->Data[ 33475 ];

	UTgAnimBlendByRangeUseType_execPlayActiveAnim_Parms PlayActiveAnim_Parms;

	pFnPlayActiveAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayActiveAnim, &PlayActiveAnim_Parms, NULL );

	pFnPlayActiveAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByMelee.StopSwooshDisplayGroupFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimBlendByMelee::StopSwooshDisplayGroupFx ( )
{
	static UFunction* pFnStopSwooshDisplayGroupFx = NULL;

	if ( ! pFnStopSwooshDisplayGroupFx )
		pFnStopSwooshDisplayGroupFx = (UFunction*) UObject::GObjObjects()->Data[ 33389 ];

	UTgAnimBlendByMelee_execStopSwooshDisplayGroupFx_Parms StopSwooshDisplayGroupFx_Parms;

	pFnStopSwooshDisplayGroupFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopSwooshDisplayGroupFx, &StopSwooshDisplayGroupFx_Parms, NULL );

	pFnStopSwooshDisplayGroupFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByMelee.PlayPutAwayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          putAwayTime                    ( CPF_Parm )

void UTgAnimBlendByMelee::PlayPutAwayAnim ( float putAwayTime )
{
	static UFunction* pFnPlayPutAwayAnim = NULL;

	if ( ! pFnPlayPutAwayAnim )
		pFnPlayPutAwayAnim = (UFunction*) UObject::GObjObjects()->Data[ 33387 ];

	UTgAnimBlendByMelee_execPlayPutAwayAnim_Parms PlayPutAwayAnim_Parms;
	PlayPutAwayAnim_Parms.putAwayTime = putAwayTime;

	pFnPlayPutAwayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayPutAwayAnim, &PlayPutAwayAnim_Parms, NULL );

	pFnPlayPutAwayAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByMelee.PlayEquipAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          EquipTime                      ( CPF_Parm )

void UTgAnimBlendByMelee::PlayEquipAnim ( float EquipTime )
{
	static UFunction* pFnPlayEquipAnim = NULL;

	if ( ! pFnPlayEquipAnim )
		pFnPlayEquipAnim = (UFunction*) UObject::GObjObjects()->Data[ 33385 ];

	UTgAnimBlendByMelee_execPlayEquipAnim_Parms PlayEquipAnim_Parms;
	PlayEquipAnim_Parms.EquipTime = EquipTime;

	pFnPlayEquipAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayEquipAnim, &PlayEquipAnim_Parms, NULL );

	pFnPlayEquipAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByMelee.PlayActiveAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimBlendByMelee::PlayActiveAnim ( )
{
	static UFunction* pFnPlayActiveAnim = NULL;

	if ( ! pFnPlayActiveAnim )
		pFnPlayActiveAnim = (UFunction*) UObject::GObjObjects()->Data[ 33384 ];

	UTgAnimBlendByMelee_execPlayActiveAnim_Parms PlayActiveAnim_Parms;

	pFnPlayActiveAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayActiveAnim, &PlayActiveAnim_Parms, NULL );

	pFnPlayActiveAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimBlendByMelee.PlayAttackAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimBlendByMelee::PlayAttackAnim ( )
{
	static UFunction* pFnPlayAttackAnim = NULL;

	if ( ! pFnPlayAttackAnim )
		pFnPlayAttackAnim = (UFunction*) UObject::GObjObjects()->Data[ 33383 ];

	UTgAnimBlendByMelee_execPlayAttackAnim_Parms PlayAttackAnim_Parms;

	pFnPlayAttackAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAttackAnim, &PlayAttackAnim_Parms, NULL );

	pFnPlayAttackAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByLanding.SetLandAnim
// [0x00020102] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UTgAnimNodeBlendByLanding::SetLandAnim ( struct FName AnimName )
{
	static UFunction* pFnSetLandAnim = NULL;

	if ( ! pFnSetLandAnim )
		pFnSetLandAnim = (UFunction*) UObject::GObjObjects()->Data[ 33660 ];

	UTgAnimNodeBlendByLanding_execSetLandAnim_Parms SetLandAnim_Parms;
	memcpy ( &SetLandAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnSetLandAnim, &SetLandAnim_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByLanding.PlaySkydiveLanding
// [0x00020102] 
// Parameters infos:

void UTgAnimNodeBlendByLanding::PlaySkydiveLanding ( )
{
	static UFunction* pFnPlaySkydiveLanding = NULL;

	if ( ! pFnPlaySkydiveLanding )
		pFnPlaySkydiveLanding = (UFunction*) UObject::GObjObjects()->Data[ 33659 ];

	UTgAnimNodeBlendByLanding_execPlaySkydiveLanding_Parms PlaySkydiveLanding_Parms;

	this->ProcessEvent ( pFnPlaySkydiveLanding, &PlaySkydiveLanding_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByLanding.PlayHardLanding
// [0x00020102] 
// Parameters infos:

void UTgAnimNodeBlendByLanding::PlayHardLanding ( )
{
	static UFunction* pFnPlayHardLanding = NULL;

	if ( ! pFnPlayHardLanding )
		pFnPlayHardLanding = (UFunction*) UObject::GObjObjects()->Data[ 33658 ];

	UTgAnimNodeBlendByLanding_execPlayHardLanding_Parms PlayHardLanding_Parms;

	this->ProcessEvent ( pFnPlayHardLanding, &PlayHardLanding_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByLanding.PlaySoftLanding
// [0x00820102] 
// Parameters infos:

void UTgAnimNodeBlendByLanding::PlaySoftLanding ( )
{
	static UFunction* pFnPlaySoftLanding = NULL;

	if ( ! pFnPlaySoftLanding )
		pFnPlaySoftLanding = (UFunction*) UObject::GObjObjects()->Data[ 33656 ];

	UTgAnimNodeBlendByLanding_execPlaySoftLanding_Parms PlaySoftLanding_Parms;

	this->ProcessEvent ( pFnPlaySoftLanding, &PlaySoftLanding_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByMeleeWeaponAnim.PlayAttackAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendByMeleeWeaponAnim::PlayAttackAnim ( )
{
	static UFunction* pFnPlayAttackAnim = NULL;

	if ( ! pFnPlayAttackAnim )
		pFnPlayAttackAnim = (UFunction*) UObject::GObjObjects()->Data[ 33694 ];

	UTgAnimNodeBlendByMeleeWeaponAnim_execPlayAttackAnim_Parms PlayAttackAnim_Parms;

	pFnPlayAttackAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAttackAnim, &PlayAttackAnim_Parms, NULL );

	pFnPlayAttackAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByMeleeWeaponAnim.SetAttackAnimNormalizedPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewPosition                    ( CPF_Parm )

void UTgAnimNodeBlendByMeleeWeaponAnim::SetAttackAnimNormalizedPosition ( float NewPosition )
{
	static UFunction* pFnSetAttackAnimNormalizedPosition = NULL;

	if ( ! pFnSetAttackAnimNormalizedPosition )
		pFnSetAttackAnimNormalizedPosition = (UFunction*) UObject::GObjObjects()->Data[ 33692 ];

	UTgAnimNodeBlendByMeleeWeaponAnim_execSetAttackAnimNormalizedPosition_Parms SetAttackAnimNormalizedPosition_Parms;
	SetAttackAnimNormalizedPosition_Parms.NewPosition = NewPosition;

	pFnSetAttackAnimNormalizedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttackAnimNormalizedPosition, &SetAttackAnimNormalizedPosition_Parms, NULL );

	pFnSetAttackAnimNormalizedPosition->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByMeleeWeaponAnim.SetAttackAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UTgAnimNodeBlendByMeleeWeaponAnim::SetAttackAnim ( struct FName AnimName )
{
	static UFunction* pFnSetAttackAnim = NULL;

	if ( ! pFnSetAttackAnim )
		pFnSetAttackAnim = (UFunction*) UObject::GObjObjects()->Data[ 33690 ];

	UTgAnimNodeBlendByMeleeWeaponAnim_execSetAttackAnim_Parms SetAttackAnim_Parms;
	memcpy ( &SetAttackAnim_Parms.AnimName, &AnimName, 0x8 );

	pFnSetAttackAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttackAnim, &SetAttackAnim_Parms, NULL );

	pFnSetAttackAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendByMeleeWeaponAnim.PlayIdleAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendByMeleeWeaponAnim::PlayIdleAnim ( )
{
	static UFunction* pFnPlayIdleAnim = NULL;

	if ( ! pFnPlayIdleAnim )
		pFnPlayIdleAnim = (UFunction*) UObject::GObjObjects()->Data[ 33689 ];

	UTgAnimNodeBlendByMeleeWeaponAnim_execPlayIdleAnim_Parms PlayIdleAnim_Parms;

	pFnPlayIdleAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayIdleAnim, &PlayIdleAnim_Parms, NULL );

	pFnPlayIdleAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList_EquipScreen.PlayIdleAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendList_EquipScreen::PlayIdleAnim ( )
{
	static UFunction* pFnPlayIdleAnim = NULL;

	if ( ! pFnPlayIdleAnim )
		pFnPlayIdleAnim = (UFunction*) UObject::GObjObjects()->Data[ 33766 ];

	UTgAnimNodeBlendList_EquipScreen_execPlayIdleAnim_Parms PlayIdleAnim_Parms;

	pFnPlayIdleAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayIdleAnim, &PlayIdleAnim_Parms, NULL );

	pFnPlayIdleAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList_EquipScreen.PlayBackpackReaction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendList_EquipScreen::PlayBackpackReaction ( )
{
	static UFunction* pFnPlayBackpackReaction = NULL;

	if ( ! pFnPlayBackpackReaction )
		pFnPlayBackpackReaction = (UFunction*) UObject::GObjObjects()->Data[ 33765 ];

	UTgAnimNodeBlendList_EquipScreen_execPlayBackpackReaction_Parms PlayBackpackReaction_Parms;

	pFnPlayBackpackReaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayBackpackReaction, &PlayBackpackReaction_Parms, NULL );

	pFnPlayBackpackReaction->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList_EquipScreen.PlaySuitReaction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendList_EquipScreen::PlaySuitReaction ( )
{
	static UFunction* pFnPlaySuitReaction = NULL;

	if ( ! pFnPlaySuitReaction )
		pFnPlaySuitReaction = (UFunction*) UObject::GObjObjects()->Data[ 33764 ];

	UTgAnimNodeBlendList_EquipScreen_execPlaySuitReaction_Parms PlaySuitReaction_Parms;

	pFnPlaySuitReaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySuitReaction, &PlaySuitReaction_Parms, NULL );

	pFnPlaySuitReaction->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList_EquipScreen.PlayHelmetReaction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendList_EquipScreen::PlayHelmetReaction ( )
{
	static UFunction* pFnPlayHelmetReaction = NULL;

	if ( ! pFnPlayHelmetReaction )
		pFnPlayHelmetReaction = (UFunction*) UObject::GObjObjects()->Data[ 33763 ];

	UTgAnimNodeBlendList_EquipScreen_execPlayHelmetReaction_Parms PlayHelmetReaction_Parms;

	pFnPlayHelmetReaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayHelmetReaction, &PlayHelmetReaction_Parms, NULL );

	pFnPlayHelmetReaction->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeBlendList_EquipScreen.PlayWeaponReaction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeBlendList_EquipScreen::PlayWeaponReaction ( )
{
	static UFunction* pFnPlayWeaponReaction = NULL;

	if ( ! pFnPlayWeaponReaction )
		pFnPlayWeaponReaction = (UFunction*) UObject::GObjObjects()->Data[ 33762 ];

	UTgAnimNodeBlendList_EquipScreen_execPlayWeaponReaction_Parms PlayWeaponReaction_Parms;

	pFnPlayWeaponReaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayWeaponReaction, &PlayWeaponReaction_Parms, NULL );

	pFnPlayWeaponReaction->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.StopCustomAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UTgAnimNodeSlot::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 33896 ];

	UTgAnimNodeSlot_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.StopHacking
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeSlot::StopHacking ( )
{
	static UFunction* pFnStopHacking = NULL;

	if ( ! pFnStopHacking )
		pFnStopHacking = (UFunction*) UObject::GObjObjects()->Data[ 33895 ];

	UTgAnimNodeSlot_execStopHacking_Parms StopHacking_Parms;

	pFnStopHacking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopHacking, &StopHacking_Parms, NULL );

	pFnStopHacking->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.PlayHacking
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeSlot::PlayHacking ( )
{
	static UFunction* pFnPlayHacking = NULL;

	if ( ! pFnPlayHacking )
		pFnPlayHacking = (UFunction*) UObject::GObjObjects()->Data[ 33894 ];

	UTgAnimNodeSlot_execPlayHacking_Parms PlayHacking_Parms;

	pFnPlayHacking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayHacking, &PlayHacking_Parms, NULL );

	pFnPlayHacking->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.StopAFK
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeSlot::StopAFK ( )
{
	static UFunction* pFnStopAFK = NULL;

	if ( ! pFnStopAFK )
		pFnStopAFK = (UFunction*) UObject::GObjObjects()->Data[ 33893 ];

	UTgAnimNodeSlot_execStopAFK_Parms StopAFK_Parms;

	pFnStopAFK->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAFK, &StopAFK_Parms, NULL );

	pFnStopAFK->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.PlayAFK
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgAnimNodeSlot::PlayAFK ( )
{
	static UFunction* pFnPlayAFK = NULL;

	if ( ! pFnPlayAFK )
		pFnPlayAFK = (UFunction*) UObject::GObjObjects()->Data[ 33892 ];

	UTgAnimNodeSlot_execPlayAFK_Parms PlayAFK_Parms;

	pFnPlayAFK->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAFK, &PlayAFK_Parms, NULL );

	pFnPlayAFK->FunctionFlags |= 0x400;
};

// Function TgGame.TgAnimNodeSlot.PlayLoopingCustomAnimWithTransition
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TransitionAnimName             ( CPF_Parm )
// struct FName                   LoopingAnimName                ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

float UTgAnimNodeSlot::PlayLoopingCustomAnimWithTransition ( struct FName TransitionAnimName, struct FName LoopingAnimName, float Rate, float BlendInTime, float BlendOutTime )
{
	static UFunction* pFnPlayLoopingCustomAnimWithTransition = NULL;

	if ( ! pFnPlayLoopingCustomAnimWithTransition )
		pFnPlayLoopingCustomAnimWithTransition = (UFunction*) UObject::GObjObjects()->Data[ 33885 ];

	UTgAnimNodeSlot_execPlayLoopingCustomAnimWithTransition_Parms PlayLoopingCustomAnimWithTransition_Parms;
	memcpy ( &PlayLoopingCustomAnimWithTransition_Parms.TransitionAnimName, &TransitionAnimName, 0x8 );
	memcpy ( &PlayLoopingCustomAnimWithTransition_Parms.LoopingAnimName, &LoopingAnimName, 0x8 );
	PlayLoopingCustomAnimWithTransition_Parms.Rate = Rate;
	PlayLoopingCustomAnimWithTransition_Parms.BlendInTime = BlendInTime;
	PlayLoopingCustomAnimWithTransition_Parms.BlendOutTime = BlendOutTime;

	pFnPlayLoopingCustomAnimWithTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayLoopingCustomAnimWithTransition, &PlayLoopingCustomAnimWithTransition_Parms, NULL );

	pFnPlayLoopingCustomAnimWithTransition->FunctionFlags |= 0x400;

	return PlayLoopingCustomAnimWithTransition_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodePose.IsMatchingHeadPoseID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            IdToMatch                      ( CPF_Parm )

bool UTgMorphNodePose::IsMatchingHeadPoseID ( int IdToMatch )
{
	static UFunction* pFnIsMatchingHeadPoseID = NULL;

	if ( ! pFnIsMatchingHeadPoseID )
		pFnIsMatchingHeadPoseID = (UFunction*) UObject::GObjObjects()->Data[ 40229 ];

	UTgMorphNodePose_execIsMatchingHeadPoseID_Parms IsMatchingHeadPoseID_Parms;
	IsMatchingHeadPoseID_Parms.IdToMatch = IdToMatch;

	pFnIsMatchingHeadPoseID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMatchingHeadPoseID, &IsMatchingHeadPoseID_Parms, NULL );

	pFnIsMatchingHeadPoseID->FunctionFlags |= 0x400;

	return IsMatchingHeadPoseID_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodePose.IsMatchingUIName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   IdToMatch                      ( CPF_Parm )

bool UTgMorphNodePose::IsMatchingUIName ( struct FName IdToMatch )
{
	static UFunction* pFnIsMatchingUIName = NULL;

	if ( ! pFnIsMatchingUIName )
		pFnIsMatchingUIName = (UFunction*) UObject::GObjObjects()->Data[ 40226 ];

	UTgMorphNodePose_execIsMatchingUIName_Parms IsMatchingUIName_Parms;
	memcpy ( &IsMatchingUIName_Parms.IdToMatch, &IdToMatch, 0x8 );

	pFnIsMatchingUIName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMatchingUIName, &IsMatchingUIName_Parms, NULL );

	pFnIsMatchingUIName->FunctionFlags |= 0x400;

	return IsMatchingUIName_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodePose.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodePose::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40224 ];

	UTgMorphNodePose_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodePose.GetRandomizedWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgMorphNodePose::GetRandomizedWeight ( )
{
	static UFunction* pFnGetRandomizedWeight = NULL;

	if ( ! pFnGetRandomizedWeight )
		pFnGetRandomizedWeight = (UFunction*) UObject::GObjObjects()->Data[ 40222 ];

	UTgMorphNodePose_execGetRandomizedWeight_Parms GetRandomizedWeight_Parms;

	pFnGetRandomizedWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRandomizedWeight, &GetRandomizedWeight_Parms, NULL );

	pFnGetRandomizedWeight->FunctionFlags |= 0x400;

	return GetRandomizedWeight_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodeBlendList.GetCurrentMorphWeightGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UTgMorphNodeBlendList::GetCurrentMorphWeightGroup ( )
{
	static UFunction* pFnGetCurrentMorphWeightGroup = NULL;

	if ( ! pFnGetCurrentMorphWeightGroup )
		pFnGetCurrentMorphWeightGroup = (UFunction*) UObject::GObjObjects()->Data[ 40274 ];

	UTgMorphNodeBlendList_execGetCurrentMorphWeightGroup_Parms GetCurrentMorphWeightGroup_Parms;

	pFnGetCurrentMorphWeightGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentMorphWeightGroup, &GetCurrentMorphWeightGroup_Parms, NULL );

	pFnGetCurrentMorphWeightGroup->FunctionFlags |= 0x400;

	return GetCurrentMorphWeightGroup_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodeBlendList.SetMaterialParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgMorphNodeBlendList::SetMaterialParameters ( )
{
	static UFunction* pFnSetMaterialParameters = NULL;

	if ( ! pFnSetMaterialParameters )
		pFnSetMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 40273 ];

	UTgMorphNodeBlendList_execSetMaterialParameters_Parms SetMaterialParameters_Parms;

	pFnSetMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameters, &SetMaterialParameters_Parms, NULL );

	pFnSetMaterialParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendList.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodeBlendList::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40271 ];

	UTgMorphNodeBlendList_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )

void UTgMorphNodeBlendList::SetActiveChild ( int ChildIndex )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 40269 ];

	UTgMorphNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendList_ByHairStyle.GetCurrentMorphWeightGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UTgMorphNodeBlendList_ByHairStyle::GetCurrentMorphWeightGroup ( )
{
	static UFunction* pFnGetCurrentMorphWeightGroup = NULL;

	if ( ! pFnGetCurrentMorphWeightGroup )
		pFnGetCurrentMorphWeightGroup = (UFunction*) UObject::GObjObjects()->Data[ 40292 ];

	UTgMorphNodeBlendList_ByHairStyle_execGetCurrentMorphWeightGroup_Parms GetCurrentMorphWeightGroup_Parms;

	pFnGetCurrentMorphWeightGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentMorphWeightGroup, &GetCurrentMorphWeightGroup_Parms, NULL );

	pFnGetCurrentMorphWeightGroup->FunctionFlags |= 0x400;

	return GetCurrentMorphWeightGroup_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodeBlendList_ByHairStyle.SetMaterialParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgMorphNodeBlendList_ByHairStyle::SetMaterialParameters ( )
{
	static UFunction* pFnSetMaterialParameters = NULL;

	if ( ! pFnSetMaterialParameters )
		pFnSetMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 40291 ];

	UTgMorphNodeBlendList_ByHairStyle_execSetMaterialParameters_Parms SetMaterialParameters_Parms;

	pFnSetMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameters, &SetMaterialParameters_Parms, NULL );

	pFnSetMaterialParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendList_ByHairStyle.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodeBlendList_ByHairStyle::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40289 ];

	UTgMorphNodeBlendList_ByHairStyle_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendList_ByHairStyle.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )

void UTgMorphNodeBlendList_ByHairStyle::SetActiveChild ( int ChildIndex )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 40287 ];

	UTgMorphNodeBlendList_ByHairStyle_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendPoses.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodeBlendPoses::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40313 ];

	UTgMorphNodeBlendPoses_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeBlendPoses.SetSecondaryMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UTgMorphNodeBlendPoses::SetSecondaryMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnSetSecondaryMorphTarget = NULL;

	if ( ! pFnSetSecondaryMorphTarget )
		pFnSetSecondaryMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 40311 ];

	UTgMorphNodeBlendPoses_execSetSecondaryMorphTarget_Parms SetSecondaryMorphTarget_Parms;
	memcpy ( &SetSecondaryMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnSetSecondaryMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSecondaryMorphTarget, &SetSecondaryMorphTarget_Parms, NULL );

	pFnSetSecondaryMorphTarget->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodeMasterSlider.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodeMasterSlider::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40335 ];

	UTgMorphNodeMasterSlider_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodePresets.GetHairPoseIDFromPreset
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PresetIndex                    ( CPF_OptionalParm | CPF_Parm )

int UTgMorphNodePresets::GetHairPoseIDFromPreset ( int PresetIndex )
{
	static UFunction* pFnGetHairPoseIDFromPreset = NULL;

	if ( ! pFnGetHairPoseIDFromPreset )
		pFnGetHairPoseIDFromPreset = (UFunction*) UObject::GObjObjects()->Data[ 40350 ];

	UTgMorphNodePresets_execGetHairPoseIDFromPreset_Parms GetHairPoseIDFromPreset_Parms;
	GetHairPoseIDFromPreset_Parms.PresetIndex = PresetIndex;

	pFnGetHairPoseIDFromPreset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHairPoseIDFromPreset, &GetHairPoseIDFromPreset_Parms, NULL );

	pFnGetHairPoseIDFromPreset->FunctionFlags |= 0x400;

	return GetHairPoseIDFromPreset_Parms.ReturnValue;
};

// Function TgGame.TgMorphNodePresets.RandomizeWeight
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRandom                   ( CPF_OptionalParm | CPF_Parm )

void UTgMorphNodePresets::RandomizeWeight ( unsigned long bForceRandom )
{
	static UFunction* pFnRandomizeWeight = NULL;

	if ( ! pFnRandomizeWeight )
		pFnRandomizeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40348 ];

	UTgMorphNodePresets_execRandomizeWeight_Parms RandomizeWeight_Parms;
	RandomizeWeight_Parms.bForceRandom = bForceRandom;

	pFnRandomizeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeWeight, &RandomizeWeight_Parms, NULL );

	pFnRandomizeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodePresets.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )

void UTgMorphNodePresets::SetActiveChild ( int ChildIndex )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 40346 ];

	UTgMorphNodePresets_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function TgGame.TgMorphNodePresets.SaveHeadMorphData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgMorphNodePresets::SaveHeadMorphData ( )
{
	static UFunction* pFnSaveHeadMorphData = NULL;

	if ( ! pFnSaveHeadMorphData )
		pFnSaveHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 40345 ];

	UTgMorphNodePresets_execSaveHeadMorphData_Parms SaveHeadMorphData_Parms;

	pFnSaveHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveHeadMorphData, &SaveHeadMorphData_Parms, NULL );

	pFnSaveHeadMorphData->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkelCon_SpinControl.SpinToTargetRotation
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                TargetRotation                 ( CPF_Parm )
// float                          Time                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void UTgSkelCon_SpinControl::SpinToTargetRotation ( struct FRotator TargetRotation, float Time, unsigned long bReset )
{
	static UFunction* pFnSpinToTargetRotation = NULL;

	if ( ! pFnSpinToTargetRotation )
		pFnSpinToTargetRotation = (UFunction*) UObject::GObjObjects()->Data[ 47575 ];

	UTgSkelCon_SpinControl_execSpinToTargetRotation_Parms SpinToTargetRotation_Parms;
	memcpy ( &SpinToTargetRotation_Parms.TargetRotation, &TargetRotation, 0xC );
	SpinToTargetRotation_Parms.Time = Time;
	SpinToTargetRotation_Parms.bReset = bReset;

	pFnSpinToTargetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpinToTargetRotation, &SpinToTargetRotation_Parms, NULL );

	pFnSpinToTargetRotation->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkelCon_SpinControl.Spin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void UTgSkelCon_SpinControl::Spin ( unsigned long bEnabled )
{
	static UFunction* pFnSpin = NULL;

	if ( ! pFnSpin )
		pFnSpin = (UFunction*) UObject::GObjObjects()->Data[ 47573 ];

	UTgSkelCon_SpinControl_execSpin_Parms Spin_Parms;
	Spin_Parms.bEnabled = bEnabled;

	pFnSpin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpin, &Spin_Parms, NULL );

	pFnSpin->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkelCon_Twist.UnlockLook
// [0x00020102] 
// Parameters infos:

void UTgSkelCon_Twist::UnlockLook ( )
{
	static UFunction* pFnUnlockLook = NULL;

	if ( ! pFnUnlockLook )
		pFnUnlockLook = (UFunction*) UObject::GObjObjects()->Data[ 47656 ];

	UTgSkelCon_Twist_execUnlockLook_Parms UnlockLook_Parms;

	this->ProcessEvent ( pFnUnlockLook, &UnlockLook_Parms, NULL );
};

// Function TgGame.TgSkelCon_Twist.ForceLookAt
// [0x00024102] 
// Parameters infos:
// class AActor*                  FocalActor                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 FocalPoint                     ( CPF_OptionalParm | CPF_Parm )

void UTgSkelCon_Twist::ForceLookAt ( class AActor* FocalActor, struct FVector FocalPoint )
{
	static UFunction* pFnForceLookAt = NULL;

	if ( ! pFnForceLookAt )
		pFnForceLookAt = (UFunction*) UObject::GObjObjects()->Data[ 47653 ];

	UTgSkelCon_Twist_execForceLookAt_Parms ForceLookAt_Parms;
	ForceLookAt_Parms.FocalActor = FocalActor;
	memcpy ( &ForceLookAt_Parms.FocalPoint, &FocalPoint, 0xC );

	this->ProcessEvent ( pFnForceLookAt, &ForceLookAt_Parms, NULL );
};

// Function TgGame.TgSkelCon_Twist.TwistDisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// class ATgPawn_Character*       PawnOwner                      ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void UTgSkelCon_Twist::TwistDisplayDebug ( class AHUD* HUD, class ATgPawn_Character* PawnOwner, float* out_YL, float* out_YPos )
{
	static UFunction* pFnTwistDisplayDebug = NULL;

	if ( ! pFnTwistDisplayDebug )
		pFnTwistDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 47647 ];

	UTgSkelCon_Twist_execTwistDisplayDebug_Parms TwistDisplayDebug_Parms;
	TwistDisplayDebug_Parms.HUD = HUD;
	TwistDisplayDebug_Parms.PawnOwner = PawnOwner;

	this->ProcessEvent ( pFnTwistDisplayDebug, &TwistDisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = TwistDisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = TwistDisplayDebug_Parms.out_YPos;
};

// Function TgGame.TgSkelCon_Twist.Fix
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Num                            ( CPF_Parm )

int UTgSkelCon_Twist::Fix ( int Num )
{
	static UFunction* pFnFix = NULL;

	if ( ! pFnFix )
		pFnFix = (UFunction*) UObject::GObjObjects()->Data[ 47644 ];

	UTgSkelCon_Twist_execFix_Parms Fix_Parms;
	Fix_Parms.Num = Num;

	this->ProcessEvent ( pFnFix, &Fix_Parms, NULL );

	return Fix_Parms.ReturnValue;
};

// Function TgGame.TgSkelCon_Twist.ResetAbove
// [0x00020002] 
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// int                            NewYaw                         ( CPF_Parm )

void UTgSkelCon_Twist::ResetAbove ( struct FName BoneName, int NewYaw )
{
	static UFunction* pFnResetAbove = NULL;

	if ( ! pFnResetAbove )
		pFnResetAbove = (UFunction*) UObject::GObjObjects()->Data[ 47639 ];

	UTgSkelCon_Twist_execResetAbove_Parms ResetAbove_Parms;
	memcpy ( &ResetAbove_Parms.BoneName, &BoneName, 0x8 );
	ResetAbove_Parms.NewYaw = NewYaw;

	this->ProcessEvent ( pFnResetAbove, &ResetAbove_Parms, NULL );
};

// Function TgGame.TgSkelCon_Twist.Reset
// [0x00020002] 
// Parameters infos:
// int                            NewYaw                         ( CPF_Parm )

void UTgSkelCon_Twist::Reset ( int NewYaw )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 47636 ];

	UTgSkelCon_Twist_execReset_Parms Reset_Parms;
	Reset_Parms.NewYaw = NewYaw;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function TgGame.TgSocketOffsetInfo.GetInterpLocation
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               Aim                            ( CPF_Parm )
// struct FName                   SocketName                     ( CPF_Parm )
// struct FName                   ProfileName                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 OutInterpLocation              ( CPF_Parm | CPF_OutParm )

bool UTgSocketOffsetInfo::GetInterpLocation ( struct FVector2D Aim, struct FName SocketName, struct FName ProfileName, struct FVector* OutInterpLocation )
{
	static UFunction* pFnGetInterpLocation = NULL;

	if ( ! pFnGetInterpLocation )
		pFnGetInterpLocation = (UFunction*) UObject::GObjObjects()->Data[ 48200 ];

	UTgSocketOffsetInfo_execGetInterpLocation_Parms GetInterpLocation_Parms;
	memcpy ( &GetInterpLocation_Parms.Aim, &Aim, 0x8 );
	memcpy ( &GetInterpLocation_Parms.SocketName, &SocketName, 0x8 );
	memcpy ( &GetInterpLocation_Parms.ProfileName, &ProfileName, 0x8 );

	pFnGetInterpLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInterpLocation, &GetInterpLocation_Parms, NULL );

	pFnGetInterpLocation->FunctionFlags |= 0x400;

	if ( OutInterpLocation )
		memcpy ( OutInterpLocation, &GetInterpLocation_Parms.OutInterpLocation, 0xC );

	return GetInterpLocation_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ApplyGlobalOffhandCooldown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::ApplyGlobalOffhandCooldown ( )
{
	static UFunction* pFnApplyGlobalOffhandCooldown = NULL;

	if ( ! pFnApplyGlobalOffhandCooldown )
		pFnApplyGlobalOffhandCooldown = (UFunction*) UObject::GObjObjects()->Data[ 36363 ];

	ATgDevice_execApplyGlobalOffhandCooldown_Parms ApplyGlobalOffhandCooldown_Parms;

	this->ProcessEvent ( pFnApplyGlobalOffhandCooldown, &ApplyGlobalOffhandCooldown_Parms, NULL );

	return ApplyGlobalOffhandCooldown_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetStartTraceLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgDevice::GetStartTraceLocation ( )
{
	static UFunction* pFnGetStartTraceLocation = NULL;

	if ( ! pFnGetStartTraceLocation )
		pFnGetStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 36360 ];

	ATgDevice_execGetStartTraceLocation_Parms GetStartTraceLocation_Parms;

	this->ProcessEvent ( pFnGetStartTraceLocation, &GetStartTraceLocation_Parms, NULL );

	return GetStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CacheStartTraceLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 vLoc                           ( CPF_Parm )

void ATgDevice::CacheStartTraceLocation ( struct FVector vLoc )
{
	static UFunction* pFnCacheStartTraceLocation = NULL;

	if ( ! pFnCacheStartTraceLocation )
		pFnCacheStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 36358 ];

	ATgDevice_execCacheStartTraceLocation_Parms CacheStartTraceLocation_Parms;
	memcpy ( &CacheStartTraceLocation_Parms.vLoc, &vLoc, 0xC );

	this->ProcessEvent ( pFnCacheStartTraceLocation, &CacheStartTraceLocation_Parms, NULL );
};

// Function TgGame.TgDevice.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 36355 ];

	ATgDevice_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDevice.OnBuffChange
// [0x00020100] 
// Parameters infos:

void ATgDevice::OnBuffChange ( )
{
	static UFunction* pFnOnBuffChange = NULL;

	if ( ! pFnOnBuffChange )
		pFnOnBuffChange = (UFunction*) UObject::GObjObjects()->Data[ 36354 ];

	ATgDevice_execOnBuffChange_Parms OnBuffChange_Parms;

	this->ProcessEvent ( pFnOnBuffChange, &OnBuffChange_Parms, NULL );
};

// Function TgGame.TgDevice.IsRightClickAimMode
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsRightClickAimMode ( )
{
	static UFunction* pFnIsRightClickAimMode = NULL;

	if ( ! pFnIsRightClickAimMode )
		pFnIsRightClickAimMode = (UFunction*) UObject::GObjObjects()->Data[ 36352 ];

	ATgDevice_execIsRightClickAimMode_Parms IsRightClickAimMode_Parms;

	this->ProcessEvent ( pFnIsRightClickAimMode, &IsRightClickAimMode_Parms, NULL );

	return IsRightClickAimMode_Parms.ReturnValue;
};

// Function TgGame.TgDevice.UpdateIndex
// [0x00020102] 
// Parameters infos:

void ATgDevice::UpdateIndex ( )
{
	static UFunction* pFnUpdateIndex = NULL;

	if ( ! pFnUpdateIndex )
		pFnUpdateIndex = (UFunction*) UObject::GObjObjects()->Data[ 36351 ];

	ATgDevice_execUpdateIndex_Parms UpdateIndex_Parms;

	this->ProcessEvent ( pFnUpdateIndex, &UpdateIndex_Parms, NULL );
};

// Function TgGame.TgDevice.IsMovementDevice
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsMovementDevice ( )
{
	static UFunction* pFnIsMovementDevice = NULL;

	if ( ! pFnIsMovementDevice )
		pFnIsMovementDevice = (UFunction*) UObject::GObjObjects()->Data[ 36349 ];

	ATgDevice_execIsMovementDevice_Parms IsMovementDevice_Parms;

	this->ProcessEvent ( pFnIsMovementDevice, &IsMovementDevice_Parms, NULL );

	return IsMovementDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice.RefireCheckTimer
// [0x00020102] 
// Parameters infos:

void ATgDevice::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 36327 ];

	ATgDevice_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function TgGame.TgDevice.DropBlock
// [0x00020100] 
// Parameters infos:

void ATgDevice::DropBlock ( )
{
	static UFunction* pFnDropBlock = NULL;

	if ( ! pFnDropBlock )
		pFnDropBlock = (UFunction*) UObject::GObjObjects()->Data[ 36319 ];

	ATgDevice_execDropBlock_Parms DropBlock_Parms;

	this->ProcessEvent ( pFnDropBlock, &DropBlock_Parms, NULL );
};

// Function TgGame.TgDevice.ClientStartBlock
// [0x010201C2] 
// Parameters infos:

void ATgDevice::ClientStartBlock ( )
{
	static UFunction* pFnClientStartBlock = NULL;

	if ( ! pFnClientStartBlock )
		pFnClientStartBlock = (UFunction*) UObject::GObjObjects()->Data[ 36318 ];

	ATgDevice_execClientStartBlock_Parms ClientStartBlock_Parms;

	this->ProcessEvent ( pFnClientStartBlock, &ClientStartBlock_Parms, NULL );
};

// Function TgGame.TgDevice.ClientDropBlock
// [0x010201C2] 
// Parameters infos:

void ATgDevice::ClientDropBlock ( )
{
	static UFunction* pFnClientDropBlock = NULL;

	if ( ! pFnClientDropBlock )
		pFnClientDropBlock = (UFunction*) UObject::GObjObjects()->Data[ 36317 ];

	ATgDevice_execClientDropBlock_Parms ClientDropBlock_Parms;

	this->ProcessEvent ( pFnClientDropBlock, &ClientDropBlock_Parms, NULL );
};

// Function TgGame.TgDevice.EndBlockCooldown
// [0x00020102] 
// Parameters infos:

void ATgDevice::EndBlockCooldown ( )
{
	static UFunction* pFnEndBlockCooldown = NULL;

	if ( ! pFnEndBlockCooldown )
		pFnEndBlockCooldown = (UFunction*) UObject::GObjObjects()->Data[ 36316 ];

	ATgDevice_execEndBlockCooldown_Parms EndBlockCooldown_Parms;

	this->ProcessEvent ( pFnEndBlockCooldown, &EndBlockCooldown_Parms, NULL );
};

// Function TgGame.TgDevice.PauseFiringInHandWeapon
// [0x00020102] 
// Parameters infos:

void ATgDevice::PauseFiringInHandWeapon ( )
{
	static UFunction* pFnPauseFiringInHandWeapon = NULL;

	if ( ! pFnPauseFiringInHandWeapon )
		pFnPauseFiringInHandWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36304 ];

	ATgDevice_execPauseFiringInHandWeapon_Parms PauseFiringInHandWeapon_Parms;

	this->ProcessEvent ( pFnPauseFiringInHandWeapon, &PauseFiringInHandWeapon_Parms, NULL );
};

// Function TgGame.TgDevice.IsOffhand
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::eventIsOffhand ( )
{
	static UFunction* pFnIsOffhand = NULL;

	if ( ! pFnIsOffhand )
		pFnIsOffhand = (UFunction*) UObject::GObjObjects()->Data[ 36302 ];

	ATgDevice_eventIsOffhand_Parms IsOffhand_Parms;

	this->ProcessEvent ( pFnIsOffhand, &IsOffhand_Parms, NULL );

	return IsOffhand_Parms.ReturnValue;
};

// Function TgGame.TgDevice.NotifySwitchMode
// [0x00020102] 
// Parameters infos:

void ATgDevice::NotifySwitchMode ( )
{
	static UFunction* pFnNotifySwitchMode = NULL;

	if ( ! pFnNotifySwitchMode )
		pFnNotifySwitchMode = (UFunction*) UObject::GObjObjects()->Data[ 36299 ];

	ATgDevice_execNotifySwitchMode_Parms NotifySwitchMode_Parms;

	this->ProcessEvent ( pFnNotifySwitchMode, &NotifySwitchMode_Parms, NULL );
};

// Function TgGame.TgDevice.NotifyPutAway
// [0x00020102] 
// Parameters infos:

void ATgDevice::NotifyPutAway ( )
{
	static UFunction* pFnNotifyPutAway = NULL;

	if ( ! pFnNotifyPutAway )
		pFnNotifyPutAway = (UFunction*) UObject::GObjObjects()->Data[ 36298 ];

	ATgDevice_execNotifyPutAway_Parms NotifyPutAway_Parms;

	this->ProcessEvent ( pFnNotifyPutAway, &NotifyPutAway_Parms, NULL );
};

// Function TgGame.TgDevice.ClientStartCooldown
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// int                            nMode                          ( CPF_Parm )
// float                          fCooldownTime                  ( CPF_Parm )

void ATgDevice::eventClientStartCooldown ( int nMode, float fCooldownTime )
{
	static UFunction* pFnClientStartCooldown = NULL;

	if ( ! pFnClientStartCooldown )
		pFnClientStartCooldown = (UFunction*) UObject::GObjObjects()->Data[ 36294 ];

	ATgDevice_eventClientStartCooldown_Parms ClientStartCooldown_Parms;
	ClientStartCooldown_Parms.nMode = nMode;
	ClientStartCooldown_Parms.fCooldownTime = fCooldownTime;

	this->ProcessEvent ( pFnClientStartCooldown, &ClientStartCooldown_Parms, NULL );
};

// Function TgGame.TgDevice.StartCooldown
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nMode                          ( CPF_Parm )
// float                          fCooldownTimeOverride          ( CPF_OptionalParm | CPF_Parm )

void ATgDevice::eventStartCooldown ( int nMode, float fCooldownTimeOverride )
{
	static UFunction* pFnStartCooldown = NULL;

	if ( ! pFnStartCooldown )
		pFnStartCooldown = (UFunction*) UObject::GObjObjects()->Data[ 36288 ];

	ATgDevice_eventStartCooldown_Parms StartCooldown_Parms;
	StartCooldown_Parms.nMode = nMode;
	StartCooldown_Parms.fCooldownTimeOverride = fCooldownTimeOverride;

	this->ProcessEvent ( pFnStartCooldown, &StartCooldown_Parms, NULL );
};

// Function TgGame.TgDevice.ClientCooldownTimerExpired
// [0x00020002] 
// Parameters infos:
// int                            nTimerId                       ( CPF_Parm )
// unsigned char                  eEvent                         ( CPF_Parm )

void ATgDevice::ClientCooldownTimerExpired ( int nTimerId, unsigned char eEvent )
{
	static UFunction* pFnClientCooldownTimerExpired = NULL;

	if ( ! pFnClientCooldownTimerExpired )
		pFnClientCooldownTimerExpired = (UFunction*) UObject::GObjObjects()->Data[ 36285 ];

	ATgDevice_execClientCooldownTimerExpired_Parms ClientCooldownTimerExpired_Parms;
	ClientCooldownTimerExpired_Parms.nTimerId = nTimerId;
	ClientCooldownTimerExpired_Parms.eEvent = eEvent;

	this->ProcessEvent ( pFnClientCooldownTimerExpired, &ClientCooldownTimerExpired_Parms, NULL );
};

// Function TgGame.TgDevice.CooldownTimerExpired
// [0x00020002] 
// Parameters infos:
// int                            nTimerId                       ( CPF_Parm )
// unsigned char                  eEvent                         ( CPF_Parm )

void ATgDevice::CooldownTimerExpired ( int nTimerId, unsigned char eEvent )
{
	static UFunction* pFnCooldownTimerExpired = NULL;

	if ( ! pFnCooldownTimerExpired )
		pFnCooldownTimerExpired = (UFunction*) UObject::GObjObjects()->Data[ 36276 ];

	ATgDevice_execCooldownTimerExpired_Parms CooldownTimerExpired_Parms;
	CooldownTimerExpired_Parms.nTimerId = nTimerId;
	CooldownTimerExpired_Parms.eEvent = eEvent;

	this->ProcessEvent ( pFnCooldownTimerExpired, &CooldownTimerExpired_Parms, NULL );
};

// Function TgGame.TgDevice.DeactivateAllModes
// [0x00020102] 
// Parameters infos:

void ATgDevice::DeactivateAllModes ( )
{
	static UFunction* pFnDeactivateAllModes = NULL;

	if ( ! pFnDeactivateAllModes )
		pFnDeactivateAllModes = (UFunction*) UObject::GObjObjects()->Data[ 36274 ];

	ATgDevice_execDeactivateAllModes_Parms DeactivateAllModes_Parms;

	this->ProcessEvent ( pFnDeactivateAllModes, &DeactivateAllModes_Parms, NULL );
};

// Function TgGame.TgDevice.RemoveAllDeviceEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventRemoveAllDeviceEffects ( )
{
	static UFunction* pFnRemoveAllDeviceEffects = NULL;

	if ( ! pFnRemoveAllDeviceEffects )
		pFnRemoveAllDeviceEffects = (UFunction*) UObject::GObjObjects()->Data[ 36273 ];

	ATgDevice_eventRemoveAllDeviceEffects_Parms RemoveAllDeviceEffects_Parms;

	this->ProcessEvent ( pFnRemoveAllDeviceEffects, &RemoveAllDeviceEffects_Parms, NULL );
};

// Function TgGame.TgDevice.RemoveAimEffects
// [0x00020102] 
// Parameters infos:
// int                            nMode                          ( CPF_Parm )

void ATgDevice::RemoveAimEffects ( int nMode )
{
	static UFunction* pFnRemoveAimEffects = NULL;

	if ( ! pFnRemoveAimEffects )
		pFnRemoveAimEffects = (UFunction*) UObject::GObjObjects()->Data[ 36271 ];

	ATgDevice_execRemoveAimEffects_Parms RemoveAimEffects_Parms;
	RemoveAimEffects_Parms.nMode = nMode;

	this->ProcessEvent ( pFnRemoveAimEffects, &RemoveAimEffects_Parms, NULL );
};

// Function TgGame.TgDevice.ApplyAimEffects
// [0x00020102] 
// Parameters infos:
// int                            nMode                          ( CPF_Parm )

void ATgDevice::ApplyAimEffects ( int nMode )
{
	static UFunction* pFnApplyAimEffects = NULL;

	if ( ! pFnApplyAimEffects )
		pFnApplyAimEffects = (UFunction*) UObject::GObjObjects()->Data[ 36269 ];

	ATgDevice_execApplyAimEffects_Parms ApplyAimEffects_Parms;
	ApplyAimEffects_Parms.nMode = nMode;

	this->ProcessEvent ( pFnApplyAimEffects, &ApplyAimEffects_Parms, NULL );
};

// Function TgGame.TgDevice.RemoveEquipEffects
// [0x00020102] 
// Parameters infos:

void ATgDevice::RemoveEquipEffects ( )
{
	static UFunction* pFnRemoveEquipEffects = NULL;

	if ( ! pFnRemoveEquipEffects )
		pFnRemoveEquipEffects = (UFunction*) UObject::GObjObjects()->Data[ 36268 ];

	ATgDevice_execRemoveEquipEffects_Parms RemoveEquipEffects_Parms;

	this->ProcessEvent ( pFnRemoveEquipEffects, &RemoveEquipEffects_Parms, NULL );
};

// Function TgGame.TgDevice.ApplyEquipEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventApplyEquipEffects ( )
{
	static UFunction* pFnApplyEquipEffects = NULL;

	if ( ! pFnApplyEquipEffects )
		pFnApplyEquipEffects = (UFunction*) UObject::GObjObjects()->Data[ 36267 ];

	ATgDevice_eventApplyEquipEffects_Parms ApplyEquipEffects_Parms;

	this->ProcessEvent ( pFnApplyEquipEffects, &ApplyEquipEffects_Parms, NULL );
};

// Function TgGame.TgDevice.ApplyBlockersCounterEffects
// [0x00820102] 
// Parameters infos:
// class AActor*                  attacker                       ( CPF_Parm )
// class AActor*                  Blocker                        ( CPF_Parm )
// class UTgDeviceFire*           BlockDeviceFire                ( CPF_Parm )
// int                            SituationalMeleeGroupToApply   ( CPF_Parm )

void ATgDevice::ApplyBlockersCounterEffects ( class AActor* attacker, class AActor* Blocker, class UTgDeviceFire* BlockDeviceFire, int SituationalMeleeGroupToApply )
{
	static UFunction* pFnApplyBlockersCounterEffects = NULL;

	if ( ! pFnApplyBlockersCounterEffects )
		pFnApplyBlockersCounterEffects = (UFunction*) UObject::GObjObjects()->Data[ 36256 ];

	ATgDevice_execApplyBlockersCounterEffects_Parms ApplyBlockersCounterEffects_Parms;
	ApplyBlockersCounterEffects_Parms.attacker = attacker;
	ApplyBlockersCounterEffects_Parms.Blocker = Blocker;
	ApplyBlockersCounterEffects_Parms.BlockDeviceFire = BlockDeviceFire;
	ApplyBlockersCounterEffects_Parms.SituationalMeleeGroupToApply = SituationalMeleeGroupToApply;

	this->ProcessEvent ( pFnApplyBlockersCounterEffects, &ApplyBlockersCounterEffects_Parms, NULL );
};

// Function TgGame.TgDevice.GetOpponentsBlockEffect
// [0x00820102] 
// Parameters infos:
// class UTgDeviceFire*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class AActor*                  DamageInstigator               ( CPF_Parm )

class UTgDeviceFire* ATgDevice::GetOpponentsBlockEffect ( struct FImpactInfo Impact, class AActor* DamageInstigator )
{
	static UFunction* pFnGetOpponentsBlockEffect = NULL;

	if ( ! pFnGetOpponentsBlockEffect )
		pFnGetOpponentsBlockEffect = (UFunction*) UObject::GObjObjects()->Data[ 36246 ];

	ATgDevice_execGetOpponentsBlockEffect_Parms GetOpponentsBlockEffect_Parms;
	memcpy ( &GetOpponentsBlockEffect_Parms.Impact, &Impact, 0x60 );
	GetOpponentsBlockEffect_Parms.DamageInstigator = DamageInstigator;

	this->ProcessEvent ( pFnGetOpponentsBlockEffect, &GetOpponentsBlockEffect_Parms, NULL );

	return GetOpponentsBlockEffect_Parms.ReturnValue;
};

// Function TgGame.TgDevice.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ATgDevice::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 36245 ];

	ATgDevice_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function TgGame.TgDevice.TrackDeviceModeFired
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 PawnFiring                     ( CPF_Parm )

void ATgDevice::TrackDeviceModeFired ( class ATgPawn* PawnFiring )
{
	static UFunction* pFnTrackDeviceModeFired = NULL;

	if ( ! pFnTrackDeviceModeFired )
		pFnTrackDeviceModeFired = (UFunction*) UObject::GObjObjects()->Data[ 36241 ];

	ATgDevice_execTrackDeviceModeFired_Parms TrackDeviceModeFired_Parms;
	TrackDeviceModeFired_Parms.PawnFiring = PawnFiring;

	this->ProcessEvent ( pFnTrackDeviceModeFired, &TrackDeviceModeFired_Parms, NULL );
};

// Function TgGame.TgDevice.GetProjectileTraceImpact
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 AimDir                         ( CPF_Parm )
// unsigned long                  bTracking                      ( CPF_Parm )
// struct FImpactInfo             TraceImpact                    ( CPF_Parm | CPF_OutParm )

bool ATgDevice::GetProjectileTraceImpact ( struct FVector StartTrace, struct FVector AimDir, unsigned long bTracking, struct FImpactInfo* TraceImpact )
{
	static UFunction* pFnGetProjectileTraceImpact = NULL;

	if ( ! pFnGetProjectileTraceImpact )
		pFnGetProjectileTraceImpact = (UFunction*) UObject::GObjObjects()->Data[ 36232 ];

	ATgDevice_execGetProjectileTraceImpact_Parms GetProjectileTraceImpact_Parms;
	memcpy ( &GetProjectileTraceImpact_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &GetProjectileTraceImpact_Parms.AimDir, &AimDir, 0xC );
	GetProjectileTraceImpact_Parms.bTracking = bTracking;

	this->ProcessEvent ( pFnGetProjectileTraceImpact, &GetProjectileTraceImpact_Parms, NULL );

	if ( TraceImpact )
		memcpy ( TraceImpact, &GetProjectileTraceImpact_Parms.TraceImpact, 0x60 );

	return GetProjectileTraceImpact_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetTrackingTarget
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgDevice::GetTrackingTarget ( )
{
	static UFunction* pFnGetTrackingTarget = NULL;

	if ( ! pFnGetTrackingTarget )
		pFnGetTrackingTarget = (UFunction*) UObject::GObjObjects()->Data[ 36228 ];

	ATgDevice_execGetTrackingTarget_Parms GetTrackingTarget_Parms;

	this->ProcessEvent ( pFnGetTrackingTarget, &GetTrackingTarget_Parms, NULL );

	return GetTrackingTarget_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetPhysicalFireStartLoc
// [0x00824102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ATgDevice::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 36222 ];

	ATgDevice_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ATgDevice::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 36203 ];

	ATgDevice_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CustomFire
// [0x00020102] 
// Parameters infos:

void ATgDevice::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 36202 ];

	ATgDevice_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function TgGame.TgDevice.AOEArcingFlash
// [0x00024002] 
// Parameters infos:
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector                 StartLocation                  ( CPF_OptionalParm | CPF_Parm )

void ATgDevice::AOEArcingFlash ( TArray< struct FImpactInfo > ImpactList, struct FVector StartLocation )
{
	static UFunction* pFnAOEArcingFlash = NULL;

	if ( ! pFnAOEArcingFlash )
		pFnAOEArcingFlash = (UFunction*) UObject::GObjObjects()->Data[ 36197 ];

	ATgDevice_execAOEArcingFlash_Parms AOEArcingFlash_Parms;
	memcpy ( &AOEArcingFlash_Parms.ImpactList, &ImpactList, 0xC );
	memcpy ( &AOEArcingFlash_Parms.StartLocation, &StartLocation, 0xC );

	this->ProcessEvent ( pFnAOEArcingFlash, &AOEArcingFlash_Parms, NULL );
};

// Function TgGame.TgDevice.ArcingFire
// [0x00820102] 
// Parameters infos:

void ATgDevice::ArcingFire ( )
{
	static UFunction* pFnArcingFire = NULL;

	if ( ! pFnArcingFire )
		pFnArcingFire = (UFunction*) UObject::GObjObjects()->Data[ 36189 ];

	ATgDevice_execArcingFire_Parms ArcingFire_Parms;

	this->ProcessEvent ( pFnArcingFire, &ArcingFire_Parms, NULL );
};

// Function TgGame.TgDevice.InstantFire
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventInstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 36183 ];

	ATgDevice_eventInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function TgGame.TgDevice.AcquireMeleeTarget
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            bExactTarget                   ( CPF_Parm | CPF_OutParm )

class ATgPawn* ATgDevice::eventAcquireMeleeTarget ( int* bExactTarget )
{
	static UFunction* pFnAcquireMeleeTarget = NULL;

	if ( ! pFnAcquireMeleeTarget )
		pFnAcquireMeleeTarget = (UFunction*) UObject::GObjObjects()->Data[ 36180 ];

	ATgDevice_eventAcquireMeleeTarget_Parms AcquireMeleeTarget_Parms;

	this->ProcessEvent ( pFnAcquireMeleeTarget, &AcquireMeleeTarget_Parms, NULL );

	if ( bExactTarget )
		*bExactTarget = AcquireMeleeTarget_Parms.bExactTarget;

	return AcquireMeleeTarget_Parms.ReturnValue;
};

// Function TgGame.TgDevice.LinePointDist
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 A                              ( CPF_Parm )
// struct FVector                 B                              ( CPF_Parm )
// struct FVector                 pt                             ( CPF_Parm )

float ATgDevice::LinePointDist ( struct FVector A, struct FVector B, struct FVector pt )
{
	static UFunction* pFnLinePointDist = NULL;

	if ( ! pFnLinePointDist )
		pFnLinePointDist = (UFunction*) UObject::GObjObjects()->Data[ 36171 ];

	ATgDevice_execLinePointDist_Parms LinePointDist_Parms;
	memcpy ( &LinePointDist_Parms.A, &A, 0xC );
	memcpy ( &LinePointDist_Parms.B, &B, 0xC );
	memcpy ( &LinePointDist_Parms.pt, &pt, 0xC );

	this->ProcessEvent ( pFnLinePointDist, &LinePointDist_Parms, NULL );

	return LinePointDist_Parms.ReturnValue;
};

// Function TgGame.TgDevice.DeliverQueuedPendingHits
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventDeliverQueuedPendingHits ( )
{
	static UFunction* pFnDeliverQueuedPendingHits = NULL;

	if ( ! pFnDeliverQueuedPendingHits )
		pFnDeliverQueuedPendingHits = (UFunction*) UObject::GObjObjects()->Data[ 36168 ];

	ATgDevice_eventDeliverQueuedPendingHits_Parms DeliverQueuedPendingHits_Parms;

	this->ProcessEvent ( pFnDeliverQueuedPendingHits, &DeliverQueuedPendingHits_Parms, NULL );
};

// Function TgGame.TgDevice.ProcessInstantHit
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ATgDevice::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 36165 ];

	ATgDevice_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function TgGame.TgDevice.MakeNoiseExternal
// [0x00020002] 
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// float                          fLoudness                      ( CPF_Parm )

void ATgDevice::MakeNoiseExternal ( struct FVector vLocation, float fLoudness )
{
	static UFunction* pFnMakeNoiseExternal = NULL;

	if ( ! pFnMakeNoiseExternal )
		pFnMakeNoiseExternal = (UFunction*) UObject::GObjObjects()->Data[ 36161 ];

	ATgDevice_execMakeNoiseExternal_Parms MakeNoiseExternal_Parms;
	memcpy ( &MakeNoiseExternal_Parms.vLocation, &vLocation, 0xC );
	MakeNoiseExternal_Parms.fLoudness = fLoudness;

	this->ProcessEvent ( pFnMakeNoiseExternal, &MakeNoiseExternal_Parms, NULL );
};

// Function TgGame.TgDevice.CalcWeaponFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ATgDevice::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 36153 ];

	ATgDevice_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ServerStopFire
// [0x002200C2] 
// Parameters infos:

void ATgDevice::ServerStopFire ( )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36152 ];

	ATgDevice_execServerStopFire_Parms ServerStopFire_Parms;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function TgGame.TgDevice.ServerStopFireAsEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventServerStopFireAsEvent ( )
{
	static UFunction* pFnServerStopFireAsEvent = NULL;

	if ( ! pFnServerStopFireAsEvent )
		pFnServerStopFireAsEvent = (UFunction*) UObject::GObjObjects()->Data[ 36151 ];

	ATgDevice_eventServerStopFireAsEvent_Parms ServerStopFireAsEvent_Parms;

	this->ProcessEvent ( pFnServerStopFireAsEvent, &ServerStopFireAsEvent_Parms, NULL );
};

// Function TgGame.TgDevice.StopFire
// [0x00020102] 
// Parameters infos:

void ATgDevice::StopFire ( )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36150 ];

	ATgDevice_execStopFire_Parms StopFire_Parms;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDevice.ServerStartFire
// [0x002240C2] 
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsBlockBreaker                ( CPF_OptionalParm | CPF_Parm )

void ATgDevice::ServerStartFire ( class ATgPawn* TargetPawn, unsigned long bIsBlockBreaker )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36146 ];

	ATgDevice_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.TargetPawn = TargetPawn;
	ServerStartFire_Parms.bIsBlockBreaker = bIsBlockBreaker;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function TgGame.TgDevice.ServerStartFireAsEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventServerStartFireAsEvent ( )
{
	static UFunction* pFnServerStartFireAsEvent = NULL;

	if ( ! pFnServerStartFireAsEvent )
		pFnServerStartFireAsEvent = (UFunction*) UObject::GObjObjects()->Data[ 36145 ];

	ATgDevice_eventServerStartFireAsEvent_Parms ServerStartFireAsEvent_Parms;

	this->ProcessEvent ( pFnServerStartFireAsEvent, &ServerStartFireAsEvent_Parms, NULL );
};

// Function TgGame.TgDevice.CheckTeamStealth
// [0x00020002] 
// Parameters infos:

void ATgDevice::CheckTeamStealth ( )
{
	static UFunction* pFnCheckTeamStealth = NULL;

	if ( ! pFnCheckTeamStealth )
		pFnCheckTeamStealth = (UFunction*) UObject::GObjObjects()->Data[ 36144 ];

	ATgDevice_execCheckTeamStealth_Parms CheckTeamStealth_Parms;

	this->ProcessEvent ( pFnCheckTeamStealth, &CheckTeamStealth_Parms, NULL );
};

// Function TgGame.TgDevice.GetSituationalMeleeEffectToApply
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 attacker                       ( CPF_Parm )

int ATgDevice::GetSituationalMeleeEffectToApply ( class ATgPawn* attacker )
{
	static UFunction* pFnGetSituationalMeleeEffectToApply = NULL;

	if ( ! pFnGetSituationalMeleeEffectToApply )
		pFnGetSituationalMeleeEffectToApply = (UFunction*) UObject::GObjObjects()->Data[ 36138 ];

	ATgDevice_execGetSituationalMeleeEffectToApply_Parms GetSituationalMeleeEffectToApply_Parms;
	GetSituationalMeleeEffectToApply_Parms.attacker = attacker;

	this->ProcessEvent ( pFnGetSituationalMeleeEffectToApply, &GetSituationalMeleeEffectToApply_Parms, NULL );

	return GetSituationalMeleeEffectToApply_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GlobalOffhandCooldownCompleteClient
// [0x00020102] 
// Parameters infos:

void ATgDevice::GlobalOffhandCooldownCompleteClient ( )
{
	static UFunction* pFnGlobalOffhandCooldownCompleteClient = NULL;

	if ( ! pFnGlobalOffhandCooldownCompleteClient )
		pFnGlobalOffhandCooldownCompleteClient = (UFunction*) UObject::GObjObjects()->Data[ 36137 ];

	ATgDevice_execGlobalOffhandCooldownCompleteClient_Parms GlobalOffhandCooldownCompleteClient_Parms;

	this->ProcessEvent ( pFnGlobalOffhandCooldownCompleteClient, &GlobalOffhandCooldownCompleteClient_Parms, NULL );
};

// Function TgGame.TgDevice.GlobalOffhandCooldownCompleteServer
// [0x00020102] 
// Parameters infos:

void ATgDevice::GlobalOffhandCooldownCompleteServer ( )
{
	static UFunction* pFnGlobalOffhandCooldownCompleteServer = NULL;

	if ( ! pFnGlobalOffhandCooldownCompleteServer )
		pFnGlobalOffhandCooldownCompleteServer = (UFunction*) UObject::GObjObjects()->Data[ 36136 ];

	ATgDevice_execGlobalOffhandCooldownCompleteServer_Parms GlobalOffhandCooldownCompleteServer_Parms;

	this->ProcessEvent ( pFnGlobalOffhandCooldownCompleteServer, &GlobalOffhandCooldownCompleteServer_Parms, NULL );
};

// Function TgGame.TgDevice.StartFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsBlockBreaker                ( CPF_OptionalParm | CPF_Parm )

bool ATgDevice::eventStartFire ( unsigned long bIsBlockBreaker )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36126 ];

	ATgDevice_eventStartFire_Parms StartFire_Parms;
	StartFire_Parms.bIsBlockBreaker = bIsBlockBreaker;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );

	return StartFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ServerSetTrackingTarget
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )

void ATgDevice::ServerSetTrackingTarget ( class ATgPawn* TargetPawn )
{
	static UFunction* pFnServerSetTrackingTarget = NULL;

	if ( ! pFnServerSetTrackingTarget )
		pFnServerSetTrackingTarget = (UFunction*) UObject::GObjObjects()->Data[ 36124 ];

	ATgDevice_execServerSetTrackingTarget_Parms ServerSetTrackingTarget_Parms;
	ServerSetTrackingTarget_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnServerSetTrackingTarget, &ServerSetTrackingTarget_Parms, NULL );
};

// Function TgGame.TgDevice.ClientSetTrackingTarget
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgDevice::ClientSetTrackingTarget ( )
{
	static UFunction* pFnClientSetTrackingTarget = NULL;

	if ( ! pFnClientSetTrackingTarget )
		pFnClientSetTrackingTarget = (UFunction*) UObject::GObjObjects()->Data[ 36121 ];

	ATgDevice_execClientSetTrackingTarget_Parms ClientSetTrackingTarget_Parms;

	this->ProcessEvent ( pFnClientSetTrackingTarget, &ClientSetTrackingTarget_Parms, NULL );

	return ClientSetTrackingTarget_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CheckCustomStartFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::CheckCustomStartFire ( )
{
	static UFunction* pFnCheckCustomStartFire = NULL;

	if ( ! pFnCheckCustomStartFire )
		pFnCheckCustomStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36118 ];

	ATgDevice_execCheckCustomStartFire_Parms CheckCustomStartFire_Parms;

	this->ProcessEvent ( pFnCheckCustomStartFire, &CheckCustomStartFire_Parms, NULL );

	return CheckCustomStartFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.NeedCustomLeftClickBehavior
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::NeedCustomLeftClickBehavior ( )
{
	static UFunction* pFnNeedCustomLeftClickBehavior = NULL;

	if ( ! pFnNeedCustomLeftClickBehavior )
		pFnNeedCustomLeftClickBehavior = (UFunction*) UObject::GObjObjects()->Data[ 36115 ];

	ATgDevice_execNeedCustomLeftClickBehavior_Parms NeedCustomLeftClickBehavior_Parms;

	this->ProcessEvent ( pFnNeedCustomLeftClickBehavior, &NeedCustomLeftClickBehavior_Parms, NULL );

	return NeedCustomLeftClickBehavior_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CanDeviceStartFiringNow
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// unsigned long                  bDebugRelevant                 ( CPF_Parm )

bool ATgDevice::eventCanDeviceStartFiringNow ( unsigned char FireModeNum, unsigned long bDebugRelevant )
{
	static UFunction* pFnCanDeviceStartFiringNow = NULL;

	if ( ! pFnCanDeviceStartFiringNow )
		pFnCanDeviceStartFiringNow = (UFunction*) UObject::GObjObjects()->Data[ 36108 ];

	ATgDevice_eventCanDeviceStartFiringNow_Parms CanDeviceStartFiringNow_Parms;
	CanDeviceStartFiringNow_Parms.FireModeNum = FireModeNum;
	CanDeviceStartFiringNow_Parms.bDebugRelevant = bDebugRelevant;

	this->ProcessEvent ( pFnCanDeviceStartFiringNow, &CanDeviceStartFiringNow_Parms, NULL );

	return CanDeviceStartFiringNow_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CacheDeviceCanFire
// [0x00020102] 
// Parameters infos:
// unsigned long                  bDeviceCanFire                 ( CPF_Parm )

void ATgDevice::CacheDeviceCanFire ( unsigned long bDeviceCanFire )
{
	static UFunction* pFnCacheDeviceCanFire = NULL;

	if ( ! pFnCacheDeviceCanFire )
		pFnCacheDeviceCanFire = (UFunction*) UObject::GObjObjects()->Data[ 36106 ];

	ATgDevice_execCacheDeviceCanFire_Parms CacheDeviceCanFire_Parms;
	CacheDeviceCanFire_Parms.bDeviceCanFire = bDeviceCanFire;

	this->ProcessEvent ( pFnCacheDeviceCanFire, &CacheDeviceCanFire_Parms, NULL );
};

// Function TgGame.TgDevice.CanDeviceFireNow
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// unsigned long                  bDeviceFailLog                 ( CPF_Parm )

bool ATgDevice::eventCanDeviceFireNow ( unsigned char FireModeNum, unsigned long bDeviceFailLog )
{
	static UFunction* pFnCanDeviceFireNow = NULL;

	if ( ! pFnCanDeviceFireNow )
		pFnCanDeviceFireNow = (UFunction*) UObject::GObjObjects()->Data[ 36096 ];

	ATgDevice_eventCanDeviceFireNow_Parms CanDeviceFireNow_Parms;
	CanDeviceFireNow_Parms.FireModeNum = FireModeNum;
	CanDeviceFireNow_Parms.bDeviceFailLog = bDeviceFailLog;

	this->ProcessEvent ( pFnCanDeviceFireNow, &CanDeviceFireNow_Parms, NULL );

	return CanDeviceFireNow_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsNonCombatJetpack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsNonCombatJetpack ( )
{
	static UFunction* pFnIsNonCombatJetpack = NULL;

	if ( ! pFnIsNonCombatJetpack )
		pFnIsNonCombatJetpack = (UFunction*) UObject::GObjObjects()->Data[ 36094 ];

	ATgDevice_execIsNonCombatJetpack_Parms IsNonCombatJetpack_Parms;

	pFnIsNonCombatJetpack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNonCombatJetpack, &IsNonCombatJetpack_Parms, NULL );

	pFnIsNonCombatJetpack->FunctionFlags |= 0x400;

	return IsNonCombatJetpack_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsMoraleDevice
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::eventIsMoraleDevice ( )
{
	static UFunction* pFnIsMoraleDevice = NULL;

	if ( ! pFnIsMoraleDevice )
		pFnIsMoraleDevice = (UFunction*) UObject::GObjObjects()->Data[ 36092 ];

	ATgDevice_eventIsMoraleDevice_Parms IsMoraleDevice_Parms;

	this->ProcessEvent ( pFnIsMoraleDevice, &IsMoraleDevice_Parms, NULL );

	return IsMoraleDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice.AmountCurrentlyOffOfTargetAccuracy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ATgDevice::eventAmountCurrentlyOffOfTargetAccuracy ( unsigned char FireModeNum )
{
	static UFunction* pFnAmountCurrentlyOffOfTargetAccuracy = NULL;

	if ( ! pFnAmountCurrentlyOffOfTargetAccuracy )
		pFnAmountCurrentlyOffOfTargetAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 36088 ];

	ATgDevice_eventAmountCurrentlyOffOfTargetAccuracy_Parms AmountCurrentlyOffOfTargetAccuracy_Parms;
	AmountCurrentlyOffOfTargetAccuracy_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnAmountCurrentlyOffOfTargetAccuracy, &AmountCurrentlyOffOfTargetAccuracy_Parms, NULL );

	return AmountCurrentlyOffOfTargetAccuracy_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CanFireWhileHanging
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::CanFireWhileHanging ( )
{
	static UFunction* pFnCanFireWhileHanging = NULL;

	if ( ! pFnCanFireWhileHanging )
		pFnCanFireWhileHanging = (UFunction*) UObject::GObjObjects()->Data[ 36086 ];

	ATgDevice_execCanFireWhileHanging_Parms CanFireWhileHanging_Parms;

	this->ProcessEvent ( pFnCanFireWhileHanging, &CanFireWhileHanging_Parms, NULL );

	return CanFireWhileHanging_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CanFireWhileDoingRoutineTasks
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireModeNum                    ( CPF_Parm )

bool ATgDevice::CanFireWhileDoingRoutineTasks ( int FireModeNum )
{
	static UFunction* pFnCanFireWhileDoingRoutineTasks = NULL;

	if ( ! pFnCanFireWhileDoingRoutineTasks )
		pFnCanFireWhileDoingRoutineTasks = (UFunction*) UObject::GObjObjects()->Data[ 36083 ];

	ATgDevice_execCanFireWhileDoingRoutineTasks_Parms CanFireWhileDoingRoutineTasks_Parms;
	CanFireWhileDoingRoutineTasks_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWhileDoingRoutineTasks, &CanFireWhileDoingRoutineTasks_Parms, NULL );

	return CanFireWhileDoingRoutineTasks_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CanUseDeviceInThisPhysicsState
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireModeNum                    ( CPF_Parm )

bool ATgDevice::CanUseDeviceInThisPhysicsState ( int FireModeNum )
{
	static UFunction* pFnCanUseDeviceInThisPhysicsState = NULL;

	if ( ! pFnCanUseDeviceInThisPhysicsState )
		pFnCanUseDeviceInThisPhysicsState = (UFunction*) UObject::GObjObjects()->Data[ 36078 ];

	ATgDevice_execCanUseDeviceInThisPhysicsState_Parms CanUseDeviceInThisPhysicsState_Parms;
	CanUseDeviceInThisPhysicsState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanUseDeviceInThisPhysicsState, &CanUseDeviceInThisPhysicsState_Parms, NULL );

	return CanUseDeviceInThisPhysicsState_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ConsumeDevice
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventConsumeDevice ( )
{
	static UFunction* pFnConsumeDevice = NULL;

	if ( ! pFnConsumeDevice )
		pFnConsumeDevice = (UFunction*) UObject::GObjObjects()->Data[ 36070 ];

	ATgDevice_eventConsumeDevice_Parms ConsumeDevice_Parms;

	this->ProcessEvent ( pFnConsumeDevice, &ConsumeDevice_Parms, NULL );
};

// Function TgGame.TgDevice.UsesPower
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::UsesPower ( )
{
	static UFunction* pFnUsesPower = NULL;

	if ( ! pFnUsesPower )
		pFnUsesPower = (UFunction*) UObject::GObjObjects()->Data[ 36066 ];

	ATgDevice_execUsesPower_Parms UsesPower_Parms;

	this->ProcessEvent ( pFnUsesPower, &UsesPower_Parms, NULL );

	return UsesPower_Parms.ReturnValue;
};

// Function TgGame.TgDevice.DeviceConsumePowerPool
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ATgDevice::DeviceConsumePowerPool ( unsigned char FireModeNum )
{
	static UFunction* pFnDeviceConsumePowerPool = NULL;

	if ( ! pFnDeviceConsumePowerPool )
		pFnDeviceConsumePowerPool = (UFunction*) UObject::GObjObjects()->Data[ 36064 ];

	ATgDevice_execDeviceConsumePowerPool_Parms DeviceConsumePowerPool_Parms;
	DeviceConsumePowerPool_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnDeviceConsumePowerPool, &DeviceConsumePowerPool_Parms, NULL );
};

// Function TgGame.TgDevice.ClientInterrupt
// [0x010201C2] 
// Parameters infos:

void ATgDevice::ClientInterrupt ( )
{
	static UFunction* pFnClientInterrupt = NULL;

	if ( ! pFnClientInterrupt )
		pFnClientInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 36063 ];

	ATgDevice_execClientInterrupt_Parms ClientInterrupt_Parms;

	this->ProcessEvent ( pFnClientInterrupt, &ClientInterrupt_Parms, NULL );
};

// Function TgGame.TgDevice.InterruptFiring
// [0x00020002] 
// Parameters infos:

void ATgDevice::InterruptFiring ( )
{
	static UFunction* pFnInterruptFiring = NULL;

	if ( ! pFnInterruptFiring )
		pFnInterruptFiring = (UFunction*) UObject::GObjObjects()->Data[ 36062 ];

	ATgDevice_execInterruptFiring_Parms InterruptFiring_Parms;

	this->ProcessEvent ( pFnInterruptFiring, &InterruptFiring_Parms, NULL );
};

// Function TgGame.TgDevice.DeviceShutDown
// [0x00024102] 
// Parameters infos:
// unsigned long                  bDeactiveMode                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bResetCooldowns                ( CPF_OptionalParm | CPF_Parm )

void ATgDevice::DeviceShutDown ( unsigned long bDeactiveMode, unsigned long bResetCooldowns )
{
	static UFunction* pFnDeviceShutDown = NULL;

	if ( ! pFnDeviceShutDown )
		pFnDeviceShutDown = (UFunction*) UObject::GObjObjects()->Data[ 36057 ];

	ATgDevice_execDeviceShutDown_Parms DeviceShutDown_Parms;
	DeviceShutDown_Parms.bDeactiveMode = bDeactiveMode;
	DeviceShutDown_Parms.bResetCooldowns = bResetCooldowns;

	this->ProcessEvent ( pFnDeviceShutDown, &DeviceShutDown_Parms, NULL );
};

// Function TgGame.TgDevice.ExitDeployMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventExitDeployMode ( )
{
	static UFunction* pFnExitDeployMode = NULL;

	if ( ! pFnExitDeployMode )
		pFnExitDeployMode = (UFunction*) UObject::GObjObjects()->Data[ 36056 ];

	ATgDevice_eventExitDeployMode_Parms ExitDeployMode_Parms;

	this->ProcessEvent ( pFnExitDeployMode, &ExitDeployMode_Parms, NULL );
};

// Function TgGame.TgDevice.EnterDeployMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventEnterDeployMode ( )
{
	static UFunction* pFnEnterDeployMode = NULL;

	if ( ! pFnEnterDeployMode )
		pFnEnterDeployMode = (UFunction*) UObject::GObjObjects()->Data[ 36055 ];

	ATgDevice_eventEnterDeployMode_Parms EnterDeployMode_Parms;

	this->ProcessEvent ( pFnEnterDeployMode, &EnterDeployMode_Parms, NULL );
};

// Function TgGame.TgDevice.CanEnterDeployMode
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::CanEnterDeployMode ( )
{
	static UFunction* pFnCanEnterDeployMode = NULL;

	if ( ! pFnCanEnterDeployMode )
		pFnCanEnterDeployMode = (UFunction*) UObject::GObjObjects()->Data[ 36053 ];

	ATgDevice_execCanEnterDeployMode_Parms CanEnterDeployMode_Parms;

	this->ProcessEvent ( pFnCanEnterDeployMode, &CanEnterDeployMode_Parms, NULL );

	return CanEnterDeployMode_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ServerDoRemoteDetonation
// [0x002200C2] 
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )

void ATgDevice::ServerDoRemoteDetonation ( int nFireMode )
{
	static UFunction* pFnServerDoRemoteDetonation = NULL;

	if ( ! pFnServerDoRemoteDetonation )
		pFnServerDoRemoteDetonation = (UFunction*) UObject::GObjObjects()->Data[ 36051 ];

	ATgDevice_execServerDoRemoteDetonation_Parms ServerDoRemoteDetonation_Parms;
	ServerDoRemoteDetonation_Parms.nFireMode = nFireMode;

	this->ProcessEvent ( pFnServerDoRemoteDetonation, &ServerDoRemoteDetonation_Parms, NULL );
};

// Function TgGame.TgDevice.SetActiveState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDevice::eventSetActiveState ( )
{
	static UFunction* pFnSetActiveState = NULL;

	if ( ! pFnSetActiveState )
		pFnSetActiveState = (UFunction*) UObject::GObjObjects()->Data[ 36050 ];

	ATgDevice_eventSetActiveState_Parms SetActiveState_Parms;

	this->ProcessEvent ( pFnSetActiveState, &SetActiveState_Parms, NULL );
};

// Function TgGame.TgDevice.ClearModeEquippingHUDTimerAndReticle
// [0x00020102] 
// Parameters infos:

void ATgDevice::ClearModeEquippingHUDTimerAndReticle ( )
{
	static UFunction* pFnClearModeEquippingHUDTimerAndReticle = NULL;

	if ( ! pFnClearModeEquippingHUDTimerAndReticle )
		pFnClearModeEquippingHUDTimerAndReticle = (UFunction*) UObject::GObjObjects()->Data[ 36048 ];

	ATgDevice_execClearModeEquippingHUDTimerAndReticle_Parms ClearModeEquippingHUDTimerAndReticle_Parms;

	this->ProcessEvent ( pFnClearModeEquippingHUDTimerAndReticle, &ClearModeEquippingHUDTimerAndReticle_Parms, NULL );
};

// Function TgGame.TgDevice.SetModeEquippingHUDTimerAndReticle
// [0x00020102] 
// Parameters infos:

void ATgDevice::SetModeEquippingHUDTimerAndReticle ( )
{
	static UFunction* pFnSetModeEquippingHUDTimerAndReticle = NULL;

	if ( ! pFnSetModeEquippingHUDTimerAndReticle )
		pFnSetModeEquippingHUDTimerAndReticle = (UFunction*) UObject::GObjObjects()->Data[ 36043 ];

	ATgDevice_execSetModeEquippingHUDTimerAndReticle_Parms SetModeEquippingHUDTimerAndReticle_Parms;

	this->ProcessEvent ( pFnSetModeEquippingHUDTimerAndReticle, &SetModeEquippingHUDTimerAndReticle_Parms, NULL );
};

// Function TgGame.TgDevice.UpdateHudActionButtons
// [0x00020102] 
// Parameters infos:

void ATgDevice::UpdateHudActionButtons ( )
{
	static UFunction* pFnUpdateHudActionButtons = NULL;

	if ( ! pFnUpdateHudActionButtons )
		pFnUpdateHudActionButtons = (UFunction*) UObject::GObjObjects()->Data[ 36038 ];

	ATgDevice_execUpdateHudActionButtons_Parms UpdateHudActionButtons_Parms;

	this->ProcessEvent ( pFnUpdateHudActionButtons, &UpdateHudActionButtons_Parms, NULL );
};

// Function TgGame.TgDevice.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ATgDevice::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 36032 ];

	ATgDevice_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function TgGame.TgDevice.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )
// float                          fAccuracy                      ( CPF_Parm )

struct FRotator ATgDevice::AddSpread ( struct FRotator BaseAim, float fAccuracy )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 36018 ];

	ATgDevice_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );
	AddSpread_Parms.fAccuracy = fAccuracy;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetEffectiveRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDevice::GetEffectiveRange ( )
{
	static UFunction* pFnGetEffectiveRange = NULL;

	if ( ! pFnGetEffectiveRange )
		pFnGetEffectiveRange = (UFunction*) UObject::GObjObjects()->Data[ 36015 ];

	ATgDevice_execGetEffectiveRange_Parms GetEffectiveRange_Parms;

	this->ProcessEvent ( pFnGetEffectiveRange, &GetEffectiveRange_Parms, NULL );

	return GetEffectiveRange_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDevice::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 36012 ];

	ATgDevice_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsEquipping
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsEquipping ( )
{
	static UFunction* pFnIsEquipping = NULL;

	if ( ! pFnIsEquipping )
		pFnIsEquipping = (UFunction*) UObject::GObjObjects()->Data[ 36010 ];

	ATgDevice_execIsEquipping_Parms IsEquipping_Parms;

	this->ProcessEvent ( pFnIsEquipping, &IsEquipping_Parms, NULL );

	return IsEquipping_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 36008 ];

	ATgDevice_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetRestrictType
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDevice::GetRestrictType ( )
{
	static UFunction* pFnGetRestrictType = NULL;

	if ( ! pFnGetRestrictType )
		pFnGetRestrictType = (UFunction*) UObject::GObjObjects()->Data[ 36006 ];

	ATgDevice_execGetRestrictType_Parms GetRestrictType_Parms;

	this->ProcessEvent ( pFnGetRestrictType, &GetRestrictType_Parms, NULL );

	return GetRestrictType_Parms.ReturnValue;
};

// Function TgGame.TgDevice.DisplayMessage
// [0x00020102] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgDevice::DisplayMessage ( struct FString sMessage )
{
	static UFunction* pFnDisplayMessage = NULL;

	if ( ! pFnDisplayMessage )
		pFnDisplayMessage = (UFunction*) UObject::GObjObjects()->Data[ 36004 ];

	ATgDevice_execDisplayMessage_Parms DisplayMessage_Parms;
	memcpy ( &DisplayMessage_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnDisplayMessage, &DisplayMessage_Parms, NULL );
};

// Function TgGame.TgDevice.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ATgDevice::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 35999 ];

	ATgDevice_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function TgGame.TgDevice.WeaponLog
// [0x00020102] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FString                 FuncStr                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void ATgDevice::WeaponLog ( struct FString msg, struct FString FuncStr )
{
	static UFunction* pFnWeaponLog = NULL;

	if ( ! pFnWeaponLog )
		pFnWeaponLog = (UFunction*) UObject::GObjObjects()->Data[ 35996 ];

	ATgDevice_execWeaponLog_Parms WeaponLog_Parms;
	memcpy ( &WeaponLog_Parms.msg, &msg, 0xC );
	memcpy ( &WeaponLog_Parms.FuncStr, &FuncStr, 0xC );

	this->ProcessEvent ( pFnWeaponLog, &WeaponLog_Parms, NULL );
};

// Function TgGame.TgDevice.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDevice::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 35994 ];

	ATgDevice_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDevice.IsGameTypeDisabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsGameTypeDisabled ( )
{
	static UFunction* pFnIsGameTypeDisabled = NULL;

	if ( ! pFnIsGameTypeDisabled )
		pFnIsGameTypeDisabled = (UFunction*) UObject::GObjObjects()->Data[ 35992 ];

	ATgDevice_execIsGameTypeDisabled_Parms IsGameTypeDisabled_Parms;

	pFnIsGameTypeDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsGameTypeDisabled, &IsGameTypeDisabled_Parms, NULL );

	pFnIsGameTypeDisabled->FunctionFlags |= 0x400;

	return IsGameTypeDisabled_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ShowUICanFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::ShowUICanFire ( )
{
	static UFunction* pFnShowUICanFire = NULL;

	if ( ! pFnShowUICanFire )
		pFnShowUICanFire = (UFunction*) UObject::GObjObjects()->Data[ 35990 ];

	ATgDevice_execShowUICanFire_Parms ShowUICanFire_Parms;

	pFnShowUICanFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowUICanFire, &ShowUICanFire_Parms, NULL );

	pFnShowUICanFire->FunctionFlags |= 0x400;

	return ShowUICanFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetCooldownTimerManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgTimerManager*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgTimerManager* ATgDevice::GetCooldownTimerManager ( )
{
	static UFunction* pFnGetCooldownTimerManager = NULL;

	if ( ! pFnGetCooldownTimerManager )
		pFnGetCooldownTimerManager = (UFunction*) UObject::GObjObjects()->Data[ 35988 ];

	ATgDevice_execGetCooldownTimerManager_Parms GetCooldownTimerManager_Parms;

	pFnGetCooldownTimerManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCooldownTimerManager, &GetCooldownTimerManager_Parms, NULL );

	pFnGetCooldownTimerManager->FunctionFlags |= 0x400;

	return GetCooldownTimerManager_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsDeviceRefiring
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsDeviceRefiring ( )
{
	static UFunction* pFnIsDeviceRefiring = NULL;

	if ( ! pFnIsDeviceRefiring )
		pFnIsDeviceRefiring = (UFunction*) UObject::GObjObjects()->Data[ 35986 ];

	ATgDevice_execIsDeviceRefiring_Parms IsDeviceRefiring_Parms;

	pFnIsDeviceRefiring->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDeviceRefiring, &IsDeviceRefiring_Parms, NULL );

	pFnIsDeviceRefiring->FunctionFlags |= 0x400;

	return IsDeviceRefiring_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsDeviceCoolingDown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ATgDevice::IsDeviceCoolingDown ( unsigned char FireModeNum )
{
	static UFunction* pFnIsDeviceCoolingDown = NULL;

	if ( ! pFnIsDeviceCoolingDown )
		pFnIsDeviceCoolingDown = (UFunction*) UObject::GObjObjects()->Data[ 35983 ];

	ATgDevice_execIsDeviceCoolingDown_Parms IsDeviceCoolingDown_Parms;
	IsDeviceCoolingDown_Parms.FireModeNum = FireModeNum;

	pFnIsDeviceCoolingDown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDeviceCoolingDown, &IsDeviceCoolingDown_Parms, NULL );

	pFnIsDeviceCoolingDown->FunctionFlags |= 0x400;

	return IsDeviceCoolingDown_Parms.ReturnValue;
};

// Function TgGame.TgDevice.HasMinimumPowerPool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ATgDevice::HasMinimumPowerPool ( unsigned char FireModeNum )
{
	static UFunction* pFnHasMinimumPowerPool = NULL;

	if ( ! pFnHasMinimumPowerPool )
		pFnHasMinimumPowerPool = (UFunction*) UObject::GObjObjects()->Data[ 35980 ];

	ATgDevice_execHasMinimumPowerPool_Parms HasMinimumPowerPool_Parms;
	HasMinimumPowerPool_Parms.FireModeNum = FireModeNum;

	pFnHasMinimumPowerPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasMinimumPowerPool, &HasMinimumPowerPool_Parms, NULL );

	pFnHasMinimumPowerPool->FunctionFlags |= 0x400;

	return HasMinimumPowerPool_Parms.ReturnValue;
};

// Function TgGame.TgDevice.HasEnoughPowerPoolToBlock
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::HasEnoughPowerPoolToBlock ( )
{
	static UFunction* pFnHasEnoughPowerPoolToBlock = NULL;

	if ( ! pFnHasEnoughPowerPoolToBlock )
		pFnHasEnoughPowerPoolToBlock = (UFunction*) UObject::GObjObjects()->Data[ 35978 ];

	ATgDevice_execHasEnoughPowerPoolToBlock_Parms HasEnoughPowerPoolToBlock_Parms;

	pFnHasEnoughPowerPoolToBlock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasEnoughPowerPoolToBlock, &HasEnoughPowerPoolToBlock_Parms, NULL );

	pFnHasEnoughPowerPoolToBlock->FunctionFlags |= 0x400;

	return HasEnoughPowerPoolToBlock_Parms.ReturnValue;
};

// Function TgGame.TgDevice.HasEnoughPowerPool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ATgDevice::HasEnoughPowerPool ( unsigned char FireModeNum )
{
	static UFunction* pFnHasEnoughPowerPool = NULL;

	if ( ! pFnHasEnoughPowerPool )
		pFnHasEnoughPowerPool = (UFunction*) UObject::GObjObjects()->Data[ 35975 ];

	ATgDevice_execHasEnoughPowerPool_Parms HasEnoughPowerPool_Parms;
	HasEnoughPowerPool_Parms.FireModeNum = FireModeNum;

	pFnHasEnoughPowerPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasEnoughPowerPool, &HasEnoughPowerPool_Parms, NULL );

	pFnHasEnoughPowerPool->FunctionFlags |= 0x400;

	return HasEnoughPowerPool_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsMeleeAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsMeleeAttack ( )
{
	static UFunction* pFnIsMeleeAttack = NULL;

	if ( ! pFnIsMeleeAttack )
		pFnIsMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 35973 ];

	ATgDevice_execIsMeleeAttack_Parms IsMeleeAttack_Parms;

	pFnIsMeleeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMeleeAttack, &IsMeleeAttack_Parms, NULL );

	pFnIsMeleeAttack->FunctionFlags |= 0x400;

	return IsMeleeAttack_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsRangedAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsRangedAttack ( )
{
	static UFunction* pFnIsRangedAttack = NULL;

	if ( ! pFnIsRangedAttack )
		pFnIsRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 35971 ];

	ATgDevice_execIsRangedAttack_Parms IsRangedAttack_Parms;

	pFnIsRangedAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRangedAttack, &IsRangedAttack_Parms, NULL );

	pFnIsRangedAttack->FunctionFlags |= 0x400;

	return IsRangedAttack_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetModeRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_Parm )

int ATgDevice::GetModeRange ( int nMode )
{
	static UFunction* pFnGetModeRange = NULL;

	if ( ! pFnGetModeRange )
		pFnGetModeRange = (UFunction*) UObject::GObjObjects()->Data[ 35968 ];

	ATgDevice_execGetModeRange_Parms GetModeRange_Parms;
	GetModeRange_Parms.nMode = nMode;

	pFnGetModeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModeRange, &GetModeRange_Parms, NULL );

	pFnGetModeRange->FunctionFlags |= 0x400;

	return GetModeRange_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CheckModeRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 vDelta                         ( CPF_Parm )

bool ATgDevice::CheckModeRange ( int nMode, struct FVector vDelta )
{
	static UFunction* pFnCheckModeRange = NULL;

	if ( ! pFnCheckModeRange )
		pFnCheckModeRange = (UFunction*) UObject::GObjObjects()->Data[ 35964 ];

	ATgDevice_execCheckModeRange_Parms CheckModeRange_Parms;
	CheckModeRange_Parms.nMode = nMode;
	memcpy ( &CheckModeRange_Parms.vDelta, &vDelta, 0xC );

	pFnCheckModeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckModeRange, &CheckModeRange_Parms, NULL );

	pFnCheckModeRange->FunctionFlags |= 0x400;

	return CheckModeRange_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsOffhandJetpack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsOffhandJetpack ( )
{
	static UFunction* pFnIsOffhandJetpack = NULL;

	if ( ! pFnIsOffhandJetpack )
		pFnIsOffhandJetpack = (UFunction*) UObject::GObjObjects()->Data[ 35962 ];

	ATgDevice_execIsOffhandJetpack_Parms IsOffhandJetpack_Parms;

	pFnIsOffhandJetpack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOffhandJetpack, &IsOffhandJetpack_Parms, NULL );

	pFnIsOffhandJetpack->FunctionFlags |= 0x400;

	return IsOffhandJetpack_Parms.ReturnValue;
};

// Function TgGame.TgDevice.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgDevice::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 35960 ];

	ATgDevice_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.ApplyInventoryEquipEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bRemove                        ( CPF_Parm )

void ATgDevice::ApplyInventoryEquipEffects ( unsigned long bRemove )
{
	static UFunction* pFnApplyInventoryEquipEffects = NULL;

	if ( ! pFnApplyInventoryEquipEffects )
		pFnApplyInventoryEquipEffects = (UFunction*) UObject::GObjObjects()->Data[ 35958 ];

	ATgDevice_execApplyInventoryEquipEffects_Parms ApplyInventoryEquipEffects_Parms;
	ApplyInventoryEquipEffects_Parms.bRemove = bRemove;

	pFnApplyInventoryEquipEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyInventoryEquipEffects, &ApplyInventoryEquipEffects_Parms, NULL );

	pFnApplyInventoryEquipEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.IsAPickupFlagDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsAPickupFlagDevice ( )
{
	static UFunction* pFnIsAPickupFlagDevice = NULL;

	if ( ! pFnIsAPickupFlagDevice )
		pFnIsAPickupFlagDevice = (UFunction*) UObject::GObjObjects()->Data[ 35956 ];

	ATgDevice_execIsAPickupFlagDevice_Parms IsAPickupFlagDevice_Parms;

	pFnIsAPickupFlagDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAPickupFlagDevice, &IsAPickupFlagDevice_Parms, NULL );

	pFnIsAPickupFlagDevice->FunctionFlags |= 0x400;

	return IsAPickupFlagDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsRestDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsRestDevice ( )
{
	static UFunction* pFnIsRestDevice = NULL;

	if ( ! pFnIsRestDevice )
		pFnIsRestDevice = (UFunction*) UObject::GObjObjects()->Data[ 35954 ];

	ATgDevice_execIsRestDevice_Parms IsRestDevice_Parms;

	pFnIsRestDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRestDevice, &IsRestDevice_Parms, NULL );

	pFnIsRestDevice->FunctionFlags |= 0x400;

	return IsRestDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetDeviceFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgDeviceFire*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_Parm )

class UTgDeviceFire* ATgDevice::GetDeviceFire ( int nMode )
{
	static UFunction* pFnGetDeviceFire = NULL;

	if ( ! pFnGetDeviceFire )
		pFnGetDeviceFire = (UFunction*) UObject::GObjObjects()->Data[ 35951 ];

	ATgDevice_execGetDeviceFire_Parms GetDeviceFire_Parms;
	GetDeviceFire_Parms.nMode = nMode;

	pFnGetDeviceFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceFire, &GetDeviceFire_Parms, NULL );

	pFnGetDeviceFire->FunctionFlags |= 0x400;

	return GetDeviceFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.GetCurrentFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgDeviceFire*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTgDeviceFire* ATgDevice::GetCurrentFire ( )
{
	static UFunction* pFnGetCurrentFire = NULL;

	if ( ! pFnGetCurrentFire )
		pFnGetCurrentFire = (UFunction*) UObject::GObjObjects()->Data[ 35949 ];

	ATgDevice_execGetCurrentFire_Parms GetCurrentFire_Parms;

	pFnGetCurrentFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentFire, &GetCurrentFire_Parms, NULL );

	pFnGetCurrentFire->FunctionFlags |= 0x400;

	return GetCurrentFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice.TickInHandWeapon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgDevice::TickInHandWeapon ( float DeltaSeconds )
{
	static UFunction* pFnTickInHandWeapon = NULL;

	if ( ! pFnTickInHandWeapon )
		pFnTickInHandWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35947 ];

	ATgDevice_execTickInHandWeapon_Parms TickInHandWeapon_Parms;
	TickInHandWeapon_Parms.DeltaSeconds = DeltaSeconds;

	pFnTickInHandWeapon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickInHandWeapon, &TickInHandWeapon_Parms, NULL );

	pFnTickInHandWeapon->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.ClearInstigatorEquippedDevices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice::ClearInstigatorEquippedDevices ( )
{
	static UFunction* pFnClearInstigatorEquippedDevices = NULL;

	if ( ! pFnClearInstigatorEquippedDevices )
		pFnClearInstigatorEquippedDevices = (UFunction*) UObject::GObjObjects()->Data[ 35946 ];

	ATgDevice_execClearInstigatorEquippedDevices_Parms ClearInstigatorEquippedDevices_Parms;

	pFnClearInstigatorEquippedDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearInstigatorEquippedDevices, &ClearInstigatorEquippedDevices_Parms, NULL );

	pFnClearInstigatorEquippedDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.PopulateInstigatorEquippedDevices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice::PopulateInstigatorEquippedDevices ( )
{
	static UFunction* pFnPopulateInstigatorEquippedDevices = NULL;

	if ( ! pFnPopulateInstigatorEquippedDevices )
		pFnPopulateInstigatorEquippedDevices = (UFunction*) UObject::GObjObjects()->Data[ 35945 ];

	ATgDevice_execPopulateInstigatorEquippedDevices_Parms PopulateInstigatorEquippedDevices_Parms;

	pFnPopulateInstigatorEquippedDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateInstigatorEquippedDevices, &PopulateInstigatorEquippedDevices_Parms, NULL );

	pFnPopulateInstigatorEquippedDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.NeedServerDetonate
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nFireMode                      ( CPF_OptionalParm | CPF_Parm )

bool ATgDevice::NeedServerDetonate ( int nFireMode )
{
	static UFunction* pFnNeedServerDetonate = NULL;

	if ( ! pFnNeedServerDetonate )
		pFnNeedServerDetonate = (UFunction*) UObject::GObjObjects()->Data[ 35942 ];

	ATgDevice_execNeedServerDetonate_Parms NeedServerDetonate_Parms;
	NeedServerDetonate_Parms.nFireMode = nFireMode;

	pFnNeedServerDetonate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedServerDetonate, &NeedServerDetonate_Parms, NULL );

	pFnNeedServerDetonate->FunctionFlags |= 0x400;

	return NeedServerDetonate_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ServerDetonate
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nFireMode                      ( CPF_OptionalParm | CPF_Parm )

bool ATgDevice::ServerDetonate ( int nFireMode )
{
	static UFunction* pFnServerDetonate = NULL;

	if ( ! pFnServerDetonate )
		pFnServerDetonate = (UFunction*) UObject::GObjObjects()->Data[ 35939 ];

	ATgDevice_execServerDetonate_Parms ServerDetonate_Parms;
	ServerDetonate_Parms.nFireMode = nFireMode;

	pFnServerDetonate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerDetonate, &ServerDetonate_Parms, NULL );

	pFnServerDetonate->FunctionFlags |= 0x400;

	return ServerDetonate_Parms.ReturnValue;
};

// Function TgGame.TgDevice.LogDebugInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::LogDebugInfo ( )
{
	static UFunction* pFnLogDebugInfo = NULL;

	if ( ! pFnLogDebugInfo )
		pFnLogDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 35937 ];

	ATgDevice_execLogDebugInfo_Parms LogDebugInfo_Parms;

	pFnLogDebugInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDebugInfo, &LogDebugInfo_Parms, NULL );

	pFnLogDebugInfo->FunctionFlags |= 0x400;

	return LogDebugInfo_Parms.ReturnValue;
};

// Function TgGame.TgDevice.IsABeaconPlacingDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::IsABeaconPlacingDevice ( )
{
	static UFunction* pFnIsABeaconPlacingDevice = NULL;

	if ( ! pFnIsABeaconPlacingDevice )
		pFnIsABeaconPlacingDevice = (UFunction*) UObject::GObjObjects()->Data[ 35935 ];

	ATgDevice_execIsABeaconPlacingDevice_Parms IsABeaconPlacingDevice_Parms;

	pFnIsABeaconPlacingDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsABeaconPlacingDevice, &IsABeaconPlacingDevice_Parms, NULL );

	pFnIsABeaconPlacingDevice->FunctionFlags |= 0x400;

	return IsABeaconPlacingDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice.RemoveConsumableFromOwnerInventory
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice::RemoveConsumableFromOwnerInventory ( )
{
	static UFunction* pFnRemoveConsumableFromOwnerInventory = NULL;

	if ( ! pFnRemoveConsumableFromOwnerInventory )
		pFnRemoveConsumableFromOwnerInventory = (UFunction*) UObject::GObjObjects()->Data[ 35934 ];

	ATgDevice_execRemoveConsumableFromOwnerInventory_Parms RemoveConsumableFromOwnerInventory_Parms;

	pFnRemoveConsumableFromOwnerInventory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveConsumableFromOwnerInventory, &RemoveConsumableFromOwnerInventory_Parms, NULL );

	pFnRemoveConsumableFromOwnerInventory->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.UpdateDeployModeStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice::UpdateDeployModeStatus ( )
{
	static UFunction* pFnUpdateDeployModeStatus = NULL;

	if ( ! pFnUpdateDeployModeStatus )
		pFnUpdateDeployModeStatus = (UFunction*) UObject::GObjObjects()->Data[ 35933 ];

	ATgDevice_execUpdateDeployModeStatus_Parms UpdateDeployModeStatus_Parms;

	pFnUpdateDeployModeStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeployModeStatus, &UpdateDeployModeStatus_Parms, NULL );

	pFnUpdateDeployModeStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.GetDeviceName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgDevice::GetDeviceName ( )
{
	static UFunction* pFnGetDeviceName = NULL;

	if ( ! pFnGetDeviceName )
		pFnGetDeviceName = (UFunction*) UObject::GObjObjects()->Data[ 35931 ];

	ATgDevice_execGetDeviceName_Parms GetDeviceName_Parms;

	pFnGetDeviceName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceName, &GetDeviceName_Parms, NULL );

	pFnGetDeviceName->FunctionFlags |= 0x400;

	return GetDeviceName_Parms.ReturnValue;
};

// Function TgGame.TgDevice.CalcFireSocketIndexMax
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice::CalcFireSocketIndexMax ( )
{
	static UFunction* pFnCalcFireSocketIndexMax = NULL;

	if ( ! pFnCalcFireSocketIndexMax )
		pFnCalcFireSocketIndexMax = (UFunction*) UObject::GObjObjects()->Data[ 35930 ];

	ATgDevice_execCalcFireSocketIndexMax_Parms CalcFireSocketIndexMax_Parms;

	pFnCalcFireSocketIndexMax->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcFireSocketIndexMax, &CalcFireSocketIndexMax_Parms, NULL );

	pFnCalcFireSocketIndexMax->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice.GetFireSocketName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ATgDevice::GetFireSocketName ( )
{
	static UFunction* pFnGetFireSocketName = NULL;

	if ( ! pFnGetFireSocketName )
		pFnGetFireSocketName = (UFunction*) UObject::GObjObjects()->Data[ 35928 ];

	ATgDevice_execGetFireSocketName_Parms GetFireSocketName_Parms;

	pFnGetFireSocketName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireSocketName, &GetFireSocketName_Parms, NULL );

	pFnGetFireSocketName->FunctionFlags |= 0x400;

	return GetFireSocketName_Parms.ReturnValue;
};

// Function TgGame.TgDevice.QueryDeployableClass
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_OptionalParm | CPF_Parm )

struct FName ATgDevice::QueryDeployableClass ( int nMode )
{
	static UFunction* pFnQueryDeployableClass = NULL;

	if ( ! pFnQueryDeployableClass )
		pFnQueryDeployableClass = (UFunction*) UObject::GObjObjects()->Data[ 35925 ];

	ATgDevice_execQueryDeployableClass_Parms QueryDeployableClass_Parms;
	QueryDeployableClass_Parms.nMode = nMode;

	pFnQueryDeployableClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryDeployableClass, &QueryDeployableClass_Parms, NULL );

	pFnQueryDeployableClass->FunctionFlags |= 0x400;

	return QueryDeployableClass_Parms.ReturnValue;
};

// Function TgGame.TgDevice.QueryProjectileClass
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_OptionalParm | CPF_Parm )

struct FName ATgDevice::QueryProjectileClass ( int nMode )
{
	static UFunction* pFnQueryProjectileClass = NULL;

	if ( ! pFnQueryProjectileClass )
		pFnQueryProjectileClass = (UFunction*) UObject::GObjObjects()->Data[ 35922 ];

	ATgDevice_execQueryProjectileClass_Parms QueryProjectileClass_Parms;
	QueryProjectileClass_Parms.nMode = nMode;

	pFnQueryProjectileClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryProjectileClass, &QueryProjectileClass_Parms, NULL );

	pFnQueryProjectileClass->FunctionFlags |= 0x400;

	return QueryProjectileClass_Parms.ReturnValue;
};

// Function TgGame.TgDevice.ApplyDeviceSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice::ApplyDeviceSetup ( )
{
	static UFunction* pFnApplyDeviceSetup = NULL;

	if ( ! pFnApplyDeviceSetup )
		pFnApplyDeviceSetup = (UFunction*) UObject::GObjObjects()->Data[ 35920 ];

	ATgDevice_execApplyDeviceSetup_Parms ApplyDeviceSetup_Parms;

	pFnApplyDeviceSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDeviceSetup, &ApplyDeviceSetup_Parms, NULL );

	pFnApplyDeviceSetup->FunctionFlags |= 0x400;

	return ApplyDeviceSetup_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Grenade.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ATgDevice_Grenade::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 36366 ];

	ATgDevice_Grenade_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function TgGame.TgDevice_HitPulse.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ATgDevice_HitPulse::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 36384 ];

	ATgDevice_HitPulse_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function TgGame.TgDevice_HitPulse.PersistTimer
// [0x00020102] 
// Parameters infos:

void ATgDevice_HitPulse::PersistTimer ( )
{
	static UFunction* pFnPersistTimer = NULL;

	if ( ! pFnPersistTimer )
		pFnPersistTimer = (UFunction*) UObject::GObjObjects()->Data[ 36377 ];

	ATgDevice_HitPulse_execPersistTimer_Parms PersistTimer_Parms;

	this->ProcessEvent ( pFnPersistTimer, &PersistTimer_Parms, NULL );
};

// Function TgGame.TgDevice_HitPulse.StartFire
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsBlockBreaker                ( CPF_OptionalParm | CPF_Parm )

bool ATgDevice_HitPulse::eventStartFire ( unsigned long bIsBlockBreaker )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36374 ];

	ATgDevice_HitPulse_eventStartFire_Parms StartFire_Parms;
	StartFire_Parms.bIsBlockBreaker = bIsBlockBreaker;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );

	return StartFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDevice_Morale::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 36443 ];

	ATgDevice_Morale_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDevice_Morale.HasEnoughMorale
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice_Morale::eventHasEnoughMorale ( )
{
	static UFunction* pFnHasEnoughMorale = NULL;

	if ( ! pFnHasEnoughMorale )
		pFnHasEnoughMorale = (UFunction*) UObject::GObjObjects()->Data[ 36439 ];

	ATgDevice_Morale_eventHasEnoughMorale_Parms HasEnoughMorale_Parms;

	this->ProcessEvent ( pFnHasEnoughMorale, &HasEnoughMorale_Parms, NULL );

	return HasEnoughMorale_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.CanDeviceStartFiringNow
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// unsigned long                  bDebugRelevant                 ( CPF_Parm )

bool ATgDevice_Morale::eventCanDeviceStartFiringNow ( unsigned char FireModeNum, unsigned long bDebugRelevant )
{
	static UFunction* pFnCanDeviceStartFiringNow = NULL;

	if ( ! pFnCanDeviceStartFiringNow )
		pFnCanDeviceStartFiringNow = (UFunction*) UObject::GObjObjects()->Data[ 36435 ];

	ATgDevice_Morale_eventCanDeviceStartFiringNow_Parms CanDeviceStartFiringNow_Parms;
	CanDeviceStartFiringNow_Parms.FireModeNum = FireModeNum;
	CanDeviceStartFiringNow_Parms.bDebugRelevant = bDebugRelevant;

	this->ProcessEvent ( pFnCanDeviceStartFiringNow, &CanDeviceStartFiringNow_Parms, NULL );

	return CanDeviceStartFiringNow_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.CanFireMoraleDevice
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice_Morale::CanFireMoraleDevice ( )
{
	static UFunction* pFnCanFireMoraleDevice = NULL;

	if ( ! pFnCanFireMoraleDevice )
		pFnCanFireMoraleDevice = (UFunction*) UObject::GObjObjects()->Data[ 36432 ];

	ATgDevice_Morale_execCanFireMoraleDevice_Parms CanFireMoraleDevice_Parms;

	this->ProcessEvent ( pFnCanFireMoraleDevice, &CanFireMoraleDevice_Parms, NULL );

	return CanFireMoraleDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.IsMoraleDevice
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice_Morale::eventIsMoraleDevice ( )
{
	static UFunction* pFnIsMoraleDevice = NULL;

	if ( ! pFnIsMoraleDevice )
		pFnIsMoraleDevice = (UFunction*) UObject::GObjObjects()->Data[ 36430 ];

	ATgDevice_Morale_eventIsMoraleDevice_Parms IsMoraleDevice_Parms;

	this->ProcessEvent ( pFnIsMoraleDevice, &IsMoraleDevice_Parms, NULL );

	return IsMoraleDevice_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.ShowUICanFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice_Morale::ShowUICanFire ( )
{
	static UFunction* pFnShowUICanFire = NULL;

	if ( ! pFnShowUICanFire )
		pFnShowUICanFire = (UFunction*) UObject::GObjObjects()->Data[ 36428 ];

	ATgDevice_Morale_execShowUICanFire_Parms ShowUICanFire_Parms;

	pFnShowUICanFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowUICanFire, &ShowUICanFire_Parms, NULL );

	pFnShowUICanFire->FunctionFlags |= 0x400;

	return ShowUICanFire_Parms.ReturnValue;
};

// Function TgGame.TgDevice_Morale.SetRequiredMoralePoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice_Morale::SetRequiredMoralePoints ( )
{
	static UFunction* pFnSetRequiredMoralePoints = NULL;

	if ( ! pFnSetRequiredMoralePoints )
		pFnSetRequiredMoralePoints = (UFunction*) UObject::GObjObjects()->Data[ 36427 ];

	ATgDevice_Morale_execSetRequiredMoralePoints_Parms SetRequiredMoralePoints_Parms;

	pFnSetRequiredMoralePoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRequiredMoralePoints, &SetRequiredMoralePoints_Parms, NULL );

	pFnSetRequiredMoralePoints->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice_Morale.SendMoraleBoostMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDevice_Morale::SendMoraleBoostMessage ( )
{
	static UFunction* pFnSendMoraleBoostMessage = NULL;

	if ( ! pFnSendMoraleBoostMessage )
		pFnSendMoraleBoostMessage = (UFunction*) UObject::GObjObjects()->Data[ 36426 ];

	ATgDevice_Morale_execSendMoraleBoostMessage_Parms SendMoraleBoostMessage_Parms;

	pFnSendMoraleBoostMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendMoraleBoostMessage, &SendMoraleBoostMessage_Parms, NULL );

	pFnSendMoraleBoostMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgDevice_NewMelee.MeleeMouseOver
// [0x00820102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TraceActor                     ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )

struct FImpactInfo ATgDevice_NewMelee::MeleeMouseOver ( class AActor* TraceActor, struct FVector StartTrace, struct FVector EndTrace )
{
	static UFunction* pFnMeleeMouseOver = NULL;

	if ( ! pFnMeleeMouseOver )
		pFnMeleeMouseOver = (UFunction*) UObject::GObjObjects()->Data[ 36414 ];

	ATgDevice_NewMelee_execMeleeMouseOver_Parms MeleeMouseOver_Parms;
	MeleeMouseOver_Parms.TraceActor = TraceActor;
	memcpy ( &MeleeMouseOver_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &MeleeMouseOver_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnMeleeMouseOver, &MeleeMouseOver_Parms, NULL );

	return MeleeMouseOver_Parms.ReturnValue;
};

// Function TgGame.TgDevice_NewMelee.AcquireMeleeTarget
// [0x00C20902] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            bExactTarget                   ( CPF_Parm | CPF_OutParm )

class ATgPawn* ATgDevice_NewMelee::eventAcquireMeleeTarget ( int* bExactTarget )
{
	static UFunction* pFnAcquireMeleeTarget = NULL;

	if ( ! pFnAcquireMeleeTarget )
		pFnAcquireMeleeTarget = (UFunction*) UObject::GObjObjects()->Data[ 36401 ];

	ATgDevice_NewMelee_eventAcquireMeleeTarget_Parms AcquireMeleeTarget_Parms;

	this->ProcessEvent ( pFnAcquireMeleeTarget, &AcquireMeleeTarget_Parms, NULL );

	if ( bExactTarget )
		*bExactTarget = AcquireMeleeTarget_Parms.bExactTarget;

	return AcquireMeleeTarget_Parms.ReturnValue;
};

// Function TgGame.TgDevice_NewMelee.ProcessInstantHit
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ATgDevice_NewMelee::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 36393 ];

	ATgDevice_NewMelee_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function TgGame.TgDevice_NewMelee.DeliverMeleeHit
// [0x00820102] 
// Parameters infos:

void ATgDevice_NewMelee::DeliverMeleeHit ( )
{
	static UFunction* pFnDeliverMeleeHit = NULL;

	if ( ! pFnDeliverMeleeHit )
		pFnDeliverMeleeHit = (UFunction*) UObject::GObjObjects()->Data[ 36390 ];

	ATgDevice_NewMelee_execDeliverMeleeHit_Parms DeliverMeleeHit_Parms;

	this->ProcessEvent ( pFnDeliverMeleeHit, &DeliverMeleeHit_Parms, NULL );
};

// Function TgGame.TgDevice_NewMelee.FireAmmunition
// [0x00020102] 
// Parameters infos:

void ATgDevice_NewMelee::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 36387 ];

	ATgDevice_NewMelee_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function TgGame.TgDevice_NewMelee.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDevice_NewMelee::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 36385 ];

	ATgDevice_NewMelee_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.SpawnPetFire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::SpawnPetFire ( )
{
	static UFunction* pFnSpawnPetFire = NULL;

	if ( ! pFnSpawnPetFire )
		pFnSpawnPetFire = (UFunction*) UObject::GObjObjects()->Data[ 36934 ];

	UTgDeviceFire_execSpawnPetFire_Parms SpawnPetFire_Parms;

	this->ProcessEvent ( pFnSpawnPetFire, &SpawnPetFire_Parms, NULL );

	return SpawnPetFire_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetConeAttackAngle
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::eventGetConeAttackAngle ( )
{
	static UFunction* pFnGetConeAttackAngle = NULL;

	if ( ! pFnGetConeAttackAngle )
		pFnGetConeAttackAngle = (UFunction*) UObject::GObjObjects()->Data[ 36932 ];

	UTgDeviceFire_eventGetConeAttackAngle_Parms GetConeAttackAngle_Parms;

	this->ProcessEvent ( pFnGetConeAttackAngle, &GetConeAttackAngle_Parms, NULL );

	return GetConeAttackAngle_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetAimChargeBuildupTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetAimChargeBuildupTime ( )
{
	static UFunction* pFnGetAimChargeBuildupTime = NULL;

	if ( ! pFnGetAimChargeBuildupTime )
		pFnGetAimChargeBuildupTime = (UFunction*) UObject::GObjObjects()->Data[ 36929 ];

	UTgDeviceFire_execGetAimChargeBuildupTime_Parms GetAimChargeBuildupTime_Parms;

	this->ProcessEvent ( pFnGetAimChargeBuildupTime, &GetAimChargeBuildupTime_Parms, NULL );

	return GetAimChargeBuildupTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetBuildupChargeTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetBuildupChargeTime ( )
{
	static UFunction* pFnGetBuildupChargeTime = NULL;

	if ( ! pFnGetBuildupChargeTime )
		pFnGetBuildupChargeTime = (UFunction*) UObject::GObjObjects()->Data[ 36926 ];

	UTgDeviceFire_execGetBuildupChargeTime_Parms GetBuildupChargeTime_Parms;

	this->ProcessEvent ( pFnGetBuildupChargeTime, &GetBuildupChargeTime_Parms, NULL );

	return GetBuildupChargeTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetContagiousRadius
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::eventGetContagiousRadius ( )
{
	static UFunction* pFnGetContagiousRadius = NULL;

	if ( ! pFnGetContagiousRadius )
		pFnGetContagiousRadius = (UFunction*) UObject::GObjObjects()->Data[ 36923 ];

	UTgDeviceFire_eventGetContagiousRadius_Parms GetContagiousRadius_Parms;

	this->ProcessEvent ( pFnGetContagiousRadius, &GetContagiousRadius_Parms, NULL );

	return GetContagiousRadius_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.PayAccuracyForWeaponSwitch
// [0x00020102] 
// Parameters infos:

void UTgDeviceFire::PayAccuracyForWeaponSwitch ( )
{
	static UFunction* pFnPayAccuracyForWeaponSwitch = NULL;

	if ( ! pFnPayAccuracyForWeaponSwitch )
		pFnPayAccuracyForWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 36921 ];

	UTgDeviceFire_execPayAccuracyForWeaponSwitch_Parms PayAccuracyForWeaponSwitch_Parms;

	this->ProcessEvent ( pFnPayAccuracyForWeaponSwitch, &PayAccuracyForWeaponSwitch_Parms, NULL );
};

// Function TgGame.TgDeviceFire.PayAccuracyForJump
// [0x00020102] 
// Parameters infos:

void UTgDeviceFire::PayAccuracyForJump ( )
{
	static UFunction* pFnPayAccuracyForJump = NULL;

	if ( ! pFnPayAccuracyForJump )
		pFnPayAccuracyForJump = (UFunction*) UObject::GObjObjects()->Data[ 36919 ];

	UTgDeviceFire_execPayAccuracyForJump_Parms PayAccuracyForJump_Parms;

	this->ProcessEvent ( pFnPayAccuracyForJump, &PayAccuracyForJump_Parms, NULL );
};

// Function TgGame.TgDeviceFire.PayAccuracyForShot
// [0x00020102] 
// Parameters infos:

void UTgDeviceFire::PayAccuracyForShot ( )
{
	static UFunction* pFnPayAccuracyForShot = NULL;

	if ( ! pFnPayAccuracyForShot )
		pFnPayAccuracyForShot = (UFunction*) UObject::GObjObjects()->Data[ 36917 ];

	UTgDeviceFire_execPayAccuracyForShot_Parms PayAccuracyForShot_Parms;

	this->ProcessEvent ( pFnPayAccuracyForShot, &PayAccuracyForShot_Parms, NULL );
};

// Function TgGame.TgDeviceFire.GetCooldownTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetCooldownTime ( )
{
	static UFunction* pFnGetCooldownTime = NULL;

	if ( ! pFnGetCooldownTime )
		pFnGetCooldownTime = (UFunction*) UObject::GObjObjects()->Data[ 36914 ];

	UTgDeviceFire_execGetCooldownTime_Parms GetCooldownTime_Parms;

	this->ProcessEvent ( pFnGetCooldownTime, &GetCooldownTime_Parms, NULL );

	return GetCooldownTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetBuildupTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetBuildupTime ( )
{
	static UFunction* pFnGetBuildupTime = NULL;

	if ( ! pFnGetBuildupTime )
		pFnGetBuildupTime = (UFunction*) UObject::GObjObjects()->Data[ 36912 ];

	UTgDeviceFire_execGetBuildupTime_Parms GetBuildupTime_Parms;

	this->ProcessEvent ( pFnGetBuildupTime, &GetBuildupTime_Parms, NULL );

	return GetBuildupTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetRefireTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetRefireTime ( )
{
	static UFunction* pFnGetRefireTime = NULL;

	if ( ! pFnGetRefireTime )
		pFnGetRefireTime = (UFunction*) UObject::GObjObjects()->Data[ 36909 ];

	UTgDeviceFire_execGetRefireTime_Parms GetRefireTime_Parms;

	this->ProcessEvent ( pFnGetRefireTime, &GetRefireTime_Parms, NULL );

	return GetRefireTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetTimeByAttackRate
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fTime                          ( CPF_Parm )

float UTgDeviceFire::GetTimeByAttackRate ( float fTime )
{
	static UFunction* pFnGetTimeByAttackRate = NULL;

	if ( ! pFnGetTimeByAttackRate )
		pFnGetTimeByAttackRate = (UFunction*) UObject::GObjObjects()->Data[ 36904 ];

	UTgDeviceFire_execGetTimeByAttackRate_Parms GetTimeByAttackRate_Parms;
	GetTimeByAttackRate_Parms.fTime = fTime;

	this->ProcessEvent ( pFnGetTimeByAttackRate, &GetTimeByAttackRate_Parms, NULL );

	return GetTimeByAttackRate_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetEquipModeTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetEquipModeTime ( )
{
	static UFunction* pFnGetEquipModeTime = NULL;

	if ( ! pFnGetEquipModeTime )
		pFnGetEquipModeTime = (UFunction*) UObject::GObjObjects()->Data[ 36902 ];

	UTgDeviceFire_execGetEquipModeTime_Parms GetEquipModeTime_Parms;

	this->ProcessEvent ( pFnGetEquipModeTime, &GetEquipModeTime_Parms, NULL );

	return GetEquipModeTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.UseRemoteTrigger
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::UseRemoteTrigger ( )
{
	static UFunction* pFnUseRemoteTrigger = NULL;

	if ( ! pFnUseRemoteTrigger )
		pFnUseRemoteTrigger = (UFunction*) UObject::GObjObjects()->Data[ 36900 ];

	UTgDeviceFire_execUseRemoteTrigger_Parms UseRemoteTrigger_Parms;

	this->ProcessEvent ( pFnUseRemoteTrigger, &UseRemoteTrigger_Parms, NULL );

	return UseRemoteTrigger_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsConeAttack
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsConeAttack ( )
{
	static UFunction* pFnIsConeAttack = NULL;

	if ( ! pFnIsConeAttack )
		pFnIsConeAttack = (UFunction*) UObject::GObjObjects()->Data[ 36898 ];

	UTgDeviceFire_execIsConeAttack_Parms IsConeAttack_Parms;

	this->ProcessEvent ( pFnIsConeAttack, &IsConeAttack_Parms, NULL );

	return IsConeAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsSelfTargeter
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsSelfTargeter ( )
{
	static UFunction* pFnIsSelfTargeter = NULL;

	if ( ! pFnIsSelfTargeter )
		pFnIsSelfTargeter = (UFunction*) UObject::GObjObjects()->Data[ 36896 ];

	UTgDeviceFire_execIsSelfTargeter_Parms IsSelfTargeter_Parms;

	this->ProcessEvent ( pFnIsSelfTargeter, &IsSelfTargeter_Parms, NULL );

	return IsSelfTargeter_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsFreeTargetMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::eventIsFreeTargetMode ( )
{
	static UFunction* pFnIsFreeTargetMode = NULL;

	if ( ! pFnIsFreeTargetMode )
		pFnIsFreeTargetMode = (UFunction*) UObject::GObjObjects()->Data[ 36894 ];

	UTgDeviceFire_eventIsFreeTargetMode_Parms IsFreeTargetMode_Parms;

	this->ProcessEvent ( pFnIsFreeTargetMode, &IsFreeTargetMode_Parms, NULL );

	return IsFreeTargetMode_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CheckForShieldHitAvoidance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )

bool UTgDeviceFire::CheckForShieldHitAvoidance ( class AActor* Target, class UTgEffectGroup* EffectGroup )
{
	static UFunction* pFnCheckForShieldHitAvoidance = NULL;

	if ( ! pFnCheckForShieldHitAvoidance )
		pFnCheckForShieldHitAvoidance = (UFunction*) UObject::GObjObjects()->Data[ 36887 ];

	UTgDeviceFire_execCheckForShieldHitAvoidance_Parms CheckForShieldHitAvoidance_Parms;
	CheckForShieldHitAvoidance_Parms.Target = Target;
	CheckForShieldHitAvoidance_Parms.EffectGroup = EffectGroup;

	this->ProcessEvent ( pFnCheckForShieldHitAvoidance, &CheckForShieldHitAvoidance_Parms, NULL );

	return CheckForShieldHitAvoidance_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.ShouldSituationalApplyEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )

bool UTgDeviceFire::ShouldSituationalApplyEffect ( class ATgPawn* TargetPawn, class UTgEffectGroup* EffectGroup )
{
	static UFunction* pFnShouldSituationalApplyEffect = NULL;

	if ( ! pFnShouldSituationalApplyEffect )
		pFnShouldSituationalApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 36882 ];

	UTgDeviceFire_execShouldSituationalApplyEffect_Parms ShouldSituationalApplyEffect_Parms;
	ShouldSituationalApplyEffect_Parms.TargetPawn = TargetPawn;
	ShouldSituationalApplyEffect_Parms.EffectGroup = EffectGroup;

	this->ProcessEvent ( pFnShouldSituationalApplyEffect, &ShouldSituationalApplyEffect_Parms, NULL );

	return ShouldSituationalApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.ValidateApplyHit
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

bool UTgDeviceFire::ValidateApplyHit ( struct FImpactInfo Impact )
{
	static UFunction* pFnValidateApplyHit = NULL;

	if ( ! pFnValidateApplyHit )
		pFnValidateApplyHit = (UFunction*) UObject::GObjObjects()->Data[ 36876 ];

	UTgDeviceFire_execValidateApplyHit_Parms ValidateApplyHit_Parms;
	memcpy ( &ValidateApplyHit_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnValidateApplyHit, &ValidateApplyHit_Parms, NULL );

	return ValidateApplyHit_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.SubmitHitEffects
// [0x00024002] 
// Parameters infos:
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// unsigned char                  eSource                        ( CPF_Parm )
// int                            nType                          ( CPF_Parm )
// int                            nSituationalType               ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceFire::SubmitHitEffects ( class AActor* DamageInstigator, struct FImpactInfo Impact, unsigned char eSource, int nType, int nSituationalType )
{
	static UFunction* pFnSubmitHitEffects = NULL;

	if ( ! pFnSubmitHitEffects )
		pFnSubmitHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 36864 ];

	UTgDeviceFire_execSubmitHitEffects_Parms SubmitHitEffects_Parms;
	SubmitHitEffects_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &SubmitHitEffects_Parms.Impact, &Impact, 0x60 );
	SubmitHitEffects_Parms.eSource = eSource;
	SubmitHitEffects_Parms.nType = nType;
	SubmitHitEffects_Parms.nSituationalType = nSituationalType;

	this->ProcessEvent ( pFnSubmitHitEffects, &SubmitHitEffects_Parms, NULL );
};

// Function TgGame.TgDeviceFire.ApplyHit
// [0x00820002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class AActor*                  DamageInstigator               ( CPF_Parm )

void UTgDeviceFire::ApplyHit ( struct FImpactInfo Impact, class AActor* DamageInstigator )
{
	static UFunction* pFnApplyHit = NULL;

	if ( ! pFnApplyHit )
		pFnApplyHit = (UFunction*) UObject::GObjObjects()->Data[ 36850 ];

	UTgDeviceFire_execApplyHit_Parms ApplyHit_Parms;
	memcpy ( &ApplyHit_Parms.Impact, &Impact, 0x60 );
	ApplyHit_Parms.DamageInstigator = DamageInstigator;

	this->ProcessEvent ( pFnApplyHit, &ApplyHit_Parms, NULL );
};

// Function TgGame.TgDeviceFire.TrackDeviceModeHit
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 Hitter                         ( CPF_Parm )
// float                          fDistance                      ( CPF_Parm )
// unsigned long                  bHitPlayer                     ( CPF_Parm )

void UTgDeviceFire::TrackDeviceModeHit ( class ATgPawn* Hitter, float fDistance, unsigned long bHitPlayer )
{
	static UFunction* pFnTrackDeviceModeHit = NULL;

	if ( ! pFnTrackDeviceModeHit )
		pFnTrackDeviceModeHit = (UFunction*) UObject::GObjObjects()->Data[ 36844 ];

	UTgDeviceFire_execTrackDeviceModeHit_Parms TrackDeviceModeHit_Parms;
	TrackDeviceModeHit_Parms.Hitter = Hitter;
	TrackDeviceModeHit_Parms.fDistance = fDistance;
	TrackDeviceModeHit_Parms.bHitPlayer = bHitPlayer;

	this->ProcessEvent ( pFnTrackDeviceModeHit, &TrackDeviceModeHit_Parms, NULL );
};

// Function TgGame.TgDeviceFire.IsValidAOETarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )

bool UTgDeviceFire::IsValidAOETarget ( class ATgPawn* P, struct FVector vHitLocation, float fRadius )
{
	static UFunction* pFnIsValidAOETarget = NULL;

	if ( ! pFnIsValidAOETarget )
		pFnIsValidAOETarget = (UFunction*) UObject::GObjObjects()->Data[ 36838 ];

	UTgDeviceFire_execIsValidAOETarget_Parms IsValidAOETarget_Parms;
	IsValidAOETarget_Parms.P = P;
	memcpy ( &IsValidAOETarget_Parms.vHitLocation, &vHitLocation, 0xC );
	IsValidAOETarget_Parms.fRadius = fRadius;

	this->ProcessEvent ( pFnIsValidAOETarget, &IsValidAOETarget_Parms, NULL );

	return IsValidAOETarget_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.RemoveEffectType
// [0x00820002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bForceRemove                   ( CPF_Parm )
// int                            nEffectGroupType               ( CPF_Parm )

void UTgDeviceFire::RemoveEffectType ( class AActor* Target, unsigned long bForceRemove, int nEffectGroupType )
{
	static UFunction* pFnRemoveEffectType = NULL;

	if ( ! pFnRemoveEffectType )
		pFnRemoveEffectType = (UFunction*) UObject::GObjObjects()->Data[ 36828 ];

	UTgDeviceFire_execRemoveEffectType_Parms RemoveEffectType_Parms;
	RemoveEffectType_Parms.Target = Target;
	RemoveEffectType_Parms.bForceRemove = bForceRemove;
	RemoveEffectType_Parms.nEffectGroupType = nEffectGroupType;

	this->ProcessEvent ( pFnRemoveEffectType, &RemoveEffectType_Parms, NULL );
};

// Function TgGame.TgDeviceFire.ApplyEffectType
// [0x00820002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// int                            nEffectGroupType               ( CPF_Parm )

void UTgDeviceFire::ApplyEffectType ( class AActor* Target, int nEffectGroupType )
{
	static UFunction* pFnApplyEffectType = NULL;

	if ( ! pFnApplyEffectType )
		pFnApplyEffectType = (UFunction*) UObject::GObjObjects()->Data[ 36819 ];

	UTgDeviceFire_execApplyEffectType_Parms ApplyEffectType_Parms;
	ApplyEffectType_Parms.Target = Target;
	ApplyEffectType_Parms.nEffectGroupType = nEffectGroupType;

	this->ProcessEvent ( pFnApplyEffectType, &ApplyEffectType_Parms, NULL );
};

// Function TgGame.TgDeviceFire.GetTargetName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AActor*                  TargetActor                    ( CPF_Parm )

struct FString UTgDeviceFire::GetTargetName ( class AActor* TargetActor )
{
	static UFunction* pFnGetTargetName = NULL;

	if ( ! pFnGetTargetName )
		pFnGetTargetName = (UFunction*) UObject::GObjObjects()->Data[ 36815 ];

	UTgDeviceFire_execGetTargetName_Parms GetTargetName_Parms;
	GetTargetName_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnGetTargetName, &GetTargetName_Parms, NULL );

	return GetTargetName_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CalcWeaponModeFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo UTgDeviceFire::CalcWeaponModeFire ( class AActor* DamageInstigator, struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponModeFire = NULL;

	if ( ! pFnCalcWeaponModeFire )
		pFnCalcWeaponModeFire = (UFunction*) UObject::GObjObjects()->Data[ 36807 ];

	UTgDeviceFire_execCalcWeaponModeFire_Parms CalcWeaponModeFire_Parms;
	CalcWeaponModeFire_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &CalcWeaponModeFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponModeFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcWeaponModeFire, &CalcWeaponModeFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponModeFire_Parms.ImpactList, 0xC );

	return CalcWeaponModeFire_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsInConeWithDir
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Dir                            ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FVector                 StartCone                      ( CPF_Parm )
// float                          coneHalf                       ( CPF_Parm )

bool UTgDeviceFire::IsInConeWithDir ( struct FVector Dir, class AActor* TargetActor, struct FVector StartCone, float coneHalf )
{
	static UFunction* pFnIsInConeWithDir = NULL;

	if ( ! pFnIsInConeWithDir )
		pFnIsInConeWithDir = (UFunction*) UObject::GObjObjects()->Data[ 36797 ];

	UTgDeviceFire_execIsInConeWithDir_Parms IsInConeWithDir_Parms;
	memcpy ( &IsInConeWithDir_Parms.Dir, &Dir, 0xC );
	IsInConeWithDir_Parms.TargetActor = TargetActor;
	memcpy ( &IsInConeWithDir_Parms.StartCone, &StartCone, 0xC );
	IsInConeWithDir_Parms.coneHalf = coneHalf;

	this->ProcessEvent ( pFnIsInConeWithDir, &IsInConeWithDir_Parms, NULL );

	return IsInConeWithDir_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsInCone
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FVector                 StartCone                      ( CPF_Parm )
// float                          coneHalf                       ( CPF_Parm )

bool UTgDeviceFire::IsInCone ( class AActor* SourceActor, class AActor* TargetActor, struct FVector StartCone, float coneHalf )
{
	static UFunction* pFnIsInCone = NULL;

	if ( ! pFnIsInCone )
		pFnIsInCone = (UFunction*) UObject::GObjObjects()->Data[ 36787 ];

	UTgDeviceFire_execIsInCone_Parms IsInCone_Parms;
	IsInCone_Parms.SourceActor = SourceActor;
	IsInCone_Parms.TargetActor = TargetActor;
	memcpy ( &IsInCone_Parms.StartCone, &StartCone, 0xC );
	IsInCone_Parms.coneHalf = coneHalf;

	this->ProcessEvent ( pFnIsInCone, &IsInCone_Parms, NULL );

	return IsInCone_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CalcAoeFire
// [0x00C20102] 
// Parameters infos:
// class AActor*                  DamageInstigator               ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UTgDeviceFire::CalcAoeFire ( class AActor* DamageInstigator, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcAoeFire = NULL;

	if ( ! pFnCalcAoeFire )
		pFnCalcAoeFire = (UFunction*) UObject::GObjObjects()->Data[ 36778 ];

	UTgDeviceFire_execCalcAoeFire_Parms CalcAoeFire_Parms;
	CalcAoeFire_Parms.DamageInstigator = DamageInstigator;

	this->ProcessEvent ( pFnCalcAoeFire, &CalcAoeFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcAoeFire_Parms.ImpactList, 0xC );
};

// Function TgGame.TgDeviceFire.IsTraceBlocked
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgDeviceFire::IsTraceBlocked ( class AActor* DamageInstigator, class AActor* Target )
{
	static UFunction* pFnIsTraceBlocked = NULL;

	if ( ! pFnIsTraceBlocked )
		pFnIsTraceBlocked = (UFunction*) UObject::GObjObjects()->Data[ 36770 ];

	UTgDeviceFire_execIsTraceBlocked_Parms IsTraceBlocked_Parms;
	IsTraceBlocked_Parms.DamageInstigator = DamageInstigator;
	IsTraceBlocked_Parms.Target = Target;

	this->ProcessEvent ( pFnIsTraceBlocked, &IsTraceBlocked_Parms, NULL );

	return IsTraceBlocked_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CalcConeFire
// [0x00C20102] 
// Parameters infos:
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UTgDeviceFire::CalcConeFire ( class AActor* DamageInstigator, struct FVector StartTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcConeFire = NULL;

	if ( ! pFnCalcConeFire )
		pFnCalcConeFire = (UFunction*) UObject::GObjObjects()->Data[ 36754 ];

	UTgDeviceFire_execCalcConeFire_Parms CalcConeFire_Parms;
	CalcConeFire_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &CalcConeFire_Parms.StartTrace, &StartTrace, 0xC );

	this->ProcessEvent ( pFnCalcConeFire, &CalcConeFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcConeFire_Parms.ImpactList, 0xC );
};

// Function TgGame.TgDeviceFire.CalcArcingFire
// [0x00C20102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo UTgDeviceFire::CalcArcingFire ( class AActor* DamageInstigator, struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcArcingFire = NULL;

	if ( ! pFnCalcArcingFire )
		pFnCalcArcingFire = (UFunction*) UObject::GObjObjects()->Data[ 36734 ];

	UTgDeviceFire_execCalcArcingFire_Parms CalcArcingFire_Parms;
	CalcArcingFire_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &CalcArcingFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcArcingFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcArcingFire, &CalcArcingFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcArcingFire_Parms.ImpactList, 0xC );

	return CalcArcingFire_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CalcInstantFire
// [0x00C20102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo UTgDeviceFire::CalcInstantFire ( class AActor* DamageInstigator, struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcInstantFire = NULL;

	if ( ! pFnCalcInstantFire )
		pFnCalcInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 36722 ];

	UTgDeviceFire_execCalcInstantFire_Parms CalcInstantFire_Parms;
	CalcInstantFire_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &CalcInstantFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcInstantFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcInstantFire, &CalcInstantFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcInstantFire_Parms.ImpactList, 0xC );

	return CalcInstantFire_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.LinePointDist
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 A                              ( CPF_Parm )
// struct FVector                 B                              ( CPF_Parm )
// struct FVector                 pt                             ( CPF_Parm )

float UTgDeviceFire::LinePointDist ( struct FVector A, struct FVector B, struct FVector pt )
{
	static UFunction* pFnLinePointDist = NULL;

	if ( ! pFnLinePointDist )
		pFnLinePointDist = (UFunction*) UObject::GObjObjects()->Data[ 36713 ];

	UTgDeviceFire_execLinePointDist_Parms LinePointDist_Parms;
	memcpy ( &LinePointDist_Parms.A, &A, 0xC );
	memcpy ( &LinePointDist_Parms.B, &B, 0xC );
	memcpy ( &LinePointDist_Parms.pt, &pt, 0xC );

	this->ProcessEvent ( pFnLinePointDist, &LinePointDist_Parms, NULL );

	return LinePointDist_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.DrawCheeseSlice
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  DamageInstigator               ( CPF_Parm )
// struct FVector                 FacingDir                      ( CPF_Parm )
// struct FVector                 StartCone                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          ConeSetBack                    ( CPF_Parm )
// float                          ConeAngle                      ( CPF_Parm )

void UTgDeviceFire::eventDrawCheeseSlice ( class AActor* DamageInstigator, struct FVector FacingDir, struct FVector StartCone, float Radius, float ConeSetBack, float ConeAngle )
{
	static UFunction* pFnDrawCheeseSlice = NULL;

	if ( ! pFnDrawCheeseSlice )
		pFnDrawCheeseSlice = (UFunction*) UObject::GObjObjects()->Data[ 36703 ];

	UTgDeviceFire_eventDrawCheeseSlice_Parms DrawCheeseSlice_Parms;
	DrawCheeseSlice_Parms.DamageInstigator = DamageInstigator;
	memcpy ( &DrawCheeseSlice_Parms.FacingDir, &FacingDir, 0xC );
	memcpy ( &DrawCheeseSlice_Parms.StartCone, &StartCone, 0xC );
	DrawCheeseSlice_Parms.Radius = Radius;
	DrawCheeseSlice_Parms.ConeSetBack = ConeSetBack;
	DrawCheeseSlice_Parms.ConeAngle = ConeAngle;

	this->ProcessEvent ( pFnDrawCheeseSlice, &DrawCheeseSlice_Parms, NULL );
};

// Function TgGame.TgDeviceFire.DrawPie
// [0x00820102] 
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )
// float                          Angle                          ( CPF_Parm )

void UTgDeviceFire::DrawPie ( struct FVector Center, float Radius, struct FVector Dir, float Angle )
{
	static UFunction* pFnDrawPie = NULL;

	if ( ! pFnDrawPie )
		pFnDrawPie = (UFunction*) UObject::GObjObjects()->Data[ 36690 ];

	UTgDeviceFire_execDrawPie_Parms DrawPie_Parms;
	memcpy ( &DrawPie_Parms.Center, &Center, 0xC );
	DrawPie_Parms.Radius = Radius;
	memcpy ( &DrawPie_Parms.Dir, &Dir, 0xC );
	DrawPie_Parms.Angle = Angle;

	this->ProcessEvent ( pFnDrawPie, &DrawPie_Parms, NULL );
};

// Function TgGame.TgDeviceFire.IsValidTraceTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool UTgDeviceFire::IsValidTraceTarget ( class AActor* P )
{
	static UFunction* pFnIsValidTraceTarget = NULL;

	if ( ! pFnIsValidTraceTarget )
		pFnIsValidTraceTarget = (UFunction*) UObject::GObjObjects()->Data[ 36687 ];

	UTgDeviceFire_execIsValidTraceTarget_Parms IsValidTraceTarget_Parms;
	IsValidTraceTarget_Parms.P = P;

	this->ProcessEvent ( pFnIsValidTraceTarget, &IsValidTraceTarget_Parms, NULL );

	return IsValidTraceTarget_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.DisplayMessage
// [0x00020102] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void UTgDeviceFire::DisplayMessage ( struct FString sMessage )
{
	static UFunction* pFnDisplayMessage = NULL;

	if ( ! pFnDisplayMessage )
		pFnDisplayMessage = (UFunction*) UObject::GObjObjects()->Data[ 36685 ];

	UTgDeviceFire_execDisplayMessage_Parms DisplayMessage_Parms;
	memcpy ( &DisplayMessage_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnDisplayMessage, &DisplayMessage_Parms, NULL );
};

// Function TgGame.TgDeviceFire.CheckSimutainousFiring
// [0x00020102] 
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDevice* UTgDeviceFire::CheckSimutainousFiring ( )
{
	static UFunction* pFnCheckSimutainousFiring = NULL;

	if ( ! pFnCheckSimutainousFiring )
		pFnCheckSimutainousFiring = (UFunction*) UObject::GObjObjects()->Data[ 36678 ];

	UTgDeviceFire_execCheckSimutainousFiring_Parms CheckSimutainousFiring_Parms;

	this->ProcessEvent ( pFnCheckSimutainousFiring, &CheckSimutainousFiring_Parms, NULL );

	return CheckSimutainousFiring_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetAttackRate
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetAttackRate ( )
{
	static UFunction* pFnGetAttackRate = NULL;

	if ( ! pFnGetAttackRate )
		pFnGetAttackRate = (UFunction*) UObject::GObjObjects()->Data[ 36675 ];

	UTgDeviceFire_execGetAttackRate_Parms GetAttackRate_Parms;

	this->ProcessEvent ( pFnGetAttackRate, &GetAttackRate_Parms, NULL );

	return GetAttackRate_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetAttackRating
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgDeviceFire::GetAttackRating ( )
{
	static UFunction* pFnGetAttackRating = NULL;

	if ( ! pFnGetAttackRating )
		pFnGetAttackRating = (UFunction*) UObject::GObjObjects()->Data[ 36672 ];

	UTgDeviceFire_execGetAttackRating_Parms GetAttackRating_Parms;

	this->ProcessEvent ( pFnGetAttackRating, &GetAttackRating_Parms, NULL );

	return GetAttackRating_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetInterruptionChance
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::eventGetInterruptionChance ( )
{
	static UFunction* pFnGetInterruptionChance = NULL;

	if ( ! pFnGetInterruptionChance )
		pFnGetInterruptionChance = (UFunction*) UObject::GObjObjects()->Data[ 36668 ];

	UTgDeviceFire_eventGetInterruptionChance_Parms GetInterruptionChance_Parms;

	this->ProcessEvent ( pFnGetInterruptionChance, &GetInterruptionChance_Parms, NULL );

	return GetInterruptionChance_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetNetEffectiveRangeReduction
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class AActor*                  DamageInstigator               ( CPF_Parm )

float UTgDeviceFire::GetNetEffectiveRangeReduction ( struct FImpactInfo Impact, class AActor* DamageInstigator )
{
	static UFunction* pFnGetNetEffectiveRangeReduction = NULL;

	if ( ! pFnGetNetEffectiveRangeReduction )
		pFnGetNetEffectiveRangeReduction = (UFunction*) UObject::GObjObjects()->Data[ 36660 ];

	UTgDeviceFire_execGetNetEffectiveRangeReduction_Parms GetNetEffectiveRangeReduction_Parms;
	memcpy ( &GetNetEffectiveRangeReduction_Parms.Impact, &Impact, 0x60 );
	GetNetEffectiveRangeReduction_Parms.DamageInstigator = DamageInstigator;

	this->ProcessEvent ( pFnGetNetEffectiveRangeReduction, &GetNetEffectiveRangeReduction_Parms, NULL );

	return GetNetEffectiveRangeReduction_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.SubmitEffect
// [0x00024002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceFire::SubmitEffect ( struct FImpactInfo Impact, class UTgEffectGroup* EffectGroup, unsigned long bRemove )
{
	static UFunction* pFnSubmitEffect = NULL;

	if ( ! pFnSubmitEffect )
		pFnSubmitEffect = (UFunction*) UObject::GObjObjects()->Data[ 36655 ];

	UTgDeviceFire_execSubmitEffect_Parms SubmitEffect_Parms;
	memcpy ( &SubmitEffect_Parms.Impact, &Impact, 0x60 );
	SubmitEffect_Parms.EffectGroup = EffectGroup;
	SubmitEffect_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnSubmitEffect, &SubmitEffect_Parms, NULL );
};

// Function TgGame.TgDeviceFire.IsDecoyEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsDecoyEffect ( )
{
	static UFunction* pFnIsDecoyEffect = NULL;

	if ( ! pFnIsDecoyEffect )
		pFnIsDecoyEffect = (UFunction*) UObject::GObjObjects()->Data[ 36652 ];

	UTgDeviceFire_execIsDecoyEffect_Parms IsDecoyEffect_Parms;

	this->ProcessEvent ( pFnIsDecoyEffect, &IsDecoyEffect_Parms, NULL );

	return IsDecoyEffect_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.Deactivate
// [0x00020102] 
// Parameters infos:

void UTgDeviceFire::Deactivate ( )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 36651 ];

	UTgDeviceFire_execDeactivate_Parms Deactivate_Parms;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );
};

// Function TgGame.TgDeviceFire.Activate
// [0x00020102] 
// Parameters infos:

void UTgDeviceFire::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 36650 ];

	UTgDeviceFire_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function TgGame.TgDeviceFire.GetShotPowerMinCost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetShotPowerMinCost ( )
{
	static UFunction* pFnGetShotPowerMinCost = NULL;

	if ( ! pFnGetShotPowerMinCost )
		pFnGetShotPowerMinCost = (UFunction*) UObject::GObjObjects()->Data[ 36648 ];

	UTgDeviceFire_execGetShotPowerMinCost_Parms GetShotPowerMinCost_Parms;

	pFnGetShotPowerMinCost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetShotPowerMinCost, &GetShotPowerMinCost_Parms, NULL );

	pFnGetShotPowerMinCost->FunctionFlags |= 0x400;

	return GetShotPowerMinCost_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetBlockPowerCost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetBlockPowerCost ( )
{
	static UFunction* pFnGetBlockPowerCost = NULL;

	if ( ! pFnGetBlockPowerCost )
		pFnGetBlockPowerCost = (UFunction*) UObject::GObjObjects()->Data[ 36646 ];

	UTgDeviceFire_execGetBlockPowerCost_Parms GetBlockPowerCost_Parms;

	pFnGetBlockPowerCost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBlockPowerCost, &GetBlockPowerCost_Parms, NULL );

	pFnGetBlockPowerCost->FunctionFlags |= 0x400;

	return GetBlockPowerCost_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetShotPowerCost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetShotPowerCost ( )
{
	static UFunction* pFnGetShotPowerCost = NULL;

	if ( ! pFnGetShotPowerCost )
		pFnGetShotPowerCost = (UFunction*) UObject::GObjObjects()->Data[ 36644 ];

	UTgDeviceFire_execGetShotPowerCost_Parms GetShotPowerCost_Parms;

	pFnGetShotPowerCost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetShotPowerCost, &GetShotPowerCost_Parms, NULL );

	pFnGetShotPowerCost->FunctionFlags |= 0x400;

	return GetShotPowerCost_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsArcingAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsArcingAttack ( )
{
	static UFunction* pFnIsArcingAttack = NULL;

	if ( ! pFnIsArcingAttack )
		pFnIsArcingAttack = (UFunction*) UObject::GObjObjects()->Data[ 36642 ];

	UTgDeviceFire_execIsArcingAttack_Parms IsArcingAttack_Parms;

	pFnIsArcingAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsArcingAttack, &IsArcingAttack_Parms, NULL );

	pFnIsArcingAttack->FunctionFlags |= 0x400;

	return IsArcingAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsRangedAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsRangedAttack ( )
{
	static UFunction* pFnIsRangedAttack = NULL;

	if ( ! pFnIsRangedAttack )
		pFnIsRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 36640 ];

	UTgDeviceFire_execIsRangedAttack_Parms IsRangedAttack_Parms;

	pFnIsRangedAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRangedAttack, &IsRangedAttack_Parms, NULL );

	pFnIsRangedAttack->FunctionFlags |= 0x400;

	return IsRangedAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsMeleeAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::IsMeleeAttack ( )
{
	static UFunction* pFnIsMeleeAttack = NULL;

	if ( ! pFnIsMeleeAttack )
		pFnIsMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 36638 ];

	UTgDeviceFire_execIsMeleeAttack_Parms IsMeleeAttack_Parms;

	pFnIsMeleeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMeleeAttack, &IsMeleeAttack_Parms, NULL );

	pFnIsMeleeAttack->FunctionFlags |= 0x400;

	return IsMeleeAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.ShouldAddToImpactList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_NeedCtorLink )

bool UTgDeviceFire::ShouldAddToImpactList ( class AActor* HitActor, TArray< struct FImpactInfo > ImpactList )
{
	static UFunction* pFnShouldAddToImpactList = NULL;

	if ( ! pFnShouldAddToImpactList )
		pFnShouldAddToImpactList = (UFunction*) UObject::GObjObjects()->Data[ 36633 ];

	UTgDeviceFire_execShouldAddToImpactList_Parms ShouldAddToImpactList_Parms;
	ShouldAddToImpactList_Parms.HitActor = HitActor;
	memcpy ( &ShouldAddToImpactList_Parms.ImpactList, &ImpactList, 0xC );

	pFnShouldAddToImpactList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldAddToImpactList, &ShouldAddToImpactList_Parms, NULL );

	pFnShouldAddToImpactList->FunctionFlags |= 0x400;

	return ShouldAddToImpactList_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsInSlice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FVector                 StartCone                      ( CPF_Parm )
// float                          ConeAngle                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool UTgDeviceFire::IsInSlice ( class AActor* SourceActor, class AActor* TargetActor, struct FVector StartCone, float ConeAngle, float Radius )
{
	static UFunction* pFnIsInSlice = NULL;

	if ( ! pFnIsInSlice )
		pFnIsInSlice = (UFunction*) UObject::GObjObjects()->Data[ 36626 ];

	UTgDeviceFire_execIsInSlice_Parms IsInSlice_Parms;
	IsInSlice_Parms.SourceActor = SourceActor;
	IsInSlice_Parms.TargetActor = TargetActor;
	memcpy ( &IsInSlice_Parms.StartCone, &StartCone, 0xC );
	IsInSlice_Parms.ConeAngle = ConeAngle;
	IsInSlice_Parms.Radius = Radius;

	pFnIsInSlice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSlice, &IsInSlice_Parms, NULL );

	pFnIsInSlice->FunctionFlags |= 0x400;

	return IsInSlice_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CalcMeleeAttack
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo UTgDeviceFire::CalcMeleeAttack ( class AActor* DamageInstigator, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcMeleeAttack = NULL;

	if ( ! pFnCalcMeleeAttack )
		pFnCalcMeleeAttack = (UFunction*) UObject::GObjObjects()->Data[ 36621 ];

	UTgDeviceFire_execCalcMeleeAttack_Parms CalcMeleeAttack_Parms;
	CalcMeleeAttack_Parms.DamageInstigator = DamageInstigator;

	pFnCalcMeleeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcMeleeAttack, &CalcMeleeAttack_Parms, NULL );

	pFnCalcMeleeAttack->FunctionFlags |= 0x400;

	if ( ImpactList )
		memcpy ( ImpactList, &CalcMeleeAttack_Parms.ImpactList, 0xC );

	return CalcMeleeAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsBlockedByBlocker
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  DamageInstigator               ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// class AActor*                  OriginActor                    ( CPF_OptionalParm | CPF_Parm )

bool UTgDeviceFire::IsBlockedByBlocker ( class AActor* DamageInstigator, class AActor* Target, class AActor* OriginActor )
{
	static UFunction* pFnIsBlockedByBlocker = NULL;

	if ( ! pFnIsBlockedByBlocker )
		pFnIsBlockedByBlocker = (UFunction*) UObject::GObjObjects()->Data[ 36616 ];

	UTgDeviceFire_execIsBlockedByBlocker_Parms IsBlockedByBlocker_Parms;
	IsBlockedByBlocker_Parms.DamageInstigator = DamageInstigator;
	IsBlockedByBlocker_Parms.Target = Target;
	IsBlockedByBlocker_Parms.OriginActor = OriginActor;

	pFnIsBlockedByBlocker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBlockedByBlocker, &IsBlockedByBlocker_Parms, NULL );

	pFnIsBlockedByBlocker->FunctionFlags |= 0x400;

	return IsBlockedByBlocker_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetTraceImpact
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TraceActor                     ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )

struct FImpactInfo UTgDeviceFire::GetTraceImpact ( class AActor* TraceActor, struct FVector StartTrace, struct FVector EndTrace )
{
	static UFunction* pFnGetTraceImpact = NULL;

	if ( ! pFnGetTraceImpact )
		pFnGetTraceImpact = (UFunction*) UObject::GObjObjects()->Data[ 36611 ];

	UTgDeviceFire_execGetTraceImpact_Parms GetTraceImpact_Parms;
	GetTraceImpact_Parms.TraceActor = TraceActor;
	memcpy ( &GetTraceImpact_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &GetTraceImpact_Parms.EndTrace, &EndTrace, 0xC );

	pFnGetTraceImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTraceImpact, &GetTraceImpact_Parms, NULL );

	pFnGetTraceImpact->FunctionFlags |= 0x400;

	return GetTraceImpact_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsEnemy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TargetActor                    ( CPF_Parm )

bool UTgDeviceFire::IsEnemy ( class AActor* TargetActor )
{
	static UFunction* pFnIsEnemy = NULL;

	if ( ! pFnIsEnemy )
		pFnIsEnemy = (UFunction*) UObject::GObjObjects()->Data[ 36608 ];

	UTgDeviceFire_execIsEnemy_Parms IsEnemy_Parms;
	IsEnemy_Parms.TargetActor = TargetActor;

	pFnIsEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnemy, &IsEnemy_Parms, NULL );

	pFnIsEnemy->FunctionFlags |= 0x400;

	return IsEnemy_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsSelfOrOwner
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgDeviceFire::IsSelfOrOwner ( class AActor* Target )
{
	static UFunction* pFnIsSelfOrOwner = NULL;

	if ( ! pFnIsSelfOrOwner )
		pFnIsSelfOrOwner = (UFunction*) UObject::GObjObjects()->Data[ 36605 ];

	UTgDeviceFire_execIsSelfOrOwner_Parms IsSelfOrOwner_Parms;
	IsSelfOrOwner_Parms.Target = Target;

	pFnIsSelfOrOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSelfOrOwner, &IsSelfOrOwner_Parms, NULL );

	pFnIsSelfOrOwner->FunctionFlags |= 0x400;

	return IsSelfOrOwner_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsValidTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )
// unsigned char                  eTargeterType                  ( CPF_OptionalParm | CPF_Parm )

bool UTgDeviceFire::IsValidTarget ( class AActor* P, unsigned char eTargeterType )
{
	static UFunction* pFnIsValidTarget = NULL;

	if ( ! pFnIsValidTarget )
		pFnIsValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 36601 ];

	UTgDeviceFire_execIsValidTarget_Parms IsValidTarget_Parms;
	IsValidTarget_Parms.P = P;
	IsValidTarget_Parms.eTargeterType = eTargeterType;

	pFnIsValidTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTarget, &IsValidTarget_Parms, NULL );

	pFnIsValidTarget->FunctionFlags |= 0x400;

	return IsValidTarget_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CheckTeamPassThrough
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool UTgDeviceFire::CheckTeamPassThrough ( class AActor* HitActor )
{
	static UFunction* pFnCheckTeamPassThrough = NULL;

	if ( ! pFnCheckTeamPassThrough )
		pFnCheckTeamPassThrough = (UFunction*) UObject::GObjObjects()->Data[ 36598 ];

	UTgDeviceFire_execCheckTeamPassThrough_Parms CheckTeamPassThrough_Parms;
	CheckTeamPassThrough_Parms.HitActor = HitActor;

	pFnCheckTeamPassThrough->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTeamPassThrough, &CheckTeamPassThrough_Parms, NULL );

	pFnCheckTeamPassThrough->FunctionFlags |= 0x400;

	return CheckTeamPassThrough_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsWithinEffectiveRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistance                      ( CPF_Parm )

bool UTgDeviceFire::IsWithinEffectiveRange ( float fDistance )
{
	static UFunction* pFnIsWithinEffectiveRange = NULL;

	if ( ! pFnIsWithinEffectiveRange )
		pFnIsWithinEffectiveRange = (UFunction*) UObject::GObjObjects()->Data[ 36595 ];

	UTgDeviceFire_execIsWithinEffectiveRange_Parms IsWithinEffectiveRange_Parms;
	IsWithinEffectiveRange_Parms.fDistance = fDistance;

	pFnIsWithinEffectiveRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWithinEffectiveRange, &IsWithinEffectiveRange_Parms, NULL );

	pFnIsWithinEffectiveRange->FunctionFlags |= 0x400;

	return IsWithinEffectiveRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsWithinRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistance                      ( CPF_Parm )

bool UTgDeviceFire::IsWithinRange ( float fDistance )
{
	static UFunction* pFnIsWithinRange = NULL;

	if ( ! pFnIsWithinRange )
		pFnIsWithinRange = (UFunction*) UObject::GObjObjects()->Data[ 36592 ];

	UTgDeviceFire_execIsWithinRange_Parms IsWithinRange_Parms;
	IsWithinRange_Parms.fDistance = fDistance;

	pFnIsWithinRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWithinRange, &IsWithinRange_Parms, NULL );

	pFnIsWithinRange->FunctionFlags |= 0x400;

	return IsWithinRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetEffectiveRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetEffectiveRange ( )
{
	static UFunction* pFnGetEffectiveRange = NULL;

	if ( ! pFnGetEffectiveRange )
		pFnGetEffectiveRange = (UFunction*) UObject::GObjObjects()->Data[ 36590 ];

	UTgDeviceFire_execGetEffectiveRange_Parms GetEffectiveRange_Parms;

	pFnGetEffectiveRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectiveRange, &GetEffectiveRange_Parms, NULL );

	pFnGetEffectiveRange->FunctionFlags |= 0x400;

	return GetEffectiveRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetMinRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetMinRange ( )
{
	static UFunction* pFnGetMinRange = NULL;

	if ( ! pFnGetMinRange )
		pFnGetMinRange = (UFunction*) UObject::GObjObjects()->Data[ 36588 ];

	UTgDeviceFire_execGetMinRange_Parms GetMinRange_Parms;

	pFnGetMinRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMinRange, &GetMinRange_Parms, NULL );

	pFnGetMinRange->FunctionFlags |= 0x400;

	return GetMinRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 36586 ];

	UTgDeviceFire_execGetRange_Parms GetRange_Parms;

	pFnGetRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	pFnGetRange->FunctionFlags |= 0x400;

	return GetRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetRequiredMoralePoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetRequiredMoralePoints ( )
{
	static UFunction* pFnGetRequiredMoralePoints = NULL;

	if ( ! pFnGetRequiredMoralePoints )
		pFnGetRequiredMoralePoints = (UFunction*) UObject::GObjObjects()->Data[ 36584 ];

	UTgDeviceFire_execGetRequiredMoralePoints_Parms GetRequiredMoralePoints_Parms;

	pFnGetRequiredMoralePoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRequiredMoralePoints, &GetRequiredMoralePoints_Parms, NULL );

	pFnGetRequiredMoralePoints->FunctionFlags |= 0x400;

	return GetRequiredMoralePoints_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetProjectileSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetProjectileSpeed ( )
{
	static UFunction* pFnGetProjectileSpeed = NULL;

	if ( ! pFnGetProjectileSpeed )
		pFnGetProjectileSpeed = (UFunction*) UObject::GObjObjects()->Data[ 36582 ];

	UTgDeviceFire_execGetProjectileSpeed_Parms GetProjectileSpeed_Parms;

	pFnGetProjectileSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectileSpeed, &GetProjectileSpeed_Parms, NULL );

	pFnGetProjectileSpeed->FunctionFlags |= 0x400;

	return GetProjectileSpeed_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetDeployTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetDeployTime ( )
{
	static UFunction* pFnGetDeployTime = NULL;

	if ( ! pFnGetDeployTime )
		pFnGetDeployTime = (UFunction*) UObject::GObjObjects()->Data[ 36580 ];

	UTgDeviceFire_execGetDeployTime_Parms GetDeployTime_Parms;

	pFnGetDeployTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeployTime, &GetDeployTime_Parms, NULL );

	pFnGetDeployTime->FunctionFlags |= 0x400;

	return GetDeployTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetPetControlRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetPetControlRange ( )
{
	static UFunction* pFnGetPetControlRange = NULL;

	if ( ! pFnGetPetControlRange )
		pFnGetPetControlRange = (UFunction*) UObject::GObjObjects()->Data[ 36578 ];

	UTgDeviceFire_execGetPetControlRange_Parms GetPetControlRange_Parms;

	pFnGetPetControlRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPetControlRange, &GetPetControlRange_Parms, NULL );

	pFnGetPetControlRange->FunctionFlags |= 0x400;

	return GetPetControlRange_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetPetLifeSpan
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetPetLifeSpan ( )
{
	static UFunction* pFnGetPetLifeSpan = NULL;

	if ( ! pFnGetPetLifeSpan )
		pFnGetPetLifeSpan = (UFunction*) UObject::GObjObjects()->Data[ 36576 ];

	UTgDeviceFire_execGetPetLifeSpan_Parms GetPetLifeSpan_Parms;

	pFnGetPetLifeSpan->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPetLifeSpan, &GetPetLifeSpan_Parms, NULL );

	pFnGetPetLifeSpan->FunctionFlags |= 0x400;

	return GetPetLifeSpan_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetEffectiveRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetEffectiveRadius ( )
{
	static UFunction* pFnGetEffectiveRadius = NULL;

	if ( ! pFnGetEffectiveRadius )
		pFnGetEffectiveRadius = (UFunction*) UObject::GObjObjects()->Data[ 36574 ];

	UTgDeviceFire_execGetEffectiveRadius_Parms GetEffectiveRadius_Parms;

	pFnGetEffectiveRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectiveRadius, &GetEffectiveRadius_Parms, NULL );

	pFnGetEffectiveRadius->FunctionFlags |= 0x400;

	return GetEffectiveRadius_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetRemoteActivationTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetRemoteActivationTime ( )
{
	static UFunction* pFnGetRemoteActivationTime = NULL;

	if ( ! pFnGetRemoteActivationTime )
		pFnGetRemoteActivationTime = (UFunction*) UObject::GObjObjects()->Data[ 36572 ];

	UTgDeviceFire_execGetRemoteActivationTime_Parms GetRemoteActivationTime_Parms;

	pFnGetRemoteActivationTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRemoteActivationTime, &GetRemoteActivationTime_Parms, NULL );

	pFnGetRemoteActivationTime->FunctionFlags |= 0x400;

	return GetRemoteActivationTime_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetDamageRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 36570 ];

	UTgDeviceFire_execGetDamageRadius_Parms GetDamageRadius_Parms;

	pFnGetDamageRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	pFnGetDamageRadius->FunctionFlags |= 0x400;

	return GetDamageRadius_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.RestoreAccuracy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fTimeStep                      ( CPF_Parm )

void UTgDeviceFire::RestoreAccuracy ( float fTimeStep )
{
	static UFunction* pFnRestoreAccuracy = NULL;

	if ( ! pFnRestoreAccuracy )
		pFnRestoreAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 36568 ];

	UTgDeviceFire_execRestoreAccuracy_Parms RestoreAccuracy_Parms;
	RestoreAccuracy_Parms.fTimeStep = fTimeStep;

	pFnRestoreAccuracy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreAccuracy, &RestoreAccuracy_Parms, NULL );

	pFnRestoreAccuracy->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.GetTargetAccuracy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetTargetAccuracy ( )
{
	static UFunction* pFnGetTargetAccuracy = NULL;

	if ( ! pFnGetTargetAccuracy )
		pFnGetTargetAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 36566 ];

	UTgDeviceFire_execGetTargetAccuracy_Parms GetTargetAccuracy_Parms;

	pFnGetTargetAccuracy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetAccuracy, &GetTargetAccuracy_Parms, NULL );

	pFnGetTargetAccuracy->FunctionFlags |= 0x400;

	return GetTargetAccuracy_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetAccuracy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgDeviceFire::GetAccuracy ( )
{
	static UFunction* pFnGetAccuracy = NULL;

	if ( ! pFnGetAccuracy )
		pFnGetAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 36564 ];

	UTgDeviceFire_execGetAccuracy_Parms GetAccuracy_Parms;

	pFnGetAccuracy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAccuracy, &GetAccuracy_Parms, NULL );

	pFnGetAccuracy->FunctionFlags |= 0x400;

	return GetAccuracy_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.WillFireTrackingMissile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::WillFireTrackingMissile ( )
{
	static UFunction* pFnWillFireTrackingMissile = NULL;

	if ( ! pFnWillFireTrackingMissile )
		pFnWillFireTrackingMissile = (UFunction*) UObject::GObjObjects()->Data[ 36562 ];

	UTgDeviceFire_execWillFireTrackingMissile_Parms WillFireTrackingMissile_Parms;

	pFnWillFireTrackingMissile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWillFireTrackingMissile, &WillFireTrackingMissile_Parms, NULL );

	pFnWillFireTrackingMissile->FunctionFlags |= 0x400;

	return WillFireTrackingMissile_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.WillSpawnStickyProjectile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::WillSpawnStickyProjectile ( )
{
	static UFunction* pFnWillSpawnStickyProjectile = NULL;

	if ( ! pFnWillSpawnStickyProjectile )
		pFnWillSpawnStickyProjectile = (UFunction*) UObject::GObjObjects()->Data[ 36560 ];

	UTgDeviceFire_execWillSpawnStickyProjectile_Parms WillSpawnStickyProjectile_Parms;

	pFnWillSpawnStickyProjectile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWillSpawnStickyProjectile, &WillSpawnStickyProjectile_Parms, NULL );

	pFnWillSpawnStickyProjectile->FunctionFlags |= 0x400;

	return WillSpawnStickyProjectile_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.LogDebugInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceFire::LogDebugInfo ( )
{
	static UFunction* pFnLogDebugInfo = NULL;

	if ( ! pFnLogDebugInfo )
		pFnLogDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 36558 ];

	UTgDeviceFire_execLogDebugInfo_Parms LogDebugInfo_Parms;

	pFnLogDebugInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDebugInfo, &LogDebugInfo_Parms, NULL );

	pFnLogDebugInfo->FunctionFlags |= 0x400;

	return LogDebugInfo_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.VerifyProjectile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceFire::VerifyProjectile ( )
{
	static UFunction* pFnVerifyProjectile = NULL;

	if ( ! pFnVerifyProjectile )
		pFnVerifyProjectile = (UFunction*) UObject::GObjObjects()->Data[ 36557 ];

	UTgDeviceFire_execVerifyProjectile_Parms VerifyProjectile_Parms;

	pFnVerifyProjectile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyProjectile, &VerifyProjectile_Parms, NULL );

	pFnVerifyProjectile->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.GetDeviceFireName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UTgDeviceFire::GetDeviceFireName ( )
{
	static UFunction* pFnGetDeviceFireName = NULL;

	if ( ! pFnGetDeviceFireName )
		pFnGetDeviceFireName = (UFunction*) UObject::GObjObjects()->Data[ 36555 ];

	UTgDeviceFire_execGetDeviceFireName_Parms GetDeviceFireName_Parms;

	pFnGetDeviceFireName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceFireName, &GetDeviceFireName_Parms, NULL );

	pFnGetDeviceFireName->FunctionFlags |= 0x400;

	return GetDeviceFireName_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.IsBlockedByGeometry
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_Parm )

bool UTgDeviceFire::IsBlockedByGeometry ( class AActor* SourceActor, class AActor* TargetActor )
{
	static UFunction* pFnIsBlockedByGeometry = NULL;

	if ( ! pFnIsBlockedByGeometry )
		pFnIsBlockedByGeometry = (UFunction*) UObject::GObjObjects()->Data[ 36551 ];

	UTgDeviceFire_execIsBlockedByGeometry_Parms IsBlockedByGeometry_Parms;
	IsBlockedByGeometry_Parms.SourceActor = SourceActor;
	IsBlockedByGeometry_Parms.TargetActor = TargetActor;

	pFnIsBlockedByGeometry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBlockedByGeometry, &IsBlockedByGeometry_Parms, NULL );

	pFnIsBlockedByGeometry->FunctionFlags |= 0x400;

	return IsBlockedByGeometry_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.QueryClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nMode                          ( CPF_Parm )

struct FName UTgDeviceFire::QueryClass ( int nMode )
{
	static UFunction* pFnQueryClass = NULL;

	if ( ! pFnQueryClass )
		pFnQueryClass = (UFunction*) UObject::GObjObjects()->Data[ 36548 ];

	UTgDeviceFire_execQueryClass_Parms QueryClass_Parms;
	QueryClass_Parms.nMode = nMode;

	pFnQueryClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryClass, &QueryClass_Parms, NULL );

	pFnQueryClass->FunctionFlags |= 0x400;

	return QueryClass_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetEffectGroup
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nType                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm | CPF_OutParm )

class UTgEffectGroup* UTgDeviceFire::GetEffectGroup ( int nType, int* nIndex )
{
	static UFunction* pFnGetEffectGroup = NULL;

	if ( ! pFnGetEffectGroup )
		pFnGetEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 36544 ];

	UTgDeviceFire_execGetEffectGroup_Parms GetEffectGroup_Parms;
	GetEffectGroup_Parms.nType = nType;

	pFnGetEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectGroup, &GetEffectGroup_Parms, NULL );

	pFnGetEffectGroup->FunctionFlags |= 0x400;

	if ( nIndex )
		*nIndex = GetEffectGroup_Parms.nIndex;

	return GetEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetPropertyValueById
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )
// int                            nPropertyIndex                 ( CPF_Parm )

float UTgDeviceFire::GetPropertyValueById ( int nPropertyId, int nPropertyIndex )
{
	static UFunction* pFnGetPropertyValueById = NULL;

	if ( ! pFnGetPropertyValueById )
		pFnGetPropertyValueById = (UFunction*) UObject::GObjObjects()->Data[ 36540 ];

	UTgDeviceFire_execGetPropertyValueById_Parms GetPropertyValueById_Parms;
	GetPropertyValueById_Parms.nPropertyId = nPropertyId;
	GetPropertyValueById_Parms.nPropertyIndex = nPropertyIndex;

	pFnGetPropertyValueById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyValueById, &GetPropertyValueById_Parms, NULL );

	pFnGetPropertyValueById->FunctionFlags |= 0x400;

	return GetPropertyValueById_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetUnBuffedPropertyValueById
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )
// int                            nPropertyIndex                 ( CPF_Parm )

float UTgDeviceFire::GetUnBuffedPropertyValueById ( int nPropertyId, int nPropertyIndex )
{
	static UFunction* pFnGetUnBuffedPropertyValueById = NULL;

	if ( ! pFnGetUnBuffedPropertyValueById )
		pFnGetUnBuffedPropertyValueById = (UFunction*) UObject::GObjObjects()->Data[ 36536 ];

	UTgDeviceFire_execGetUnBuffedPropertyValueById_Parms GetUnBuffedPropertyValueById_Parms;
	GetUnBuffedPropertyValueById_Parms.nPropertyId = nPropertyId;
	GetUnBuffedPropertyValueById_Parms.nPropertyIndex = nPropertyIndex;

	pFnGetUnBuffedPropertyValueById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnBuffedPropertyValueById, &GetUnBuffedPropertyValueById_Parms, NULL );

	pFnGetUnBuffedPropertyValueById->FunctionFlags |= 0x400;

	return GetUnBuffedPropertyValueById_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.GetPropertyValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )

float UTgDeviceFire::GetPropertyValue ( int nPropertyId )
{
	static UFunction* pFnGetPropertyValue = NULL;

	if ( ! pFnGetPropertyValue )
		pFnGetPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 36533 ];

	UTgDeviceFire_execGetPropertyValue_Parms GetPropertyValue_Parms;
	GetPropertyValue_Parms.nPropertyId = nPropertyId;

	pFnGetPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyValue, &GetPropertyValue_Parms, NULL );

	pFnGetPropertyValue->FunctionFlags |= 0x400;

	return GetPropertyValue_Parms.ReturnValue;
};

// Function TgGame.TgDeviceFire.CustomFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceFire::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 36532 ];

	UTgDeviceFire_execCustomFire_Parms CustomFire_Parms;

	pFnCustomFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );

	pFnCustomFire->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.SpawnPet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bPet                           ( CPF_Parm )

void UTgDeviceFire::SpawnPet ( unsigned long bPet )
{
	static UFunction* pFnSpawnPet = NULL;

	if ( ! pFnSpawnPet )
		pFnSpawnPet = (UFunction*) UObject::GObjObjects()->Data[ 36530 ];

	UTgDeviceFire_execSpawnPet_Parms SpawnPet_Parms;
	SpawnPet_Parms.bPet = bPet;

	pFnSpawnPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPet, &SpawnPet_Parms, NULL );

	pFnSpawnPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.Deploy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceFire::Deploy ( )
{
	static UFunction* pFnDeploy = NULL;

	if ( ! pFnDeploy )
		pFnDeploy = (UFunction*) UObject::GObjObjects()->Data[ 36529 ];

	UTgDeviceFire_execDeploy_Parms Deploy_Parms;

	pFnDeploy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeploy, &Deploy_Parms, NULL );

	pFnDeploy->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.InitializeProjectile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void UTgDeviceFire::InitializeProjectile ( class AProjectile* Proj )
{
	static UFunction* pFnInitializeProjectile = NULL;

	if ( ! pFnInitializeProjectile )
		pFnInitializeProjectile = (UFunction*) UObject::GObjObjects()->Data[ 36527 ];

	UTgDeviceFire_execInitializeProjectile_Parms InitializeProjectile_Parms;
	InitializeProjectile_Parms.Proj = Proj;

	pFnInitializeProjectile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeProjectile, &InitializeProjectile_Parms, NULL );

	pFnInitializeProjectile->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceFire.GetProjectileClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UTgDeviceFire::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = (UFunction*) UObject::GObjObjects()->Data[ 36525 ];

	UTgDeviceFire_execGetProjectileClass_Parms GetProjectileClass_Parms;

	pFnGetProjectileClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );

	pFnGetProjectileClass->FunctionFlags |= 0x400;

	return GetProjectileClass_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.StopFire
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm::eventStopFire ( int nFireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 37199 ];

	UTgDeviceForm_eventStopFire_Parms StopFire_Parms;
	StopFire_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeviceForm.OnBlockBreakAnimDone
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventOnBlockBreakAnimDone ( )
{
	static UFunction* pFnOnBlockBreakAnimDone = NULL;

	if ( ! pFnOnBlockBreakAnimDone )
		pFnOnBlockBreakAnimDone = (UFunction*) UObject::GObjObjects()->Data[ 37198 ];

	UTgDeviceForm_eventOnBlockBreakAnimDone_Parms OnBlockBreakAnimDone_Parms;

	this->ProcessEvent ( pFnOnBlockBreakAnimDone, &OnBlockBreakAnimDone_Parms, NULL );
};

// Function TgGame.TgDeviceForm.OnRetrieveAnimDone
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventOnRetrieveAnimDone ( )
{
	static UFunction* pFnOnRetrieveAnimDone = NULL;

	if ( ! pFnOnRetrieveAnimDone )
		pFnOnRetrieveAnimDone = (UFunction*) UObject::GObjObjects()->Data[ 37197 ];

	UTgDeviceForm_eventOnRetrieveAnimDone_Parms OnRetrieveAnimDone_Parms;

	this->ProcessEvent ( pFnOnRetrieveAnimDone, &OnRetrieveAnimDone_Parms, NULL );
};

// Function TgGame.TgDeviceForm.GotoFormState
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// int                            nNewFireMode                   ( CPF_Parm )

void UTgDeviceForm::eventGotoFormState ( struct FName NewState, int nNewFireMode )
{
	static UFunction* pFnGotoFormState = NULL;

	if ( ! pFnGotoFormState )
		pFnGotoFormState = (UFunction*) UObject::GObjObjects()->Data[ 37194 ];

	UTgDeviceForm_eventGotoFormState_Parms GotoFormState_Parms;
	memcpy ( &GotoFormState_Parms.NewState, &NewState, 0x8 );
	GotoFormState_Parms.nNewFireMode = nNewFireMode;

	this->ProcessEvent ( pFnGotoFormState, &GotoFormState_Parms, NULL );
};

// Function TgGame.TgDeviceForm.EndCurrentState
// [0x00020102] 
// Parameters infos:

void UTgDeviceForm::EndCurrentState ( )
{
	static UFunction* pFnEndCurrentState = NULL;

	if ( ! pFnEndCurrentState )
		pFnEndCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 37193 ];

	UTgDeviceForm_execEndCurrentState_Parms EndCurrentState_Parms;

	this->ProcessEvent ( pFnEndCurrentState, &EndCurrentState_Parms, NULL );
};

// Function TgGame.TgDeviceForm.AttachAndDeploy_DA
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventAttachAndDeploy_DA ( )
{
	static UFunction* pFnAttachAndDeploy_DA = NULL;

	if ( ! pFnAttachAndDeploy_DA )
		pFnAttachAndDeploy_DA = (UFunction*) UObject::GObjObjects()->Data[ 37191 ];

	UTgDeviceForm_eventAttachAndDeploy_DA_Parms AttachAndDeploy_DA_Parms;

	this->ProcessEvent ( pFnAttachAndDeploy_DA, &AttachAndDeploy_DA_Parms, NULL );
};

// Function TgGame.TgDeviceForm.DeviceAnimNotify
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventDeviceAnimNotify ( )
{
	static UFunction* pFnDeviceAnimNotify = NULL;

	if ( ! pFnDeviceAnimNotify )
		pFnDeviceAnimNotify = (UFunction*) UObject::GObjObjects()->Data[ 37190 ];

	UTgDeviceForm_eventDeviceAnimNotify_Parms DeviceAnimNotify_Parms;

	this->ProcessEvent ( pFnDeviceAnimNotify, &DeviceAnimNotify_Parms, NULL );
};

// Function TgGame.TgDeviceForm.BlockFx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm::eventBlockFx ( int nFireModeNum )
{
	static UFunction* pFnBlockFx = NULL;

	if ( ! pFnBlockFx )
		pFnBlockFx = (UFunction*) UObject::GObjObjects()->Data[ 37188 ];

	UTgDeviceForm_eventBlockFx_Parms BlockFx_Parms;
	BlockFx_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnBlockFx, &BlockFx_Parms, NULL );
};

// Function TgGame.TgDeviceForm.BlockDone
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm::eventBlockDone ( int nFireModeNum )
{
	static UFunction* pFnBlockDone = NULL;

	if ( ! pFnBlockDone )
		pFnBlockDone = (UFunction*) UObject::GObjObjects()->Data[ 37186 ];

	UTgDeviceForm_eventBlockDone_Parms BlockDone_Parms;
	BlockDone_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnBlockDone, &BlockDone_Parms, NULL );
};

// Function TgGame.TgDeviceForm.BlockStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm::eventBlockStart ( int nFireModeNum )
{
	static UFunction* pFnBlockStart = NULL;

	if ( ! pFnBlockStart )
		pFnBlockStart = (UFunction*) UObject::GObjObjects()->Data[ 37184 ];

	UTgDeviceForm_eventBlockStart_Parms BlockStart_Parms;
	BlockStart_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnBlockStart, &BlockStart_Parms, NULL );
};

// Function TgGame.TgDeviceForm.DoInterrupt
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventDoInterrupt ( )
{
	static UFunction* pFnDoInterrupt = NULL;

	if ( ! pFnDoInterrupt )
		pFnDoInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 37183 ];

	UTgDeviceForm_eventDoInterrupt_Parms DoInterrupt_Parms;

	this->ProcessEvent ( pFnDoInterrupt, &DoInterrupt_Parms, NULL );
};

// Function TgGame.TgDeviceForm.CooldownComplete
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventCooldownComplete ( )
{
	static UFunction* pFnCooldownComplete = NULL;

	if ( ! pFnCooldownComplete )
		pFnCooldownComplete = (UFunction*) UObject::GObjObjects()->Data[ 37182 ];

	UTgDeviceForm_eventCooldownComplete_Parms CooldownComplete_Parms;

	this->ProcessEvent ( pFnCooldownComplete, &CooldownComplete_Parms, NULL );
};

// Function TgGame.TgDeviceForm.Cooldown
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm::eventCooldown ( int nFireModeNum )
{
	static UFunction* pFnCooldown = NULL;

	if ( ! pFnCooldown )
		pFnCooldown = (UFunction*) UObject::GObjObjects()->Data[ 37180 ];

	UTgDeviceForm_eventCooldown_Parms Cooldown_Parms;
	Cooldown_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnCooldown, &Cooldown_Parms, NULL );
};

// Function TgGame.TgDeviceForm.Fire
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nFireMode                      ( CPF_Parm )
// int                            seqIndex                       ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShotOfMultiFire      ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          fRefireTime                    ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventFire ( struct FVector HitLocation, int nFireMode, int seqIndex, int nEquipSlot, int nSocketIndex, unsigned long bSuccessfulHit, unsigned long bSecondaryShotOfMultiFire, int SituationalAttackType, float fRefireTime )
{
	static UFunction* pFnFire = NULL;

	if ( ! pFnFire )
		pFnFire = (UFunction*) UObject::GObjObjects()->Data[ 37170 ];

	UTgDeviceForm_eventFire_Parms Fire_Parms;
	memcpy ( &Fire_Parms.HitLocation, &HitLocation, 0xC );
	Fire_Parms.nFireMode = nFireMode;
	Fire_Parms.seqIndex = seqIndex;
	Fire_Parms.nEquipSlot = nEquipSlot;
	Fire_Parms.nSocketIndex = nSocketIndex;
	Fire_Parms.bSuccessfulHit = bSuccessfulHit;
	Fire_Parms.bSecondaryShotOfMultiFire = bSecondaryShotOfMultiFire;
	Fire_Parms.SituationalAttackType = SituationalAttackType;
	Fire_Parms.fRefireTime = fRefireTime;

	this->ProcessEvent ( pFnFire, &Fire_Parms, NULL );
};

// Function TgGame.TgDeviceForm.StartFire
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nFireMode                      ( CPF_Parm )
// int                            seqIndex                       ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShotOfMultiFire      ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          fRefireTime                    ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventStartFire ( struct FVector HitLocation, int nFireMode, int seqIndex, int nEquipSlot, int nSocketIndex, unsigned long bSuccessfulHit, unsigned long bSecondaryShotOfMultiFire, int SituationalAttackType, float fRefireTime )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 37159 ];

	UTgDeviceForm_eventStartFire_Parms StartFire_Parms;
	memcpy ( &StartFire_Parms.HitLocation, &HitLocation, 0xC );
	StartFire_Parms.nFireMode = nFireMode;
	StartFire_Parms.seqIndex = seqIndex;
	StartFire_Parms.nEquipSlot = nEquipSlot;
	StartFire_Parms.nSocketIndex = nSocketIndex;
	StartFire_Parms.bSuccessfulHit = bSuccessfulHit;
	StartFire_Parms.bSecondaryShotOfMultiFire = bSecondaryShotOfMultiFire;
	StartFire_Parms.SituationalAttackType = SituationalAttackType;
	StartFire_Parms.fRefireTime = fRefireTime;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgDeviceForm.SetNameOfFireAnimation
// [0x00020002] 
// Parameters infos:

void UTgDeviceForm::SetNameOfFireAnimation ( )
{
	static UFunction* pFnSetNameOfFireAnimation = NULL;

	if ( ! pFnSetNameOfFireAnimation )
		pFnSetNameOfFireAnimation = (UFunction*) UObject::GObjObjects()->Data[ 37156 ];

	UTgDeviceForm_execSetNameOfFireAnimation_Parms SetNameOfFireAnimation_Parms;

	this->ProcessEvent ( pFnSetNameOfFireAnimation, &SetNameOfFireAnimation_Parms, NULL );
};

// Function TgGame.TgDeviceForm.IsCurrentInHandWeapon
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::eventIsCurrentInHandWeapon ( )
{
	static UFunction* pFnIsCurrentInHandWeapon = NULL;

	if ( ! pFnIsCurrentInHandWeapon )
		pFnIsCurrentInHandWeapon = (UFunction*) UObject::GObjObjects()->Data[ 37154 ];

	UTgDeviceForm_eventIsCurrentInHandWeapon_Parms IsCurrentInHandWeapon_Parms;

	this->ProcessEvent ( pFnIsCurrentInHandWeapon, &IsCurrentInHandWeapon_Parms, NULL );

	return IsCurrentInHandWeapon_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.InHandWeaponForm
// [0x00020102] 
// Parameters infos:
// class UTgDeviceForm*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTgDeviceForm* UTgDeviceForm::InHandWeaponForm ( )
{
	static UFunction* pFnInHandWeaponForm = NULL;

	if ( ! pFnInHandWeaponForm )
		pFnInHandWeaponForm = (UFunction*) UObject::GObjObjects()->Data[ 37152 ];

	UTgDeviceForm_execInHandWeaponForm_Parms InHandWeaponForm_Parms;

	this->ProcessEvent ( pFnInHandWeaponForm, &InHandWeaponForm_Parms, NULL );

	return InHandWeaponForm_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.BuildUp
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventBuildUp ( int nFireMode, int nEquipSlot, int nSocketIndex )
{
	static UFunction* pFnBuildUp = NULL;

	if ( ! pFnBuildUp )
		pFnBuildUp = (UFunction*) UObject::GObjObjects()->Data[ 37146 ];

	UTgDeviceForm_eventBuildUp_Parms BuildUp_Parms;
	BuildUp_Parms.nFireMode = nFireMode;
	BuildUp_Parms.nEquipSlot = nEquipSlot;
	BuildUp_Parms.nSocketIndex = nSocketIndex;

	this->ProcessEvent ( pFnBuildUp, &BuildUp_Parms, NULL );
};

// Function TgGame.TgDeviceForm.SetFireMode
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventSetFireMode ( int nFireMode, unsigned long Force )
{
	static UFunction* pFnSetFireMode = NULL;

	if ( ! pFnSetFireMode )
		pFnSetFireMode = (UFunction*) UObject::GObjObjects()->Data[ 37143 ];

	UTgDeviceForm_eventSetFireMode_Parms SetFireMode_Parms;
	SetFireMode_Parms.nFireMode = nFireMode;
	SetFireMode_Parms.Force = Force;

	this->ProcessEvent ( pFnSetFireMode, &SetFireMode_Parms, NULL );
};

// Function TgGame.TgDeviceForm.ExitDeployMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventExitDeployMode ( )
{
	static UFunction* pFnExitDeployMode = NULL;

	if ( ! pFnExitDeployMode )
		pFnExitDeployMode = (UFunction*) UObject::GObjObjects()->Data[ 37142 ];

	UTgDeviceForm_eventExitDeployMode_Parms ExitDeployMode_Parms;

	this->ProcessEvent ( pFnExitDeployMode, &ExitDeployMode_Parms, NULL );
};

// Function TgGame.TgDeviceForm.EnterDeployMode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventEnterDeployMode ( )
{
	static UFunction* pFnEnterDeployMode = NULL;

	if ( ! pFnEnterDeployMode )
		pFnEnterDeployMode = (UFunction*) UObject::GObjObjects()->Data[ 37141 ];

	UTgDeviceForm_eventEnterDeployMode_Parms EnterDeployMode_Parms;

	this->ProcessEvent ( pFnEnterDeployMode, &EnterDeployMode_Parms, NULL );
};

// Function TgGame.TgDeviceForm.EndDevicePuttingDown
// [0x00020002] 
// Parameters infos:

void UTgDeviceForm::EndDevicePuttingDown ( )
{
	static UFunction* pFnEndDevicePuttingDown = NULL;

	if ( ! pFnEndDevicePuttingDown )
		pFnEndDevicePuttingDown = (UFunction*) UObject::GObjObjects()->Data[ 37140 ];

	UTgDeviceForm_execEndDevicePuttingDown_Parms EndDevicePuttingDown_Parms;

	this->ProcessEvent ( pFnEndDevicePuttingDown, &EndDevicePuttingDown_Parms, NULL );
};

// Function TgGame.TgDeviceForm.PutAway
// [0x00020102] 
// Parameters infos:
// float                          putAwayTime                    ( CPF_Parm )

void UTgDeviceForm::PutAway ( float putAwayTime )
{
	static UFunction* pFnPutAway = NULL;

	if ( ! pFnPutAway )
		pFnPutAway = (UFunction*) UObject::GObjObjects()->Data[ 37138 ];

	UTgDeviceForm_execPutAway_Parms PutAway_Parms;
	PutAway_Parms.putAwayTime = putAwayTime;

	this->ProcessEvent ( pFnPutAway, &PutAway_Parms, NULL );
};

// Function TgGame.TgDeviceForm.BeginDeviceTakingOut
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DesiredInHandMode              ( CPF_Parm )
// unsigned long                  PlayEquipAnim                  ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventBeginDeviceTakingOut ( int DesiredInHandMode, unsigned long PlayEquipAnim )
{
	static UFunction* pFnBeginDeviceTakingOut = NULL;

	if ( ! pFnBeginDeviceTakingOut )
		pFnBeginDeviceTakingOut = (UFunction*) UObject::GObjObjects()->Data[ 37135 ];

	UTgDeviceForm_eventBeginDeviceTakingOut_Parms BeginDeviceTakingOut_Parms;
	BeginDeviceTakingOut_Parms.DesiredInHandMode = DesiredInHandMode;
	BeginDeviceTakingOut_Parms.PlayEquipAnim = PlayEquipAnim;

	this->ProcessEvent ( pFnBeginDeviceTakingOut, &BeginDeviceTakingOut_Parms, NULL );
};

// Function TgGame.TgDeviceForm.BeginActive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            desiredIdleState               ( CPF_Parm )

void UTgDeviceForm::eventBeginActive ( int desiredIdleState )
{
	static UFunction* pFnBeginActive = NULL;

	if ( ! pFnBeginActive )
		pFnBeginActive = (UFunction*) UObject::GObjObjects()->Data[ 37133 ];

	UTgDeviceForm_eventBeginActive_Parms BeginActive_Parms;
	BeginActive_Parms.desiredIdleState = desiredIdleState;

	this->ProcessEvent ( pFnBeginActive, &BeginActive_Parms, NULL );
};

// Function TgGame.TgDeviceForm.PlayImpactEffects
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 FireOrigin                     ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::eventPlayImpactEffects ( struct FVector HitLocation, int nEquipSlot, int nSocketIndex, unsigned long bSuccessfulHit, struct FVector FireOrigin )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 37109 ];

	UTgDeviceForm_eventPlayImpactEffects_Parms PlayImpactEffects_Parms;
	memcpy ( &PlayImpactEffects_Parms.HitLocation, &HitLocation, 0xC );
	PlayImpactEffects_Parms.nEquipSlot = nEquipSlot;
	PlayImpactEffects_Parms.nSocketIndex = nSocketIndex;
	PlayImpactEffects_Parms.bSuccessfulHit = bSuccessfulHit;
	memcpy ( &PlayImpactEffects_Parms.FireOrigin, &FireOrigin, 0xC );

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function TgGame.TgDeviceForm.StopContinuousHitFx
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgDeviceForm::eventStopContinuousHitFx ( )
{
	static UFunction* pFnStopContinuousHitFx = NULL;

	if ( ! pFnStopContinuousHitFx )
		pFnStopContinuousHitFx = (UFunction*) UObject::GObjObjects()->Data[ 37107 ];

	UTgDeviceForm_eventStopContinuousHitFx_Parms StopContinuousHitFx_Parms;

	this->ProcessEvent ( pFnStopContinuousHitFx, &StopContinuousHitFx_Parms, NULL );
};

// Function TgGame.TgDeviceForm.UpdateContinuousHitFx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void UTgDeviceForm::eventUpdateContinuousHitFx ( struct FVector HitLocation )
{
	static UFunction* pFnUpdateContinuousHitFx = NULL;

	if ( ! pFnUpdateContinuousHitFx )
		pFnUpdateContinuousHitFx = (UFunction*) UObject::GObjObjects()->Data[ 37103 ];

	UTgDeviceForm_eventUpdateContinuousHitFx_Parms UpdateContinuousHitFx_Parms;
	memcpy ( &UpdateContinuousHitFx_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnUpdateContinuousHitFx, &UpdateContinuousHitFx_Parms, NULL );
};

// Function TgGame.TgDeviceForm.UpdateContinuousFireFx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void UTgDeviceForm::eventUpdateContinuousFireFx ( struct FVector HitLocation )
{
	static UFunction* pFnUpdateContinuousFireFx = NULL;

	if ( ! pFnUpdateContinuousFireFx )
		pFnUpdateContinuousFireFx = (UFunction*) UObject::GObjObjects()->Data[ 37099 ];

	UTgDeviceForm_eventUpdateContinuousFireFx_Parms UpdateContinuousFireFx_Parms;
	memcpy ( &UpdateContinuousFireFx_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnUpdateContinuousFireFx, &UpdateContinuousFireFx_Parms, NULL );
};

// Function TgGame.TgDeviceForm.IsOffhandJetpack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::IsOffhandJetpack ( )
{
	static UFunction* pFnIsOffhandJetpack = NULL;

	if ( ! pFnIsOffhandJetpack )
		pFnIsOffhandJetpack = (UFunction*) UObject::GObjObjects()->Data[ 37097 ];

	UTgDeviceForm_execIsOffhandJetpack_Parms IsOffhandJetpack_Parms;

	pFnIsOffhandJetpack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOffhandJetpack, &IsOffhandJetpack_Parms, NULL );

	pFnIsOffhandJetpack->FunctionFlags |= 0x400;

	return IsOffhandJetpack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.GetCurrentUsedResourceList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       List                           ( CPF_Parm | CPF_NeedCtorLink )

void UTgDeviceForm::GetCurrentUsedResourceList ( TArray< struct FString > List )
{
	static UFunction* pFnGetCurrentUsedResourceList = NULL;

	if ( ! pFnGetCurrentUsedResourceList )
		pFnGetCurrentUsedResourceList = (UFunction*) UObject::GObjObjects()->Data[ 37094 ];

	UTgDeviceForm_execGetCurrentUsedResourceList_Parms GetCurrentUsedResourceList_Parms;
	memcpy ( &GetCurrentUsedResourceList_Parms.List, &List, 0xC );

	pFnGetCurrentUsedResourceList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUsedResourceList, &GetCurrentUsedResourceList_Parms, NULL );

	pFnGetCurrentUsedResourceList->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::RecalculateMaterial ( )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 37093 ];

	UTgDeviceForm_execRecalculateMaterial_Parms RecalculateMaterial_Parms;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.UpdateDeployModeLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void UTgDeviceForm::UpdateDeployModeLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnUpdateDeployModeLocation = NULL;

	if ( ! pFnUpdateDeployModeLocation )
		pFnUpdateDeployModeLocation = (UFunction*) UObject::GObjObjects()->Data[ 37090 ];

	UTgDeviceForm_execUpdateDeployModeLocation_Parms UpdateDeployModeLocation_Parms;
	memcpy ( &UpdateDeployModeLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &UpdateDeployModeLocation_Parms.NewRotation, &NewRotation, 0xC );

	pFnUpdateDeployModeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeployModeLocation, &UpdateDeployModeLocation_Parms, NULL );

	pFnUpdateDeployModeLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.UpdateDeployModeStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Status                         ( CPF_Parm )

void UTgDeviceForm::UpdateDeployModeStatus ( unsigned char Status )
{
	static UFunction* pFnUpdateDeployModeStatus = NULL;

	if ( ! pFnUpdateDeployModeStatus )
		pFnUpdateDeployModeStatus = (UFunction*) UObject::GObjObjects()->Data[ 37088 ];

	UTgDeviceForm_execUpdateDeployModeStatus_Parms UpdateDeployModeStatus_Parms;
	UpdateDeployModeStatus_Parms.Status = Status;

	pFnUpdateDeployModeStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeployModeStatus, &UpdateDeployModeStatus_Parms, NULL );

	pFnUpdateDeployModeStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.SpawnSpecialFxIndependent
// [0x00026400] ( FUNC_Native )
// Parameters infos:
// class UTgSpecialFx*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSpecialFxId                   ( CPF_Parm )
// int                            nHideMask                      ( CPF_OptionalParm | CPF_Parm )

class UTgSpecialFx* UTgDeviceForm::SpawnSpecialFxIndependent ( int nSpecialFxId, int nHideMask )
{
	static UFunction* pFnSpawnSpecialFxIndependent = NULL;

	if ( ! pFnSpawnSpecialFxIndependent )
		pFnSpawnSpecialFxIndependent = (UFunction*) UObject::GObjObjects()->Data[ 37084 ];

	UTgDeviceForm_execSpawnSpecialFxIndependent_Parms SpawnSpecialFxIndependent_Parms;
	SpawnSpecialFxIndependent_Parms.nSpecialFxId = nSpecialFxId;
	SpawnSpecialFxIndependent_Parms.nHideMask = nHideMask;

	pFnSpawnSpecialFxIndependent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnSpecialFxIndependent, &SpawnSpecialFxIndependent_Parms, NULL );

	pFnSpawnSpecialFxIndependent->FunctionFlags |= 0x400;

	return SpawnSpecialFxIndependent_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.ResetAfterRagDoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::ResetAfterRagDoll ( )
{
	static UFunction* pFnResetAfterRagDoll = NULL;

	if ( ! pFnResetAfterRagDoll )
		pFnResetAfterRagDoll = (UFunction*) UObject::GObjObjects()->Data[ 37083 ];

	UTgDeviceForm_execResetAfterRagDoll_Parms ResetAfterRagDoll_Parms;

	pFnResetAfterRagDoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetAfterRagDoll, &ResetAfterRagDoll_Parms, NULL );

	pFnResetAfterRagDoll->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.Destruct
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )

void UTgDeviceForm::Destruct ( struct FVector vLocation )
{
	static UFunction* pFnDestruct = NULL;

	if ( ! pFnDestruct )
		pFnDestruct = (UFunction*) UObject::GObjObjects()->Data[ 37081 ];

	UTgDeviceForm_execDestruct_Parms Destruct_Parms;
	memcpy ( &Destruct_Parms.vLocation, &vLocation, 0xC );

	pFnDestruct->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestruct, &Destruct_Parms, NULL );

	pFnDestruct->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.PlayDeployAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::PlayDeployAnimation ( )
{
	static UFunction* pFnPlayDeployAnimation = NULL;

	if ( ! pFnPlayDeployAnimation )
		pFnPlayDeployAnimation = (UFunction*) UObject::GObjObjects()->Data[ 37080 ];

	UTgDeviceForm_execPlayDeployAnimation_Parms PlayDeployAnimation_Parms;

	pFnPlayDeployAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayDeployAnimation, &PlayDeployAnimation_Parms, NULL );

	pFnPlayDeployAnimation->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.PlaySoundAt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )

void UTgDeviceForm::PlaySoundAt ( class USoundCue* ASound, struct FVector SourceLocation )
{
	static UFunction* pFnPlaySoundAt = NULL;

	if ( ! pFnPlaySoundAt )
		pFnPlaySoundAt = (UFunction*) UObject::GObjObjects()->Data[ 37077 ];

	UTgDeviceForm_execPlaySoundAt_Parms PlaySoundAt_Parms;
	PlaySoundAt_Parms.ASound = ASound;
	memcpy ( &PlaySoundAt_Parms.SourceLocation, &SourceLocation, 0xC );

	pFnPlaySoundAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundAt, &PlaySoundAt_Parms, NULL );

	pFnPlaySoundAt->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.AllowImpactEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool UTgDeviceForm::AllowImpactEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnAllowImpactEffects = NULL;

	if ( ! pFnAllowImpactEffects )
		pFnAllowImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 37072 ];

	UTgDeviceForm_execAllowImpactEffects_Parms AllowImpactEffects_Parms;
	AllowImpactEffects_Parms.HitActor = HitActor;
	memcpy ( &AllowImpactEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &AllowImpactEffects_Parms.HitNormal, &HitNormal, 0xC );

	pFnAllowImpactEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowImpactEffects, &AllowImpactEffects_Parms, NULL );

	pFnAllowImpactEffects->FunctionFlags |= 0x400;

	return AllowImpactEffects_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.SpawnArcingTracer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitOrigin                      ( CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_Parm )

void UTgDeviceForm::SpawnArcingTracer ( struct FVector HitLocation, struct FVector HitOrigin, unsigned long bSuccessfulHit )
{
	static UFunction* pFnSpawnArcingTracer = NULL;

	if ( ! pFnSpawnArcingTracer )
		pFnSpawnArcingTracer = (UFunction*) UObject::GObjObjects()->Data[ 37068 ];

	UTgDeviceForm_execSpawnArcingTracer_Parms SpawnArcingTracer_Parms;
	memcpy ( &SpawnArcingTracer_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnArcingTracer_Parms.HitOrigin, &HitOrigin, 0xC );
	SpawnArcingTracer_Parms.bSuccessfulHit = bSuccessfulHit;

	pFnSpawnArcingTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnArcingTracer, &SpawnArcingTracer_Parms, NULL );

	pFnSpawnArcingTracer->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.SpawnFxTracer
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bHitTracer                     ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::SpawnFxTracer ( int nFireModeNum, struct FVector HitLocation, int nEquipSlot, int nSocketIndex, unsigned long bHitTracer )
{
	static UFunction* pFnSpawnFxTracer = NULL;

	if ( ! pFnSpawnFxTracer )
		pFnSpawnFxTracer = (UFunction*) UObject::GObjObjects()->Data[ 37062 ];

	UTgDeviceForm_execSpawnFxTracer_Parms SpawnFxTracer_Parms;
	SpawnFxTracer_Parms.nFireModeNum = nFireModeNum;
	memcpy ( &SpawnFxTracer_Parms.HitLocation, &HitLocation, 0xC );
	SpawnFxTracer_Parms.nEquipSlot = nEquipSlot;
	SpawnFxTracer_Parms.nSocketIndex = nSocketIndex;
	SpawnFxTracer_Parms.bHitTracer = bHitTracer;

	pFnSpawnFxTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnFxTracer, &SpawnFxTracer_Parms, NULL );

	pFnSpawnFxTracer->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.DeactivateFxGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::DeactivateFxGroup ( struct FName nmGroup, int nFireModeNum, int nEquipSlot, int nSocketIndex )
{
	static UFunction* pFnDeactivateFxGroup = NULL;

	if ( ! pFnDeactivateFxGroup )
		pFnDeactivateFxGroup = (UFunction*) UObject::GObjObjects()->Data[ 37057 ];

	UTgDeviceForm_execDeactivateFxGroup_Parms DeactivateFxGroup_Parms;
	memcpy ( &DeactivateFxGroup_Parms.nmGroup, &nmGroup, 0x8 );
	DeactivateFxGroup_Parms.nFireModeNum = nFireModeNum;
	DeactivateFxGroup_Parms.nEquipSlot = nEquipSlot;
	DeactivateFxGroup_Parms.nSocketIndex = nSocketIndex;

	pFnDeactivateFxGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateFxGroup, &DeactivateFxGroup_Parms, NULL );

	pFnDeactivateFxGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.ActivateFxIndependent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgSpecialFx*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// unsigned long                  bSkipActivate                  ( CPF_OptionalParm | CPF_Parm )
// int                            nHideMask                      ( CPF_OptionalParm | CPF_Parm )

class UTgSpecialFx* UTgDeviceForm::ActivateFxIndependent ( struct FName nmGroup, int nFireModeNum, unsigned long bSkipActivate, int nHideMask )
{
	static UFunction* pFnActivateFxIndependent = NULL;

	if ( ! pFnActivateFxIndependent )
		pFnActivateFxIndependent = (UFunction*) UObject::GObjObjects()->Data[ 37051 ];

	UTgDeviceForm_execActivateFxIndependent_Parms ActivateFxIndependent_Parms;
	memcpy ( &ActivateFxIndependent_Parms.nmGroup, &nmGroup, 0x8 );
	ActivateFxIndependent_Parms.nFireModeNum = nFireModeNum;
	ActivateFxIndependent_Parms.bSkipActivate = bSkipActivate;
	ActivateFxIndependent_Parms.nHideMask = nHideMask;

	pFnActivateFxIndependent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateFxIndependent, &ActivateFxIndependent_Parms, NULL );

	pFnActivateFxIndependent->FunctionFlags |= 0x400;

	return ActivateFxIndependent_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.ActivateFxGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::ActivateFxGroup ( struct FName nmGroup, int nFireModeNum, int nEquipSlot, int nSocketIndex, float Duration )
{
	static UFunction* pFnActivateFxGroup = NULL;

	if ( ! pFnActivateFxGroup )
		pFnActivateFxGroup = (UFunction*) UObject::GObjObjects()->Data[ 37045 ];

	UTgDeviceForm_execActivateFxGroup_Parms ActivateFxGroup_Parms;
	memcpy ( &ActivateFxGroup_Parms.nmGroup, &nmGroup, 0x8 );
	ActivateFxGroup_Parms.nFireModeNum = nFireModeNum;
	ActivateFxGroup_Parms.nEquipSlot = nEquipSlot;
	ActivateFxGroup_Parms.nSocketIndex = nSocketIndex;
	ActivateFxGroup_Parms.Duration = Duration;

	pFnActivateFxGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateFxGroup, &ActivateFxGroup_Parms, NULL );

	pFnActivateFxGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.UsesSuitDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::UsesSuitDye ( )
{
	static UFunction* pFnUsesSuitDye = NULL;

	if ( ! pFnUsesSuitDye )
		pFnUsesSuitDye = (UFunction*) UObject::GObjObjects()->Data[ 37043 ];

	UTgDeviceForm_execUsesSuitDye_Parms UsesSuitDye_Parms;

	pFnUsesSuitDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUsesSuitDye, &UsesSuitDye_Parms, NULL );

	pFnUsesSuitDye->FunctionFlags |= 0x400;

	return UsesSuitDye_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.IsBackpack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::IsBackpack ( )
{
	static UFunction* pFnIsBackpack = NULL;

	if ( ! pFnIsBackpack )
		pFnIsBackpack = (UFunction*) UObject::GObjObjects()->Data[ 37041 ];

	UTgDeviceForm_execIsBackpack_Parms IsBackpack_Parms;

	pFnIsBackpack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBackpack, &IsBackpack_Parms, NULL );

	pFnIsBackpack->FunctionFlags |= 0x400;

	return IsBackpack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.IsJetpack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::IsJetpack ( )
{
	static UFunction* pFnIsJetpack = NULL;

	if ( ! pFnIsJetpack )
		pFnIsJetpack = (UFunction*) UObject::GObjObjects()->Data[ 37039 ];

	UTgDeviceForm_execIsJetpack_Parms IsJetpack_Parms;

	pFnIsJetpack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsJetpack, &IsJetpack_Parms, NULL );

	pFnIsJetpack->FunctionFlags |= 0x400;

	return IsJetpack_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.LogDebugInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgDeviceForm::LogDebugInfo ( )
{
	static UFunction* pFnLogDebugInfo = NULL;

	if ( ! pFnLogDebugInfo )
		pFnLogDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 37037 ];

	UTgDeviceForm_execLogDebugInfo_Parms LogDebugInfo_Parms;

	pFnLogDebugInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDebugInfo, &LogDebugInfo_Parms, NULL );

	pFnLogDebugInfo->FunctionFlags |= 0x400;

	return LogDebugInfo_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.FormManageFirstPersonWeapon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void UTgDeviceForm::FormManageFirstPersonWeapon ( unsigned long bOn )
{
	static UFunction* pFnFormManageFirstPersonWeapon = NULL;

	if ( ! pFnFormManageFirstPersonWeapon )
		pFnFormManageFirstPersonWeapon = (UFunction*) UObject::GObjObjects()->Data[ 37035 ];

	UTgDeviceForm_execFormManageFirstPersonWeapon_Parms FormManageFirstPersonWeapon_Parms;
	FormManageFirstPersonWeapon_Parms.bOn = bOn;

	pFnFormManageFirstPersonWeapon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFormManageFirstPersonWeapon, &FormManageFirstPersonWeapon_Parms, NULL );

	pFnFormManageFirstPersonWeapon->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.ResetDeviceAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::ResetDeviceAnimNodes ( )
{
	static UFunction* pFnResetDeviceAnimNodes = NULL;

	if ( ! pFnResetDeviceAnimNodes )
		pFnResetDeviceAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 37034 ];

	UTgDeviceForm_execResetDeviceAnimNodes_Parms ResetDeviceAnimNodes_Parms;

	pFnResetDeviceAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDeviceAnimNodes, &ResetDeviceAnimNodes_Parms, NULL );

	pFnResetDeviceAnimNodes->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.DeviceAddRemoveAnimSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimSet*                pAnimSet                       ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void UTgDeviceForm::DeviceAddRemoveAnimSet ( class UAnimSet* pAnimSet, unsigned long bAdd )
{
	static UFunction* pFnDeviceAddRemoveAnimSet = NULL;

	if ( ! pFnDeviceAddRemoveAnimSet )
		pFnDeviceAddRemoveAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 37031 ];

	UTgDeviceForm_execDeviceAddRemoveAnimSet_Parms DeviceAddRemoveAnimSet_Parms;
	DeviceAddRemoveAnimSet_Parms.pAnimSet = pAnimSet;
	DeviceAddRemoveAnimSet_Parms.bAdd = bAdd;

	pFnDeviceAddRemoveAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeviceAddRemoveAnimSet, &DeviceAddRemoveAnimSet_Parms, NULL );

	pFnDeviceAddRemoveAnimSet->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.InitDeviceAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::InitDeviceAnimNodes ( )
{
	static UFunction* pFnInitDeviceAnimNodes = NULL;

	if ( ! pFnInitDeviceAnimNodes )
		pFnInitDeviceAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 37030 ];

	UTgDeviceForm_execInitDeviceAnimNodes_Parms InitDeviceAnimNodes_Parms;

	pFnInitDeviceAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitDeviceAnimNodes, &InitDeviceAnimNodes_Parms, NULL );

	pFnInitDeviceAnimNodes->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.SetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UTgDeviceForm::SetVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 37028 ];

	UTgDeviceForm_execSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bVisible = bVisible;

	pFnSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );

	pFnSetVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.DetachInHandDevice_DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm::DetachInHandDevice_DA ( )
{
	static UFunction* pFnDetachInHandDevice_DA = NULL;

	if ( ! pFnDetachInHandDevice_DA )
		pFnDetachInHandDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37027 ];

	UTgDeviceForm_execDetachInHandDevice_DA_Parms DetachInHandDevice_DA_Parms;

	pFnDetachInHandDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachInHandDevice_DA, &DetachInHandDevice_DA_Parms, NULL );

	pFnDetachInHandDevice_DA->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.DetachDevice_DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ParentMesh                     ( CPF_Parm | CPF_EditInline )
// class UMeshComponent*          AttachedMesh                   ( CPF_Parm | CPF_EditInline )

void UTgDeviceForm::DetachDevice_DA ( class USkeletalMeshComponent* ParentMesh, class UMeshComponent* AttachedMesh )
{
	static UFunction* pFnDetachDevice_DA = NULL;

	if ( ! pFnDetachDevice_DA )
		pFnDetachDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37024 ];

	UTgDeviceForm_execDetachDevice_DA_Parms DetachDevice_DA_Parms;
	DetachDevice_DA_Parms.ParentMesh = ParentMesh;
	DetachDevice_DA_Parms.AttachedMesh = AttachedMesh;

	pFnDetachDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachDevice_DA, &DetachDevice_DA_Parms, NULL );

	pFnDetachDevice_DA->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.AttachInHandDevice_DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFirstPerson                   ( CPF_Parm )

bool UTgDeviceForm::AttachInHandDevice_DA ( unsigned long bFirstPerson )
{
	static UFunction* pFnAttachInHandDevice_DA = NULL;

	if ( ! pFnAttachInHandDevice_DA )
		pFnAttachInHandDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37021 ];

	UTgDeviceForm_execAttachInHandDevice_DA_Parms AttachInHandDevice_DA_Parms;
	AttachInHandDevice_DA_Parms.bFirstPerson = bFirstPerson;

	pFnAttachInHandDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachInHandDevice_DA, &AttachInHandDevice_DA_Parms, NULL );

	pFnAttachInHandDevice_DA->FunctionFlags |= 0x400;

	return AttachInHandDevice_DA_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm.AttachDevice_DA
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  ParentMesh                     ( CPF_Parm | CPF_EditInline )
// class UMeshComponent*          AttachedMesh                   ( CPF_Parm | CPF_EditInline )
// struct FName                   nmSocket                       ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm::AttachDevice_DA ( class USkeletalMeshComponent* ParentMesh, class UMeshComponent* AttachedMesh, struct FName nmSocket )
{
	static UFunction* pFnAttachDevice_DA = NULL;

	if ( ! pFnAttachDevice_DA )
		pFnAttachDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37017 ];

	UTgDeviceForm_execAttachDevice_DA_Parms AttachDevice_DA_Parms;
	AttachDevice_DA_Parms.ParentMesh = ParentMesh;
	AttachDevice_DA_Parms.AttachedMesh = AttachedMesh;
	memcpy ( &AttachDevice_DA_Parms.nmSocket, &nmSocket, 0x8 );

	pFnAttachDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachDevice_DA, &AttachDevice_DA_Parms, NULL );

	pFnAttachDevice_DA->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm.SetSkin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterial*               NewMaterial                    ( CPF_Parm )

void UTgDeviceForm::SetSkin ( class UMaterial* NewMaterial )
{
	static UFunction* pFnSetSkin = NULL;

	if ( ! pFnSetSkin )
		pFnSetSkin = (UFunction*) UObject::GObjObjects()->Data[ 37015 ];

	UTgDeviceForm_execSetSkin_Parms SetSkin_Parms;
	SetSkin_Parms.NewMaterial = NewMaterial;

	pFnSetSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkin, &SetSkin_Parms, NULL );

	pFnSetSkin->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm_NewMelee.BuildUp
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewMelee::eventBuildUp ( int nFireMode, int nEquipSlot, int nSocketIndex )
{
	static UFunction* pFnBuildUp = NULL;

	if ( ! pFnBuildUp )
		pFnBuildUp = (UFunction*) UObject::GObjObjects()->Data[ 37227 ];

	UTgDeviceForm_NewMelee_eventBuildUp_Parms BuildUp_Parms;
	BuildUp_Parms.nFireMode = nFireMode;
	BuildUp_Parms.nEquipSlot = nEquipSlot;
	BuildUp_Parms.nSocketIndex = nSocketIndex;

	this->ProcessEvent ( pFnBuildUp, &BuildUp_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.BeginActive
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            desiredIdleState               ( CPF_Parm )

void UTgDeviceForm_NewMelee::eventBeginActive ( int desiredIdleState )
{
	static UFunction* pFnBeginActive = NULL;

	if ( ! pFnBeginActive )
		pFnBeginActive = (UFunction*) UObject::GObjObjects()->Data[ 37225 ];

	UTgDeviceForm_NewMelee_eventBeginActive_Parms BeginActive_Parms;
	BeginActive_Parms.desiredIdleState = desiredIdleState;

	this->ProcessEvent ( pFnBeginActive, &BeginActive_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.EndCurrentState
// [0x00020100] 
// Parameters infos:

void UTgDeviceForm_NewMelee::EndCurrentState ( )
{
	static UFunction* pFnEndCurrentState = NULL;

	if ( ! pFnEndCurrentState )
		pFnEndCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 37224 ];

	UTgDeviceForm_NewMelee_execEndCurrentState_Parms EndCurrentState_Parms;

	this->ProcessEvent ( pFnEndCurrentState, &EndCurrentState_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.PutAway
// [0x00020102] 
// Parameters infos:
// float                          putAwayTime                    ( CPF_Parm )

void UTgDeviceForm_NewMelee::PutAway ( float putAwayTime )
{
	static UFunction* pFnPutAway = NULL;

	if ( ! pFnPutAway )
		pFnPutAway = (UFunction*) UObject::GObjObjects()->Data[ 37222 ];

	UTgDeviceForm_NewMelee_execPutAway_Parms PutAway_Parms;
	PutAway_Parms.putAwayTime = putAwayTime;

	this->ProcessEvent ( pFnPutAway, &PutAway_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.BeginDeviceTakingOut
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DesiredInHandMode              ( CPF_Parm )
// unsigned long                  PlayEquipAnim                  ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewMelee::eventBeginDeviceTakingOut ( int DesiredInHandMode, unsigned long PlayEquipAnim )
{
	static UFunction* pFnBeginDeviceTakingOut = NULL;

	if ( ! pFnBeginDeviceTakingOut )
		pFnBeginDeviceTakingOut = (UFunction*) UObject::GObjObjects()->Data[ 37218 ];

	UTgDeviceForm_NewMelee_eventBeginDeviceTakingOut_Parms BeginDeviceTakingOut_Parms;
	BeginDeviceTakingOut_Parms.DesiredInHandMode = DesiredInHandMode;
	BeginDeviceTakingOut_Parms.PlayEquipAnim = PlayEquipAnim;

	this->ProcessEvent ( pFnBeginDeviceTakingOut, &BeginDeviceTakingOut_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.StopFire
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm_NewMelee::eventStopFire ( int nFireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 37216 ];

	UTgDeviceForm_NewMelee_eventStopFire_Parms StopFire_Parms;
	StopFire_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.Fire
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nFireMode                      ( CPF_Parm )
// int                            seqIndex                       ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShotOfMultiFire      ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          fRefireTime                    ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewMelee::eventFire ( struct FVector HitLocation, int nFireMode, int seqIndex, int nEquipSlot, int nSocketIndex, unsigned long bSuccessfulHit, unsigned long bSecondaryShotOfMultiFire, int SituationalAttackType, float fRefireTime )
{
	static UFunction* pFnFire = NULL;

	if ( ! pFnFire )
		pFnFire = (UFunction*) UObject::GObjObjects()->Data[ 37206 ];

	UTgDeviceForm_NewMelee_eventFire_Parms Fire_Parms;
	memcpy ( &Fire_Parms.HitLocation, &HitLocation, 0xC );
	Fire_Parms.nFireMode = nFireMode;
	Fire_Parms.seqIndex = seqIndex;
	Fire_Parms.nEquipSlot = nEquipSlot;
	Fire_Parms.nSocketIndex = nSocketIndex;
	Fire_Parms.bSuccessfulHit = bSuccessfulHit;
	Fire_Parms.bSecondaryShotOfMultiFire = bSecondaryShotOfMultiFire;
	Fire_Parms.SituationalAttackType = SituationalAttackType;
	Fire_Parms.fRefireTime = fRefireTime;

	this->ProcessEvent ( pFnFire, &Fire_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewMelee.SetFireMode
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewMelee::eventSetFireMode ( int nFireMode, unsigned long Force )
{
	static UFunction* pFnSetFireMode = NULL;

	if ( ! pFnSetFireMode )
		pFnSetFireMode = (UFunction*) UObject::GObjObjects()->Data[ 37203 ];

	UTgDeviceForm_NewMelee_eventSetFireMode_Parms SetFireMode_Parms;
	SetFireMode_Parms.nFireMode = nFireMode;
	SetFireMode_Parms.Force = Force;

	this->ProcessEvent ( pFnSetFireMode, &SetFireMode_Parms, NULL );
};

// Function TgGame.TgDeviceForm_MeleeDualWield.SetVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void UTgDeviceForm_MeleeDualWield::SetVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetVisibility = NULL;

	if ( ! pFnSetVisibility )
		pFnSetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 37236 ];

	UTgDeviceForm_MeleeDualWield_execSetVisibility_Parms SetVisibility_Parms;
	SetVisibility_Parms.bVisible = bVisible;

	pFnSetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibility, &SetVisibility_Parms, NULL );

	pFnSetVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm_MeleeDualWield.DetachInHandDevice_DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgDeviceForm_MeleeDualWield::DetachInHandDevice_DA ( )
{
	static UFunction* pFnDetachInHandDevice_DA = NULL;

	if ( ! pFnDetachInHandDevice_DA )
		pFnDetachInHandDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37235 ];

	UTgDeviceForm_MeleeDualWield_execDetachInHandDevice_DA_Parms DetachInHandDevice_DA_Parms;

	pFnDetachInHandDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachInHandDevice_DA, &DetachInHandDevice_DA_Parms, NULL );

	pFnDetachInHandDevice_DA->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeviceForm_MeleeDualWield.AttachInHandDevice_DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFirstPerson                   ( CPF_Parm )

bool UTgDeviceForm_MeleeDualWield::AttachInHandDevice_DA ( unsigned long bFirstPerson )
{
	static UFunction* pFnAttachInHandDevice_DA = NULL;

	if ( ! pFnAttachInHandDevice_DA )
		pFnAttachInHandDevice_DA = (UFunction*) UObject::GObjObjects()->Data[ 37232 ];

	UTgDeviceForm_MeleeDualWield_execAttachInHandDevice_DA_Parms AttachInHandDevice_DA_Parms;
	AttachInHandDevice_DA_Parms.bFirstPerson = bFirstPerson;

	pFnAttachInHandDevice_DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachInHandDevice_DA, &AttachInHandDevice_DA_Parms, NULL );

	pFnAttachInHandDevice_DA->FunctionFlags |= 0x400;

	return AttachInHandDevice_DA_Parms.ReturnValue;
};

// Function TgGame.TgDeviceForm_NewRange.BeginActive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            desiredIdleState               ( CPF_Parm )

void UTgDeviceForm_NewRange::eventBeginActive ( int desiredIdleState )
{
	static UFunction* pFnBeginActive = NULL;

	if ( ! pFnBeginActive )
		pFnBeginActive = (UFunction*) UObject::GObjObjects()->Data[ 37264 ];

	UTgDeviceForm_NewRange_eventBeginActive_Parms BeginActive_Parms;
	BeginActive_Parms.desiredIdleState = desiredIdleState;

	this->ProcessEvent ( pFnBeginActive, &BeginActive_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.PutAway
// [0x00020102] 
// Parameters infos:
// float                          putAwayTime                    ( CPF_Parm )

void UTgDeviceForm_NewRange::PutAway ( float putAwayTime )
{
	static UFunction* pFnPutAway = NULL;

	if ( ! pFnPutAway )
		pFnPutAway = (UFunction*) UObject::GObjObjects()->Data[ 37262 ];

	UTgDeviceForm_NewRange_execPutAway_Parms PutAway_Parms;
	PutAway_Parms.putAwayTime = putAwayTime;

	this->ProcessEvent ( pFnPutAway, &PutAway_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.BeginDeviceTakingOut
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DesiredInHandMode              ( CPF_Parm )
// unsigned long                  PlayEquipAnim                  ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewRange::eventBeginDeviceTakingOut ( int DesiredInHandMode, unsigned long PlayEquipAnim )
{
	static UFunction* pFnBeginDeviceTakingOut = NULL;

	if ( ! pFnBeginDeviceTakingOut )
		pFnBeginDeviceTakingOut = (UFunction*) UObject::GObjObjects()->Data[ 37259 ];

	UTgDeviceForm_NewRange_eventBeginDeviceTakingOut_Parms BeginDeviceTakingOut_Parms;
	BeginDeviceTakingOut_Parms.DesiredInHandMode = DesiredInHandMode;
	BeginDeviceTakingOut_Parms.PlayEquipAnim = PlayEquipAnim;

	this->ProcessEvent ( pFnBeginDeviceTakingOut, &BeginDeviceTakingOut_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.StopFire
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nFireModeNum                   ( CPF_Parm )

void UTgDeviceForm_NewRange::eventStopFire ( int nFireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 37257 ];

	UTgDeviceForm_NewRange_eventStopFire_Parms StopFire_Parms;
	StopFire_Parms.nFireModeNum = nFireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.Fire
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nFireMode                      ( CPF_Parm )
// int                            seqIndex                       ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSuccessfulHit                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShotOfMultiFire      ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          fRefireTime                    ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewRange::eventFire ( struct FVector HitLocation, int nFireMode, int seqIndex, int nEquipSlot, int nSocketIndex, unsigned long bSuccessfulHit, unsigned long bSecondaryShotOfMultiFire, int SituationalAttackType, float fRefireTime )
{
	static UFunction* pFnFire = NULL;

	if ( ! pFnFire )
		pFnFire = (UFunction*) UObject::GObjObjects()->Data[ 37246 ];

	UTgDeviceForm_NewRange_eventFire_Parms Fire_Parms;
	memcpy ( &Fire_Parms.HitLocation, &HitLocation, 0xC );
	Fire_Parms.nFireMode = nFireMode;
	Fire_Parms.seqIndex = seqIndex;
	Fire_Parms.nEquipSlot = nEquipSlot;
	Fire_Parms.nSocketIndex = nSocketIndex;
	Fire_Parms.bSuccessfulHit = bSuccessfulHit;
	Fire_Parms.bSecondaryShotOfMultiFire = bSecondaryShotOfMultiFire;
	Fire_Parms.SituationalAttackType = SituationalAttackType;
	Fire_Parms.fRefireTime = fRefireTime;

	this->ProcessEvent ( pFnFire, &Fire_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.BuildUp
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewRange::eventBuildUp ( int nFireMode, int nEquipSlot, int nSocketIndex )
{
	static UFunction* pFnBuildUp = NULL;

	if ( ! pFnBuildUp )
		pFnBuildUp = (UFunction*) UObject::GObjObjects()->Data[ 37242 ];

	UTgDeviceForm_NewRange_eventBuildUp_Parms BuildUp_Parms;
	BuildUp_Parms.nFireMode = nFireMode;
	BuildUp_Parms.nEquipSlot = nEquipSlot;
	BuildUp_Parms.nSocketIndex = nSocketIndex;

	this->ProcessEvent ( pFnBuildUp, &BuildUp_Parms, NULL );
};

// Function TgGame.TgDeviceForm_NewRange.SetFireMode
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nFireMode                      ( CPF_Parm )
// unsigned long                  Force                          ( CPF_OptionalParm | CPF_Parm )

void UTgDeviceForm_NewRange::eventSetFireMode ( int nFireMode, unsigned long Force )
{
	static UFunction* pFnSetFireMode = NULL;

	if ( ! pFnSetFireMode )
		pFnSetFireMode = (UFunction*) UObject::GObjObjects()->Data[ 37239 ];

	UTgDeviceForm_NewRange_eventSetFireMode_Parms SetFireMode_Parms;
	SetFireMode_Parms.nFireMode = nFireMode;
	SetFireMode_Parms.Force = Force;

	this->ProcessEvent ( pFnSetFireMode, &SetFireMode_Parms, NULL );
};

// Function TgGame.TgDeployable.UpdateHealth
// [0x00020002] 
// Parameters infos:
// int                            nCurrHealth                    ( CPF_Parm )

void ATgDeployable::UpdateHealth ( int nCurrHealth )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = (UFunction*) UObject::GObjObjects()->Data[ 35422 ];

	ATgDeployable_execUpdateHealth_Parms UpdateHealth_Parms;
	UpdateHealth_Parms.nCurrHealth = nCurrHealth;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function TgGame.TgDeployable.InitReplicationInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventInitReplicationInfo ( )
{
	static UFunction* pFnInitReplicationInfo = NULL;

	if ( ! pFnInitReplicationInfo )
		pFnInitReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 35417 ];

	ATgDeployable_eventInitReplicationInfo_Parms InitReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitReplicationInfo, &InitReplicationInfo_Parms, NULL );
};

// Function TgGame.TgDeployable.CanBeRepaired
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::CanBeRepaired ( )
{
	static UFunction* pFnCanBeRepaired = NULL;

	if ( ! pFnCanBeRepaired )
		pFnCanBeRepaired = (UFunction*) UObject::GObjObjects()->Data[ 35415 ];

	ATgDeployable_execCanBeRepaired_Parms CanBeRepaired_Parms;

	this->ProcessEvent ( pFnCanBeRepaired, &CanBeRepaired_Parms, NULL );

	return CanBeRepaired_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetSaveHealthPercent
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDeployable::GetSaveHealthPercent ( )
{
	static UFunction* pFnGetSaveHealthPercent = NULL;

	if ( ! pFnGetSaveHealthPercent )
		pFnGetSaveHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 35413 ];

	ATgDeployable_execGetSaveHealthPercent_Parms GetSaveHealthPercent_Parms;

	this->ProcessEvent ( pFnGetSaveHealthPercent, &GetSaveHealthPercent_Parms, NULL );

	return GetSaveHealthPercent_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.PickUpDeployable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 pReceiver                      ( CPF_Parm )

bool ATgDeployable::PickUpDeployable ( class ATgPawn* pReceiver )
{
	static UFunction* pFnPickUpDeployable = NULL;

	if ( ! pFnPickUpDeployable )
		pFnPickUpDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35408 ];

	ATgDeployable_execPickUpDeployable_Parms PickUpDeployable_Parms;
	PickUpDeployable_Parms.pReceiver = pReceiver;

	this->ProcessEvent ( pFnPickUpDeployable, &PickUpDeployable_Parms, NULL );

	return PickUpDeployable_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetPickupEquipPoint
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgDeployable::eventGetPickupEquipPoint ( )
{
	static UFunction* pFnGetPickupEquipPoint = NULL;

	if ( ! pFnGetPickupEquipPoint )
		pFnGetPickupEquipPoint = (UFunction*) UObject::GObjObjects()->Data[ 35406 ];

	ATgDeployable_eventGetPickupEquipPoint_Parms GetPickupEquipPoint_Parms;

	this->ProcessEvent ( pFnGetPickupEquipPoint, &GetPickupEquipPoint_Parms, NULL );

	return GetPickupEquipPoint_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.CanBePickedUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::CanBePickedUp ( )
{
	static UFunction* pFnCanBePickedUp = NULL;

	if ( ! pFnCanBePickedUp )
		pFnCanBePickedUp = (UFunction*) UObject::GObjObjects()->Data[ 35404 ];

	ATgDeployable_execCanBePickedUp_Parms CanBePickedUp_Parms;

	this->ProcessEvent ( pFnCanBePickedUp, &CanBePickedUp_Parms, NULL );

	return CanBePickedUp_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.CanApplyEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::CanApplyEffects ( )
{
	static UFunction* pFnCanApplyEffects = NULL;

	if ( ! pFnCanApplyEffects )
		pFnCanApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 35402 ];

	ATgDeployable_execCanApplyEffects_Parms CanApplyEffects_Parms;

	this->ProcessEvent ( pFnCanApplyEffects, &CanApplyEffects_Parms, NULL );

	return CanApplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.HideMesh
// [0x00020102] 
// Parameters infos:

void ATgDeployable::HideMesh ( )
{
	static UFunction* pFnHideMesh = NULL;

	if ( ! pFnHideMesh )
		pFnHideMesh = (UFunction*) UObject::GObjObjects()->Data[ 35400 ];

	ATgDeployable_execHideMesh_Parms HideMesh_Parms;

	this->ProcessEvent ( pFnHideMesh, &HideMesh_Parms, NULL );
};

// Function TgGame.TgDeployable.DrawDeployableIcon
// [0x00820102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )
// float                          ScaleFactor                    ( CPF_Parm )

void ATgDeployable::DrawDeployableIcon ( class APlayerController* PC, class UCanvas* Canvas, struct FVector ScreenLoc, float ScaleFactor )
{
	static UFunction* pFnDrawDeployableIcon = NULL;

	if ( ! pFnDrawDeployableIcon )
		pFnDrawDeployableIcon = (UFunction*) UObject::GObjObjects()->Data[ 35387 ];

	ATgDeployable_execDrawDeployableIcon_Parms DrawDeployableIcon_Parms;
	DrawDeployableIcon_Parms.PC = PC;
	DrawDeployableIcon_Parms.Canvas = Canvas;
	memcpy ( &DrawDeployableIcon_Parms.ScreenLoc, &ScreenLoc, 0xC );
	DrawDeployableIcon_Parms.ScaleFactor = ScaleFactor;

	this->ProcessEvent ( pFnDrawDeployableIcon, &DrawDeployableIcon_Parms, NULL );
};

// Function TgGame.TgDeployable.LoadDeployableIcon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::LoadDeployableIcon ( )
{
	static UFunction* pFnLoadDeployableIcon = NULL;

	if ( ! pFnLoadDeployableIcon )
		pFnLoadDeployableIcon = (UFunction*) UObject::GObjObjects()->Data[ 35384 ];

	ATgDeployable_execLoadDeployableIcon_Parms LoadDeployableIcon_Parms;

	this->ProcessEvent ( pFnLoadDeployableIcon, &LoadDeployableIcon_Parms, NULL );

	return LoadDeployableIcon_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.ShouldDrawIcon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::ShouldDrawIcon ( )
{
	static UFunction* pFnShouldDrawIcon = NULL;

	if ( ! pFnShouldDrawIcon )
		pFnShouldDrawIcon = (UFunction*) UObject::GObjObjects()->Data[ 35381 ];

	ATgDeployable_execShouldDrawIcon_Parms ShouldDrawIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawIcon, &ShouldDrawIcon_Parms, NULL );

	return ShouldDrawIcon_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgDeployable::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 35348 ];

	ATgDeployable_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function TgGame.TgDeployable.GetDeployableNameById
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            deployableId                   ( CPF_Parm )

struct FString ATgDeployable::GetDeployableNameById ( int deployableId )
{
	static UFunction* pFnGetDeployableNameById = NULL;

	if ( ! pFnGetDeployableNameById )
		pFnGetDeployableNameById = (UFunction*) UObject::GObjObjects()->Data[ 35345 ];

	ATgDeployable_execGetDeployableNameById_Parms GetDeployableNameById_Parms;
	GetDeployableNameById_Parms.deployableId = deployableId;

	pFnGetDeployableNameById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeployableNameById, &GetDeployableNameById_Parms, NULL );

	pFnGetDeployableNameById->FunctionFlags |= 0x400;

	return GetDeployableNameById_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.DrawNewHealth
// [0x00820102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )
// float                          ScaleFactor                    ( CPF_Parm )

void ATgDeployable::DrawNewHealth ( class APlayerController* PC, class UCanvas* Canvas, struct FVector ScreenLoc, float ScaleFactor )
{
	static UFunction* pFnDrawNewHealth = NULL;

	if ( ! pFnDrawNewHealth )
		pFnDrawNewHealth = (UFunction*) UObject::GObjObjects()->Data[ 35326 ];

	ATgDeployable_execDrawNewHealth_Parms DrawNewHealth_Parms;
	DrawNewHealth_Parms.PC = PC;
	DrawNewHealth_Parms.Canvas = Canvas;
	memcpy ( &DrawNewHealth_Parms.ScreenLoc, &ScreenLoc, 0xC );
	DrawNewHealth_Parms.ScaleFactor = ScaleFactor;

	this->ProcessEvent ( pFnDrawNewHealth, &DrawNewHealth_Parms, NULL );
};

// Function TgGame.TgDeployable.DrawHealth
// [0x00820102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )
// float                          ScaleFactor                    ( CPF_Parm )

void ATgDeployable::DrawHealth ( class APlayerController* PC, class UCanvas* Canvas, struct FVector ScreenLoc, float ScaleFactor )
{
	static UFunction* pFnDrawHealth = NULL;

	if ( ! pFnDrawHealth )
		pFnDrawHealth = (UFunction*) UObject::GObjObjects()->Data[ 35304 ];

	ATgDeployable_execDrawHealth_Parms DrawHealth_Parms;
	DrawHealth_Parms.PC = PC;
	DrawHealth_Parms.Canvas = Canvas;
	memcpy ( &DrawHealth_Parms.ScreenLoc, &ScreenLoc, 0xC );
	DrawHealth_Parms.ScaleFactor = ScaleFactor;

	this->ProcessEvent ( pFnDrawHealth, &DrawHealth_Parms, NULL );
};

// Function TgGame.TgDeployable.GetSize
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDeployable::GetSize ( )
{
	static UFunction* pFnGetSize = NULL;

	if ( ! pFnGetSize )
		pFnGetSize = (UFunction*) UObject::GObjObjects()->Data[ 35300 ];

	ATgDeployable_execGetSize_Parms GetSize_Parms;

	this->ProcessEvent ( pFnGetSize, &GetSize_Parms, NULL );

	return GetSize_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgDeployable::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 35292 ];

	ATgDeployable_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgDeployable.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDeployable::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35290 ];

	ATgDeployable_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDeployable.CheckLocalPlayerWithinProximity
// [0x00020102] 
// Parameters infos:

void ATgDeployable::CheckLocalPlayerWithinProximity ( )
{
	static UFunction* pFnCheckLocalPlayerWithinProximity = NULL;

	if ( ! pFnCheckLocalPlayerWithinProximity )
		pFnCheckLocalPlayerWithinProximity = (UFunction*) UObject::GObjObjects()->Data[ 35285 ];

	ATgDeployable_execCheckLocalPlayerWithinProximity_Parms CheckLocalPlayerWithinProximity_Parms;

	this->ProcessEvent ( pFnCheckLocalPlayerWithinProximity, &CheckLocalPlayerWithinProximity_Parms, NULL );
};

// Function TgGame.TgDeployable.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgDeployable::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 35283 ];

	ATgDeployable_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgDeployable.DestroyIt
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bSkipFx                        ( CPF_OptionalParm | CPF_Parm )

void ATgDeployable::eventDestroyIt ( unsigned long bSkipFx )
{
	static UFunction* pFnDestroyIt = NULL;

	if ( ! pFnDestroyIt )
		pFnDestroyIt = (UFunction*) UObject::GObjObjects()->Data[ 35280 ];

	ATgDeployable_eventDestroyIt_Parms DestroyIt_Parms;
	DestroyIt_Parms.bSkipFx = bSkipFx;

	this->ProcessEvent ( pFnDestroyIt, &DestroyIt_Parms, NULL );
};

// Function TgGame.TgDeployable.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 35279 ];

	ATgDeployable_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgDeployable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDeployable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 35277 ];

	ATgDeployable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDeployable.TickDeploy
// [0x00020100] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgDeployable::TickDeploy ( float DeltaSeconds )
{
	static UFunction* pFnTickDeploy = NULL;

	if ( ! pFnTickDeploy )
		pFnTickDeploy = (UFunction*) UObject::GObjObjects()->Data[ 35239 ];

	ATgDeployable_execTickDeploy_Parms TickDeploy_Parms;
	TickDeploy_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTickDeploy, &TickDeploy_Parms, NULL );
};

// Function TgGame.TgDeployable.ExtractDeployTimeFromMyAnimation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDeployable::ExtractDeployTimeFromMyAnimation ( )
{
	static UFunction* pFnExtractDeployTimeFromMyAnimation = NULL;

	if ( ! pFnExtractDeployTimeFromMyAnimation )
		pFnExtractDeployTimeFromMyAnimation = (UFunction*) UObject::GObjObjects()->Data[ 35236 ];

	ATgDeployable_execExtractDeployTimeFromMyAnimation_Parms ExtractDeployTimeFromMyAnimation_Parms;

	this->ProcessEvent ( pFnExtractDeployTimeFromMyAnimation, &ExtractDeployTimeFromMyAnimation_Parms, NULL );

	return ExtractDeployTimeFromMyAnimation_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.UpdateTimeToDeploySecs
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void ATgDeployable::UpdateTimeToDeploySecs ( float fValue )
{
	static UFunction* pFnUpdateTimeToDeploySecs = NULL;

	if ( ! pFnUpdateTimeToDeploySecs )
		pFnUpdateTimeToDeploySecs = (UFunction*) UObject::GObjObjects()->Data[ 35234 ];

	ATgDeployable_execUpdateTimeToDeploySecs_Parms UpdateTimeToDeploySecs_Parms;
	UpdateTimeToDeploySecs_Parms.fValue = fValue;

	this->ProcessEvent ( pFnUpdateTimeToDeploySecs, &UpdateTimeToDeploySecs_Parms, NULL );
};

// Function TgGame.TgDeployable.DeployComplete
// [0x00020102] 
// Parameters infos:

void ATgDeployable::DeployComplete ( )
{
	static UFunction* pFnDeployComplete = NULL;

	if ( ! pFnDeployComplete )
		pFnDeployComplete = (UFunction*) UObject::GObjObjects()->Data[ 35232 ];

	ATgDeployable_execDeployComplete_Parms DeployComplete_Parms;

	this->ProcessEvent ( pFnDeployComplete, &DeployComplete_Parms, NULL );
};

// Function TgGame.TgDeployable.CalcDeployPercentage
// [0x00020102] 
// Parameters infos:

void ATgDeployable::CalcDeployPercentage ( )
{
	static UFunction* pFnCalcDeployPercentage = NULL;

	if ( ! pFnCalcDeployPercentage )
		pFnCalcDeployPercentage = (UFunction*) UObject::GObjObjects()->Data[ 35230 ];

	ATgDeployable_execCalcDeployPercentage_Parms CalcDeployPercentage_Parms;

	this->ProcessEvent ( pFnCalcDeployPercentage, &CalcDeployPercentage_Parms, NULL );
};

// Function TgGame.TgDeployable.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgDeployable::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 35228 ];

	ATgDeployable_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgDeployable.RefireCheckTimer
// [0x00020102] 
// Parameters infos:

void ATgDeployable::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 35227 ];

	ATgDeployable_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function TgGame.TgDeployable.StartDeploy
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventStartDeploy ( )
{
	static UFunction* pFnStartDeploy = NULL;

	if ( ! pFnStartDeploy )
		pFnStartDeploy = (UFunction*) UObject::GObjObjects()->Data[ 35226 ];

	ATgDeployable_eventStartDeploy_Parms StartDeploy_Parms;

	this->ProcessEvent ( pFnStartDeploy, &StartDeploy_Parms, NULL );
};

// Function TgGame.TgDeployable.CheckTargetWithinProximity
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::CheckTargetWithinProximity ( )
{
	static UFunction* pFnCheckTargetWithinProximity = NULL;

	if ( ! pFnCheckTargetWithinProximity )
		pFnCheckTargetWithinProximity = (UFunction*) UObject::GObjObjects()->Data[ 35221 ];

	ATgDeployable_execCheckTargetWithinProximity_Parms CheckTargetWithinProximity_Parms;

	this->ProcessEvent ( pFnCheckTargetWithinProximity, &CheckTargetWithinProximity_Parms, NULL );

	return CheckTargetWithinProximity_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.DelayDeploy
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventDelayDeploy ( )
{
	static UFunction* pFnDelayDeploy = NULL;

	if ( ! pFnDelayDeploy )
		pFnDelayDeploy = (UFunction*) UObject::GObjObjects()->Data[ 35220 ];

	ATgDeployable_eventDelayDeploy_Parms DelayDeploy_Parms;

	this->ProcessEvent ( pFnDelayDeploy, &DelayDeploy_Parms, NULL );
};

// Function TgGame.TgDeployable.TimeDeviceFiring
// [0x00020102] 
// Parameters infos:

void ATgDeployable::TimeDeviceFiring ( )
{
	static UFunction* pFnTimeDeviceFiring = NULL;

	if ( ! pFnTimeDeviceFiring )
		pFnTimeDeviceFiring = (UFunction*) UObject::GObjObjects()->Data[ 35218 ];

	ATgDeployable_execTimeDeviceFiring_Parms TimeDeviceFiring_Parms;

	this->ProcessEvent ( pFnTimeDeviceFiring, &TimeDeviceFiring_Parms, NULL );
};

// Function TgGame.TgDeployable.IsFiring
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::IsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 35216 ];

	ATgDeployable_execIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:

void ATgDeployable::FlashLocationUpdated ( )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35215 ];

	ATgDeployable_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function TgGame.TgDeployable.FlashCountUpdated
// [0x00020102] 
// Parameters infos:

void ATgDeployable::FlashCountUpdated ( )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35214 ];

	ATgDeployable_execFlashCountUpdated_Parms FlashCountUpdated_Parms;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function TgGame.TgDeployable.PlayFireFx
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventPlayFireFx ( )
{
	static UFunction* pFnPlayFireFx = NULL;

	if ( ! pFnPlayFireFx )
		pFnPlayFireFx = (UFunction*) UObject::GObjObjects()->Data[ 35202 ];

	ATgDeployable_eventPlayFireFx_Parms PlayFireFx_Parms;

	this->ProcessEvent ( pFnPlayFireFx, &PlayFireFx_Parms, NULL );
};

// Function TgGame.TgDeployable.ClearFlashLocation
// [0x00020002] 
// Parameters infos:

void ATgDeployable::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 35186 ];

	ATgDeployable_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function TgGame.TgDeployable.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )

void ATgDeployable::SetFlashLocation ( struct FVector NewLoc )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 35184 ];

	ATgDeployable_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function TgGame.TgDeployable.ClearFlashCount
// [0x00020102] 
// Parameters infos:

void ATgDeployable::ClearFlashCount ( )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 35183 ];

	ATgDeployable_execClearFlashCount_Parms ClearFlashCount_Parms;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function TgGame.TgDeployable.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void ATgDeployable::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 35182 ];

	ATgDeployable_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function TgGame.TgDeployable.FireAmmunitionDeployable
// [0x00020002] 
// Parameters infos:

void ATgDeployable::FireAmmunitionDeployable ( )
{
	static UFunction* pFnFireAmmunitionDeployable = NULL;

	if ( ! pFnFireAmmunitionDeployable )
		pFnFireAmmunitionDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35178 ];

	ATgDeployable_execFireAmmunitionDeployable_Parms FireAmmunitionDeployable_Parms;

	this->ProcessEvent ( pFnFireAmmunitionDeployable, &FireAmmunitionDeployable_Parms, NULL );
};

// Function TgGame.TgDeployable.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 35176 ];

	ATgDeployable_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetPhysicalFireAimDirection
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 fireLoc                        ( CPF_Parm )
// struct FVector                 TargetLocation                 ( CPF_Parm )

struct FVector ATgDeployable::GetPhysicalFireAimDirection ( struct FVector fireLoc, struct FVector TargetLocation )
{
	static UFunction* pFnGetPhysicalFireAimDirection = NULL;

	if ( ! pFnGetPhysicalFireAimDirection )
		pFnGetPhysicalFireAimDirection = (UFunction*) UObject::GObjObjects()->Data[ 35172 ];

	ATgDeployable_execGetPhysicalFireAimDirection_Parms GetPhysicalFireAimDirection_Parms;
	memcpy ( &GetPhysicalFireAimDirection_Parms.fireLoc, &fireLoc, 0xC );
	memcpy ( &GetPhysicalFireAimDirection_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireAimDirection, &GetPhysicalFireAimDirection_Parms, NULL );

	return GetPhysicalFireAimDirection_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetPhysicalFireStartLoc
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgDeployable::GetPhysicalFireStartLoc ( )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 35170 ];

	ATgDeployable_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.ProjectileFireDeployable
// [0x00820002] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ATgDeployable::ProjectileFireDeployable ( )
{
	static UFunction* pFnProjectileFireDeployable = NULL;

	if ( ! pFnProjectileFireDeployable )
		pFnProjectileFireDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35159 ];

	ATgDeployable_execProjectileFireDeployable_Parms ProjectileFireDeployable_Parms;

	this->ProcessEvent ( pFnProjectileFireDeployable, &ProjectileFireDeployable_Parms, NULL );

	return ProjectileFireDeployable_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.ProcessInstantHit
// [0x00020002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ATgDeployable::ProcessInstantHit ( struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 35157 ];

	ATgDeployable_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function TgGame.TgDeployable.InstantFireDeployable
// [0x00820002] 
// Parameters infos:

void ATgDeployable::InstantFireDeployable ( )
{
	static UFunction* pFnInstantFireDeployable = NULL;

	if ( ! pFnInstantFireDeployable )
		pFnInstantFireDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35149 ];

	ATgDeployable_execInstantFireDeployable_Parms InstantFireDeployable_Parms;

	this->ProcessEvent ( pFnInstantFireDeployable, &InstantFireDeployable_Parms, NULL );
};

// Function TgGame.TgDeployable.CalcDeviceFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ATgDeployable::CalcDeviceFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcDeviceFire = NULL;

	if ( ! pFnCalcDeviceFire )
		pFnCalcDeviceFire = (UFunction*) UObject::GObjObjects()->Data[ 35142 ];

	ATgDeployable_execCalcDeviceFire_Parms CalcDeviceFire_Parms;
	memcpy ( &CalcDeviceFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcDeviceFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcDeviceFire, &CalcDeviceFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcDeviceFire_Parms.ImpactList, 0xC );

	return CalcDeviceFire_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.DeviceFired
// [0x00020102] 
// Parameters infos:

void ATgDeployable::DeviceFired ( )
{
	static UFunction* pFnDeviceFired = NULL;

	if ( ! pFnDeviceFired )
		pFnDeviceFired = (UFunction*) UObject::GObjObjects()->Data[ 35141 ];

	ATgDeployable_execDeviceFired_Parms DeviceFired_Parms;

	this->ProcessEvent ( pFnDeviceFired, &DeviceFired_Parms, NULL );
};

// Function TgGame.TgDeployable.StopFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventStopFire ( )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 35140 ];

	ATgDeployable_eventStopFire_Parms StopFire_Parms;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeployable.StartFire
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventStartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35139 ];

	ATgDeployable_eventStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgDeployable.ShouldStartFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::ShouldStartFire ( )
{
	static UFunction* pFnShouldStartFire = NULL;

	if ( ! pFnShouldStartFire )
		pFnShouldStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35136 ];

	ATgDeployable_execShouldStartFire_Parms ShouldStartFire_Parms;

	this->ProcessEvent ( pFnShouldStartFire, &ShouldStartFire_Parms, NULL );

	return ShouldStartFire_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetLocalPlayerController
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* ATgDeployable::eventGetLocalPlayerController ( )
{
	static UFunction* pFnGetLocalPlayerController = NULL;

	if ( ! pFnGetLocalPlayerController )
		pFnGetLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 35133 ];

	ATgDeployable_eventGetLocalPlayerController_Parms GetLocalPlayerController_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerController, &GetLocalPlayerController_Parms, NULL );

	return GetLocalPlayerController_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.OnGetTaskForceNumber
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_GetTaskForceNumber* Action                         ( CPF_Parm )

void ATgDeployable::OnGetTaskForceNumber ( class UTgSeqAct_GetTaskForceNumber* Action )
{
	static UFunction* pFnOnGetTaskForceNumber = NULL;

	if ( ! pFnOnGetTaskForceNumber )
		pFnOnGetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 35130 ];

	ATgDeployable_execOnGetTaskForceNumber_Parms OnGetTaskForceNumber_Parms;
	OnGetTaskForceNumber_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTaskForceNumber, &OnGetTaskForceNumber_Parms, NULL );
};

// Function TgGame.TgDeployable.CheckPlayerInfo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_Player*       PlayerInfo                     ( CPF_Parm )

bool ATgDeployable::CheckPlayerInfo ( class ATgRepInfo_Player* PlayerInfo )
{
	static UFunction* pFnCheckPlayerInfo = NULL;

	if ( ! pFnCheckPlayerInfo )
		pFnCheckPlayerInfo = (UFunction*) UObject::GObjObjects()->Data[ 35127 ];

	ATgDeployable_execCheckPlayerInfo_Parms CheckPlayerInfo_Parms;
	CheckPlayerInfo_Parms.PlayerInfo = PlayerInfo;

	this->ProcessEvent ( pFnCheckPlayerInfo, &CheckPlayerInfo_Parms, NULL );

	return CheckPlayerInfo_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.CheckTouchedPlayer
// [0x00020002] 
// Parameters infos:

void ATgDeployable::CheckTouchedPlayer ( )
{
	static UFunction* pFnCheckTouchedPlayer = NULL;

	if ( ! pFnCheckTouchedPlayer )
		pFnCheckTouchedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 35126 ];

	ATgDeployable_execCheckTouchedPlayer_Parms CheckTouchedPlayer_Parms;

	this->ProcessEvent ( pFnCheckTouchedPlayer, &CheckTouchedPlayer_Parms, NULL );
};

// Function TgGame.TgDeployable.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDeployable::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35124 ];

	ATgDeployable_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgDeployable.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDeployable::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35118 ];

	ATgDeployable_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDeployable.ProcessEffect
// [0x00024102] 
// Parameters infos:
// class UTgEffectGroup*          Effect                         ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgDeployable::ProcessEffect ( class UTgEffectGroup* Effect, unsigned long bRemove, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 35112 ];

	ATgDeployable_execProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.Effect = Effect;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgDeployable.ApplyEquipEffects
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventApplyEquipEffects ( )
{
	static UFunction* pFnApplyEquipEffects = NULL;

	if ( ! pFnApplyEquipEffects )
		pFnApplyEquipEffects = (UFunction*) UObject::GObjObjects()->Data[ 35111 ];

	ATgDeployable_eventApplyEquipEffects_Parms ApplyEquipEffects_Parms;

	this->ProcessEvent ( pFnApplyEquipEffects, &ApplyEquipEffects_Parms, NULL );
};

// Function TgGame.TgDeployable.GetDeployableUniqueId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::eventGetDeployableUniqueId ( )
{
	static UFunction* pFnGetDeployableUniqueId = NULL;

	if ( ! pFnGetDeployableUniqueId )
		pFnGetDeployableUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 35108 ];

	ATgDeployable_eventGetDeployableUniqueId_Parms GetDeployableUniqueId_Parms;

	this->ProcessEvent ( pFnGetDeployableUniqueId, &GetDeployableUniqueId_Parms, NULL );

	return GetDeployableUniqueId_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeployable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35107 ];

	ATgDeployable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeployable.IsFriendlyWithLocalPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::IsFriendlyWithLocalPawn ( )
{
	static UFunction* pFnIsFriendlyWithLocalPawn = NULL;

	if ( ! pFnIsFriendlyWithLocalPawn )
		pFnIsFriendlyWithLocalPawn = (UFunction*) UObject::GObjObjects()->Data[ 35105 ];

	ATgDeployable_execIsFriendlyWithLocalPawn_Parms IsFriendlyWithLocalPawn_Parms;

	pFnIsFriendlyWithLocalPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPawn, &IsFriendlyWithLocalPawn_Parms, NULL );

	pFnIsFriendlyWithLocalPawn->FunctionFlags |= 0x400;

	return IsFriendlyWithLocalPawn_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.DisplayDamageInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLocation                 ( CPF_Parm )

void ATgDeployable::DisplayDamageInfo ( class UCanvas* Canvas, struct FVector ScreenLocation )
{
	static UFunction* pFnDisplayDamageInfo = NULL;

	if ( ! pFnDisplayDamageInfo )
		pFnDisplayDamageInfo = (UFunction*) UObject::GObjObjects()->Data[ 35102 ];

	ATgDeployable_execDisplayDamageInfo_Parms DisplayDamageInfo_Parms;
	DisplayDamageInfo_Parms.Canvas = Canvas;
	memcpy ( &DisplayDamageInfo_Parms.ScreenLocation, &ScreenLocation, 0xC );

	pFnDisplayDamageInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayDamageInfo, &DisplayDamageInfo_Parms, NULL );

	pFnDisplayDamageInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.GetFireDeviceSkillId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetFireDeviceSkillId ( )
{
	static UFunction* pFnGetFireDeviceSkillId = NULL;

	if ( ! pFnGetFireDeviceSkillId )
		pFnGetFireDeviceSkillId = (UFunction*) UObject::GObjObjects()->Data[ 35100 ];

	ATgDeployable_execGetFireDeviceSkillId_Parms GetFireDeviceSkillId_Parms;

	pFnGetFireDeviceSkillId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireDeviceSkillId, &GetFireDeviceSkillId_Parms, NULL );

	pFnGetFireDeviceSkillId->FunctionFlags |= 0x400;

	return GetFireDeviceSkillId_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetSpawnerDeviceInstanceId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetSpawnerDeviceInstanceId ( )
{
	static UFunction* pFnGetSpawnerDeviceInstanceId = NULL;

	if ( ! pFnGetSpawnerDeviceInstanceId )
		pFnGetSpawnerDeviceInstanceId = (UFunction*) UObject::GObjObjects()->Data[ 35098 ];

	ATgDeployable_execGetSpawnerDeviceInstanceId_Parms GetSpawnerDeviceInstanceId_Parms;

	pFnGetSpawnerDeviceInstanceId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpawnerDeviceInstanceId, &GetSpawnerDeviceInstanceId_Parms, NULL );

	pFnGetSpawnerDeviceInstanceId->FunctionFlags |= 0x400;

	return GetSpawnerDeviceInstanceId_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetSpawnerDeviceSkillId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetSpawnerDeviceSkillId ( )
{
	static UFunction* pFnGetSpawnerDeviceSkillId = NULL;

	if ( ! pFnGetSpawnerDeviceSkillId )
		pFnGetSpawnerDeviceSkillId = (UFunction*) UObject::GObjObjects()->Data[ 35096 ];

	ATgDeployable_execGetSpawnerDeviceSkillId_Parms GetSpawnerDeviceSkillId_Parms;

	pFnGetSpawnerDeviceSkillId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpawnerDeviceSkillId, &GetSpawnerDeviceSkillId_Parms, NULL );

	pFnGetSpawnerDeviceSkillId->FunctionFlags |= 0x400;

	return GetSpawnerDeviceSkillId_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.SetTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTaskForceId                   ( CPF_Parm )

void ATgDeployable::SetTaskForceNumber ( int nTaskForceId )
{
	static UFunction* pFnSetTaskForceNumber = NULL;

	if ( ! pFnSetTaskForceNumber )
		pFnSetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 35094 ];

	ATgDeployable_execSetTaskForceNumber_Parms SetTaskForceNumber_Parms;
	SetTaskForceNumber_Parms.nTaskForceId = nTaskForceId;

	pFnSetTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTaskForceNumber, &SetTaskForceNumber_Parms, NULL );

	pFnSetTaskForceNumber->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.GetTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetTaskForceNumber ( )
{
	static UFunction* pFnGetTaskForceNumber = NULL;

	if ( ! pFnGetTaskForceNumber )
		pFnGetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 35092 ];

	ATgDeployable_execGetTaskForceNumber_Parms GetTaskForceNumber_Parms;

	pFnGetTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTaskForceNumber, &GetTaskForceNumber_Parms, NULL );

	pFnGetTaskForceNumber->FunctionFlags |= 0x400;

	return GetTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgRepInfo_TaskForce* ATgDeployable::GetTaskForce ( )
{
	static UFunction* pFnGetTaskForce = NULL;

	if ( ! pFnGetTaskForce )
		pFnGetTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 35090 ];

	ATgDeployable_execGetTaskForce_Parms GetTaskForce_Parms;

	pFnGetTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTaskForce, &GetTaskForce_Parms, NULL );

	pFnGetTaskForce->FunctionFlags |= 0x400;

	return GetTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.SetInitialHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPercent                       ( CPF_Parm )

void ATgDeployable::SetInitialHealthPercent ( float fPercent )
{
	static UFunction* pFnSetInitialHealthPercent = NULL;

	if ( ! pFnSetInitialHealthPercent )
		pFnSetInitialHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 35088 ];

	ATgDeployable_execSetInitialHealthPercent_Parms SetInitialHealthPercent_Parms;
	SetInitialHealthPercent_Parms.fPercent = fPercent;

	pFnSetInitialHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInitialHealthPercent, &SetInitialHealthPercent_Parms, NULL );

	pFnSetInitialHealthPercent->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgDeployable::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 35086 ];

	ATgDeployable_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.AddDamageInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 SourcePawn                     ( CPF_Parm )
// struct FString                 DamageString                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )

void ATgDeployable::AddDamageInfo ( class ATgPawn* SourcePawn, struct FString DamageString, unsigned char Type )
{
	static UFunction* pFnAddDamageInfo = NULL;

	if ( ! pFnAddDamageInfo )
		pFnAddDamageInfo = (UFunction*) UObject::GObjObjects()->Data[ 35082 ];

	ATgDeployable_execAddDamageInfo_Parms AddDamageInfo_Parms;
	AddDamageInfo_Parms.SourcePawn = SourcePawn;
	memcpy ( &AddDamageInfo_Parms.DamageString, &DamageString, 0xC );
	AddDamageInfo_Parms.Type = Type;

	pFnAddDamageInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDamageInfo, &AddDamageInfo_Parms, NULL );

	pFnAddDamageInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.UpdateDebuffer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Debuffer                       ( CPF_Parm )

void ATgDeployable::UpdateDebuffer ( class ATgPawn* Debuffer )
{
	static UFunction* pFnUpdateDebuffer = NULL;

	if ( ! pFnUpdateDebuffer )
		pFnUpdateDebuffer = (UFunction*) UObject::GObjObjects()->Data[ 35080 ];

	ATgDeployable_execUpdateDebuffer_Parms UpdateDebuffer_Parms;
	UpdateDebuffer_Parms.Debuffer = Debuffer;

	pFnUpdateDebuffer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDebuffer, &UpdateDebuffer_Parms, NULL );

	pFnUpdateDebuffer->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.UpdateDamagers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Damager                        ( CPF_Parm )

void ATgDeployable::UpdateDamagers ( class ATgPawn* Damager )
{
	static UFunction* pFnUpdateDamagers = NULL;

	if ( ! pFnUpdateDamagers )
		pFnUpdateDamagers = (UFunction*) UObject::GObjObjects()->Data[ 35078 ];

	ATgDeployable_execUpdateDamagers_Parms UpdateDamagers_Parms;
	UpdateDamagers_Parms.Damager = Damager;

	pFnUpdateDamagers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDamagers, &UpdateDamagers_Parms, NULL );

	pFnUpdateDamagers->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.UpdateTargetCylinder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::UpdateTargetCylinder ( )
{
	static UFunction* pFnUpdateTargetCylinder = NULL;

	if ( ! pFnUpdateTargetCylinder )
		pFnUpdateTargetCylinder = (UFunction*) UObject::GObjObjects()->Data[ 35077 ];

	ATgDeployable_execUpdateTargetCylinder_Parms UpdateTargetCylinder_Parms;

	pFnUpdateTargetCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetCylinder, &UpdateTargetCylinder_Parms, NULL );

	pFnUpdateTargetCylinder->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.CalcMeshOffset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDeployable::CalcMeshOffset ( )
{
	static UFunction* pFnCalcMeshOffset = NULL;

	if ( ! pFnCalcMeshOffset )
		pFnCalcMeshOffset = (UFunction*) UObject::GObjObjects()->Data[ 35075 ];

	ATgDeployable_execCalcMeshOffset_Parms CalcMeshOffset_Parms;

	pFnCalcMeshOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcMeshOffset, &CalcMeshOffset_Parms, NULL );

	pFnCalcMeshOffset->FunctionFlags |= 0x400;

	return CalcMeshOffset_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.AdjustMeshToGround
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::AdjustMeshToGround ( )
{
	static UFunction* pFnAdjustMeshToGround = NULL;

	if ( ! pFnAdjustMeshToGround )
		pFnAdjustMeshToGround = (UFunction*) UObject::GObjObjects()->Data[ 35074 ];

	ATgDeployable_execAdjustMeshToGround_Parms AdjustMeshToGround_Parms;

	pFnAdjustMeshToGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustMeshToGround, &AdjustMeshToGround_Parms, NULL );

	pFnAdjustMeshToGround->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgDeployable::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 35072 ];

	ATgDeployable_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.NotifyGroupChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::NotifyGroupChanged ( )
{
	static UFunction* pFnNotifyGroupChanged = NULL;

	if ( ! pFnNotifyGroupChanged )
		pFnNotifyGroupChanged = (UFunction*) UObject::GObjObjects()->Data[ 35071 ];

	ATgDeployable_execNotifyGroupChanged_Parms NotifyGroupChanged_Parms;

	pFnNotifyGroupChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyGroupChanged, &NotifyGroupChanged_Parms, NULL );

	pFnNotifyGroupChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.GetMaxDeployHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetMaxDeployHealth ( )
{
	static UFunction* pFnGetMaxDeployHealth = NULL;

	if ( ! pFnGetMaxDeployHealth )
		pFnGetMaxDeployHealth = (UFunction*) UObject::GObjObjects()->Data[ 35069 ];

	ATgDeployable_execGetMaxDeployHealth_Parms GetMaxDeployHealth_Parms;

	pFnGetMaxDeployHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxDeployHealth, &GetMaxDeployHealth_Parms, NULL );

	pFnGetMaxDeployHealth->FunctionFlags |= 0x400;

	return GetMaxDeployHealth_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.GetMaxHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgDeployable::GetMaxHealth ( )
{
	static UFunction* pFnGetMaxHealth = NULL;

	if ( ! pFnGetMaxHealth )
		pFnGetMaxHealth = (UFunction*) UObject::GObjObjects()->Data[ 35067 ];

	ATgDeployable_execGetMaxHealth_Parms GetMaxHealth_Parms;

	pFnGetMaxHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxHealth, &GetMaxHealth_Parms, NULL );

	pFnGetMaxHealth->FunctionFlags |= 0x400;

	return GetMaxHealth_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.DeployableDestroyed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::DeployableDestroyed ( )
{
	static UFunction* pFnDeployableDestroyed = NULL;

	if ( ! pFnDeployableDestroyed )
		pFnDeployableDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35066 ];

	ATgDeployable_execDeployableDestroyed_Parms DeployableDestroyed_Parms;

	pFnDeployableDestroyed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeployableDestroyed, &DeployableDestroyed_Parms, NULL );

	pFnDeployableDestroyed->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.IsInLOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TouchedActor                   ( CPF_Parm )

bool ATgDeployable::IsInLOS ( class AActor* TouchedActor )
{
	static UFunction* pFnIsInLOS = NULL;

	if ( ! pFnIsInLOS )
		pFnIsInLOS = (UFunction*) UObject::GObjObjects()->Data[ 35063 ];

	ATgDeployable_execIsInLOS_Parms IsInLOS_Parms;
	IsInLOS_Parms.TouchedActor = TouchedActor;

	pFnIsInLOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInLOS, &IsInLOS_Parms, NULL );

	pFnIsInLOS->FunctionFlags |= 0x400;

	return IsInLOS_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.SwapMeshToDestroyed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::SwapMeshToDestroyed ( )
{
	static UFunction* pFnSwapMeshToDestroyed = NULL;

	if ( ! pFnSwapMeshToDestroyed )
		pFnSwapMeshToDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35062 ];

	ATgDeployable_execSwapMeshToDestroyed_Parms SwapMeshToDestroyed_Parms;

	pFnSwapMeshToDestroyed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMeshToDestroyed, &SwapMeshToDestroyed_Parms, NULL );

	pFnSwapMeshToDestroyed->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.ResetProperties
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::ResetProperties ( )
{
	static UFunction* pFnResetProperties = NULL;

	if ( ! pFnResetProperties )
		pFnResetProperties = (UFunction*) UObject::GObjObjects()->Data[ 35061 ];

	ATgDeployable_execResetProperties_Parms ResetProperties_Parms;

	pFnResetProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetProperties, &ResetProperties_Parms, NULL );

	pFnResetProperties->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.SetProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPropertyId                    ( CPF_Parm )
// float                          fNewValue                      ( CPF_Parm )

void ATgDeployable::SetProperty ( int nPropertyId, float fNewValue )
{
	static UFunction* pFnSetProperty = NULL;

	if ( ! pFnSetProperty )
		pFnSetProperty = (UFunction*) UObject::GObjObjects()->Data[ 35058 ];

	ATgDeployable_execSetProperty_Parms SetProperty_Parms;
	SetProperty_Parms.nPropertyId = nPropertyId;
	SetProperty_Parms.fNewValue = fNewValue;

	pFnSetProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProperty, &SetProperty_Parms, NULL );

	pFnSetProperty->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.GetProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgProperty*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )

class UTgProperty* ATgDeployable::GetProperty ( int nPropertyId )
{
	static UFunction* pFnGetProperty = NULL;

	if ( ! pFnGetProperty )
		pFnGetProperty = (UFunction*) UObject::GObjObjects()->Data[ 35055 ];

	ATgDeployable_execGetProperty_Parms GetProperty_Parms;
	GetProperty_Parms.nPropertyId = nPropertyId;

	pFnGetProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProperty, &GetProperty_Parms, NULL );

	pFnGetProperty->FunctionFlags |= 0x400;

	return GetProperty_Parms.ReturnValue;
};

// Function TgGame.TgDeployable.AddProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPropId                        ( CPF_Parm )
// float                          fBase                          ( CPF_Parm )
// float                          fRaw                           ( CPF_Parm )
// float                          FMin                           ( CPF_Parm )
// float                          FMax                           ( CPF_Parm )

void ATgDeployable::AddProperty ( int nPropId, float fBase, float fRaw, float FMin, float FMax )
{
	static UFunction* pFnAddProperty = NULL;

	if ( ! pFnAddProperty )
		pFnAddProperty = (UFunction*) UObject::GObjObjects()->Data[ 35049 ];

	ATgDeployable_execAddProperty_Parms AddProperty_Parms;
	AddProperty_Parms.nPropId = nPropId;
	AddProperty_Parms.fBase = fBase;
	AddProperty_Parms.fRaw = fRaw;
	AddProperty_Parms.FMin = FMin;
	AddProperty_Parms.FMax = FMax;

	pFnAddProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddProperty, &AddProperty_Parms, NULL );

	pFnAddProperty->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.InitializeDefaultProps
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployable::InitializeDefaultProps ( )
{
	static UFunction* pFnInitializeDefaultProps = NULL;

	if ( ! pFnInitializeDefaultProps )
		pFnInitializeDefaultProps = (UFunction*) UObject::GObjObjects()->Data[ 35048 ];

	ATgDeployable_execInitializeDefaultProps_Parms InitializeDefaultProps_Parms;

	pFnInitializeDefaultProps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeDefaultProps, &InitializeDefaultProps_Parms, NULL );

	pFnInitializeDefaultProps->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployable.ApplyDeployableSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeployable::ApplyDeployableSetup ( )
{
	static UFunction* pFnApplyDeployableSetup = NULL;

	if ( ! pFnApplyDeployableSetup )
		pFnApplyDeployableSetup = (UFunction*) UObject::GObjObjects()->Data[ 35046 ];

	ATgDeployable_execApplyDeployableSetup_Parms ApplyDeployableSetup_Parms;

	pFnApplyDeployableSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDeployableSetup, &ApplyDeployableSetup_Parms, NULL );

	pFnApplyDeployableSetup->FunctionFlags |= 0x400;

	return ApplyDeployableSetup_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.GetPhysicalFireAimDirection
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 fireLoc                        ( CPF_Parm )
// struct FVector                 TargetLocation                 ( CPF_Parm )

struct FVector ATgDeploy_Artillery::GetPhysicalFireAimDirection ( struct FVector fireLoc, struct FVector TargetLocation )
{
	static UFunction* pFnGetPhysicalFireAimDirection = NULL;

	if ( ! pFnGetPhysicalFireAimDirection )
		pFnGetPhysicalFireAimDirection = (UFunction*) UObject::GObjObjects()->Data[ 35457 ];

	ATgDeploy_Artillery_execGetPhysicalFireAimDirection_Parms GetPhysicalFireAimDirection_Parms;
	memcpy ( &GetPhysicalFireAimDirection_Parms.fireLoc, &fireLoc, 0xC );
	memcpy ( &GetPhysicalFireAimDirection_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireAimDirection, &GetPhysicalFireAimDirection_Parms, NULL );

	return GetPhysicalFireAimDirection_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.GetPhysicalFireStartLoc
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgDeploy_Artillery::GetPhysicalFireStartLoc ( )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 35453 ];

	ATgDeploy_Artillery_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.CalcAimLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

struct FVector ATgDeploy_Artillery::CalcAimLocation ( class AActor* Target )
{
	static UFunction* pFnCalcAimLocation = NULL;

	if ( ! pFnCalcAimLocation )
		pFnCalcAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 35447 ];

	ATgDeploy_Artillery_execCalcAimLocation_Parms CalcAimLocation_Parms;
	CalcAimLocation_Parms.Target = Target;

	this->ProcessEvent ( pFnCalcAimLocation, &CalcAimLocation_Parms, NULL );

	return CalcAimLocation_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.FireAmmunitionDeployable
// [0x00020002] 
// Parameters infos:

void ATgDeploy_Artillery::FireAmmunitionDeployable ( )
{
	static UFunction* pFnFireAmmunitionDeployable = NULL;

	if ( ! pFnFireAmmunitionDeployable )
		pFnFireAmmunitionDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35446 ];

	ATgDeploy_Artillery_execFireAmmunitionDeployable_Parms FireAmmunitionDeployable_Parms;

	this->ProcessEvent ( pFnFireAmmunitionDeployable, &FireAmmunitionDeployable_Parms, NULL );
};

// Function TgGame.TgDeploy_Artillery.ShouldStartFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_Artillery::ShouldStartFire ( )
{
	static UFunction* pFnShouldStartFire = NULL;

	if ( ! pFnShouldStartFire )
		pFnShouldStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35444 ];

	ATgDeploy_Artillery_execShouldStartFire_Parms ShouldStartFire_Parms;

	this->ProcessEvent ( pFnShouldStartFire, &ShouldStartFire_Parms, NULL );

	return ShouldStartFire_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.DeployComplete
// [0x00020102] 
// Parameters infos:

void ATgDeploy_Artillery::DeployComplete ( )
{
	static UFunction* pFnDeployComplete = NULL;

	if ( ! pFnDeployComplete )
		pFnDeployComplete = (UFunction*) UObject::GObjObjects()->Data[ 35443 ];

	ATgDeploy_Artillery_execDeployComplete_Parms DeployComplete_Parms;

	this->ProcessEvent ( pFnDeployComplete, &DeployComplete_Parms, NULL );
};

// Function TgGame.TgDeploy_Artillery.FindActiveObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgMissionObjective*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgMissionObjective* ATgDeploy_Artillery::FindActiveObjective ( )
{
	static UFunction* pFnFindActiveObjective = NULL;

	if ( ! pFnFindActiveObjective )
		pFnFindActiveObjective = (UFunction*) UObject::GObjObjects()->Data[ 35441 ];

	ATgDeploy_Artillery_execFindActiveObjective_Parms FindActiveObjective_Parms;

	pFnFindActiveObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindActiveObjective, &FindActiveObjective_Parms, NULL );

	pFnFindActiveObjective->FunctionFlags |= 0x400;

	return FindActiveObjective_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.FindEnemyPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgDeploy_Artillery::FindEnemyPlayer ( )
{
	static UFunction* pFnFindEnemyPlayer = NULL;

	if ( ! pFnFindEnemyPlayer )
		pFnFindEnemyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 35439 ];

	ATgDeploy_Artillery_execFindEnemyPlayer_Parms FindEnemyPlayer_Parms;

	pFnFindEnemyPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEnemyPlayer, &FindEnemyPlayer_Parms, NULL );

	pFnFindEnemyPlayer->FunctionFlags |= 0x400;

	return FindEnemyPlayer_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Artillery.FindTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgDeploy_Artillery::FindTarget ( )
{
	static UFunction* pFnFindTarget = NULL;

	if ( ! pFnFindTarget )
		pFnFindTarget = (UFunction*) UObject::GObjObjects()->Data[ 35437 ];

	ATgDeploy_Artillery_execFindTarget_Parms FindTarget_Parms;

	pFnFindTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTarget, &FindTarget_Parms, NULL );

	pFnFindTarget->FunctionFlags |= 0x400;

	return FindTarget_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Beacon.PickUpDeployable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 pReceiver                      ( CPF_Parm )

bool ATgDeploy_Beacon::PickUpDeployable ( class ATgPawn* pReceiver )
{
	static UFunction* pFnPickUpDeployable = NULL;

	if ( ! pFnPickUpDeployable )
		pFnPickUpDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35492 ];

	ATgDeploy_Beacon_execPickUpDeployable_Parms PickUpDeployable_Parms;
	PickUpDeployable_Parms.pReceiver = pReceiver;

	this->ProcessEvent ( pFnPickUpDeployable, &PickUpDeployable_Parms, NULL );

	return PickUpDeployable_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Beacon.StopFire
// [0x00020100] 
// Parameters infos:

void ATgDeploy_Beacon::StopFire ( )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 35491 ];

	ATgDeploy_Beacon_execStopFire_Parms StopFire_Parms;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.StartFire
// [0x00020100] 
// Parameters infos:

void ATgDeploy_Beacon::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35490 ];

	ATgDeploy_Beacon_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.SetActiveState
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_Beacon::eventSetActiveState ( )
{
	static UFunction* pFnSetActiveState = NULL;

	if ( ! pFnSetActiveState )
		pFnSetActiveState = (UFunction*) UObject::GObjObjects()->Data[ 35489 ];

	ATgDeploy_Beacon_eventSetActiveState_Parms SetActiveState_Parms;

	this->ProcessEvent ( pFnSetActiveState, &SetActiveState_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgDeploy_Beacon::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 35485 ];

	ATgDeploy_Beacon_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDeploy_Beacon::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35482 ];

	ATgDeploy_Beacon_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.DestroyIt
// [0x00024102] 
// Parameters infos:
// unsigned long                  bSkipFx                        ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_Beacon::DestroyIt ( unsigned long bSkipFx )
{
	static UFunction* pFnDestroyIt = NULL;

	if ( ! pFnDestroyIt )
		pFnDestroyIt = (UFunction*) UObject::GObjObjects()->Data[ 35478 ];

	ATgDeploy_Beacon_execDestroyIt_Parms DestroyIt_Parms;
	DestroyIt_Parms.bSkipFx = bSkipFx;

	this->ProcessEvent ( pFnDestroyIt, &DestroyIt_Parms, NULL );
};

// Function TgGame.TgDeploy_Beacon.SendBeaconDestroyedMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tfri                           ( CPF_Parm )
// class ATgPawn*                 destroyer                      ( CPF_Parm )

void ATgDeploy_Beacon::SendBeaconDestroyedMessage ( class ATgRepInfo_TaskForce* tfri, class ATgPawn* destroyer )
{
	static UFunction* pFnSendBeaconDestroyedMessage = NULL;

	if ( ! pFnSendBeaconDestroyedMessage )
		pFnSendBeaconDestroyedMessage = (UFunction*) UObject::GObjObjects()->Data[ 35466 ];

	ATgDeploy_Beacon_execSendBeaconDestroyedMessage_Parms SendBeaconDestroyedMessage_Parms;
	SendBeaconDestroyedMessage_Parms.tfri = tfri;
	SendBeaconDestroyedMessage_Parms.destroyer = destroyer;

	pFnSendBeaconDestroyedMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendBeaconDestroyedMessage, &SendBeaconDestroyedMessage_Parms, NULL );

	pFnSendBeaconDestroyedMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeploy_BeaconEntrance.RecheckActiveTimer
// [0x00020102] 
// Parameters infos:

void ATgDeploy_BeaconEntrance::RecheckActiveTimer ( )
{
	static UFunction* pFnRecheckActiveTimer = NULL;

	if ( ! pFnRecheckActiveTimer )
		pFnRecheckActiveTimer = (UFunction*) UObject::GObjObjects()->Data[ 35524 ];

	ATgDeploy_BeaconEntrance_execRecheckActiveTimer_Parms RecheckActiveTimer_Parms;

	this->ProcessEvent ( pFnRecheckActiveTimer, &RecheckActiveTimer_Parms, NULL );
};

// Function TgGame.TgDeploy_BeaconEntrance.HasExit
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_BeaconEntrance::HasExit ( )
{
	static UFunction* pFnHasExit = NULL;

	if ( ! pFnHasExit )
		pFnHasExit = (UFunction*) UObject::GObjObjects()->Data[ 35519 ];

	ATgDeploy_BeaconEntrance_execHasExit_Parms HasExit_Parms;

	this->ProcessEvent ( pFnHasExit, &HasExit_Parms, NULL );

	return HasExit_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_BeaconEntrance.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDeploy_BeaconEntrance::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35516 ];

	ATgDeploy_BeaconEntrance_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgDeploy_BeaconEntrance.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDeploy_BeaconEntrance::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35510 ];

	ATgDeploy_BeaconEntrance_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDeploy_BeaconEntrance.UpdateLocalFx
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_BeaconEntrance::eventUpdateLocalFx ( )
{
	static UFunction* pFnUpdateLocalFx = NULL;

	if ( ! pFnUpdateLocalFx )
		pFnUpdateLocalFx = (UFunction*) UObject::GObjObjects()->Data[ 35509 ];

	ATgDeploy_BeaconEntrance_eventUpdateLocalFx_Parms UpdateLocalFx_Parms;

	this->ProcessEvent ( pFnUpdateLocalFx, &UpdateLocalFx_Parms, NULL );
};

// Function TgGame.TgDeploy_BeaconEntrance.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDeploy_BeaconEntrance::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 35507 ];

	ATgDeploy_BeaconEntrance_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDeploy_BeaconEntrance.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgDeploy_BeaconEntrance::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35506 ];

	ATgDeploy_BeaconEntrance_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeploy_DestructibleCover.ShouldTakeDamageFromAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDeviceAttackType              ( CPF_Parm )

bool ATgDeploy_DestructibleCover::ShouldTakeDamageFromAttack ( int nDeviceAttackType )
{
	static UFunction* pFnShouldTakeDamageFromAttack = NULL;

	if ( ! pFnShouldTakeDamageFromAttack )
		pFnShouldTakeDamageFromAttack = (UFunction*) UObject::GObjObjects()->Data[ 35540 ];

	ATgDeploy_DestructibleCover_execShouldTakeDamageFromAttack_Parms ShouldTakeDamageFromAttack_Parms;
	ShouldTakeDamageFromAttack_Parms.nDeviceAttackType = nDeviceAttackType;

	this->ProcessEvent ( pFnShouldTakeDamageFromAttack, &ShouldTakeDamageFromAttack_Parms, NULL );

	return ShouldTakeDamageFromAttack_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_DestructibleCover.ShouldStartFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_DestructibleCover::ShouldStartFire ( )
{
	static UFunction* pFnShouldStartFire = NULL;

	if ( ! pFnShouldStartFire )
		pFnShouldStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35538 ];

	ATgDeploy_DestructibleCover_execShouldStartFire_Parms ShouldStartFire_Parms;

	this->ProcessEvent ( pFnShouldStartFire, &ShouldStartFire_Parms, NULL );

	return ShouldStartFire_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_DestructibleCover.CheckDeathBehavior
// [0x00020002] 
// Parameters infos:

void ATgDeploy_DestructibleCover::CheckDeathBehavior ( )
{
	static UFunction* pFnCheckDeathBehavior = NULL;

	if ( ! pFnCheckDeathBehavior )
		pFnCheckDeathBehavior = (UFunction*) UObject::GObjObjects()->Data[ 35537 ];

	ATgDeploy_DestructibleCover_execCheckDeathBehavior_Parms CheckDeathBehavior_Parms;

	this->ProcessEvent ( pFnCheckDeathBehavior, &CheckDeathBehavior_Parms, NULL );
};

// Function TgGame.TgDeploy_DestructibleCover.StartFire
// [0x00020102] 
// Parameters infos:

void ATgDeploy_DestructibleCover::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35536 ];

	ATgDeploy_DestructibleCover_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgDeploy_DestructibleCover.DestroyIt
// [0x00024102] 
// Parameters infos:
// unsigned long                  SkipFx                         ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_DestructibleCover::DestroyIt ( unsigned long SkipFx )
{
	static UFunction* pFnDestroyIt = NULL;

	if ( ! pFnDestroyIt )
		pFnDestroyIt = (UFunction*) UObject::GObjObjects()->Data[ 35534 ];

	ATgDeploy_DestructibleCover_execDestroyIt_Parms DestroyIt_Parms;
	DestroyIt_Parms.SkipFx = SkipFx;

	this->ProcessEvent ( pFnDestroyIt, &DestroyIt_Parms, NULL );
};

// Function TgGame.TgDeploy_DestructibleCover.SpawnLoot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeploy_DestructibleCover::SpawnLoot ( )
{
	static UFunction* pFnSpawnLoot = NULL;

	if ( ! pFnSpawnLoot )
		pFnSpawnLoot = (UFunction*) UObject::GObjObjects()->Data[ 35530 ];

	ATgDeploy_DestructibleCover_execSpawnLoot_Parms SpawnLoot_Parms;

	pFnSpawnLoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnLoot, &SpawnLoot_Parms, NULL );

	pFnSpawnLoot->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeploy_ForceField.CanBeRepaired
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_ForceField::CanBeRepaired ( )
{
	static UFunction* pFnCanBeRepaired = NULL;

	if ( ! pFnCanBeRepaired )
		pFnCanBeRepaired = (UFunction*) UObject::GObjObjects()->Data[ 35575 ];

	ATgDeploy_ForceField_execCanBeRepaired_Parms CanBeRepaired_Parms;

	this->ProcessEvent ( pFnCanBeRepaired, &CanBeRepaired_Parms, NULL );

	return CanBeRepaired_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_ForceField.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDeploy_ForceField::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35570 ];

	ATgDeploy_ForceField_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_ForceField::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 35562 ];

	ATgDeploy_ForceField_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.StopFire
// [0x00020100] 
// Parameters infos:

void ATgDeploy_ForceField::StopFire ( )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 35561 ];

	ATgDeploy_ForceField_execStopFire_Parms StopFire_Parms;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.StartFire
// [0x00020100] 
// Parameters infos:

void ATgDeploy_ForceField::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35560 ];

	ATgDeploy_ForceField_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.SetActiveState
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_ForceField::eventSetActiveState ( )
{
	static UFunction* pFnSetActiveState = NULL;

	if ( ! pFnSetActiveState )
		pFnSetActiveState = (UFunction*) UObject::GObjObjects()->Data[ 35559 ];

	ATgDeploy_ForceField_eventSetActiveState_Parms SetActiveState_Parms;

	this->ProcessEvent ( pFnSetActiveState, &SetActiveState_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.GetDamageReduction
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDamageType                    ( CPF_Parm )

float ATgDeploy_ForceField::GetDamageReduction ( int nDamageType )
{
	static UFunction* pFnGetDamageReduction = NULL;

	if ( ! pFnGetDamageReduction )
		pFnGetDamageReduction = (UFunction*) UObject::GObjObjects()->Data[ 35555 ];

	ATgDeploy_ForceField_execGetDamageReduction_Parms GetDamageReduction_Parms;
	GetDamageReduction_Parms.nDamageType = nDamageType;

	this->ProcessEvent ( pFnGetDamageReduction, &GetDamageReduction_Parms, NULL );

	return GetDamageReduction_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_ForceField.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDeploy_ForceField::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35554 ];

	ATgDeploy_ForceField_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_ForceField::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35552 ];

	ATgDeploy_ForceField_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeploy_ForceField.AdjustMeshToGround
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeploy_ForceField::AdjustMeshToGround ( )
{
	static UFunction* pFnAdjustMeshToGround = NULL;

	if ( ! pFnAdjustMeshToGround )
		pFnAdjustMeshToGround = (UFunction*) UObject::GObjObjects()->Data[ 35551 ];

	ATgDeploy_ForceField_execAdjustMeshToGround_Parms AdjustMeshToGround_Parms;

	pFnAdjustMeshToGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustMeshToGround, &AdjustMeshToGround_Parms, NULL );

	pFnAdjustMeshToGround->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeploy_Sensor.SendWarning
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 TouchedPlayer                  ( CPF_Parm )

void ATgDeploy_Sensor::SendWarning ( class ATgPawn* TouchedPlayer )
{
	static UFunction* pFnSendWarning = NULL;

	if ( ! pFnSendWarning )
		pFnSendWarning = (UFunction*) UObject::GObjObjects()->Data[ 35655 ];

	ATgDeploy_Sensor_execSendWarning_Parms SendWarning_Parms;
	SendWarning_Parms.TouchedPlayer = TouchedPlayer;

	this->ProcessEvent ( pFnSendWarning, &SendWarning_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.DestroyIt
// [0x00024102] 
// Parameters infos:
// unsigned long                  bSkipFx                        ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_Sensor::DestroyIt ( unsigned long bSkipFx )
{
	static UFunction* pFnDestroyIt = NULL;

	if ( ! pFnDestroyIt )
		pFnDestroyIt = (UFunction*) UObject::GObjObjects()->Data[ 35653 ];

	ATgDeploy_Sensor_execDestroyIt_Parms DestroyIt_Parms;
	DestroyIt_Parms.bSkipFx = bSkipFx;

	this->ProcessEvent ( pFnDestroyIt, &DestroyIt_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.RemoveAllPlayersFromList
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForceClear                    ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_Sensor::RemoveAllPlayersFromList ( unsigned long bForceClear )
{
	static UFunction* pFnRemoveAllPlayersFromList = NULL;

	if ( ! pFnRemoveAllPlayersFromList )
		pFnRemoveAllPlayersFromList = (UFunction*) UObject::GObjObjects()->Data[ 35647 ];

	ATgDeploy_Sensor_execRemoveAllPlayersFromList_Parms RemoveAllPlayersFromList_Parms;
	RemoveAllPlayersFromList_Parms.bForceClear = bForceClear;

	this->ProcessEvent ( pFnRemoveAllPlayersFromList, &RemoveAllPlayersFromList_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.RecalcSensorAlertLevel
// [0x00024002] 
// Parameters infos:
// class ATgPawn*                 Pawn                           ( CPF_Parm )
// int                            nActionFlag                    ( CPF_Parm )
// int                            nTriggerEventFlag              ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void ATgDeploy_Sensor::RecalcSensorAlertLevel ( class ATgPawn* Pawn, int nActionFlag, int nTriggerEventFlag, unsigned long bRemove )
{
	static UFunction* pFnRecalcSensorAlertLevel = NULL;

	if ( ! pFnRecalcSensorAlertLevel )
		pFnRecalcSensorAlertLevel = (UFunction*) UObject::GObjObjects()->Data[ 35640 ];

	ATgDeploy_Sensor_execRecalcSensorAlertLevel_Parms RecalcSensorAlertLevel_Parms;
	RecalcSensorAlertLevel_Parms.Pawn = Pawn;
	RecalcSensorAlertLevel_Parms.nActionFlag = nActionFlag;
	RecalcSensorAlertLevel_Parms.nTriggerEventFlag = nTriggerEventFlag;
	RecalcSensorAlertLevel_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnRecalcSensorAlertLevel, &RecalcSensorAlertLevel_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.GeneratePawnFlag
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )

int ATgDeploy_Sensor::GeneratePawnFlag ( class ATgPawn* P )
{
	static UFunction* pFnGeneratePawnFlag = NULL;

	if ( ! pFnGeneratePawnFlag )
		pFnGeneratePawnFlag = (UFunction*) UObject::GObjObjects()->Data[ 35636 ];

	ATgDeploy_Sensor_execGeneratePawnFlag_Parms GeneratePawnFlag_Parms;
	GeneratePawnFlag_Parms.P = P;

	this->ProcessEvent ( pFnGeneratePawnFlag, &GeneratePawnFlag_Parms, NULL );

	return GeneratePawnFlag_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Sensor.RemovePlayerFromList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 Pawn                           ( CPF_Parm )
// int                            indx                           ( CPF_Parm )

bool ATgDeploy_Sensor::RemovePlayerFromList ( class ATgPawn* Pawn, int indx )
{
	static UFunction* pFnRemovePlayerFromList = NULL;

	if ( ! pFnRemovePlayerFromList )
		pFnRemovePlayerFromList = (UFunction*) UObject::GObjObjects()->Data[ 35630 ];

	ATgDeploy_Sensor_execRemovePlayerFromList_Parms RemovePlayerFromList_Parms;
	RemovePlayerFromList_Parms.Pawn = Pawn;
	RemovePlayerFromList_Parms.indx = indx;

	this->ProcessEvent ( pFnRemovePlayerFromList, &RemovePlayerFromList_Parms, NULL );

	return RemovePlayerFromList_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Sensor.AddPlayerToList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            indx                           ( CPF_Parm )

bool ATgDeploy_Sensor::AddPlayerToList ( class ATgPawn* P, int indx )
{
	static UFunction* pFnAddPlayerToList = NULL;

	if ( ! pFnAddPlayerToList )
		pFnAddPlayerToList = (UFunction*) UObject::GObjObjects()->Data[ 35622 ];

	ATgDeploy_Sensor_execAddPlayerToList_Parms AddPlayerToList_Parms;
	AddPlayerToList_Parms.P = P;
	AddPlayerToList_Parms.indx = indx;

	this->ProcessEvent ( pFnAddPlayerToList, &AddPlayerToList_Parms, NULL );

	return AddPlayerToList_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Sensor.ShouldPawnTriggerSensor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPawnFlag                      ( CPF_Parm )
// int                            indx                           ( CPF_Parm )

bool ATgDeploy_Sensor::ShouldPawnTriggerSensor ( int nPawnFlag, int indx )
{
	static UFunction* pFnShouldPawnTriggerSensor = NULL;

	if ( ! pFnShouldPawnTriggerSensor )
		pFnShouldPawnTriggerSensor = (UFunction*) UObject::GObjObjects()->Data[ 35618 ];

	ATgDeploy_Sensor_execShouldPawnTriggerSensor_Parms ShouldPawnTriggerSensor_Parms;
	ShouldPawnTriggerSensor_Parms.nPawnFlag = nPawnFlag;
	ShouldPawnTriggerSensor_Parms.indx = indx;

	this->ProcessEvent ( pFnShouldPawnTriggerSensor, &ShouldPawnTriggerSensor_Parms, NULL );

	return ShouldPawnTriggerSensor_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Sensor.ClearCounter
// [0x00020102] 
// Parameters infos:

void ATgDeploy_Sensor::ClearCounter ( )
{
	static UFunction* pFnClearCounter = NULL;

	if ( ! pFnClearCounter )
		pFnClearCounter = (UFunction*) UObject::GObjObjects()->Data[ 35617 ];

	ATgDeploy_Sensor_execClearCounter_Parms ClearCounter_Parms;

	this->ProcessEvent ( pFnClearCounter, &ClearCounter_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.UpdateCounter
// [0x00020102] 
// Parameters infos:

void ATgDeploy_Sensor::UpdateCounter ( )
{
	static UFunction* pFnUpdateCounter = NULL;

	if ( ! pFnUpdateCounter )
		pFnUpdateCounter = (UFunction*) UObject::GObjObjects()->Data[ 35616 ];

	ATgDeploy_Sensor_execUpdateCounter_Parms UpdateCounter_Parms;

	this->ProcessEvent ( pFnUpdateCounter, &UpdateCounter_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDeploy_Sensor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 35614 ];

	ATgDeploy_Sensor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.ShouldTriggerAudioWarning
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nActionFlag                    ( CPF_OptionalParm | CPF_Parm )

bool ATgDeploy_Sensor::eventShouldTriggerAudioWarning ( class ATgPawn* P, int nActionFlag )
{
	static UFunction* pFnShouldTriggerAudioWarning = NULL;

	if ( ! pFnShouldTriggerAudioWarning )
		pFnShouldTriggerAudioWarning = (UFunction*) UObject::GObjObjects()->Data[ 35610 ];

	ATgDeploy_Sensor_eventShouldTriggerAudioWarning_Parms ShouldTriggerAudioWarning_Parms;
	ShouldTriggerAudioWarning_Parms.P = P;
	ShouldTriggerAudioWarning_Parms.nActionFlag = nActionFlag;

	this->ProcessEvent ( pFnShouldTriggerAudioWarning, &ShouldTriggerAudioWarning_Parms, NULL );

	return ShouldTriggerAudioWarning_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_Sensor.CheckPlayersWithInProximity
// [0x00020002] 
// Parameters infos:

void ATgDeploy_Sensor::CheckPlayersWithInProximity ( )
{
	static UFunction* pFnCheckPlayersWithInProximity = NULL;

	if ( ! pFnCheckPlayersWithInProximity )
		pFnCheckPlayersWithInProximity = (UFunction*) UObject::GObjObjects()->Data[ 35603 ];

	ATgDeploy_Sensor_execCheckPlayersWithInProximity_Parms CheckPlayersWithInProximity_Parms;

	this->ProcessEvent ( pFnCheckPlayersWithInProximity, &CheckPlayersWithInProximity_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDeploy_Sensor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35599 ];

	ATgDeploy_Sensor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgDeploy_Sensor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_Sensor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35598 ];

	ATgDeploy_Sensor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.FireAmmunitionDeployable
// [0x00020002] 
// Parameters infos:

void ATgDeploy_SweepSensor::FireAmmunitionDeployable ( )
{
	static UFunction* pFnFireAmmunitionDeployable = NULL;

	if ( ! pFnFireAmmunitionDeployable )
		pFnFireAmmunitionDeployable = (UFunction*) UObject::GObjObjects()->Data[ 35788 ];

	ATgDeploy_SweepSensor_execFireAmmunitionDeployable_Parms FireAmmunitionDeployable_Parms;

	this->ProcessEvent ( pFnFireAmmunitionDeployable, &FireAmmunitionDeployable_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.HitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgDeploy_SweepSensor::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 35784 ];

	ATgDeploy_SweepSensor_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDeploy_SweepSensor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 35782 ];

	ATgDeploy_SweepSensor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.CalcDeviceFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ATgDeploy_SweepSensor::CalcDeviceFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcDeviceFire = NULL;

	if ( ! pFnCalcDeviceFire )
		pFnCalcDeviceFire = (UFunction*) UObject::GObjObjects()->Data[ 35775 ];

	ATgDeploy_SweepSensor_execCalcDeviceFire_Parms CalcDeviceFire_Parms;
	memcpy ( &CalcDeviceFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcDeviceFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcDeviceFire, &CalcDeviceFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcDeviceFire_Parms.ImpactList, 0xC );

	return CalcDeviceFire_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_SweepSensor.UnTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDeploy_SweepSensor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35773 ];

	ATgDeploy_SweepSensor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.ShouldStartFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_SweepSensor::ShouldStartFire ( )
{
	static UFunction* pFnShouldStartFire = NULL;

	if ( ! pFnShouldStartFire )
		pFnShouldStartFire = (UFunction*) UObject::GObjObjects()->Data[ 35767 ];

	ATgDeploy_SweepSensor_execShouldStartFire_Parms ShouldStartFire_Parms;

	this->ProcessEvent ( pFnShouldStartFire, &ShouldStartFire_Parms, NULL );

	return ShouldStartFire_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_SweepSensor.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgDeploy_SweepSensor::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 35766 ];

	ATgDeploy_SweepSensor_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_SweepSensor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35765 ];

	ATgDeploy_SweepSensor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.UpdateBeamEnd
// [0x00820102] 
// Parameters infos:

void ATgDeploy_SweepSensor::UpdateBeamEnd ( )
{
	static UFunction* pFnUpdateBeamEnd = NULL;

	if ( ! pFnUpdateBeamEnd )
		pFnUpdateBeamEnd = (UFunction*) UObject::GObjObjects()->Data[ 35763 ];

	ATgDeploy_SweepSensor_execUpdateBeamEnd_Parms UpdateBeamEnd_Parms;

	this->ProcessEvent ( pFnUpdateBeamEnd, &UpdateBeamEnd_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.PostDeploySetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_SweepSensor::eventPostDeploySetup ( )
{
	static UFunction* pFnPostDeploySetup = NULL;

	if ( ! pFnPostDeploySetup )
		pFnPostDeploySetup = (UFunction*) UObject::GObjObjects()->Data[ 35755 ];

	ATgDeploy_SweepSensor_eventPostDeploySetup_Parms PostDeploySetup_Parms;

	this->ProcessEvent ( pFnPostDeploySetup, &PostDeploySetup_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgDeploy_SweepSensor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 35753 ];

	ATgDeploy_SweepSensor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.InterpolateMoveRotation
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgDeploy_SweepSensor::InterpolateMoveRotation ( float DeltaTime )
{
	static UFunction* pFnInterpolateMoveRotation = NULL;

	if ( ! pFnInterpolateMoveRotation )
		pFnInterpolateMoveRotation = (UFunction*) UObject::GObjObjects()->Data[ 35749 ];

	ATgDeploy_SweepSensor_execInterpolateMoveRotation_Parms InterpolateMoveRotation_Parms;
	InterpolateMoveRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnInterpolateMoveRotation, &InterpolateMoveRotation_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.InterpolateMoveLocation
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgDeploy_SweepSensor::InterpolateMoveLocation ( float DeltaTime )
{
	static UFunction* pFnInterpolateMoveLocation = NULL;

	if ( ! pFnInterpolateMoveLocation )
		pFnInterpolateMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 35744 ];

	ATgDeploy_SweepSensor_execInterpolateMoveLocation_Parms InterpolateMoveLocation_Parms;
	InterpolateMoveLocation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnInterpolateMoveLocation, &InterpolateMoveLocation_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.Bump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDeploy_SweepSensor::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 35740 ];

	ATgDeploy_SweepSensor_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.BumpLevel
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgDeploy_SweepSensor::eventBumpLevel ( )
{
	static UFunction* pFnBumpLevel = NULL;

	if ( ! pFnBumpLevel )
		pFnBumpLevel = (UFunction*) UObject::GObjObjects()->Data[ 35739 ];

	ATgDeploy_SweepSensor_eventBumpLevel_Parms BumpLevel_Parms;

	this->ProcessEvent ( pFnBumpLevel, &BumpLevel_Parms, NULL );
};

// Function TgGame.TgDeploy_SweepSensor.GetMeshLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgDeploy_SweepSensor::GetMeshLength ( )
{
	static UFunction* pFnGetMeshLength = NULL;

	if ( ! pFnGetMeshLength )
		pFnGetMeshLength = (UFunction*) UObject::GObjObjects()->Data[ 35737 ];

	ATgDeploy_SweepSensor_execGetMeshLength_Parms GetMeshLength_Parms;

	pFnGetMeshLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMeshLength, &GetMeshLength_Parms, NULL );

	pFnGetMeshLength->FunctionFlags |= 0x400;

	return GetMeshLength_Parms.ReturnValue;
};

// Function TgGame.TgDeploy_SweepSensor.PostInitialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeploy_SweepSensor::PostInitialize ( )
{
	static UFunction* pFnPostInitialize = NULL;

	if ( ! pFnPostInitialize )
		pFnPostInitialize = (UFunction*) UObject::GObjObjects()->Data[ 35736 ];

	ATgDeploy_SweepSensor_execPostInitialize_Parms PostInitialize_Parms;

	pFnPostInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitialize, &PostInitialize_Parms, NULL );

	pFnPostInitialize->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeploy_SweepSensor.DrawClientDebug
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeploy_SweepSensor::DrawClientDebug ( )
{
	static UFunction* pFnDrawClientDebug = NULL;

	if ( ! pFnDrawClientDebug )
		pFnDrawClientDebug = (UFunction*) UObject::GObjObjects()->Data[ 35735 ];

	ATgDeploy_SweepSensor_execDrawClientDebug_Parms DrawClientDebug_Parms;

	pFnDrawClientDebug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawClientDebug, &DrawClientDebug_Parms, NULL );

	pFnDrawClientDebug->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeploy_SweepSensor.ApplyDeployableSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeploy_SweepSensor::ApplyDeployableSetup ( )
{
	static UFunction* pFnApplyDeployableSetup = NULL;

	if ( ! pFnApplyDeployableSetup )
		pFnApplyDeployableSetup = (UFunction*) UObject::GObjObjects()->Data[ 35733 ];

	ATgDeploy_SweepSensor_execApplyDeployableSetup_Parms ApplyDeployableSetup_Parms;

	pFnApplyDeployableSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDeployableSetup, &ApplyDeployableSetup_Parms, NULL );

	pFnApplyDeployableSetup->FunctionFlags |= 0x400;

	return ApplyDeployableSetup_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.PlayLandingSound
// [0x00820102] 
// Parameters infos:
// class AActor*                  LandingHitActor                ( CPF_Parm )

void ATgProjectile::PlayLandingSound ( class AActor* LandingHitActor )
{
	static UFunction* pFnPlayLandingSound = NULL;

	if ( ! pFnPlayLandingSound )
		pFnPlayLandingSound = (UFunction*) UObject::GObjObjects()->Data[ 46336 ];

	ATgProjectile_execPlayLandingSound_Parms PlayLandingSound_Parms;
	PlayLandingSound_Parms.LandingHitActor = LandingHitActor;

	this->ProcessEvent ( pFnPlayLandingSound, &PlayLandingSound_Parms, NULL );
};

// Function TgGame.TgProjectile.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgProjectile::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46334 ];

	ATgProjectile_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgProjectile.ServerDetonate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgProjectile::eventServerDetonate ( )
{
	static UFunction* pFnServerDetonate = NULL;

	if ( ! pFnServerDetonate )
		pFnServerDetonate = (UFunction*) UObject::GObjObjects()->Data[ 46333 ];

	ATgProjectile_eventServerDetonate_Parms ServerDetonate_Parms;

	this->ProcessEvent ( pFnServerDetonate, &ServerDetonate_Parms, NULL );
};

// Function TgGame.TgProjectile.ProjectileCalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ATgProjectile::ProjectileCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnProjectileCalcCamera = NULL;

	if ( ! pFnProjectileCalcCamera )
		pFnProjectileCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 46326 ];

	ATgProjectile_execProjectileCalcCamera_Parms ProjectileCalcCamera_Parms;
	ProjectileCalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnProjectileCalcCamera, &ProjectileCalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &ProjectileCalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &ProjectileCalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = ProjectileCalcCamera_Parms.out_FOV;

	return ProjectileCalcCamera_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.MyOnParticleSystemFinished
// [0x00020100] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ATgProjectile::MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnMyOnParticleSystemFinished = NULL;

	if ( ! pFnMyOnParticleSystemFinished )
		pFnMyOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 46324 ];

	ATgProjectile_execMyOnParticleSystemFinished_Parms MyOnParticleSystemFinished_Parms;
	MyOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnMyOnParticleSystemFinished, &MyOnParticleSystemFinished_Parms, NULL );
};

// Function TgGame.TgProjectile.Destroyed
// [0x00820102] 
// Parameters infos:

void ATgProjectile::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46322 ];

	ATgProjectile_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgProjectile.HideProjectile
// [0x00020102] 
// Parameters infos:

void ATgProjectile::HideProjectile ( )
{
	static UFunction* pFnHideProjectile = NULL;

	if ( ! pFnHideProjectile )
		pFnHideProjectile = (UFunction*) UObject::GObjObjects()->Data[ 46320 ];

	ATgProjectile_execHideProjectile_Parms HideProjectile_Parms;

	this->ProcessEvent ( pFnHideProjectile, &HideProjectile_Parms, NULL );
};

// Function TgGame.TgProjectile.TornOff
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgProjectile::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 46319 ];

	ATgProjectile_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgProjectile.ShutDown
// [0x00020102] 
// Parameters infos:

void ATgProjectile::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 46318 ];

	ATgProjectile_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function TgGame.TgProjectile.SpawnExplosionEffects
// [0x00024102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FIMPACT_FX              ImpactFx                       ( CPF_OptionalParm | CPF_Parm )

void ATgProjectile::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal, struct FIMPACT_FX ImpactFx )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 46313 ];

	ATgProjectile_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.ImpactFx, &ImpactFx, 0x24 );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function TgGame.TgProjectile.SpawnFlightEffects
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgProjectile::eventSpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = (UFunction*) UObject::GObjObjects()->Data[ 46312 ];

	ATgProjectile_eventSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function TgGame.TgProjectile.ExplodeOnTarget
// [0x00820102] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProjectile::ExplodeOnTarget ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplodeOnTarget = NULL;

	if ( ! pFnExplodeOnTarget )
		pFnExplodeOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 46301 ];

	ATgProjectile_execExplodeOnTarget_Parms ExplodeOnTarget_Parms;
	ExplodeOnTarget_Parms.Target = Target;
	memcpy ( &ExplodeOnTarget_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ExplodeOnTarget_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplodeOnTarget, &ExplodeOnTarget_Parms, NULL );
};

// Function TgGame.TgProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 46298 ];

	ATgProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function TgGame.TgProjectile.ApplyHit
// [0x00824002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            HitItem                        ( CPF_OptionalParm | CPF_Parm )

void ATgProjectile::ApplyHit ( class AActor* Target, struct FVector HitLocation, struct FVector HitNormal, int HitItem )
{
	static UFunction* pFnApplyHit = NULL;

	if ( ! pFnApplyHit )
		pFnApplyHit = (UFunction*) UObject::GObjObjects()->Data[ 46287 ];

	ATgProjectile_execApplyHit_Parms ApplyHit_Parms;
	ApplyHit_Parms.Target = Target;
	memcpy ( &ApplyHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyHit_Parms.HitNormal, &HitNormal, 0xC );
	ApplyHit_Parms.HitItem = HitItem;

	this->ProcessEvent ( pFnApplyHit, &ApplyHit_Parms, NULL );
};

// Function TgGame.TgProjectile.CheckTeamPassThrough
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool ATgProjectile::CheckTeamPassThrough ( class AActor* Other )
{
	static UFunction* pFnCheckTeamPassThrough = NULL;

	if ( ! pFnCheckTeamPassThrough )
		pFnCheckTeamPassThrough = (UFunction*) UObject::GObjObjects()->Data[ 46275 ];

	ATgProjectile_execCheckTeamPassThrough_Parms CheckTeamPassThrough_Parms;
	CheckTeamPassThrough_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckTeamPassThrough, &CheckTeamPassThrough_Parms, NULL );

	return CheckTeamPassThrough_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitRotation                    ( CPF_Parm )

void ATgProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitRotation )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 46270 ];

	ATgProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitRotation, &HitRotation, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgProjectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 46266 ];

	ATgProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function TgGame.TgProjectile.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProjectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46262 ];

	ATgProjectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProjectile.IsOutsideMinRange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgProjectile::IsOutsideMinRange ( )
{
	static UFunction* pFnIsOutsideMinRange = NULL;

	if ( ! pFnIsOutsideMinRange )
		pFnIsOutsideMinRange = (UFunction*) UObject::GObjObjects()->Data[ 46259 ];

	ATgProjectile_execIsOutsideMinRange_Parms IsOutsideMinRange_Parms;

	this->ProcessEvent ( pFnIsOutsideMinRange, &IsOutsideMinRange_Parms, NULL );

	return IsOutsideMinRange_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.SetAcceleration
// [0x00020102] 
// Parameters infos:

void ATgProjectile::SetAcceleration ( )
{
	static UFunction* pFnSetAcceleration = NULL;

	if ( ! pFnSetAcceleration )
		pFnSetAcceleration = (UFunction*) UObject::GObjObjects()->Data[ 46258 ];

	ATgProjectile_execSetAcceleration_Parms SetAcceleration_Parms;

	this->ProcessEvent ( pFnSetAcceleration, &SetAcceleration_Parms, NULL );
};

// Function TgGame.TgProjectile.ProximityReached
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )

bool ATgProjectile::ProximityReached ( class ATgPawn* P )
{
	static UFunction* pFnProximityReached = NULL;

	if ( ! pFnProximityReached )
		pFnProximityReached = (UFunction*) UObject::GObjObjects()->Data[ 46253 ];

	ATgProjectile_execProximityReached_Parms ProximityReached_Parms;
	ProximityReached_Parms.P = P;

	this->ProcessEvent ( pFnProximityReached, &ProximityReached_Parms, NULL );

	return ProximityReached_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.IsInsideMinProxyRange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgProjectile::IsInsideMinProxyRange ( )
{
	static UFunction* pFnIsInsideMinProxyRange = NULL;

	if ( ! pFnIsInsideMinProxyRange )
		pFnIsInsideMinProxyRange = (UFunction*) UObject::GObjObjects()->Data[ 46250 ];

	ATgProjectile_execIsInsideMinProxyRange_Parms IsInsideMinProxyRange_Parms;

	this->ProcessEvent ( pFnIsInsideMinProxyRange, &IsInsideMinProxyRange_Parms, NULL );

	return IsInsideMinProxyRange_Parms.ReturnValue;
};

// Function TgGame.TgProjectile.RangeReached
// [0x00020002] 
// Parameters infos:

void ATgProjectile::RangeReached ( )
{
	static UFunction* pFnRangeReached = NULL;

	if ( ! pFnRangeReached )
		pFnRangeReached = (UFunction*) UObject::GObjObjects()->Data[ 46249 ];

	ATgProjectile_execRangeReached_Parms RangeReached_Parms;

	this->ProcessEvent ( pFnRangeReached, &RangeReached_Parms, NULL );
};

// Function TgGame.TgProjectile.CheckProjectileRange
// [0x00020102] 
// Parameters infos:

void ATgProjectile::CheckProjectileRange ( )
{
	static UFunction* pFnCheckProjectileRange = NULL;

	if ( ! pFnCheckProjectileRange )
		pFnCheckProjectileRange = (UFunction*) UObject::GObjObjects()->Data[ 46248 ];

	ATgProjectile_execCheckProjectileRange_Parms CheckProjectileRange_Parms;

	this->ProcessEvent ( pFnCheckProjectileRange, &CheckProjectileRange_Parms, NULL );
};

// Function TgGame.TgProjectile.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ATgProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46246 ];

	ATgProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function TgGame.TgProjectile.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgProjectile::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 46243 ];

	ATgProjectile_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgProjectile.TimerExplode
// [0x00820102] 
// Parameters infos:

void ATgProjectile::TimerExplode ( )
{
	static UFunction* pFnTimerExplode = NULL;

	if ( ! pFnTimerExplode )
		pFnTimerExplode = (UFunction*) UObject::GObjObjects()->Data[ 46241 ];

	ATgProjectile_execTimerExplode_Parms TimerExplode_Parms;

	this->ProcessEvent ( pFnTimerExplode, &TimerExplode_Parms, NULL );
};

// Function TgGame.TgProjectile.TimerPulse
// [0x00020102] 
// Parameters infos:

void ATgProjectile::TimerPulse ( )
{
	static UFunction* pFnTimerPulse = NULL;

	if ( ! pFnTimerPulse )
		pFnTimerPulse = (UFunction*) UObject::GObjObjects()->Data[ 46240 ];

	ATgProjectile_execTimerPulse_Parms TimerPulse_Parms;

	this->ProcessEvent ( pFnTimerPulse, &TimerPulse_Parms, NULL );
};

// Function TgGame.TgProjectile.ClientSetExplode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgProjectile::eventClientSetExplode ( )
{
	static UFunction* pFnClientSetExplode = NULL;

	if ( ! pFnClientSetExplode )
		pFnClientSetExplode = (UFunction*) UObject::GObjObjects()->Data[ 46239 ];

	ATgProjectile_eventClientSetExplode_Parms ClientSetExplode_Parms;

	this->ProcessEvent ( pFnClientSetExplode, &ClientSetExplode_Parms, NULL );
};

// Function TgGame.TgProjectile.StartPulse
// [0x00020102] 
// Parameters infos:

void ATgProjectile::StartPulse ( )
{
	static UFunction* pFnStartPulse = NULL;

	if ( ! pFnStartPulse )
		pFnStartPulse = (UFunction*) UObject::GObjObjects()->Data[ 46238 ];

	ATgProjectile_execStartPulse_Parms StartPulse_Parms;

	this->ProcessEvent ( pFnStartPulse, &StartPulse_Parms, NULL );
};

// Function TgGame.TgProjectile.PostProjectileInitialize
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgProjectile::eventPostProjectileInitialize ( )
{
	static UFunction* pFnPostProjectileInitialize = NULL;

	if ( ! pFnPostProjectileInitialize )
		pFnPostProjectileInitialize = (UFunction*) UObject::GObjObjects()->Data[ 46237 ];

	ATgProjectile_eventPostProjectileInitialize_Parms PostProjectileInitialize_Parms;

	this->ProcessEvent ( pFnPostProjectileInitialize, &PostProjectileInitialize_Parms, NULL );
};

// Function TgGame.TgProjectile.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgProjectile::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46236 ];

	ATgProjectile_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgProjectile.GetBuffedRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgProjectile::GetBuffedRange ( )
{
	static UFunction* pFnGetBuffedRange = NULL;

	if ( ! pFnGetBuffedRange )
		pFnGetBuffedRange = (UFunction*) UObject::GObjObjects()->Data[ 46234 ];

	ATgProjectile_execGetBuffedRange_Parms GetBuffedRange_Parms;

	pFnGetBuffedRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuffedRange, &GetBuffedRange_Parms, NULL );

	pFnGetBuffedRange->FunctionFlags |= 0x400;

	return GetBuffedRange_Parms.ReturnValue;
};

// Function TgGame.TgProj_Bounce.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgProj_Bounce::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46426 ];

	ATgProj_Bounce_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgProj_Bounce::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 46423 ];

	ATgProj_Bounce_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.AdjustedInit
// [0x00820002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ATgProj_Bounce::AdjustedInit ( struct FVector StartLocation, struct FVector HitLocation )
{
	static UFunction* pFnAdjustedInit = NULL;

	if ( ! pFnAdjustedInit )
		pFnAdjustedInit = (UFunction*) UObject::GObjObjects()->Data[ 46416 ];

	ATgProj_Bounce_execAdjustedInit_Parms AdjustedInit_Parms;
	memcpy ( &AdjustedInit_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &AdjustedInit_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnAdjustedInit, &AdjustedInit_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.SetSpeed
// [0x00020002] 
// Parameters infos:
// float                          Distance                       ( CPF_Parm )

void ATgProj_Bounce::SetSpeed ( float Distance )
{
	static UFunction* pFnSetSpeed = NULL;

	if ( ! pFnSetSpeed )
		pFnSetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 46414 ];

	ATgProj_Bounce_execSetSpeed_Parms SetSpeed_Parms;
	SetSpeed_Parms.Distance = Distance;

	this->ProcessEvent ( pFnSetSpeed, &SetSpeed_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.SuggestProjVelocity
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          projSpeed                      ( CPF_Parm )
// float                          BaseTossZ                      ( CPF_Parm | CPF_OutParm )

bool ATgProj_Bounce::SuggestProjVelocity ( struct FVector End, struct FVector Start, float projSpeed, float* BaseTossZ )
{
	static UFunction* pFnSuggestProjVelocity = NULL;

	if ( ! pFnSuggestProjVelocity )
		pFnSuggestProjVelocity = (UFunction*) UObject::GObjObjects()->Data[ 46397 ];

	ATgProj_Bounce_execSuggestProjVelocity_Parms SuggestProjVelocity_Parms;
	memcpy ( &SuggestProjVelocity_Parms.End, &End, 0xC );
	memcpy ( &SuggestProjVelocity_Parms.Start, &Start, 0xC );
	SuggestProjVelocity_Parms.projSpeed = projSpeed;

	this->ProcessEvent ( pFnSuggestProjVelocity, &SuggestProjVelocity_Parms, NULL );

	if ( BaseTossZ )
		*BaseTossZ = SuggestProjVelocity_Parms.BaseTossZ;

	return SuggestProjVelocity_Parms.ReturnValue;
};

// Function TgGame.TgProj_Bounce.ProcessTouch
// [0x00820102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProj_Bounce::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 46392 ];

	ATgProj_Bounce_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Bounce::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46387 ];

	ATgProj_Bounce_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Bounce.MyOnParticleSystemFinished
// [0x00020100] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ATgProj_Bounce::MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnMyOnParticleSystemFinished = NULL;

	if ( ! pFnMyOnParticleSystemFinished )
		pFnMyOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 46385 ];

	ATgProj_Bounce_execMyOnParticleSystemFinished_Parms MyOnParticleSystemFinished_Parms;
	MyOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnMyOnParticleSystemFinished, &MyOnParticleSystemFinished_Parms, NULL );
};

// Function TgGame.TgProj_Grapple.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgProj_Grapple::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46465 ];

	ATgProj_Grapple_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgProj_Grapple.ReplicatedEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgProj_Grapple::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46463 ];

	ATgProj_Grapple_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgProj_Grapple.InitGrapple
// [0x00020102] 
// Parameters infos:

void ATgProj_Grapple::InitGrapple ( )
{
	static UFunction* pFnInitGrapple = NULL;

	if ( ! pFnInitGrapple )
		pFnInitGrapple = (UFunction*) UObject::GObjObjects()->Data[ 46462 ];

	ATgProj_Grapple_execInitGrapple_Parms InitGrapple_Parms;

	this->ProcessEvent ( pFnInitGrapple, &InitGrapple_Parms, NULL );
};

// Function TgGame.TgProj_Grapple.AdjustedInit
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ATgProj_Grapple::AdjustedInit ( struct FVector StartLocation, struct FVector HitLocation )
{
	static UFunction* pFnAdjustedInit = NULL;

	if ( ! pFnAdjustedInit )
		pFnAdjustedInit = (UFunction*) UObject::GObjObjects()->Data[ 46459 ];

	ATgProj_Grapple_execAdjustedInit_Parms AdjustedInit_Parms;
	memcpy ( &AdjustedInit_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &AdjustedInit_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnAdjustedInit, &AdjustedInit_Parms, NULL );
};

// Function TgGame.TgProj_Grapple.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgProj_Grapple::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46458 ];

	ATgProj_Grapple_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgProj_FreeGrenade::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46363 ];

	ATgProj_FreeGrenade_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgProj_FreeGrenade::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 46360 ];

	ATgProj_FreeGrenade_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.ProcessTouch
// [0x00820102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProj_FreeGrenade::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 46355 ];

	ATgProj_FreeGrenade_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_FreeGrenade::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46350 ];

	ATgProj_FreeGrenade_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.Timer
// [0x00020102] 
// Parameters infos:

void ATgProj_FreeGrenade::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 46349 ];

	ATgProj_FreeGrenade_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.ShutDown
// [0x00020102] 
// Parameters infos:

void ATgProj_FreeGrenade::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 46348 ];

	ATgProj_FreeGrenade_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function TgGame.TgProj_FreeGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgProj_FreeGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46347 ];

	ATgProj_FreeGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgProj_Bot.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Bot::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46376 ];

	ATgProj_Bot_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Bot.SpawnExplosionEffects
// [0x00024100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FIMPACT_FX              ImpactFx                       ( CPF_OptionalParm | CPF_Parm )

void ATgProj_Bot::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal, struct FIMPACT_FX ImpactFx )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 46372 ];

	ATgProj_Bot_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.ImpactFx, &ImpactFx, 0x24 );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function TgGame.TgProj_Bot.SpawnTheBot
// [0x00024002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )

void ATgProj_Bot::SpawnTheBot ( struct FVector HitLocation, class AActor* TargetActor )
{
	static UFunction* pFnSpawnTheBot = NULL;

	if ( ! pFnSpawnTheBot )
		pFnSpawnTheBot = (UFunction*) UObject::GObjObjects()->Data[ 46369 ];

	ATgProj_Bot_execSpawnTheBot_Parms SpawnTheBot_Parms;
	memcpy ( &SpawnTheBot_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTheBot_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnSpawnTheBot, &SpawnTheBot_Parms, NULL );
};

// Function TgGame.TgProj_Bot.SpawnBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )

class ATgPawn* ATgProj_Bot::SpawnBot ( struct FVector vLocation )
{
	static UFunction* pFnSpawnBot = NULL;

	if ( ! pFnSpawnBot )
		pFnSpawnBot = (UFunction*) UObject::GObjObjects()->Data[ 46366 ];

	ATgProj_Bot_execSpawnBot_Parms SpawnBot_Parms;
	memcpy ( &SpawnBot_Parms.vLocation, &vLocation, 0xC );

	pFnSpawnBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBot, &SpawnBot_Parms, NULL );

	pFnSpawnBot->FunctionFlags |= 0x400;

	return SpawnBot_Parms.ReturnValue;
};

// Function TgGame.TgProj_Deployable.RangeReached
// [0x00020002] 
// Parameters infos:

void ATgProj_Deployable::RangeReached ( )
{
	static UFunction* pFnRangeReached = NULL;

	if ( ! pFnRangeReached )
		pFnRangeReached = (UFunction*) UObject::GObjObjects()->Data[ 46450 ];

	ATgProj_Deployable_execRangeReached_Parms RangeReached_Parms;

	this->ProcessEvent ( pFnRangeReached, &RangeReached_Parms, NULL );
};

// Function TgGame.TgProj_Deployable.ServerDetonate
// [0x00020000] 
// Parameters infos:

void ATgProj_Deployable::ServerDetonate ( )
{
	static UFunction* pFnServerDetonate = NULL;

	if ( ! pFnServerDetonate )
		pFnServerDetonate = (UFunction*) UObject::GObjObjects()->Data[ 46449 ];

	ATgProj_Deployable_execServerDetonate_Parms ServerDetonate_Parms;

	this->ProcessEvent ( pFnServerDetonate, &ServerDetonate_Parms, NULL );
};

// Function TgGame.TgProj_Deployable.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Deployable::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46445 ];

	ATgProj_Deployable_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Deployable.SpawnTheDeployable
// [0x00824002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )

void ATgProj_Deployable::SpawnTheDeployable ( struct FVector HitLocation, class AActor* TargetActor, struct FVector HitNormal )
{
	static UFunction* pFnSpawnTheDeployable = NULL;

	if ( ! pFnSpawnTheDeployable )
		pFnSpawnTheDeployable = (UFunction*) UObject::GObjObjects()->Data[ 46434 ];

	ATgProj_Deployable_execSpawnTheDeployable_Parms SpawnTheDeployable_Parms;
	memcpy ( &SpawnTheDeployable_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTheDeployable_Parms.TargetActor = TargetActor;
	memcpy ( &SpawnTheDeployable_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnTheDeployable, &SpawnTheDeployable_Parms, NULL );
};

// Function TgGame.TgProj_Deployable.SpawnDeployable
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgDeployable*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )
// class AActor*                  TargetActor                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 vNormal                        ( CPF_OptionalParm | CPF_Parm )

class ATgDeployable* ATgProj_Deployable::SpawnDeployable ( struct FVector vLocation, class AActor* TargetActor, struct FVector vNormal )
{
	static UFunction* pFnSpawnDeployable = NULL;

	if ( ! pFnSpawnDeployable )
		pFnSpawnDeployable = (UFunction*) UObject::GObjObjects()->Data[ 46429 ];

	ATgProj_Deployable_execSpawnDeployable_Parms SpawnDeployable_Parms;
	memcpy ( &SpawnDeployable_Parms.vLocation, &vLocation, 0xC );
	SpawnDeployable_Parms.TargetActor = TargetActor;
	memcpy ( &SpawnDeployable_Parms.vNormal, &vNormal, 0xC );

	pFnSpawnDeployable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDeployable, &SpawnDeployable_Parms, NULL );

	pFnSpawnDeployable->FunctionFlags |= 0x400;

	return SpawnDeployable_Parms.ReturnValue;
};

// Function TgGame.TgProj_Mortar.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgProj_Mortar::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 46520 ];

	ATgProj_Mortar_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function TgGame.TgProj_Mortar.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Mortar::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46516 ];

	ATgProj_Mortar_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Missile.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgProj_Missile::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46511 ];

	ATgProj_Missile_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgProj_Missile.GetLocalPlayerPawn
// [0x00020102] 
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* ATgProj_Missile::GetLocalPlayerPawn ( )
{
	static UFunction* pFnGetLocalPlayerPawn = NULL;

	if ( ! pFnGetLocalPlayerPawn )
		pFnGetLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 46508 ];

	ATgProj_Missile_execGetLocalPlayerPawn_Parms GetLocalPlayerPawn_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerPawn, &GetLocalPlayerPawn_Parms, NULL );

	return GetLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgProj_Missile.ShutDown
// [0x00020102] 
// Parameters infos:

void ATgProj_Missile::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 46507 ];

	ATgProj_Missile_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function TgGame.TgProj_Missile.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Missile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46502 ];

	ATgProj_Missile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Missile.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgProj_Missile::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 46499 ];

	ATgProj_Missile_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgProj_Missile.CheckAcquireRange
// [0x00020002] 
// Parameters infos:

void ATgProj_Missile::CheckAcquireRange ( )
{
	static UFunction* pFnCheckAcquireRange = NULL;

	if ( ! pFnCheckAcquireRange )
		pFnCheckAcquireRange = (UFunction*) UObject::GObjObjects()->Data[ 46494 ];

	ATgProj_Missile_execCheckAcquireRange_Parms CheckAcquireRange_Parms;

	this->ProcessEvent ( pFnCheckAcquireRange, &CheckAcquireRange_Parms, NULL );
};

// Function TgGame.TgProj_Missile.CheckSeekingTarget
// [0x00820102] 
// Parameters infos:

void ATgProj_Missile::CheckSeekingTarget ( )
{
	static UFunction* pFnCheckSeekingTarget = NULL;

	if ( ! pFnCheckSeekingTarget )
		pFnCheckSeekingTarget = (UFunction*) UObject::GObjObjects()->Data[ 46489 ];

	ATgProj_Missile_execCheckSeekingTarget_Parms CheckSeekingTarget_Parms;

	this->ProcessEvent ( pFnCheckSeekingTarget, &CheckSeekingTarget_Parms, NULL );
};

// Function TgGame.TgProj_Missile.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgProj_Missile::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46488 ];

	ATgProj_Missile_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgProj_Missile.CheckRange
// [0x00020102] 
// Parameters infos:

void ATgProj_Missile::CheckRange ( )
{
	static UFunction* pFnCheckRange = NULL;

	if ( ! pFnCheckRange )
		pFnCheckRange = (UFunction*) UObject::GObjObjects()->Data[ 46487 ];

	ATgProj_Missile_execCheckRange_Parms CheckRange_Parms;

	this->ProcessEvent ( pFnCheckRange, &CheckRange_Parms, NULL );
};

// Function TgGame.TgProj_Missile.SetInitSeekingTarget
// [0x00020102] 
// Parameters infos:
// class AActor*                  LockedTarget                   ( CPF_Parm )

void ATgProj_Missile::SetInitSeekingTarget ( class AActor* LockedTarget )
{
	static UFunction* pFnSetInitSeekingTarget = NULL;

	if ( ! pFnSetInitSeekingTarget )
		pFnSetInitSeekingTarget = (UFunction*) UObject::GObjObjects()->Data[ 46485 ];

	ATgProj_Missile_execSetInitSeekingTarget_Parms SetInitSeekingTarget_Parms;
	SetInitSeekingTarget_Parms.LockedTarget = LockedTarget;

	this->ProcessEvent ( pFnSetInitSeekingTarget, &SetInitSeekingTarget_Parms, NULL );
};

// Function TgGame.TgProj_Missile.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgProj_Missile::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 46481 ];

	ATgProj_Missile_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function TgGame.TgProj_Missile.GetMaxNumBounces
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgProj_Missile::GetMaxNumBounces ( )
{
	static UFunction* pFnGetMaxNumBounces = NULL;

	if ( ! pFnGetMaxNumBounces )
		pFnGetMaxNumBounces = (UFunction*) UObject::GObjObjects()->Data[ 46479 ];

	ATgProj_Missile_execGetMaxNumBounces_Parms GetMaxNumBounces_Parms;

	pFnGetMaxNumBounces->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxNumBounces, &GetMaxNumBounces_Parms, NULL );

	pFnGetMaxNumBounces->FunctionFlags |= 0x400;

	return GetMaxNumBounces_Parms.ReturnValue;
};

// Function TgGame.TgProj_Rocket.FlockTimer
// [0x00820102] 
// Parameters infos:

void ATgProj_Rocket::FlockTimer ( )
{
	static UFunction* pFnFlockTimer = NULL;

	if ( ! pFnFlockTimer )
		pFnFlockTimer = (UFunction*) UObject::GObjObjects()->Data[ 46548 ];

	ATgProj_Rocket_execFlockTimer_Parms FlockTimer_Parms;

	this->ProcessEvent ( pFnFlockTimer, &FlockTimer_Parms, NULL );
};

// Function TgGame.TgProj_Rocket.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgProj_Rocket::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46544 ];

	ATgProj_Rocket_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgProj_Rocket.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgProj_Rocket::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46543 ];

	ATgProj_Rocket_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgProj_Rocket.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ATgProj_Rocket::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46541 ];

	ATgProj_Rocket_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function TgGame.TgEmitter.ScaleEmitter
// [0x00020102] 
// Parameters infos:
// float                          ScaleFactor                    ( CPF_Parm )

void ATgEmitter::ScaleEmitter ( float ScaleFactor )
{
	static UFunction* pFnScaleEmitter = NULL;

	if ( ! pFnScaleEmitter )
		pFnScaleEmitter = (UFunction*) UObject::GObjObjects()->Data[ 38224 ];

	ATgEmitter_execScaleEmitter_Parms ScaleEmitter_Parms;
	ScaleEmitter_Parms.ScaleFactor = ScaleFactor;

	this->ProcessEvent ( pFnScaleEmitter, &ScaleEmitter_Parms, NULL );
};

// Function TgGame.TgEmitter.AttachTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// struct FName                   NewBoneName                    ( CPF_Parm )

void ATgEmitter::AttachTo ( class APawn* P, struct FName NewBoneName )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = (UFunction*) UObject::GObjObjects()->Data[ 38221 ];

	ATgEmitter_execAttachTo_Parms AttachTo_Parms;
	AttachTo_Parms.P = P;
	memcpy ( &AttachTo_Parms.NewBoneName, &NewBoneName, 0x8 );

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function TgGame.TgEmitter.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgEmitter::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 38219 ];

	ATgEmitter_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgImpactFx.ApplyImpact
// [0x00024002] 
// Parameters infos:
// class AActor*                  Instigator                     ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FIMPACT_FX              Impact                         ( CPF_OptionalParm | CPF_Parm )

void UTgImpactFx::ApplyImpact ( class AActor* Instigator, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FIMPACT_FX Impact )
{
	static UFunction* pFnApplyImpact = NULL;

	if ( ! pFnApplyImpact )
		pFnApplyImpact = (UFunction*) UObject::GObjObjects()->Data[ 39610 ];

	UTgImpactFx_execApplyImpact_Parms ApplyImpact_Parms;
	ApplyImpact_Parms.Instigator = Instigator;
	ApplyImpact_Parms.HitActor = HitActor;
	memcpy ( &ApplyImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpact_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ApplyImpact_Parms.Impact, &Impact, 0x24 );

	this->ProcessEvent ( pFnApplyImpact, &ApplyImpact_Parms, NULL );
};

// Function TgGame.TgImpactFx.GetImpactFx
// [0x00024002] 
// Parameters infos:
// struct FIMPACT_FX              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       HitMaterial                    ( CPF_OptionalParm | CPF_Parm )

struct FIMPACT_FX UTgImpactFx::GetImpactFx ( class UPhysicalMaterial* HitMaterial )
{
	static UFunction* pFnGetImpactFx = NULL;

	if ( ! pFnGetImpactFx )
		pFnGetImpactFx = (UFunction*) UObject::GObjObjects()->Data[ 39604 ];

	UTgImpactFx_execGetImpactFx_Parms GetImpactFx_Parms;
	GetImpactFx_Parms.HitMaterial = HitMaterial;

	this->ProcessEvent ( pFnGetImpactFx, &GetImpactFx_Parms, NULL );

	return GetImpactFx_Parms.ReturnValue;
};

// Function TgGame.TgImpactFx.IsEffectRelevant
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Viewer                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool UTgImpactFx::IsEffectRelevant ( class AActor* Viewer, struct FVector HitLocation )
{
	static UFunction* pFnIsEffectRelevant = NULL;

	if ( ! pFnIsEffectRelevant )
		pFnIsEffectRelevant = (UFunction*) UObject::GObjObjects()->Data[ 39600 ];

	UTgImpactFx_execIsEffectRelevant_Parms IsEffectRelevant_Parms;
	IsEffectRelevant_Parms.Viewer = Viewer;
	memcpy ( &IsEffectRelevant_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnIsEffectRelevant, &IsEffectRelevant_Parms, NULL );

	return IsEffectRelevant_Parms.ReturnValue;
};

// Function TgGame.TgSoundGroup.PlayFootStepSound
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// int                            FootDown                       ( CPF_Parm )
// struct FName                   MaterialType                   ( CPF_Parm )

void UTgSoundGroup::PlayFootStepSound ( class APawn* P, int FootDown, struct FName MaterialType )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 48217 ];

	UTgSoundGroup_execPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.P = P;
	PlayFootStepSound_Parms.FootDown = FootDown;
	memcpy ( &PlayFootStepSound_Parms.MaterialType, &MaterialType, 0x8 );

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function TgGame.TgSoundGroup.PlaySound
// [0x00020002] 
// Parameters infos:
// unsigned char                  eSound                         ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void UTgSoundGroup::PlaySound ( unsigned char eSound, class APawn* P )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 48214 ];

	UTgSoundGroup_execPlaySound_Parms PlaySound_Parms;
	PlaySound_Parms.eSound = eSound;
	PlaySound_Parms.P = P;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );
};

// Function TgGame.TgSpecialFx.SetDepthPriorityGroup
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewDepthPriorityGroup          ( CPF_Parm )

void UTgSpecialFx::SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup )
{
	static UFunction* pFnSetDepthPriorityGroup = NULL;

	if ( ! pFnSetDepthPriorityGroup )
		pFnSetDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 48364 ];

	UTgSpecialFx_execSetDepthPriorityGroup_Parms SetDepthPriorityGroup_Parms;
	SetDepthPriorityGroup_Parms.NewDepthPriorityGroup = NewDepthPriorityGroup;

	this->ProcessEvent ( pFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Parms, NULL );
};

// Function TgGame.TgSpecialFx.SetKillOnDeactivate
// [0x00020002] 
// Parameters infos:

void UTgSpecialFx::SetKillOnDeactivate ( )
{
	static UFunction* pFnSetKillOnDeactivate = NULL;

	if ( ! pFnSetKillOnDeactivate )
		pFnSetKillOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 48361 ];

	UTgSpecialFx_execSetKillOnDeactivate_Parms SetKillOnDeactivate_Parms;

	this->ProcessEvent ( pFnSetKillOnDeactivate, &SetKillOnDeactivate_Parms, NULL );
};

// Function TgGame.TgSpecialFx.ListSounds
// [0x00020002] 
// Parameters infos:

void UTgSpecialFx::ListSounds ( )
{
	static UFunction* pFnListSounds = NULL;

	if ( ! pFnListSounds )
		pFnListSounds = (UFunction*) UObject::GObjObjects()->Data[ 48359 ];

	UTgSpecialFx_execListSounds_Parms ListSounds_Parms;

	this->ProcessEvent ( pFnListSounds, &ListSounds_Parms, NULL );
};

// Function TgGame.TgSpecialFx.UpdateBeamFx
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitOrigin                      ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::eventUpdateBeamFx ( struct FVector HitLocation, struct FVector HitOrigin )
{
	static UFunction* pFnUpdateBeamFx = NULL;

	if ( ! pFnUpdateBeamFx )
		pFnUpdateBeamFx = (UFunction*) UObject::GObjObjects()->Data[ 48352 ];

	UTgSpecialFx_eventUpdateBeamFx_Parms UpdateBeamFx_Parms;
	memcpy ( &UpdateBeamFx_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &UpdateBeamFx_Parms.HitOrigin, &HitOrigin, 0xC );

	this->ProcessEvent ( pFnUpdateBeamFx, &UpdateBeamFx_Parms, NULL );
};

// Function TgGame.TgSpecialFx.SpawnTracer
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitOrigin                      ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::eventSpawnTracer ( struct FVector HitLocation, struct FVector HitOrigin )
{
	static UFunction* pFnSpawnTracer = NULL;

	if ( ! pFnSpawnTracer )
		pFnSpawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 48343 ];

	UTgSpecialFx_eventSpawnTracer_Parms SpawnTracer_Parms;
	memcpy ( &SpawnTracer_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnTracer_Parms.HitOrigin, &HitOrigin, 0xC );

	this->ProcessEvent ( pFnSpawnTracer, &SpawnTracer_Parms, NULL );
};

// Function TgGame.TgSpecialFx.GetHitActor
// [0x00820002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 EffectLocation                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

class AActor* UTgSpecialFx::GetHitActor ( struct FVector EffectLocation, struct FVector HitLocation )
{
	static UFunction* pFnGetHitActor = NULL;

	if ( ! pFnGetHitActor )
		pFnGetHitActor = (UFunction*) UObject::GObjObjects()->Data[ 48337 ];

	UTgSpecialFx_execGetHitActor_Parms GetHitActor_Parms;
	memcpy ( &GetHitActor_Parms.EffectLocation, &EffectLocation, 0xC );
	memcpy ( &GetHitActor_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnGetHitActor, &GetHitActor_Parms, NULL );

	return GetHitActor_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.HasSoundCue
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgSpecialFx::HasSoundCue ( )
{
	static UFunction* pFnHasSoundCue = NULL;

	if ( ! pFnHasSoundCue )
		pFnHasSoundCue = (UFunction*) UObject::GObjObjects()->Data[ 48335 ];

	UTgSpecialFx_execHasSoundCue_Parms HasSoundCue_Parms;

	this->ProcessEvent ( pFnHasSoundCue, &HasSoundCue_Parms, NULL );

	return HasSoundCue_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.StopSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::StopSound ( )
{
	static UFunction* pFnStopSound = NULL;

	if ( ! pFnStopSound )
		pFnStopSound = (UFunction*) UObject::GObjObjects()->Data[ 48334 ];

	UTgSpecialFx_execStopSound_Parms StopSound_Parms;

	pFnStopSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopSound, &StopSound_Parms, NULL );

	pFnStopSound->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.PlaySound
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::PlaySound ( )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 48333 ];

	UTgSpecialFx_execPlaySound_Parms PlaySound_Parms;

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.CheckDeactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::CheckDeactivate ( )
{
	static UFunction* pFnCheckDeactivate = NULL;

	if ( ! pFnCheckDeactivate )
		pFnCheckDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 48332 ];

	UTgSpecialFx_execCheckDeactivate_Parms CheckDeactivate_Parms;

	pFnCheckDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckDeactivate, &CheckDeactivate_Parms, NULL );

	pFnCheckDeactivate->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.OnParticleSystemFinished
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void UTgSpecialFx::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 48330 ];

	UTgSpecialFx_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	pFnOnParticleSystemFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );

	pFnOnParticleSystemFinished->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.Deactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceDeactivate               ( CPF_Parm )

void UTgSpecialFx::Deactivate ( unsigned long bForceDeactivate )
{
	static UFunction* pFnDeactivate = NULL;

	if ( ! pFnDeactivate )
		pFnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 48328 ];

	UTgSpecialFx_execDeactivate_Parms Deactivate_Parms;
	Deactivate_Parms.bForceDeactivate = bForceDeactivate;

	pFnDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivate, &Deactivate_Parms, NULL );

	pFnDeactivate->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.Activate
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipRelevantChecking          ( CPF_OptionalParm | CPF_Parm )

float UTgSpecialFx::Activate ( struct FVector HitLocation, unsigned long bSkipRelevantChecking )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 48324 ];

	UTgSpecialFx_execActivate_Parms Activate_Parms;
	memcpy ( &Activate_Parms.HitLocation, &HitLocation, 0xC );
	Activate_Parms.bSkipRelevantChecking = bSkipRelevantChecking;

	pFnActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );

	pFnActivate->FunctionFlags |= 0x400;

	return Activate_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.AdjustEffectScale
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nPSCIndex                      ( CPF_Parm )
// float                          fScale                         ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::AdjustEffectScale ( int nPSCIndex, float fScale )
{
	static UFunction* pFnAdjustEffectScale = NULL;

	if ( ! pFnAdjustEffectScale )
		pFnAdjustEffectScale = (UFunction*) UObject::GObjObjects()->Data[ 48321 ];

	UTgSpecialFx_execAdjustEffectScale_Parms AdjustEffectScale_Parms;
	AdjustEffectScale_Parms.nPSCIndex = nPSCIndex;
	AdjustEffectScale_Parms.fScale = fScale;

	pFnAdjustEffectScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustEffectScale, &AdjustEffectScale_Parms, NULL );

	pFnAdjustEffectScale->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.AdjustFxScaleByRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fScale                         ( CPF_Parm )

void UTgSpecialFx::AdjustFxScaleByRadius ( float fScale )
{
	static UFunction* pFnAdjustFxScaleByRadius = NULL;

	if ( ! pFnAdjustFxScaleByRadius )
		pFnAdjustFxScaleByRadius = (UFunction*) UObject::GObjObjects()->Data[ 48319 ];

	UTgSpecialFx_execAdjustFxScaleByRadius_Parms AdjustFxScaleByRadius_Parms;
	AdjustFxScaleByRadius_Parms.fScale = fScale;

	pFnAdjustFxScaleByRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustFxScaleByRadius, &AdjustFxScaleByRadius_Parms, NULL );

	pFnAdjustFxScaleByRadius->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.AdjustEffectRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPSCIndex                      ( CPF_Parm )
// float                          fScale                         ( CPF_Parm )

void UTgSpecialFx::AdjustEffectRadius ( int nPSCIndex, float fScale )
{
	static UFunction* pFnAdjustEffectRadius = NULL;

	if ( ! pFnAdjustEffectRadius )
		pFnAdjustEffectRadius = (UFunction*) UObject::GObjObjects()->Data[ 48316 ];

	UTgSpecialFx_execAdjustEffectRadius_Parms AdjustEffectRadius_Parms;
	AdjustEffectRadius_Parms.nPSCIndex = nPSCIndex;
	AdjustEffectRadius_Parms.fScale = fScale;

	pFnAdjustEffectRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustEffectRadius, &AdjustEffectRadius_Parms, NULL );

	pFnAdjustEffectRadius->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.FindLocalPlayerPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* UTgSpecialFx::FindLocalPlayerPawn ( )
{
	static UFunction* pFnFindLocalPlayerPawn = NULL;

	if ( ! pFnFindLocalPlayerPawn )
		pFnFindLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 48314 ];

	UTgSpecialFx_execFindLocalPlayerPawn_Parms FindLocalPlayerPawn_Parms;

	pFnFindLocalPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindLocalPlayerPawn, &FindLocalPlayerPawn_Parms, NULL );

	pFnFindLocalPlayerPawn->FunctionFlags |= 0x400;

	return FindLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.FindLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* UTgSpecialFx::FindLocalPlayerController ( )
{
	static UFunction* pFnFindLocalPlayerController = NULL;

	if ( ! pFnFindLocalPlayerController )
		pFnFindLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 48312 ];

	UTgSpecialFx_execFindLocalPlayerController_Parms FindLocalPlayerController_Parms;

	pFnFindLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindLocalPlayerController, &FindLocalPlayerController_Parms, NULL );

	pFnFindLocalPlayerController->FunctionFlags |= 0x400;

	return FindLocalPlayerController_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.IsFxRelevant
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )

bool UTgSpecialFx::IsFxRelevant ( struct FVector SpawnLocation )
{
	static UFunction* pFnIsFxRelevant = NULL;

	if ( ! pFnIsFxRelevant )
		pFnIsFxRelevant = (UFunction*) UObject::GObjObjects()->Data[ 48309 ];

	UTgSpecialFx_execIsFxRelevant_Parms IsFxRelevant_Parms;
	memcpy ( &IsFxRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );

	pFnIsFxRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFxRelevant, &IsFxRelevant_Parms, NULL );

	pFnIsFxRelevant->FunctionFlags |= 0x400;

	return IsFxRelevant_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.SetHitEffectScaleBasedOnDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nHealthChange                  ( CPF_Parm )

void UTgSpecialFx::SetHitEffectScaleBasedOnDamage ( int nHealthChange )
{
	static UFunction* pFnSetHitEffectScaleBasedOnDamage = NULL;

	if ( ! pFnSetHitEffectScaleBasedOnDamage )
		pFnSetHitEffectScaleBasedOnDamage = (UFunction*) UObject::GObjObjects()->Data[ 48307 ];

	UTgSpecialFx_execSetHitEffectScaleBasedOnDamage_Parms SetHitEffectScaleBasedOnDamage_Parms;
	SetHitEffectScaleBasedOnDamage_Parms.nHealthChange = nHealthChange;

	pFnSetHitEffectScaleBasedOnDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHitEffectScaleBasedOnDamage, &SetHitEffectScaleBasedOnDamage_Parms, NULL );

	pFnSetHitEffectScaleBasedOnDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.SpawnSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FVector                 Location                       ( CPF_Parm )

class UAudioComponent* UTgSpecialFx::SpawnSound ( struct FVector Location )
{
	static UFunction* pFnSpawnSound = NULL;

	if ( ! pFnSpawnSound )
		pFnSpawnSound = (UFunction*) UObject::GObjObjects()->Data[ 48304 ];

	UTgSpecialFx_execSpawnSound_Parms SpawnSound_Parms;
	memcpy ( &SpawnSound_Parms.Location, &Location, 0xC );

	pFnSpawnSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnSound, &SpawnSound_Parms, NULL );

	pFnSpawnSound->FunctionFlags |= 0x400;

	return SpawnSound_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.SpawnEmitter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgEmitter*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// float                          fScale                         ( CPF_OptionalParm | CPF_Parm )

class ATgEmitter* UTgSpecialFx::SpawnEmitter ( struct FVector HitLocation, struct FVector HitNormal, float fScale )
{
	static UFunction* pFnSpawnEmitter = NULL;

	if ( ! pFnSpawnEmitter )
		pFnSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 48299 ];

	UTgSpecialFx_execSpawnEmitter_Parms SpawnEmitter_Parms;
	memcpy ( &SpawnEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnEmitter_Parms.HitNormal, &HitNormal, 0xC );
	SpawnEmitter_Parms.fScale = fScale;

	pFnSpawnEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnEmitter, &SpawnEmitter_Parms, NULL );

	pFnSpawnEmitter->FunctionFlags |= 0x400;

	return SpawnEmitter_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.CleanupRunningState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::CleanupRunningState ( )
{
	static UFunction* pFnCleanupRunningState = NULL;

	if ( ! pFnCleanupRunningState )
		pFnCleanupRunningState = (UFunction*) UObject::GObjObjects()->Data[ 48298 ];

	UTgSpecialFx_execCleanupRunningState_Parms CleanupRunningState_Parms;

	pFnCleanupRunningState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanupRunningState, &CleanupRunningState_Parms, NULL );

	pFnCleanupRunningState->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.SetPSCRunning
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* pPSC                           ( CPF_Parm | CPF_EditInline )
// unsigned long                  bOn                            ( CPF_Parm )

void UTgSpecialFx::SetPSCRunning ( class UParticleSystemComponent* pPSC, unsigned long bOn )
{
	static UFunction* pFnSetPSCRunning = NULL;

	if ( ! pFnSetPSCRunning )
		pFnSetPSCRunning = (UFunction*) UObject::GObjObjects()->Data[ 48295 ];

	UTgSpecialFx_execSetPSCRunning_Parms SetPSCRunning_Parms;
	SetPSCRunning_Parms.pPSC = pPSC;
	SetPSCRunning_Parms.bOn = bOn;

	pFnSetPSCRunning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPSCRunning, &SetPSCRunning_Parms, NULL );

	pFnSetPSCRunning->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.AreAnyPSCRunning
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgSpecialFx::AreAnyPSCRunning ( )
{
	static UFunction* pFnAreAnyPSCRunning = NULL;

	if ( ! pFnAreAnyPSCRunning )
		pFnAreAnyPSCRunning = (UFunction*) UObject::GObjObjects()->Data[ 48293 ];

	UTgSpecialFx_execAreAnyPSCRunning_Parms AreAnyPSCRunning_Parms;

	pFnAreAnyPSCRunning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreAnyPSCRunning, &AreAnyPSCRunning_Parms, NULL );

	pFnAreAnyPSCRunning->FunctionFlags |= 0x400;

	return AreAnyPSCRunning_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.ResetParticles
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::ResetParticles ( )
{
	static UFunction* pFnResetParticles = NULL;

	if ( ! pFnResetParticles )
		pFnResetParticles = (UFunction*) UObject::GObjObjects()->Data[ 48292 ];

	UTgSpecialFx_execResetParticles_Parms ResetParticles_Parms;

	pFnResetParticles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetParticles, &ResetParticles_Parms, NULL );

	pFnResetParticles->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.PlaySoundAt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Location                       ( CPF_Parm )

void UTgSpecialFx::PlaySoundAt ( struct FVector Location )
{
	static UFunction* pFnPlaySoundAt = NULL;

	if ( ! pFnPlaySoundAt )
		pFnPlaySoundAt = (UFunction*) UObject::GObjObjects()->Data[ 48290 ];

	UTgSpecialFx_execPlaySoundAt_Parms PlaySoundAt_Parms;
	memcpy ( &PlaySoundAt_Parms.Location, &Location, 0xC );

	pFnPlaySoundAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundAt, &PlaySoundAt_Parms, NULL );

	pFnPlaySoundAt->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.ShouldShowWhenStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgSpecialFx::ShouldShowWhenStealthed ( )
{
	static UFunction* pFnShouldShowWhenStealthed = NULL;

	if ( ! pFnShouldShowWhenStealthed )
		pFnShouldShowWhenStealthed = (UFunction*) UObject::GObjObjects()->Data[ 48288 ];

	UTgSpecialFx_execShouldShowWhenStealthed_Parms ShouldShowWhenStealthed_Parms;

	pFnShouldShowWhenStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowWhenStealthed, &ShouldShowWhenStealthed_Parms, NULL );

	pFnShouldShowWhenStealthed->FunctionFlags |= 0x400;

	return ShouldShowWhenStealthed_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.SetHidden
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHidden                     ( CPF_Parm )

void UTgSpecialFx::SetHidden ( unsigned long bNewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 48286 ];

	UTgSpecialFx_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.bNewHidden = bNewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.AdjustHidden
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStealthed                     ( CPF_Parm )
// unsigned long                  bFirstPerson                   ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::AdjustHidden ( unsigned long bStealthed, unsigned long bFirstPerson )
{
	static UFunction* pFnAdjustHidden = NULL;

	if ( ! pFnAdjustHidden )
		pFnAdjustHidden = (UFunction*) UObject::GObjObjects()->Data[ 48283 ];

	UTgSpecialFx_execAdjustHidden_Parms AdjustHidden_Parms;
	AdjustHidden_Parms.bStealthed = bStealthed;
	AdjustHidden_Parms.bFirstPerson = bFirstPerson;

	pFnAdjustHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustHidden, &AdjustHidden_Parms, NULL );

	pFnAdjustHidden->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.OnActiveTimeExpired
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::OnActiveTimeExpired ( )
{
	static UFunction* pFnOnActiveTimeExpired = NULL;

	if ( ! pFnOnActiveTimeExpired )
		pFnOnActiveTimeExpired = (UFunction*) UObject::GObjObjects()->Data[ 48282 ];

	UTgSpecialFx_execOnActiveTimeExpired_Parms OnActiveTimeExpired_Parms;

	pFnOnActiveTimeExpired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnActiveTimeExpired, &OnActiveTimeExpired_Parms, NULL );

	pFnOnActiveTimeExpired->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.SetActiveTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// class ATgPawn*                 Owner                          ( CPF_Parm )

void UTgSpecialFx::SetActiveTime ( float Duration, class ATgPawn* Owner )
{
	static UFunction* pFnSetActiveTime = NULL;

	if ( ! pFnSetActiveTime )
		pFnSetActiveTime = (UFunction*) UObject::GObjObjects()->Data[ 48279 ];

	UTgSpecialFx_execSetActiveTime_Parms SetActiveTime_Parms;
	SetActiveTime_Parms.Duration = Duration;
	SetActiveTime_Parms.Owner = Owner;

	pFnSetActiveTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveTime, &SetActiveTime_Parms, NULL );

	pFnSetActiveTime->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.SpawnActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InClass                        ( CPF_Parm )
// struct FVector                 Location                       ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )

class AActor* UTgSpecialFx::SpawnActor ( class UClass* InClass, struct FVector Location, struct FRotator Rotation )
{
	static UFunction* pFnSpawnActor = NULL;

	if ( ! pFnSpawnActor )
		pFnSpawnActor = (UFunction*) UObject::GObjObjects()->Data[ 48274 ];

	UTgSpecialFx_execSpawnActor_Parms SpawnActor_Parms;
	SpawnActor_Parms.InClass = InClass;
	memcpy ( &SpawnActor_Parms.Location, &Location, 0xC );
	memcpy ( &SpawnActor_Parms.Rotation, &Rotation, 0xC );

	pFnSpawnActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnActor, &SpawnActor_Parms, NULL );

	pFnSpawnActor->FunctionFlags |= 0x400;

	return SpawnActor_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.SetPSCHideMask
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )
// unsigned long                  bOnlyAllowNonZeroMask          ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::SetPSCHideMask ( class UParticleSystemComponent* PSC, unsigned long bOnlyAllowNonZeroMask )
{
	static UFunction* pFnSetPSCHideMask = NULL;

	if ( ! pFnSetPSCHideMask )
		pFnSetPSCHideMask = (UFunction*) UObject::GObjObjects()->Data[ 48271 ];

	UTgSpecialFx_execSetPSCHideMask_Parms SetPSCHideMask_Parms;
	SetPSCHideMask_Parms.PSC = PSC;
	SetPSCHideMask_Parms.bOnlyAllowNonZeroMask = bOnlyAllowNonZeroMask;

	pFnSetPSCHideMask->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPSCHideMask, &SetPSCHideMask_Parms, NULL );

	pFnSetPSCHideMask->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.ActivateLocalPlayerFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ActivePSC                      ( CPF_Parm | CPF_EditInline )

void UTgSpecialFx::ActivateLocalPlayerFx ( class UParticleSystemComponent* ActivePSC )
{
	static UFunction* pFnActivateLocalPlayerFx = NULL;

	if ( ! pFnActivateLocalPlayerFx )
		pFnActivateLocalPlayerFx = (UFunction*) UObject::GObjObjects()->Data[ 48269 ];

	UTgSpecialFx_execActivateLocalPlayerFx_Parms ActivateLocalPlayerFx_Parms;
	ActivateLocalPlayerFx_Parms.ActivePSC = ActivePSC;

	pFnActivateLocalPlayerFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateLocalPlayerFx, &ActivateLocalPlayerFx_Parms, NULL );

	pFnActivateLocalPlayerFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.RepairCulledFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystemComponent* ActivePSC                      ( CPF_Parm | CPF_EditInline )

bool UTgSpecialFx::RepairCulledFx ( class UParticleSystemComponent* ActivePSC )
{
	static UFunction* pFnRepairCulledFx = NULL;

	if ( ! pFnRepairCulledFx )
		pFnRepairCulledFx = (UFunction*) UObject::GObjObjects()->Data[ 48266 ];

	UTgSpecialFx_execRepairCulledFx_Parms RepairCulledFx_Parms;
	RepairCulledFx_Parms.ActivePSC = ActivePSC;

	pFnRepairCulledFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRepairCulledFx, &RepairCulledFx_Parms, NULL );

	pFnRepairCulledFx->FunctionFlags |= 0x400;

	return RepairCulledFx_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.CullFxUsingMask
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            MaskOfEmittersToDisable        ( CPF_Parm )

void UTgSpecialFx::CullFxUsingMask ( int MaskOfEmittersToDisable )
{
	static UFunction* pFnCullFxUsingMask = NULL;

	if ( ! pFnCullFxUsingMask )
		pFnCullFxUsingMask = (UFunction*) UObject::GObjObjects()->Data[ 48264 ];

	UTgSpecialFx_execCullFxUsingMask_Parms CullFxUsingMask_Parms;
	CullFxUsingMask_Parms.MaskOfEmittersToDisable = MaskOfEmittersToDisable;

	pFnCullFxUsingMask->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCullFxUsingMask, &CullFxUsingMask_Parms, NULL );

	pFnCullFxUsingMask->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.CullToLocalPlayerFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ActivePSC                      ( CPF_Parm | CPF_EditInline )

void UTgSpecialFx::CullToLocalPlayerFx ( class UParticleSystemComponent* ActivePSC )
{
	static UFunction* pFnCullToLocalPlayerFx = NULL;

	if ( ! pFnCullToLocalPlayerFx )
		pFnCullToLocalPlayerFx = (UFunction*) UObject::GObjObjects()->Data[ 48262 ];

	UTgSpecialFx_execCullToLocalPlayerFx_Parms CullToLocalPlayerFx_Parms;
	CullToLocalPlayerFx_Parms.ActivePSC = ActivePSC;

	pFnCullToLocalPlayerFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCullToLocalPlayerFx, &CullToLocalPlayerFx_Parms, NULL );

	pFnCullToLocalPlayerFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.GetOwnerMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMeshComponent*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class AActor*                  pOwner                         ( CPF_Parm )

class UMeshComponent* UTgSpecialFx::GetOwnerMesh ( class AActor* pOwner )
{
	static UFunction* pFnGetOwnerMesh = NULL;

	if ( ! pFnGetOwnerMesh )
		pFnGetOwnerMesh = (UFunction*) UObject::GObjObjects()->Data[ 48259 ];

	UTgSpecialFx_execGetOwnerMesh_Parms GetOwnerMesh_Parms;
	GetOwnerMesh_Parms.pOwner = pOwner;

	pFnGetOwnerMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerMesh, &GetOwnerMesh_Parms, NULL );

	pFnGetOwnerMesh->FunctionFlags |= 0x400;

	return GetOwnerMesh_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.GetEffectLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UTgSpecialFx::GetEffectLocation ( )
{
	static UFunction* pFnGetEffectLocation = NULL;

	if ( ! pFnGetEffectLocation )
		pFnGetEffectLocation = (UFunction*) UObject::GObjObjects()->Data[ 48257 ];

	UTgSpecialFx_execGetEffectLocation_Parms GetEffectLocation_Parms;

	pFnGetEffectLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectLocation, &GetEffectLocation_Parms, NULL );

	pFnGetEffectLocation->FunctionFlags |= 0x400;

	return GetEffectLocation_Parms.ReturnValue;
};

// Function TgGame.TgSpecialFx.Detach
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFx::Detach ( )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 48256 ];

	UTgSpecialFx_execDetach_Parms Detach_Parms;

	pFnDetach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );

	pFnDetach->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.AttachToOwner
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  pOwner                         ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::AttachToOwner ( class AActor* pOwner )
{
	static UFunction* pFnAttachToOwner = NULL;

	if ( ! pFnAttachToOwner )
		pFnAttachToOwner = (UFunction*) UObject::GObjObjects()->Data[ 48254 ];

	UTgSpecialFx_execAttachToOwner_Parms AttachToOwner_Parms;
	AttachToOwner_Parms.pOwner = pOwner;

	pFnAttachToOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachToOwner, &AttachToOwner_Parms, NULL );

	pFnAttachToOwner->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFx.Attach
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UMeshComponent*          pMesh                          ( CPF_Parm | CPF_EditInline )
// struct FName                   nmSocket                       ( CPF_Parm )
// struct FName                   nmGroup                        ( CPF_OptionalParm | CPF_Parm )
// int                            nMode                          ( CPF_OptionalParm | CPF_Parm )
// int                            nIndex                         ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgSpecialFx::Attach ( class UMeshComponent* pMesh, struct FName nmSocket, struct FName nmGroup, int nMode, int nIndex, int nEquipSlot )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 48247 ];

	UTgSpecialFx_execAttach_Parms Attach_Parms;
	Attach_Parms.pMesh = pMesh;
	memcpy ( &Attach_Parms.nmSocket, &nmSocket, 0x8 );
	memcpy ( &Attach_Parms.nmGroup, &nmGroup, 0x8 );
	Attach_Parms.nMode = nMode;
	Attach_Parms.nIndex = nIndex;
	Attach_Parms.nEquipSlot = nEquipSlot;

	pFnAttach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );

	pFnAttach->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFxLightManager.UserSetLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            LightLevel                     ( CPF_Parm )

void UTgSpecialFxLightManager::UserSetLevel ( int LightLevel )
{
	static UFunction* pFnUserSetLevel = NULL;

	if ( ! pFnUserSetLevel )
		pFnUserSetLevel = (UFunction*) UObject::GObjObjects()->Data[ 48394 ];

	UTgSpecialFxLightManager_execUserSetLevel_Parms UserSetLevel_Parms;
	UserSetLevel_Parms.LightLevel = LightLevel;

	this->ProcessEvent ( pFnUserSetLevel, &UserSetLevel_Parms, NULL );
};

// Function TgGame.TgSpecialFxLightManager.SetLevelInternal
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            LightLevel                     ( CPF_Parm )

void UTgSpecialFxLightManager::SetLevelInternal ( int LightLevel )
{
	static UFunction* pFnSetLevelInternal = NULL;

	if ( ! pFnSetLevelInternal )
		pFnSetLevelInternal = (UFunction*) UObject::GObjObjects()->Data[ 48392 ];

	UTgSpecialFxLightManager_execSetLevelInternal_Parms SetLevelInternal_Parms;
	SetLevelInternal_Parms.LightLevel = LightLevel;

	pFnSetLevelInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevelInternal, &SetLevelInternal_Parms, NULL );

	pFnSetLevelInternal->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFxLightManager.LightKilledElsewhere
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPointer                FxEmitterKilled                ( CPF_Parm )

void UTgSpecialFxLightManager::LightKilledElsewhere ( struct FPointer FxEmitterKilled )
{
	static UFunction* pFnLightKilledElsewhere = NULL;

	if ( ! pFnLightKilledElsewhere )
		pFnLightKilledElsewhere = (UFunction*) UObject::GObjObjects()->Data[ 48390 ];

	UTgSpecialFxLightManager_execLightKilledElsewhere_Parms LightKilledElsewhere_Parms;
	memcpy ( &LightKilledElsewhere_Parms.FxEmitterKilled, &FxEmitterKilled, 0x4 );

	pFnLightKilledElsewhere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLightKilledElsewhere, &LightKilledElsewhere_Parms, NULL );

	pFnLightKilledElsewhere->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFxLightManager.SetLightState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPointer                ExtantFxEmitter                ( CPF_Parm )
// unsigned char                  NewFxLightState                ( CPF_Parm )

void UTgSpecialFxLightManager::SetLightState ( struct FPointer ExtantFxEmitter, unsigned char NewFxLightState )
{
	static UFunction* pFnSetLightState = NULL;

	if ( ! pFnSetLightState )
		pFnSetLightState = (UFunction*) UObject::GObjObjects()->Data[ 48387 ];

	UTgSpecialFxLightManager_execSetLightState_Parms SetLightState_Parms;
	memcpy ( &SetLightState_Parms.ExtantFxEmitter, &ExtantFxEmitter, 0x4 );
	SetLightState_Parms.NewFxLightState = NewFxLightState;

	pFnSetLightState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightState, &SetLightState_Parms, NULL );

	pFnSetLightState->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFxLightManager.AddLight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPointer                NewFxEmitter                   ( CPF_Parm )

void UTgSpecialFxLightManager::AddLight ( struct FPointer NewFxEmitter )
{
	static UFunction* pFnAddLight = NULL;

	if ( ! pFnAddLight )
		pFnAddLight = (UFunction*) UObject::GObjObjects()->Data[ 48385 ];

	UTgSpecialFxLightManager_execAddLight_Parms AddLight_Parms;
	memcpy ( &AddLight_Parms.NewFxEmitter, &NewFxEmitter, 0x4 );

	pFnAddLight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddLight, &AddLight_Parms, NULL );

	pFnAddLight->FunctionFlags |= 0x400;
};

// Function TgGame.TgSpecialFxLightManager.InitializeFxLightManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSpecialFxLightManager::InitializeFxLightManager ( )
{
	static UFunction* pFnInitializeFxLightManager = NULL;

	if ( ! pFnInitializeFxLightManager )
		pFnInitializeFxLightManager = (UFunction*) UObject::GObjObjects()->Data[ 48384 ];

	UTgSpecialFxLightManager_execInitializeFxLightManager_Parms InitializeFxLightManager_Parms;

	pFnInitializeFxLightManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeFxLightManager, &InitializeFxLightManager_Parms, NULL );

	pFnInitializeFxLightManager->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffect.ChargeModifier
// [0x00420002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm | CPF_OutParm )

void UTgEffect::ChargeModifier ( struct FImpactInfo Impact, float* NewValue )
{
	static UFunction* pFnChargeModifier = NULL;

	if ( ! pFnChargeModifier )
		pFnChargeModifier = (UFunction*) UObject::GObjObjects()->Data[ 37613 ];

	UTgEffect_execChargeModifier_Parms ChargeModifier_Parms;
	memcpy ( &ChargeModifier_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnChargeModifier, &ChargeModifier_Parms, NULL );

	if ( NewValue )
		*NewValue = ChargeModifier_Parms.NewValue;
};

// Function TgGame.TgEffect.Remove
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bResetToFollow                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffect::eventRemove ( class AActor* Target, unsigned long bResetToFollow )
{
	static UFunction* pFnRemove = NULL;

	if ( ! pFnRemove )
		pFnRemove = (UFunction*) UObject::GObjObjects()->Data[ 37609 ];

	UTgEffect_eventRemove_Parms Remove_Parms;
	Remove_Parms.Target = Target;
	Remove_Parms.bResetToFollow = bResetToFollow;

	this->ProcessEvent ( pFnRemove, &Remove_Parms, NULL );
};

// Function TgGame.TgEffect.Reapply
// [0x00020002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void UTgEffect::Reapply ( class AActor* Target )
{
	static UFunction* pFnReapply = NULL;

	if ( ! pFnReapply )
		pFnReapply = (UFunction*) UObject::GObjObjects()->Data[ 37607 ];

	UTgEffect_execReapply_Parms Reapply_Parms;
	Reapply_Parms.Target = Target;

	this->ProcessEvent ( pFnReapply, &Reapply_Parms, NULL );
};

// Function TgGame.TgEffect.GetProratedValue
// [0x00024002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

float UTgEffect::GetProratedValue ( unsigned long bConvertDOT )
{
	static UFunction* pFnGetProratedValue = NULL;

	if ( ! pFnGetProratedValue )
		pFnGetProratedValue = (UFunction*) UObject::GObjObjects()->Data[ 37603 ];

	UTgEffect_execGetProratedValue_Parms GetProratedValue_Parms;
	GetProratedValue_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnGetProratedValue, &GetProratedValue_Parms, NULL );

	return GetProratedValue_Parms.ReturnValue;
};

// Function TgGame.TgEffect.CheckSuperJump
// [0x00020002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// float                          fNewValue                      ( CPF_Parm )

void UTgEffect::CheckSuperJump ( struct FImpactInfo Impact, class AActor* Target, float fNewValue )
{
	static UFunction* pFnCheckSuperJump = NULL;

	if ( ! pFnCheckSuperJump )
		pFnCheckSuperJump = (UFunction*) UObject::GObjObjects()->Data[ 37599 ];

	UTgEffect_execCheckSuperJump_Parms CheckSuperJump_Parms;
	memcpy ( &CheckSuperJump_Parms.Impact, &Impact, 0x60 );
	CheckSuperJump_Parms.Target = Target;
	CheckSuperJump_Parms.fNewValue = fNewValue;

	this->ProcessEvent ( pFnCheckSuperJump, &CheckSuperJump_Parms, NULL );
};

// Function TgGame.TgEffect.ApplyToProperty
// [0x00024002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// int                            nPropertyId                    ( CPF_Parm )
// float                          fProratedAmount                ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void UTgEffect::ApplyToProperty ( class AActor* Target, int nPropertyId, float fProratedAmount, unsigned long bRemove )
{
	static UFunction* pFnApplyToProperty = NULL;

	if ( ! pFnApplyToProperty )
		pFnApplyToProperty = (UFunction*) UObject::GObjObjects()->Data[ 37591 ];

	UTgEffect_execApplyToProperty_Parms ApplyToProperty_Parms;
	ApplyToProperty_Parms.Target = Target;
	ApplyToProperty_Parms.nPropertyId = nPropertyId;
	ApplyToProperty_Parms.fProratedAmount = fProratedAmount;
	ApplyToProperty_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnApplyToProperty, &ApplyToProperty_Parms, NULL );
};

// Function TgGame.TgEffect.GetTargetProperty
// [0x00020002] 
// Parameters infos:
// class UTgProperty*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nPropertyId                    ( CPF_Parm )

class UTgProperty* UTgEffect::GetTargetProperty ( class AActor* Target, int nPropertyId )
{
	static UFunction* pFnGetTargetProperty = NULL;

	if ( ! pFnGetTargetProperty )
		pFnGetTargetProperty = (UFunction*) UObject::GObjObjects()->Data[ 37587 ];

	UTgEffect_execGetTargetProperty_Parms GetTargetProperty_Parms;
	GetTargetProperty_Parms.Target = Target;
	GetTargetProperty_Parms.nPropertyId = nPropertyId;

	this->ProcessEvent ( pFnGetTargetProperty, &GetTargetProperty_Parms, NULL );

	return GetTargetProperty_Parms.ReturnValue;
};

// Function TgGame.TgEffect.ApplyEffect
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffect::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 37568 ];

	UTgEffect_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffect.IsValidInstigator
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 InstigatorPawn                 ( CPF_Parm )

bool UTgEffect::IsValidInstigator ( class ATgPawn* InstigatorPawn )
{
	static UFunction* pFnIsValidInstigator = NULL;

	if ( ! pFnIsValidInstigator )
		pFnIsValidInstigator = (UFunction*) UObject::GObjObjects()->Data[ 37565 ];

	UTgEffect_execIsValidInstigator_Parms IsValidInstigator_Parms;
	IsValidInstigator_Parms.InstigatorPawn = InstigatorPawn;

	this->ProcessEvent ( pFnIsValidInstigator, &IsValidInstigator_Parms, NULL );

	return IsValidInstigator_Parms.ReturnValue;
};

// Function TgGame.TgEffect.GetDeviceIdFromMode
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgDeviceFire*           DeviceFireMode                 ( CPF_Parm )

int UTgEffect::GetDeviceIdFromMode ( class UTgDeviceFire* DeviceFireMode )
{
	static UFunction* pFnGetDeviceIdFromMode = NULL;

	if ( ! pFnGetDeviceIdFromMode )
		pFnGetDeviceIdFromMode = (UFunction*) UObject::GObjObjects()->Data[ 37562 ];

	UTgEffect_execGetDeviceIdFromMode_Parms GetDeviceIdFromMode_Parms;
	GetDeviceIdFromMode_Parms.DeviceFireMode = DeviceFireMode;

	pFnGetDeviceIdFromMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceIdFromMode, &GetDeviceIdFromMode_Parms, NULL );

	pFnGetDeviceIdFromMode->FunctionFlags |= 0x400;

	return GetDeviceIdFromMode_Parms.ReturnValue;
};

// Function TgGame.TgEffect.CanBeApplied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffect::CanBeApplied ( class AActor* Target )
{
	static UFunction* pFnCanBeApplied = NULL;

	if ( ! pFnCanBeApplied )
		pFnCanBeApplied = (UFunction*) UObject::GObjObjects()->Data[ 37559 ];

	UTgEffect_execCanBeApplied_Parms CanBeApplied_Parms;
	CanBeApplied_Parms.Target = Target;

	this->ProcessEvent ( pFnCanBeApplied, &CanBeApplied_Parms, NULL );

	return CanBeApplied_Parms.ReturnValue;
};

// Function TgGame.TgEffect.SetProperty
// [0x00020002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// int                            nPropertyId                    ( CPF_Parm )
// float                          fNewValue                      ( CPF_Parm )

void UTgEffect::SetProperty ( class AActor* Target, int nPropertyId, float fNewValue )
{
	static UFunction* pFnSetProperty = NULL;

	if ( ! pFnSetProperty )
		pFnSetProperty = (UFunction*) UObject::GObjObjects()->Data[ 37555 ];

	UTgEffect_execSetProperty_Parms SetProperty_Parms;
	SetProperty_Parms.Target = Target;
	SetProperty_Parms.nPropertyId = nPropertyId;
	SetProperty_Parms.fNewValue = fNewValue;

	this->ProcessEvent ( pFnSetProperty, &SetProperty_Parms, NULL );
};

// Function TgGame.TgEffect.TrackStats
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Instigator                     ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// int                            iTargetDeviceModeId            ( CPF_Parm )
// unsigned long                  bIsEnemy                       ( CPF_Parm )
// float                          fMissingHealth                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffect::TrackStats ( class ATgPawn* Instigator, class AActor* Target, struct FImpactInfo Impact, float fDamage, int iTargetDeviceModeId, unsigned long bIsEnemy, float fMissingHealth )
{
	static UFunction* pFnTrackStats = NULL;

	if ( ! pFnTrackStats )
		pFnTrackStats = (UFunction*) UObject::GObjObjects()->Data[ 37547 ];

	UTgEffect_execTrackStats_Parms TrackStats_Parms;
	TrackStats_Parms.Instigator = Instigator;
	TrackStats_Parms.Target = Target;
	memcpy ( &TrackStats_Parms.Impact, &Impact, 0x60 );
	TrackStats_Parms.fDamage = fDamage;
	TrackStats_Parms.iTargetDeviceModeId = iTargetDeviceModeId;
	TrackStats_Parms.bIsEnemy = bIsEnemy;
	TrackStats_Parms.fMissingHealth = fMissingHealth;

	pFnTrackStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackStats, &TrackStats_Parms, NULL );

	pFnTrackStats->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffect.CheckOwnerPetBuff
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nPropertyId                    ( CPF_Parm )
// float                          fCurrAmount                    ( CPF_Parm )
// float                          fNewAmount                     ( CPF_Parm | CPF_OutParm )

void UTgEffect::CheckOwnerPetBuff ( int nPropertyId, float fCurrAmount, float* fNewAmount )
{
	static UFunction* pFnCheckOwnerPetBuff = NULL;

	if ( ! pFnCheckOwnerPetBuff )
		pFnCheckOwnerPetBuff = (UFunction*) UObject::GObjObjects()->Data[ 37543 ];

	UTgEffect_execCheckOwnerPetBuff_Parms CheckOwnerPetBuff_Parms;
	CheckOwnerPetBuff_Parms.nPropertyId = nPropertyId;
	CheckOwnerPetBuff_Parms.fCurrAmount = fCurrAmount;

	pFnCheckOwnerPetBuff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckOwnerPetBuff, &CheckOwnerPetBuff_Parms, NULL );

	pFnCheckOwnerPetBuff->FunctionFlags |= 0x400;

	if ( fNewAmount )
		*fNewAmount = CheckOwnerPetBuff_Parms.fNewAmount;
};

// Function TgGame.TgEffect.CheckEffectThreatModifier
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          NewValue                       ( CPF_Parm | CPF_OutParm )

void UTgEffect::CheckEffectThreatModifier ( float* NewValue )
{
	static UFunction* pFnCheckEffectThreatModifier = NULL;

	if ( ! pFnCheckEffectThreatModifier )
		pFnCheckEffectThreatModifier = (UFunction*) UObject::GObjObjects()->Data[ 37541 ];

	UTgEffect_execCheckEffectThreatModifier_Parms CheckEffectThreatModifier_Parms;

	pFnCheckEffectThreatModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckEffectThreatModifier, &CheckEffectThreatModifier_Parms, NULL );

	pFnCheckEffectThreatModifier->FunctionFlags |= 0x400;

	if ( NewValue )
		*NewValue = CheckEffectThreatModifier_Parms.NewValue;
};

// Function TgGame.TgEffect.CheckEffectBuffModifier
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          NewValue                       ( CPF_Parm | CPF_OutParm )

void UTgEffect::CheckEffectBuffModifier ( float* NewValue )
{
	static UFunction* pFnCheckEffectBuffModifier = NULL;

	if ( ! pFnCheckEffectBuffModifier )
		pFnCheckEffectBuffModifier = (UFunction*) UObject::GObjObjects()->Data[ 37539 ];

	UTgEffect_execCheckEffectBuffModifier_Parms CheckEffectBuffModifier_Parms;

	pFnCheckEffectBuffModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckEffectBuffModifier, &CheckEffectBuffModifier_Parms, NULL );

	pFnCheckEffectBuffModifier->FunctionFlags |= 0x400;

	if ( NewValue )
		*NewValue = CheckEffectBuffModifier_Parms.NewValue;
};

// Function TgGame.TgEffect.CloneEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgEffect*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTgEffect* UTgEffect::CloneEffect ( )
{
	static UFunction* pFnCloneEffect = NULL;

	if ( ! pFnCloneEffect )
		pFnCloneEffect = (UFunction*) UObject::GObjObjects()->Data[ 37537 ];

	UTgEffect_execCloneEffect_Parms CloneEffect_Parms;

	pFnCloneEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloneEffect, &CloneEffect_Parms, NULL );

	pFnCloneEffect->FunctionFlags |= 0x400;

	return CloneEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectDamage.CheckDamageTakenModifier
// [0x00C20002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          fProratedAmount                ( CPF_Parm | CPF_OutParm )

void UTgEffectDamage::CheckDamageTakenModifier ( struct FImpactInfo Impact, float* fProratedAmount )
{
	static UFunction* pFnCheckDamageTakenModifier = NULL;

	if ( ! pFnCheckDamageTakenModifier )
		pFnCheckDamageTakenModifier = (UFunction*) UObject::GObjObjects()->Data[ 37735 ];

	UTgEffectDamage_execCheckDamageTakenModifier_Parms CheckDamageTakenModifier_Parms;
	memcpy ( &CheckDamageTakenModifier_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnCheckDamageTakenModifier, &CheckDamageTakenModifier_Parms, NULL );

	if ( fProratedAmount )
		*fProratedAmount = CheckDamageTakenModifier_Parms.fProratedAmount;
};

// Function TgGame.TgEffectDamage.ProtectionModifier
// [0x00424002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// unsigned long                  bSubmitMitigation              ( CPF_OptionalParm | CPF_Parm )
// float                          NewValue                       ( CPF_Parm | CPF_OutParm )
// float                          fPercReduction                 ( CPF_Parm | CPF_OutParm )

void UTgEffectDamage::ProtectionModifier ( struct FImpactInfo Impact, unsigned long bSubmitMitigation, float* NewValue, float* fPercReduction )
{
	static UFunction* pFnProtectionModifier = NULL;

	if ( ! pFnProtectionModifier )
		pFnProtectionModifier = (UFunction*) UObject::GObjObjects()->Data[ 37722 ];

	UTgEffectDamage_execProtectionModifier_Parms ProtectionModifier_Parms;
	memcpy ( &ProtectionModifier_Parms.Impact, &Impact, 0x60 );
	ProtectionModifier_Parms.bSubmitMitigation = bSubmitMitigation;

	this->ProcessEvent ( pFnProtectionModifier, &ProtectionModifier_Parms, NULL );

	if ( NewValue )
		*NewValue = ProtectionModifier_Parms.NewValue;

	if ( fPercReduction )
		*fPercReduction = ProtectionModifier_Parms.fPercReduction;
};

// Function TgGame.TgEffectDamage.Ceiling
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fNumber                        ( CPF_Parm )

int UTgEffectDamage::Ceiling ( float fNumber )
{
	static UFunction* pFnCeiling = NULL;

	if ( ! pFnCeiling )
		pFnCeiling = (UFunction*) UObject::GObjObjects()->Data[ 37718 ];

	UTgEffectDamage_execCeiling_Parms Ceiling_Parms;
	Ceiling_Parms.fNumber = fNumber;

	this->ProcessEvent ( pFnCeiling, &Ceiling_Parms, NULL );

	return Ceiling_Parms.ReturnValue;
};

// Function TgGame.TgEffectDamage.ApplyEffect
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectDamage::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 37693 ];

	UTgEffectDamage_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectDamage.SendDamageMessages
// [0x00020002] 
// Parameters infos:
// class AActor*                  Source                         ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// float                          fMitigated                     ( CPF_Parm )
// struct FImpactInfo             thisImpact                     ( CPF_Parm )

void UTgEffectDamage::SendDamageMessages ( class AActor* Source, class AActor* Target, float fDamage, float fMitigated, struct FImpactInfo thisImpact )
{
	static UFunction* pFnSendDamageMessages = NULL;

	if ( ! pFnSendDamageMessages )
		pFnSendDamageMessages = (UFunction*) UObject::GObjObjects()->Data[ 37685 ];

	UTgEffectDamage_execSendDamageMessages_Parms SendDamageMessages_Parms;
	SendDamageMessages_Parms.Source = Source;
	SendDamageMessages_Parms.Target = Target;
	SendDamageMessages_Parms.fDamage = fDamage;
	SendDamageMessages_Parms.fMitigated = fMitigated;
	memcpy ( &SendDamageMessages_Parms.thisImpact, &thisImpact, 0x60 );

	this->ProcessEvent ( pFnSendDamageMessages, &SendDamageMessages_Parms, NULL );
};

// Function TgGame.TgEffectDamage.CanBeApplied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffectDamage::CanBeApplied ( class AActor* Target )
{
	static UFunction* pFnCanBeApplied = NULL;

	if ( ! pFnCanBeApplied )
		pFnCanBeApplied = (UFunction*) UObject::GObjObjects()->Data[ 37682 ];

	UTgEffectDamage_execCanBeApplied_Parms CanBeApplied_Parms;
	CanBeApplied_Parms.Target = Target;

	this->ProcessEvent ( pFnCanBeApplied, &CanBeApplied_Parms, NULL );

	return CanBeApplied_Parms.ReturnValue;
};

// Function TgGame.TgEffectDamage.PostDamageHandler
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  pTarget                        ( CPF_Parm )
// class ATgPawn*                 pInstigator                    ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// float                          fHealthChange                  ( CPF_Parm )
// float                          fBuffedDamage                  ( CPF_Parm )
// float                          fMitigatedDamage               ( CPF_Parm )

void UTgEffectDamage::PostDamageHandler ( class AActor* pTarget, class ATgPawn* pInstigator, struct FImpactInfo Impact, float fHealthChange, float fBuffedDamage, float fMitigatedDamage )
{
	static UFunction* pFnPostDamageHandler = NULL;

	if ( ! pFnPostDamageHandler )
		pFnPostDamageHandler = (UFunction*) UObject::GObjObjects()->Data[ 37675 ];

	UTgEffectDamage_execPostDamageHandler_Parms PostDamageHandler_Parms;
	PostDamageHandler_Parms.pTarget = pTarget;
	PostDamageHandler_Parms.pInstigator = pInstigator;
	memcpy ( &PostDamageHandler_Parms.Impact, &Impact, 0x60 );
	PostDamageHandler_Parms.fHealthChange = fHealthChange;
	PostDamageHandler_Parms.fBuffedDamage = fBuffedDamage;
	PostDamageHandler_Parms.fMitigatedDamage = fMitigatedDamage;

	pFnPostDamageHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostDamageHandler, &PostDamageHandler_Parms, NULL );

	pFnPostDamageHandler->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectDamage.SetDamageTypeClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgEffectDamage::SetDamageTypeClass ( )
{
	static UFunction* pFnSetDamageTypeClass = NULL;

	if ( ! pFnSetDamageTypeClass )
		pFnSetDamageTypeClass = (UFunction*) UObject::GObjObjects()->Data[ 37674 ];

	UTgEffectDamage_execSetDamageTypeClass_Parms SetDamageTypeClass_Parms;

	pFnSetDamageTypeClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDamageTypeClass, &SetDamageTypeClass_Parms, NULL );

	pFnSetDamageTypeClass->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectHeal.CheckSelfEffectBuffModifier
// [0x00C20002] 
// Parameters infos:
// class ATgPawn*                 Target                         ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm | CPF_OutParm )

void UTgEffectHeal::CheckSelfEffectBuffModifier ( class ATgPawn* Target, float* NewValue )
{
	static UFunction* pFnCheckSelfEffectBuffModifier = NULL;

	if ( ! pFnCheckSelfEffectBuffModifier )
		pFnCheckSelfEffectBuffModifier = (UFunction*) UObject::GObjObjects()->Data[ 37994 ];

	UTgEffectHeal_execCheckSelfEffectBuffModifier_Parms CheckSelfEffectBuffModifier_Parms;
	CheckSelfEffectBuffModifier_Parms.Target = Target;

	this->ProcessEvent ( pFnCheckSelfEffectBuffModifier, &CheckSelfEffectBuffModifier_Parms, NULL );

	if ( NewValue )
		*NewValue = CheckSelfEffectBuffModifier_Parms.NewValue;
};

// Function TgGame.TgEffectHeal.ApplyEffect
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectHeal::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 37979 ];

	UTgEffectHeal_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectHeal.CanTargetBeRepaired
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffectHeal::CanTargetBeRepaired ( class AActor* Target )
{
	static UFunction* pFnCanTargetBeRepaired = NULL;

	if ( ! pFnCanTargetBeRepaired )
		pFnCanTargetBeRepaired = (UFunction*) UObject::GObjObjects()->Data[ 37976 ];

	UTgEffectHeal_execCanTargetBeRepaired_Parms CanTargetBeRepaired_Parms;
	CanTargetBeRepaired_Parms.Target = Target;

	this->ProcessEvent ( pFnCanTargetBeRepaired, &CanTargetBeRepaired_Parms, NULL );

	return CanTargetBeRepaired_Parms.ReturnValue;
};

// Function TgGame.TgEffectHeal.CanBeApplied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffectHeal::CanBeApplied ( class AActor* Target )
{
	static UFunction* pFnCanBeApplied = NULL;

	if ( ! pFnCanBeApplied )
		pFnCanBeApplied = (UFunction*) UObject::GObjObjects()->Data[ 37973 ];

	UTgEffectHeal_execCanBeApplied_Parms CanBeApplied_Parms;
	CanBeApplied_Parms.Target = Target;

	this->ProcessEvent ( pFnCanBeApplied, &CanBeApplied_Parms, NULL );

	return CanBeApplied_Parms.ReturnValue;
};

// Function TgGame.TgEffectHeal.AddHealingThreat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fHealthChange                  ( CPF_Parm )

void UTgEffectHeal::AddHealingThreat ( float fHealthChange )
{
	static UFunction* pFnAddHealingThreat = NULL;

	if ( ! pFnAddHealingThreat )
		pFnAddHealingThreat = (UFunction*) UObject::GObjObjects()->Data[ 37971 ];

	UTgEffectHeal_execAddHealingThreat_Parms AddHealingThreat_Parms;
	AddHealingThreat_Parms.fHealthChange = fHealthChange;

	pFnAddHealingThreat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddHealingThreat, &AddHealingThreat_Parms, NULL );

	pFnAddHealingThreat->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectSensor.CalcSensorVisConfig
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 PawnTarget                     ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

void UTgEffectSensor::CalcSensorVisConfig ( class ATgPawn* PawnTarget, int nIndex )
{
	static UFunction* pFnCalcSensorVisConfig = NULL;

	if ( ! pFnCalcSensorVisConfig )
		pFnCalcSensorVisConfig = (UFunction*) UObject::GObjObjects()->Data[ 38195 ];

	UTgEffectSensor_execCalcSensorVisConfig_Parms CalcSensorVisConfig_Parms;
	CalcSensorVisConfig_Parms.PawnTarget = PawnTarget;
	CalcSensorVisConfig_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnCalcSensorVisConfig, &CalcSensorVisConfig_Parms, NULL );
};

// Function TgGame.TgEffectSensor.ApplyScannerSetting
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 PawnTarget                     ( CPF_Parm )

void UTgEffectSensor::ApplyScannerSetting ( class ATgPawn* PawnTarget )
{
	static UFunction* pFnApplyScannerSetting = NULL;

	if ( ! pFnApplyScannerSetting )
		pFnApplyScannerSetting = (UFunction*) UObject::GObjObjects()->Data[ 38192 ];

	UTgEffectSensor_execApplyScannerSetting_Parms ApplyScannerSetting_Parms;
	ApplyScannerSetting_Parms.PawnTarget = PawnTarget;

	this->ProcessEvent ( pFnApplyScannerSetting, &ApplyScannerSetting_Parms, NULL );
};

// Function TgGame.TgEffectSensor.GetPawnScannerSettingIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 PawnTarget                     ( CPF_Parm )

int UTgEffectSensor::GetPawnScannerSettingIndex ( class ATgPawn* PawnTarget )
{
	static UFunction* pFnGetPawnScannerSettingIndex = NULL;

	if ( ! pFnGetPawnScannerSettingIndex )
		pFnGetPawnScannerSettingIndex = (UFunction*) UObject::GObjObjects()->Data[ 38189 ];

	UTgEffectSensor_execGetPawnScannerSettingIndex_Parms GetPawnScannerSettingIndex_Parms;
	GetPawnScannerSettingIndex_Parms.PawnTarget = PawnTarget;

	this->ProcessEvent ( pFnGetPawnScannerSettingIndex, &GetPawnScannerSettingIndex_Parms, NULL );

	return GetPawnScannerSettingIndex_Parms.ReturnValue;
};

// Function TgGame.TgEffectSensor.Remove
// [0x00024002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bResetToFollow                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffectSensor::Remove ( class AActor* Target, unsigned long bResetToFollow )
{
	static UFunction* pFnRemove = NULL;

	if ( ! pFnRemove )
		pFnRemove = (UFunction*) UObject::GObjObjects()->Data[ 38184 ];

	UTgEffectSensor_execRemove_Parms Remove_Parms;
	Remove_Parms.Target = Target;
	Remove_Parms.bResetToFollow = bResetToFollow;

	this->ProcessEvent ( pFnRemove, &Remove_Parms, NULL );
};

// Function TgGame.TgEffectSensor.ApplyEffect
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectSensor::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 38178 ];

	UTgEffectSensor_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectSensor.GetSensorVisConfig
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nSeeFlag                       ( CPF_Parm | CPF_OutParm )
// int                            nDisplayFlag                   ( CPF_Parm | CPF_OutParm )

void UTgEffectSensor::GetSensorVisConfig ( int* nSeeFlag, int* nDisplayFlag )
{
	static UFunction* pFnGetSensorVisConfig = NULL;

	if ( ! pFnGetSensorVisConfig )
		pFnGetSensorVisConfig = (UFunction*) UObject::GObjObjects()->Data[ 38175 ];

	UTgEffectSensor_execGetSensorVisConfig_Parms GetSensorVisConfig_Parms;

	pFnGetSensorVisConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSensorVisConfig, &GetSensorVisConfig_Parms, NULL );

	pFnGetSensorVisConfig->FunctionFlags |= 0x400;

	if ( nSeeFlag )
		*nSeeFlag = GetSensorVisConfig_Parms.nSeeFlag;

	if ( nDisplayFlag )
		*nDisplayFlag = GetSensorVisConfig_Parms.nDisplayFlag;
};

// Function TgGame.TgEffectVisibility.Remove
// [0x00024002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bResetToFollow                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffectVisibility::Remove ( class AActor* Target, unsigned long bResetToFollow )
{
	static UFunction* pFnRemove = NULL;

	if ( ! pFnRemove )
		pFnRemove = (UFunction*) UObject::GObjObjects()->Data[ 38212 ];

	UTgEffectVisibility_execRemove_Parms Remove_Parms;
	Remove_Parms.Target = Target;
	Remove_Parms.bResetToFollow = bResetToFollow;

	this->ProcessEvent ( pFnRemove, &Remove_Parms, NULL );
};

// Function TgGame.TgEffectVisibility.GetTargetProperty
// [0x00020002] 
// Parameters infos:
// class UTgProperty*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nPropertyId                    ( CPF_Parm )

class UTgProperty* UTgEffectVisibility::GetTargetProperty ( class AActor* Target, int nPropertyId )
{
	static UFunction* pFnGetTargetProperty = NULL;

	if ( ! pFnGetTargetProperty )
		pFnGetTargetProperty = (UFunction*) UObject::GObjObjects()->Data[ 38205 ];

	UTgEffectVisibility_execGetTargetProperty_Parms GetTargetProperty_Parms;
	GetTargetProperty_Parms.Target = Target;
	GetTargetProperty_Parms.nPropertyId = nPropertyId;

	this->ProcessEvent ( pFnGetTargetProperty, &GetTargetProperty_Parms, NULL );

	return GetTargetProperty_Parms.ReturnValue;
};

// Function TgGame.TgEffectVisibility.ApplyEffect
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectVisibility::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 38200 ];

	UTgEffectVisibility_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectForm.AdjustHidden
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgEffectForm::AdjustHidden ( )
{
	static UFunction* pFnAdjustHidden = NULL;

	if ( ! pFnAdjustHidden )
		pFnAdjustHidden = (UFunction*) UObject::GObjObjects()->Data[ 37764 ];

	UTgEffectForm_execAdjustHidden_Parms AdjustHidden_Parms;

	pFnAdjustHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustHidden, &AdjustHidden_Parms, NULL );

	pFnAdjustHidden->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectForm.Detach
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgEffectForm::Detach ( )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 37763 ];

	UTgEffectForm_execDetach_Parms Detach_Parms;

	pFnDetach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );

	pFnDetach->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectForm.HideEffectForm
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgEffectForm::HideEffectForm ( )
{
	static UFunction* pFnHideEffectForm = NULL;

	if ( ! pFnHideEffectForm )
		pFnHideEffectForm = (UFunction*) UObject::GObjObjects()->Data[ 37762 ];

	UTgEffectForm_execHideEffectForm_Parms HideEffectForm_Parms;

	pFnHideEffectForm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideEffectForm, &HideEffectForm_Parms, NULL );

	pFnHideEffectForm->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectForm.ShowEffectForm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLocal                         ( CPF_Parm )

void UTgEffectForm::ShowEffectForm ( unsigned long bLocal )
{
	static UFunction* pFnShowEffectForm = NULL;

	if ( ! pFnShowEffectForm )
		pFnShowEffectForm = (UFunction*) UObject::GObjObjects()->Data[ 37760 ];

	UTgEffectForm_execShowEffectForm_Parms ShowEffectForm_Parms;
	ShowEffectForm_Parms.bLocal = bLocal;

	pFnShowEffectForm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowEffectForm, &ShowEffectForm_Parms, NULL );

	pFnShowEffectForm->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectForm.RecalculateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgEffectForm::RecalculateFx ( )
{
	static UFunction* pFnRecalculateFx = NULL;

	if ( ! pFnRecalculateFx )
		pFnRecalculateFx = (UFunction*) UObject::GObjObjects()->Data[ 37759 ];

	UTgEffectForm_execRecalculateFx_Parms RecalculateFx_Parms;

	pFnRecalculateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateFx, &RecalculateFx_Parms, NULL );

	pFnRecalculateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectGroup.IsBuff
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgEffectGroup::IsBuff ( )
{
	static UFunction* pFnIsBuff = NULL;

	if ( ! pFnIsBuff )
		pFnIsBuff = (UFunction*) UObject::GObjObjects()->Data[ 37967 ];

	UTgEffectGroup_execIsBuff_Parms IsBuff_Parms;

	this->ProcessEvent ( pFnIsBuff, &IsBuff_Parms, NULL );

	return IsBuff_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.LifeDone
// [0x00020002] 
// Parameters infos:

void UTgEffectGroup::LifeDone ( )
{
	static UFunction* pFnLifeDone = NULL;

	if ( ! pFnLifeDone )
		pFnLifeDone = (UFunction*) UObject::GObjObjects()->Data[ 37966 ];

	UTgEffectGroup_execLifeDone_Parms LifeDone_Parms;

	this->ProcessEvent ( pFnLifeDone, &LifeDone_Parms, NULL );
};

// Function TgGame.TgEffectGroup.ApplyInterval
// [0x00020002] 
// Parameters infos:

void UTgEffectGroup::ApplyInterval ( )
{
	static UFunction* pFnApplyInterval = NULL;

	if ( ! pFnApplyInterval )
		pFnApplyInterval = (UFunction*) UObject::GObjObjects()->Data[ 37964 ];

	UTgEffectGroup_execApplyInterval_Parms ApplyInterval_Parms;

	this->ProcessEvent ( pFnApplyInterval, &ApplyInterval_Parms, NULL );
};

// Function TgGame.TgEffectGroup.GetProperty
// [0x00020002] 
// Parameters infos:
// class UTgProperty*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nPropertyId                    ( CPF_Parm )

class UTgProperty* UTgEffectGroup::GetProperty ( class AActor* Target, int nPropertyId )
{
	static UFunction* pFnGetProperty = NULL;

	if ( ! pFnGetProperty )
		pFnGetProperty = (UFunction*) UObject::GObjObjects()->Data[ 37960 ];

	UTgEffectGroup_execGetProperty_Parms GetProperty_Parms;
	GetProperty_Parms.Target = Target;
	GetProperty_Parms.nPropertyId = nPropertyId;

	this->ProcessEvent ( pFnGetProperty, &GetProperty_Parms, NULL );

	return GetProperty_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.CalcProtection
// [0x00424002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nProtectionType                ( CPF_Parm )
// int                            nDeviceRating                  ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// unsigned long                  bSubmitMitigation              ( CPF_OptionalParm | CPF_Parm )
// float                          fPercReduction                 ( CPF_Parm | CPF_OutParm )

float UTgEffectGroup::CalcProtection ( class AActor* Target, int nProtectionType, int nDeviceRating, float fValue, unsigned long bSubmitMitigation, float* fPercReduction )
{
	static UFunction* pFnCalcProtection = NULL;

	if ( ! pFnCalcProtection )
		pFnCalcProtection = (UFunction*) UObject::GObjObjects()->Data[ 37947 ];

	UTgEffectGroup_execCalcProtection_Parms CalcProtection_Parms;
	CalcProtection_Parms.Target = Target;
	CalcProtection_Parms.nProtectionType = nProtectionType;
	CalcProtection_Parms.nDeviceRating = nDeviceRating;
	CalcProtection_Parms.fValue = fValue;
	CalcProtection_Parms.bSubmitMitigation = bSubmitMitigation;

	this->ProcessEvent ( pFnCalcProtection, &CalcProtection_Parms, NULL );

	if ( fPercReduction )
		*fPercReduction = CalcProtection_Parms.fPercReduction;

	return CalcProtection_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.CalcAttackTypeProtection
// [0x00424002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nAttackRating                  ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// unsigned long                  bSubmitMitigation              ( CPF_OptionalParm | CPF_Parm )
// float                          fPercReduction                 ( CPF_Parm | CPF_OutParm )

float UTgEffectGroup::CalcAttackTypeProtection ( class AActor* Target, int nAttackRating, float fValue, unsigned long bSubmitMitigation, float* fPercReduction )
{
	static UFunction* pFnCalcAttackTypeProtection = NULL;

	if ( ! pFnCalcAttackTypeProtection )
		pFnCalcAttackTypeProtection = (UFunction*) UObject::GObjObjects()->Data[ 37939 ];

	UTgEffectGroup_execCalcAttackTypeProtection_Parms CalcAttackTypeProtection_Parms;
	CalcAttackTypeProtection_Parms.Target = Target;
	CalcAttackTypeProtection_Parms.nAttackRating = nAttackRating;
	CalcAttackTypeProtection_Parms.fValue = fValue;
	CalcAttackTypeProtection_Parms.bSubmitMitigation = bSubmitMitigation;

	this->ProcessEvent ( pFnCalcAttackTypeProtection, &CalcAttackTypeProtection_Parms, NULL );

	if ( fPercReduction )
		*fPercReduction = CalcAttackTypeProtection_Parms.fPercReduction;

	return CalcAttackTypeProtection_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.CalcDamageTypeProtection
// [0x00424002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nAttackRating                  ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// unsigned long                  bSubmitMitigation              ( CPF_OptionalParm | CPF_Parm )
// float                          fPercReduction                 ( CPF_Parm | CPF_OutParm )

float UTgEffectGroup::CalcDamageTypeProtection ( class AActor* Target, int nAttackRating, float fValue, unsigned long bSubmitMitigation, float* fPercReduction )
{
	static UFunction* pFnCalcDamageTypeProtection = NULL;

	if ( ! pFnCalcDamageTypeProtection )
		pFnCalcDamageTypeProtection = (UFunction*) UObject::GObjObjects()->Data[ 37930 ];

	UTgEffectGroup_execCalcDamageTypeProtection_Parms CalcDamageTypeProtection_Parms;
	CalcDamageTypeProtection_Parms.Target = Target;
	CalcDamageTypeProtection_Parms.nAttackRating = nAttackRating;
	CalcDamageTypeProtection_Parms.fValue = fValue;
	CalcDamageTypeProtection_Parms.bSubmitMitigation = bSubmitMitigation;

	this->ProcessEvent ( pFnCalcDamageTypeProtection, &CalcDamageTypeProtection_Parms, NULL );

	if ( fPercReduction )
		*fPercReduction = CalcDamageTypeProtection_Parms.fPercReduction;

	return CalcDamageTypeProtection_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.CalcCategoryProtection
// [0x00424002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nAttackRating                  ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// unsigned long                  bSubmitMitigation              ( CPF_OptionalParm | CPF_Parm )
// float                          fPercReduction                 ( CPF_Parm | CPF_OutParm )

float UTgEffectGroup::CalcCategoryProtection ( class AActor* Target, int nAttackRating, float fValue, unsigned long bSubmitMitigation, float* fPercReduction )
{
	static UFunction* pFnCalcCategoryProtection = NULL;

	if ( ! pFnCalcCategoryProtection )
		pFnCalcCategoryProtection = (UFunction*) UObject::GObjObjects()->Data[ 37922 ];

	UTgEffectGroup_execCalcCategoryProtection_Parms CalcCategoryProtection_Parms;
	CalcCategoryProtection_Parms.Target = Target;
	CalcCategoryProtection_Parms.nAttackRating = nAttackRating;
	CalcCategoryProtection_Parms.fValue = fValue;
	CalcCategoryProtection_Parms.bSubmitMitigation = bSubmitMitigation;

	this->ProcessEvent ( pFnCalcCategoryProtection, &CalcCategoryProtection_Parms, NULL );

	if ( fPercReduction )
		*fPercReduction = CalcCategoryProtection_Parms.fPercReduction;

	return CalcCategoryProtection_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.ProtectionModifier
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

float UTgEffectGroup::ProtectionModifier ( struct FImpactInfo Impact )
{
	static UFunction* pFnProtectionModifier = NULL;

	if ( ! pFnProtectionModifier )
		pFnProtectionModifier = (UFunction*) UObject::GObjObjects()->Data[ 37912 ];

	UTgEffectGroup_execProtectionModifier_Parms ProtectionModifier_Parms;
	memcpy ( &ProtectionModifier_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProtectionModifier, &ProtectionModifier_Parms, NULL );

	return ProtectionModifier_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.StartInterval
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

bool UTgEffectGroup::StartInterval ( struct FImpactInfo Impact )
{
	static UFunction* pFnStartInterval = NULL;

	if ( ! pFnStartInterval )
		pFnStartInterval = (UFunction*) UObject::GObjObjects()->Data[ 37905 ];

	UTgEffectGroup_execStartInterval_Parms StartInterval_Parms;
	memcpy ( &StartInterval_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnStartInterval, &StartInterval_Parms, NULL );

	return StartInterval_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.ReapplyEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffectGroup::ReapplyEffects ( class AActor* Target )
{
	static UFunction* pFnReapplyEffects = NULL;

	if ( ! pFnReapplyEffects )
		pFnReapplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 37901 ];

	UTgEffectGroup_execReapplyEffects_Parms ReapplyEffects_Parms;
	ReapplyEffects_Parms.Target = Target;

	this->ProcessEvent ( pFnReapplyEffects, &ReapplyEffects_Parms, NULL );

	return ReapplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.DetermineActorToApplyEffectsTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* UTgEffectGroup::DetermineActorToApplyEffectsTo ( )
{
	static UFunction* pFnDetermineActorToApplyEffectsTo = NULL;

	if ( ! pFnDetermineActorToApplyEffectsTo )
		pFnDetermineActorToApplyEffectsTo = (UFunction*) UObject::GObjObjects()->Data[ 37899 ];

	UTgEffectGroup_execDetermineActorToApplyEffectsTo_Parms DetermineActorToApplyEffectsTo_Parms;

	this->ProcessEvent ( pFnDetermineActorToApplyEffectsTo, &DetermineActorToApplyEffectsTo_Parms, NULL );

	return DetermineActorToApplyEffectsTo_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.ApplyPosture
// [0x00020002] 
// Parameters infos:

void UTgEffectGroup::ApplyPosture ( )
{
	static UFunction* pFnApplyPosture = NULL;

	if ( ! pFnApplyPosture )
		pFnApplyPosture = (UFunction*) UObject::GObjObjects()->Data[ 37897 ];

	UTgEffectGroup_execApplyPosture_Parms ApplyPosture_Parms;

	this->ProcessEvent ( pFnApplyPosture, &ApplyPosture_Parms, NULL );
};

// Function TgGame.TgEffectGroup.ApplyEventBasedEffects
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectGroup::ApplyEventBasedEffects ( class AActor* Target, struct FImpactInfo Impact )
{
	static UFunction* pFnApplyEventBasedEffects = NULL;

	if ( ! pFnApplyEventBasedEffects )
		pFnApplyEventBasedEffects = (UFunction*) UObject::GObjObjects()->Data[ 37890 ];

	UTgEffectGroup_execApplyEventBasedEffects_Parms ApplyEventBasedEffects_Parms;
	ApplyEventBasedEffects_Parms.Target = Target;
	memcpy ( &ApplyEventBasedEffects_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnApplyEventBasedEffects, &ApplyEventBasedEffects_Parms, NULL );

	return ApplyEventBasedEffects_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.ApplyEffects
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectGroup::ApplyEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 37885 ];

	UTgEffectGroup_execApplyEffects_Parms ApplyEffects_Parms;
	memcpy ( &ApplyEffects_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );

	return ApplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.ContagiousPulse
// [0x00820002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void UTgEffectGroup::ContagiousPulse ( struct FImpactInfo Impact )
{
	static UFunction* pFnContagiousPulse = NULL;

	if ( ! pFnContagiousPulse )
		pFnContagiousPulse = (UFunction*) UObject::GObjObjects()->Data[ 37879 ];

	UTgEffectGroup_execContagiousPulse_Parms ContagiousPulse_Parms;
	memcpy ( &ContagiousPulse_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnContagiousPulse, &ContagiousPulse_Parms, NULL );
};

// Function TgGame.TgEffectGroup.GetEffectHealth
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

float UTgEffectGroup::eventGetEffectHealth ( struct FImpactInfo Impact )
{
	static UFunction* pFnGetEffectHealth = NULL;

	if ( ! pFnGetEffectHealth )
		pFnGetEffectHealth = (UFunction*) UObject::GObjObjects()->Data[ 37873 ];

	UTgEffectGroup_eventGetEffectHealth_Parms GetEffectHealth_Parms;
	memcpy ( &GetEffectHealth_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnGetEffectHealth, &GetEffectHealth_Parms, NULL );

	return GetEffectHealth_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetLifeTime
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

float UTgEffectGroup::eventGetLifeTime ( struct FImpactInfo Impact )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 37867 ];

	UTgEffectGroup_eventGetLifeTime_Parms GetLifeTime_Parms;
	memcpy ( &GetLifeTime_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetPercentTimeRemaining
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::eventGetPercentTimeRemaining ( )
{
	static UFunction* pFnGetPercentTimeRemaining = NULL;

	if ( ! pFnGetPercentTimeRemaining )
		pFnGetPercentTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 37863 ];

	UTgEffectGroup_eventGetPercentTimeRemaining_Parms GetPercentTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetPercentTimeRemaining, &GetPercentTimeRemaining_Parms, NULL );

	return GetPercentTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetTimeRemaining
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::eventGetTimeRemaining ( )
{
	static UFunction* pFnGetTimeRemaining = NULL;

	if ( ! pFnGetTimeRemaining )
		pFnGetTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 37861 ];

	UTgEffectGroup_eventGetTimeRemaining_Parms GetTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetTimeRemaining, &GetTimeRemaining_Parms, NULL );

	return GetTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetTimeElapsed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::eventGetTimeElapsed ( )
{
	static UFunction* pFnGetTimeElapsed = NULL;

	if ( ! pFnGetTimeElapsed )
		pFnGetTimeElapsed = (UFunction*) UObject::GObjObjects()->Data[ 37859 ];

	UTgEffectGroup_eventGetTimeElapsed_Parms GetTimeElapsed_Parms;

	this->ProcessEvent ( pFnGetTimeElapsed, &GetTimeElapsed_Parms, NULL );

	return GetTimeElapsed_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetBuffValueRefresh
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::GetBuffValueRefresh ( )
{
	static UFunction* pFnGetBuffValueRefresh = NULL;

	if ( ! pFnGetBuffValueRefresh )
		pFnGetBuffValueRefresh = (UFunction*) UObject::GObjObjects()->Data[ 37857 ];

	UTgEffectGroup_execGetBuffValueRefresh_Parms GetBuffValueRefresh_Parms;

	this->ProcessEvent ( pFnGetBuffValueRefresh, &GetBuffValueRefresh_Parms, NULL );

	return GetBuffValueRefresh_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.GetBuffValueApplied
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::GetBuffValueApplied ( )
{
	static UFunction* pFnGetBuffValueApplied = NULL;

	if ( ! pFnGetBuffValueApplied )
		pFnGetBuffValueApplied = (UFunction*) UObject::GObjObjects()->Data[ 37855 ];

	UTgEffectGroup_execGetBuffValueApplied_Parms GetBuffValueApplied_Parms;

	this->ProcessEvent ( pFnGetBuffValueApplied, &GetBuffValueApplied_Parms, NULL );

	return GetBuffValueApplied_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.TrackBuffValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// unsigned long                  bRefresh                       ( CPF_Parm )

void UTgEffectGroup::eventTrackBuffValue ( struct FImpactInfo Impact, unsigned long bRefresh )
{
	static UFunction* pFnTrackBuffValue = NULL;

	if ( ! pFnTrackBuffValue )
		pFnTrackBuffValue = (UFunction*) UObject::GObjObjects()->Data[ 37848 ];

	UTgEffectGroup_eventTrackBuffValue_Parms TrackBuffValue_Parms;
	memcpy ( &TrackBuffValue_Parms.Impact, &Impact, 0x60 );
	TrackBuffValue_Parms.bRefresh = bRefresh;

	this->ProcessEvent ( pFnTrackBuffValue, &TrackBuffValue_Parms, NULL );
};

// Function TgGame.TgEffectGroup.InitInstance
// [0x00020002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void UTgEffectGroup::InitInstance ( class AActor* Target, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnInitInstance = NULL;

	if ( ! pFnInitInstance )
		pFnInitInstance = (UFunction*) UObject::GObjObjects()->Data[ 37842 ];

	UTgEffectGroup_execInitInstance_Parms InitInstance_Parms;
	InitInstance_Parms.Target = Target;
	InitInstance_Parms.aInstigator = aInstigator;
	memcpy ( &InitInstance_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnInitInstance, &InitInstance_Parms, NULL );
};

// Function TgGame.TgEffectGroup.EffectExists
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropId                        ( CPF_Parm )

bool UTgEffectGroup::EffectExists ( int nPropId )
{
	static UFunction* pFnEffectExists = NULL;

	if ( ! pFnEffectExists )
		pFnEffectExists = (UFunction*) UObject::GObjObjects()->Data[ 37839 ];

	UTgEffectGroup_execEffectExists_Parms EffectExists_Parms;
	EffectExists_Parms.nPropId = nPropId;

	pFnEffectExists->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEffectExists, &EffectExists_Parms, NULL );

	pFnEffectExists->FunctionFlags |= 0x400;

	return EffectExists_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.QueryFxTransitionTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgEffectGroup::QueryFxTransitionTime ( )
{
	static UFunction* pFnQueryFxTransitionTime = NULL;

	if ( ! pFnQueryFxTransitionTime )
		pFnQueryFxTransitionTime = (UFunction*) UObject::GObjObjects()->Data[ 37837 ];

	UTgEffectGroup_execQueryFxTransitionTime_Parms QueryFxTransitionTime_Parms;

	pFnQueryFxTransitionTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryFxTransitionTime, &QueryFxTransitionTime_Parms, NULL );

	pFnQueryFxTransitionTime->FunctionFlags |= 0x400;

	return QueryFxTransitionTime_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.TotalPropertyEffectAmt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )

float UTgEffectGroup::TotalPropertyEffectAmt ( int nPropertyId )
{
	static UFunction* pFnTotalPropertyEffectAmt = NULL;

	if ( ! pFnTotalPropertyEffectAmt )
		pFnTotalPropertyEffectAmt = (UFunction*) UObject::GObjObjects()->Data[ 37834 ];

	UTgEffectGroup_execTotalPropertyEffectAmt_Parms TotalPropertyEffectAmt_Parms;
	TotalPropertyEffectAmt_Parms.nPropertyId = nPropertyId;

	pFnTotalPropertyEffectAmt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTotalPropertyEffectAmt, &TotalPropertyEffectAmt_Parms, NULL );

	pFnTotalPropertyEffectAmt->FunctionFlags |= 0x400;

	return TotalPropertyEffectAmt_Parms.ReturnValue;
};

// Function TgGame.TgEffectGroup.RemoveEffects
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bResetToFollow                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffectGroup::RemoveEffects ( class AActor* Target, unsigned long bResetToFollow )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 37831 ];

	UTgEffectGroup_execRemoveEffects_Parms RemoveEffects_Parms;
	RemoveEffects_Parms.Target = Target;
	RemoveEffects_Parms.bResetToFollow = bResetToFollow;

	pFnRemoveEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );

	pFnRemoveEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectGroup.CloneEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTgEffectGroup* UTgEffectGroup::CloneEffectGroup ( )
{
	static UFunction* pFnCloneEffectGroup = NULL;

	if ( ! pFnCloneEffectGroup )
		pFnCloneEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 37829 ];

	UTgEffectGroup_execCloneEffectGroup_Parms CloneEffectGroup_Parms;

	pFnCloneEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloneEffectGroup, &CloneEffectGroup_Parms, NULL );

	pFnCloneEffectGroup->FunctionFlags |= 0x400;

	return CloneEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.CheckDelayedStealthEffectForms
// [0x00020102] 
// Parameters infos:

void ATgEffectManager::CheckDelayedStealthEffectForms ( )
{
	static UFunction* pFnCheckDelayedStealthEffectForms = NULL;

	if ( ! pFnCheckDelayedStealthEffectForms )
		pFnCheckDelayedStealthEffectForms = (UFunction*) UObject::GObjObjects()->Data[ 38172 ];

	ATgEffectManager_execCheckDelayedStealthEffectForms_Parms CheckDelayedStealthEffectForms_Parms;

	this->ProcessEvent ( pFnCheckDelayedStealthEffectForms, &CheckDelayedStealthEffectForms_Parms, NULL );
};

// Function TgGame.TgEffectManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgEffectManager::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 38170 ];

	ATgEffectManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgEffectManager.LifeOver
// [0x00020002] 
// Parameters infos:
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )

void ATgEffectManager::LifeOver ( class UTgEffectGroup* EffectGroup )
{
	static UFunction* pFnLifeOver = NULL;

	if ( ! pFnLifeOver )
		pFnLifeOver = (UFunction*) UObject::GObjObjects()->Data[ 38168 ];

	ATgEffectManager_execLifeOver_Parms LifeOver_Parms;
	LifeOver_Parms.EffectGroup = EffectGroup;

	this->ProcessEvent ( pFnLifeOver, &LifeOver_Parms, NULL );
};

// Function TgGame.TgEffectManager.GetRefreshedEffectGroup
// [0x00420002] 
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )
// int                            nRefreshCode                   ( CPF_Parm | CPF_OutParm )

class UTgEffectGroup* ATgEffectManager::GetRefreshedEffectGroup ( class UTgEffectGroup* eg, int* nRefreshCode )
{
	static UFunction* pFnGetRefreshedEffectGroup = NULL;

	if ( ! pFnGetRefreshedEffectGroup )
		pFnGetRefreshedEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38162 ];

	ATgEffectManager_execGetRefreshedEffectGroup_Parms GetRefreshedEffectGroup_Parms;
	GetRefreshedEffectGroup_Parms.eg = eg;

	this->ProcessEvent ( pFnGetRefreshedEffectGroup, &GetRefreshedEffectGroup_Parms, NULL );

	if ( nRefreshCode )
		*nRefreshCode = GetRefreshedEffectGroup_Parms.nRefreshCode;

	return GetRefreshedEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.GetStackingEffectGroup
// [0x00020002] 
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )

class UTgEffectGroup* ATgEffectManager::GetStackingEffectGroup ( class UTgEffectGroup* eg )
{
	static UFunction* pFnGetStackingEffectGroup = NULL;

	if ( ! pFnGetStackingEffectGroup )
		pFnGetStackingEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38155 ];

	ATgEffectManager_execGetStackingEffectGroup_Parms GetStackingEffectGroup_Parms;
	GetStackingEffectGroup_Parms.eg = eg;

	this->ProcessEvent ( pFnGetStackingEffectGroup, &GetStackingEffectGroup_Parms, NULL );

	return GetStackingEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.GetClonedEffectGroup
// [0x00020002] 
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )

class UTgEffectGroup* ATgEffectManager::GetClonedEffectGroup ( class UTgEffectGroup* eg )
{
	static UFunction* pFnGetClonedEffectGroup = NULL;

	if ( ! pFnGetClonedEffectGroup )
		pFnGetClonedEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38151 ];

	ATgEffectManager_execGetClonedEffectGroup_Parms GetClonedEffectGroup_Parms;
	GetClonedEffectGroup_Parms.eg = eg;

	this->ProcessEvent ( pFnGetClonedEffectGroup, &GetClonedEffectGroup_Parms, NULL );

	return GetClonedEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.GetNewEffectGroupByApp
// [0x00420002] 
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )
// int                            nRefreshCode                   ( CPF_Parm | CPF_OutParm )

class UTgEffectGroup* ATgEffectManager::GetNewEffectGroupByApp ( class UTgEffectGroup* eg, int* nRefreshCode )
{
	static UFunction* pFnGetNewEffectGroupByApp = NULL;

	if ( ! pFnGetNewEffectGroupByApp )
		pFnGetNewEffectGroupByApp = (UFunction*) UObject::GObjObjects()->Data[ 38145 ];

	ATgEffectManager_execGetNewEffectGroupByApp_Parms GetNewEffectGroupByApp_Parms;
	GetNewEffectGroupByApp_Parms.eg = eg;

	this->ProcessEvent ( pFnGetNewEffectGroupByApp, &GetNewEffectGroupByApp_Parms, NULL );

	if ( nRefreshCode )
		*nRefreshCode = GetNewEffectGroupByApp_Parms.nRefreshCode;

	return GetNewEffectGroupByApp_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.DidEffectGroupHit
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )

bool ATgEffectManager::DidEffectGroupHit ( class UTgEffectGroup* eg, struct FImpactInfo Impact, class AActor* aInstigator )
{
	static UFunction* pFnDidEffectGroupHit = NULL;

	if ( ! pFnDidEffectGroupHit )
		pFnDidEffectGroupHit = (UFunction*) UObject::GObjObjects()->Data[ 38135 ];

	ATgEffectManager_execDidEffectGroupHit_Parms DidEffectGroupHit_Parms;
	DidEffectGroupHit_Parms.eg = eg;
	memcpy ( &DidEffectGroupHit_Parms.Impact, &Impact, 0x60 );
	DidEffectGroupHit_Parms.aInstigator = aInstigator;

	this->ProcessEvent ( pFnDidEffectGroupHit, &DidEffectGroupHit_Parms, NULL );

	return DidEffectGroupHit_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.ProcessEffect
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class UTgEffectGroup*          Buffers                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgEffectManager::eventProcessEffect ( class UTgEffectGroup* EffectGroup, unsigned long bRemove, class UTgEffectGroup* Buffers, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 38118 ];

	ATgEffectManager_eventProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.EffectGroup = EffectGroup;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.Buffers = Buffers;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgEffectManager.GetHealth
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgEffectManager::GetHealth ( )
{
	static UFunction* pFnGetHealth = NULL;

	if ( ! pFnGetHealth )
		pFnGetHealth = (UFunction*) UObject::GObjObjects()->Data[ 38116 ];

	ATgEffectManager_execGetHealth_Parms GetHealth_Parms;

	this->ProcessEvent ( pFnGetHealth, &GetHealth_Parms, NULL );

	return GetHealth_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgEffectManager::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38115 ];

	ATgEffectManager_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgEffectManager.ApplyHealth
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nHealth                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// int                            nAttackType                    ( CPF_OptionalParm | CPF_Parm )
// int                            nDamageType                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// int                            nEffectGroupCategory           ( CPF_OptionalParm | CPF_Parm )

void ATgEffectManager::ApplyHealth ( int nHealth, class AActor* aInstigator, int nAttackType, int nDamageType, struct FImpactInfo Impact, int nEffectGroupCategory )
{
	static UFunction* pFnApplyHealth = NULL;

	if ( ! pFnApplyHealth )
		pFnApplyHealth = (UFunction*) UObject::GObjObjects()->Data[ 38108 ];

	ATgEffectManager_execApplyHealth_Parms ApplyHealth_Parms;
	ApplyHealth_Parms.nHealth = nHealth;
	ApplyHealth_Parms.aInstigator = aInstigator;
	ApplyHealth_Parms.nAttackType = nAttackType;
	ApplyHealth_Parms.nDamageType = nDamageType;
	memcpy ( &ApplyHealth_Parms.Impact, &Impact, 0x60 );
	ApplyHealth_Parms.nEffectGroupCategory = nEffectGroupCategory;

	pFnApplyHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyHealth, &ApplyHealth_Parms, NULL );

	pFnApplyHealth->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ApplyDamage
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDamage                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// int                            nAttackType                    ( CPF_OptionalParm | CPF_Parm )
// int                            nDamageType                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// int                            nEffectGroupCategory           ( CPF_OptionalParm | CPF_Parm )

void ATgEffectManager::ApplyDamage ( int nDamage, class AActor* aInstigator, int nAttackType, int nDamageType, struct FImpactInfo Impact, int nEffectGroupCategory )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 38101 ];

	ATgEffectManager_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.nDamage = nDamage;
	ApplyDamage_Parms.aInstigator = aInstigator;
	ApplyDamage_Parms.nAttackType = nAttackType;
	ApplyDamage_Parms.nDamageType = nDamageType;
	memcpy ( &ApplyDamage_Parms.Impact, &Impact, 0x60 );
	ApplyDamage_Parms.nEffectGroupCategory = nEffectGroupCategory;

	pFnApplyDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	pFnApplyDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.RecalculateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::RecalculateFx ( )
{
	static UFunction* pFnRecalculateFx = NULL;

	if ( ! pFnRecalculateFx )
		pFnRecalculateFx = (UFunction*) UObject::GObjObjects()->Data[ 38100 ];

	ATgEffectManager_execRecalculateFx_Parms RecalculateFx_Parms;

	pFnRecalculateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateFx, &RecalculateFx_Parms, NULL );

	pFnRecalculateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.GetCombatMsgIdFromEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )

int ATgEffectManager::GetCombatMsgIdFromEffectGroup ( class UTgEffectGroup* EffectGroup )
{
	static UFunction* pFnGetCombatMsgIdFromEffectGroup = NULL;

	if ( ! pFnGetCombatMsgIdFromEffectGroup )
		pFnGetCombatMsgIdFromEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38097 ];

	ATgEffectManager_execGetCombatMsgIdFromEffectGroup_Parms GetCombatMsgIdFromEffectGroup_Parms;
	GetCombatMsgIdFromEffectGroup_Parms.EffectGroup = EffectGroup;

	pFnGetCombatMsgIdFromEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCombatMsgIdFromEffectGroup, &GetCombatMsgIdFromEffectGroup_Parms, NULL );

	pFnGetCombatMsgIdFromEffectGroup->FunctionFlags |= 0x400;

	return GetCombatMsgIdFromEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.IsInvulnerable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgEffectManager::IsInvulnerable ( )
{
	static UFunction* pFnIsInvulnerable = NULL;

	if ( ! pFnIsInvulnerable )
		pFnIsInvulnerable = (UFunction*) UObject::GObjObjects()->Data[ 38095 ];

	ATgEffectManager_execIsInvulnerable_Parms IsInvulnerable_Parms;

	pFnIsInvulnerable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvulnerable, &IsInvulnerable_Parms, NULL );

	pFnIsInvulnerable->FunctionFlags |= 0x400;

	return IsInvulnerable_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.SubmitMitigationDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nProtectionType                ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgEffectManager::SubmitMitigationDamage ( int nProtectionType, int nDamage )
{
	static UFunction* pFnSubmitMitigationDamage = NULL;

	if ( ! pFnSubmitMitigationDamage )
		pFnSubmitMitigationDamage = (UFunction*) UObject::GObjObjects()->Data[ 38092 ];

	ATgEffectManager_execSubmitMitigationDamage_Parms SubmitMitigationDamage_Parms;
	SubmitMitigationDamage_Parms.nProtectionType = nProtectionType;
	SubmitMitigationDamage_Parms.nDamage = nDamage;

	pFnSubmitMitigationDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitMitigationDamage, &SubmitMitigationDamage_Parms, NULL );

	pFnSubmitMitigationDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ClearAllClientEffectForms
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::ClearAllClientEffectForms ( )
{
	static UFunction* pFnClearAllClientEffectForms = NULL;

	if ( ! pFnClearAllClientEffectForms )
		pFnClearAllClientEffectForms = (UFunction*) UObject::GObjObjects()->Data[ 38091 ];

	ATgEffectManager_execClearAllClientEffectForms_Parms ClearAllClientEffectForms_Parms;

	pFnClearAllClientEffectForms->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllClientEffectForms, &ClearAllClientEffectForms_Parms, NULL );

	pFnClearAllClientEffectForms->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ConfigureEffectFormsForFirstPerson
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFirstPerson                 ( CPF_Parm )

void ATgEffectManager::ConfigureEffectFormsForFirstPerson ( unsigned long bIsFirstPerson )
{
	static UFunction* pFnConfigureEffectFormsForFirstPerson = NULL;

	if ( ! pFnConfigureEffectFormsForFirstPerson )
		pFnConfigureEffectFormsForFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 38089 ];

	ATgEffectManager_execConfigureEffectFormsForFirstPerson_Parms ConfigureEffectFormsForFirstPerson_Parms;
	ConfigureEffectFormsForFirstPerson_Parms.bIsFirstPerson = bIsFirstPerson;

	pFnConfigureEffectFormsForFirstPerson->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConfigureEffectFormsForFirstPerson, &ConfigureEffectFormsForFirstPerson_Parms, NULL );

	pFnConfigureEffectFormsForFirstPerson->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ConfigureEffectFormsForStealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsStealthed                   ( CPF_Parm )

void ATgEffectManager::ConfigureEffectFormsForStealth ( unsigned long bIsStealthed )
{
	static UFunction* pFnConfigureEffectFormsForStealth = NULL;

	if ( ! pFnConfigureEffectFormsForStealth )
		pFnConfigureEffectFormsForStealth = (UFunction*) UObject::GObjObjects()->Data[ 38087 ];

	ATgEffectManager_execConfigureEffectFormsForStealth_Parms ConfigureEffectFormsForStealth_Parms;
	ConfigureEffectFormsForStealth_Parms.bIsStealthed = bIsStealthed;

	pFnConfigureEffectFormsForStealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConfigureEffectFormsForStealth, &ConfigureEffectFormsForStealth_Parms, NULL );

	pFnConfigureEffectFormsForStealth->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ProcessReactiveSkillBasedEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )

void ATgEffectManager::ProcessReactiveSkillBasedEffectGroup ( int nCategory, unsigned long bRemove )
{
	static UFunction* pFnProcessReactiveSkillBasedEffectGroup = NULL;

	if ( ! pFnProcessReactiveSkillBasedEffectGroup )
		pFnProcessReactiveSkillBasedEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38084 ];

	ATgEffectManager_execProcessReactiveSkillBasedEffectGroup_Parms ProcessReactiveSkillBasedEffectGroup_Parms;
	ProcessReactiveSkillBasedEffectGroup_Parms.nCategory = nCategory;
	ProcessReactiveSkillBasedEffectGroup_Parms.bRemove = bRemove;

	pFnProcessReactiveSkillBasedEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessReactiveSkillBasedEffectGroup, &ProcessReactiveSkillBasedEffectGroup_Parms, NULL );

	pFnProcessReactiveSkillBasedEffectGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.GetSkillBasedEffectGroup
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nType                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm | CPF_OutParm )

class UTgEffectGroup* ATgEffectManager::GetSkillBasedEffectGroup ( int nType, int* nIndex )
{
	static UFunction* pFnGetSkillBasedEffectGroup = NULL;

	if ( ! pFnGetSkillBasedEffectGroup )
		pFnGetSkillBasedEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38080 ];

	ATgEffectManager_execGetSkillBasedEffectGroup_Parms GetSkillBasedEffectGroup_Parms;
	GetSkillBasedEffectGroup_Parms.nType = nType;

	pFnGetSkillBasedEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkillBasedEffectGroup, &GetSkillBasedEffectGroup_Parms, NULL );

	pFnGetSkillBasedEffectGroup->FunctionFlags |= 0x400;

	if ( nIndex )
		*nIndex = GetSkillBasedEffectGroup_Parms.nIndex;

	return GetSkillBasedEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.ClearSkillBasedEffectGroups
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::ClearSkillBasedEffectGroups ( )
{
	static UFunction* pFnClearSkillBasedEffectGroups = NULL;

	if ( ! pFnClearSkillBasedEffectGroups )
		pFnClearSkillBasedEffectGroups = (UFunction*) UObject::GObjObjects()->Data[ 38079 ];

	ATgEffectManager_execClearSkillBasedEffectGroups_Parms ClearSkillBasedEffectGroups_Parms;

	pFnClearSkillBasedEffectGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSkillBasedEffectGroups, &ClearSkillBasedEffectGroups_Parms, NULL );

	pFnClearSkillBasedEffectGroups->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.AddSkillBasedEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          pEffectGroup                   ( CPF_Parm )

void ATgEffectManager::AddSkillBasedEffectGroup ( class UTgEffectGroup* pEffectGroup )
{
	static UFunction* pFnAddSkillBasedEffectGroup = NULL;

	if ( ! pFnAddSkillBasedEffectGroup )
		pFnAddSkillBasedEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38077 ];

	ATgEffectManager_execAddSkillBasedEffectGroup_Parms AddSkillBasedEffectGroup_Parms;
	AddSkillBasedEffectGroup_Parms.pEffectGroup = pEffectGroup;

	pFnAddSkillBasedEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSkillBasedEffectGroup, &AddSkillBasedEffectGroup_Parms, NULL );

	pFnAddSkillBasedEffectGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.GetEffectGroupByCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nCategoryCode                  ( CPF_Parm )

class UTgEffectGroup* ATgEffectManager::GetEffectGroupByCategory ( int nCategoryCode )
{
	static UFunction* pFnGetEffectGroupByCategory = NULL;

	if ( ! pFnGetEffectGroupByCategory )
		pFnGetEffectGroupByCategory = (UFunction*) UObject::GObjObjects()->Data[ 38074 ];

	ATgEffectManager_execGetEffectGroupByCategory_Parms GetEffectGroupByCategory_Parms;
	GetEffectGroupByCategory_Parms.nCategoryCode = nCategoryCode;

	pFnGetEffectGroupByCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectGroupByCategory, &GetEffectGroupByCategory_Parms, NULL );

	pFnGetEffectGroupByCategory->FunctionFlags |= 0x400;

	return GetEffectGroupByCategory_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.GetEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nEffectGroupID                 ( CPF_Parm )

class UTgEffectGroup* ATgEffectManager::GetEffectGroup ( int nEffectGroupID )
{
	static UFunction* pFnGetEffectGroup = NULL;

	if ( ! pFnGetEffectGroup )
		pFnGetEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38071 ];

	ATgEffectManager_execGetEffectGroup_Parms GetEffectGroup_Parms;
	GetEffectGroup_Parms.nEffectGroupID = nEffectGroupID;

	pFnGetEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectGroup, &GetEffectGroup_Parms, NULL );

	pFnGetEffectGroup->FunctionFlags |= 0x400;

	return GetEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.RemoveAllEffects
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// TArray< int >                  ExludeCategoryCodes            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgEffectManager::RemoveAllEffects ( TArray< int > ExludeCategoryCodes )
{
	static UFunction* pFnRemoveAllEffects = NULL;

	if ( ! pFnRemoveAllEffects )
		pFnRemoveAllEffects = (UFunction*) UObject::GObjObjects()->Data[ 38068 ];

	ATgEffectManager_execRemoveAllEffects_Parms RemoveAllEffects_Parms;
	memcpy ( &RemoveAllEffects_Parms.ExludeCategoryCodes, &ExludeCategoryCodes, 0xC );

	pFnRemoveAllEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllEffects, &RemoveAllEffects_Parms, NULL );

	pFnRemoveAllEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.IsStrongest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )
// unsigned long                  bConsiderLifetime              ( CPF_Parm )

bool ATgEffectManager::IsStrongest ( class UTgEffectGroup* eg, unsigned long bConsiderLifetime )
{
	static UFunction* pFnIsStrongest = NULL;

	if ( ! pFnIsStrongest )
		pFnIsStrongest = (UFunction*) UObject::GObjObjects()->Data[ 38064 ];

	ATgEffectManager_execIsStrongest_Parms IsStrongest_Parms;
	IsStrongest_Parms.eg = eg;
	IsStrongest_Parms.bConsiderLifetime = bConsiderLifetime;

	pFnIsStrongest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStrongest, &IsStrongest_Parms, NULL );

	pFnIsStrongest->FunctionFlags |= 0x400;

	return IsStrongest_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.RemoveAllEffectGroups
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          eg                             ( CPF_Parm )

bool ATgEffectManager::RemoveAllEffectGroups ( class UTgEffectGroup* eg )
{
	static UFunction* pFnRemoveAllEffectGroups = NULL;

	if ( ! pFnRemoveAllEffectGroups )
		pFnRemoveAllEffectGroups = (UFunction*) UObject::GObjObjects()->Data[ 38061 ];

	ATgEffectManager_execRemoveAllEffectGroups_Parms RemoveAllEffectGroups_Parms;
	RemoveAllEffectGroups_Parms.eg = eg;

	pFnRemoveAllEffectGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllEffectGroups, &RemoveAllEffectGroups_Parms, NULL );

	pFnRemoveAllEffectGroups->FunctionFlags |= 0x400;

	return RemoveAllEffectGroups_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.RemoveEffectGroupsByCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nCategoryCode                  ( CPF_Parm )
// int                            nQuantity                      ( CPF_Parm )

bool ATgEffectManager::RemoveEffectGroupsByCategory ( int nCategoryCode, int nQuantity )
{
	static UFunction* pFnRemoveEffectGroupsByCategory = NULL;

	if ( ! pFnRemoveEffectGroupsByCategory )
		pFnRemoveEffectGroupsByCategory = (UFunction*) UObject::GObjObjects()->Data[ 38057 ];

	ATgEffectManager_execRemoveEffectGroupsByCategory_Parms RemoveEffectGroupsByCategory_Parms;
	RemoveEffectGroupsByCategory_Parms.nCategoryCode = nCategoryCode;
	RemoveEffectGroupsByCategory_Parms.nQuantity = nQuantity;

	pFnRemoveEffectGroupsByCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEffectGroupsByCategory, &RemoveEffectGroupsByCategory_Parms, NULL );

	pFnRemoveEffectGroupsByCategory->FunctionFlags |= 0x400;

	return RemoveEffectGroupsByCategory_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.RemoveEffectGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgEffectGroup*          EffectGroup                    ( CPF_Parm )

bool ATgEffectManager::RemoveEffectGroup ( class UTgEffectGroup* EffectGroup )
{
	static UFunction* pFnRemoveEffectGroup = NULL;

	if ( ! pFnRemoveEffectGroup )
		pFnRemoveEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 38054 ];

	ATgEffectManager_execRemoveEffectGroup_Parms RemoveEffectGroup_Parms;
	RemoveEffectGroup_Parms.EffectGroup = EffectGroup;

	pFnRemoveEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEffectGroup, &RemoveEffectGroup_Parms, NULL );

	pFnRemoveEffectGroup->FunctionFlags |= 0x400;

	return RemoveEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgEffectManager.UpdateManagedEffectForms
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::UpdateManagedEffectForms ( )
{
	static UFunction* pFnUpdateManagedEffectForms = NULL;

	if ( ! pFnUpdateManagedEffectForms )
		pFnUpdateManagedEffectForms = (UFunction*) UObject::GObjObjects()->Data[ 38053 ];

	ATgEffectManager_execUpdateManagedEffectForms_Parms UpdateManagedEffectForms_Parms;

	pFnUpdateManagedEffectForms->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateManagedEffectForms, &UpdateManagedEffectForms_Parms, NULL );

	pFnUpdateManagedEffectForms->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.UpdateQueueEffectForms
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::UpdateQueueEffectForms ( )
{
	static UFunction* pFnUpdateQueueEffectForms = NULL;

	if ( ! pFnUpdateQueueEffectForms )
		pFnUpdateQueueEffectForms = (UFunction*) UObject::GObjObjects()->Data[ 38052 ];

	ATgEffectManager_execUpdateQueueEffectForms_Parms UpdateQueueEffectForms_Parms;

	pFnUpdateQueueEffectForms->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateQueueEffectForms, &UpdateQueueEffectForms_Parms, NULL );

	pFnUpdateQueueEffectForms->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.UpdateEffectForms
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgEffectManager::UpdateEffectForms ( )
{
	static UFunction* pFnUpdateEffectForms = NULL;

	if ( ! pFnUpdateEffectForms )
		pFnUpdateEffectForms = (UFunction*) UObject::GObjObjects()->Data[ 38051 ];

	ATgEffectManager_execUpdateEffectForms_Parms UpdateEffectForms_Parms;

	pFnUpdateEffectForms->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateEffectForms, &UpdateEffectForms_Parms, NULL );

	pFnUpdateEffectForms->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.ClearEffectRep
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nEffectId                      ( CPF_Parm )
// int                            nManagedListIndex              ( CPF_OptionalParm | CPF_Parm )

void ATgEffectManager::ClearEffectRep ( int nEffectId, int nManagedListIndex )
{
	static UFunction* pFnClearEffectRep = NULL;

	if ( ! pFnClearEffectRep )
		pFnClearEffectRep = (UFunction*) UObject::GObjObjects()->Data[ 38048 ];

	ATgEffectManager_execClearEffectRep_Parms ClearEffectRep_Parms;
	ClearEffectRep_Parms.nEffectId = nEffectId;
	ClearEffectRep_Parms.nManagedListIndex = nManagedListIndex;

	pFnClearEffectRep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearEffectRep, &ClearEffectRep_Parms, NULL );

	pFnClearEffectRep->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.RefreshEffectRep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nEffectGroupIndex              ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )

void ATgEffectManager::RefreshEffectRep ( int nEffectGroupIndex, float fTime )
{
	static UFunction* pFnRefreshEffectRep = NULL;

	if ( ! pFnRefreshEffectRep )
		pFnRefreshEffectRep = (UFunction*) UObject::GObjObjects()->Data[ 38045 ];

	ATgEffectManager_execRefreshEffectRep_Parms RefreshEffectRep_Parms;
	RefreshEffectRep_Parms.nEffectGroupIndex = nEffectGroupIndex;
	RefreshEffectRep_Parms.fTime = fTime;

	pFnRefreshEffectRep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshEffectRep, &RefreshEffectRep_Parms, NULL );

	pFnRefreshEffectRep->FunctionFlags |= 0x400;
};

// Function TgGame.TgEffectManager.SetEffectRep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nEffectGroupID                 ( CPF_Parm )
// float                          nTime                          ( CPF_Parm )
// unsigned long                  bIsBuff                        ( CPF_Parm )
// int                            nHealthChange                  ( CPF_Parm )

int ATgEffectManager::SetEffectRep ( int nEffectGroupID, float nTime, unsigned long bIsBuff, int nHealthChange )
{
	static UFunction* pFnSetEffectRep = NULL;

	if ( ! pFnSetEffectRep )
		pFnSetEffectRep = (UFunction*) UObject::GObjObjects()->Data[ 38039 ];

	ATgEffectManager_execSetEffectRep_Parms SetEffectRep_Parms;
	SetEffectRep_Parms.nEffectGroupID = nEffectGroupID;
	SetEffectRep_Parms.nTime = nTime;
	SetEffectRep_Parms.bIsBuff = bIsBuff;
	SetEffectRep_Parms.nHealthChange = nHealthChange;

	pFnSetEffectRep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectRep, &SetEffectRep_Parms, NULL );

	pFnSetEffectRep->FunctionFlags |= 0x400;

	return SetEffectRep_Parms.ReturnValue;
};

// Function TgGame.TgActorFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgActorFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31116 ];

	ATgActorFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgActorFactory.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgActorFactory::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31113 ];

	ATgActorFactory_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgActorFactory.CalcFactoryPlacement
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned long                  bCenterOnGround                ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void ATgActorFactory::CalcFactoryPlacement ( struct FVector Extent, unsigned long bCenterOnGround, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnCalcFactoryPlacement = NULL;

	if ( ! pFnCalcFactoryPlacement )
		pFnCalcFactoryPlacement = (UFunction*) UObject::GObjObjects()->Data[ 31108 ];

	ATgActorFactory_execCalcFactoryPlacement_Parms CalcFactoryPlacement_Parms;
	memcpy ( &CalcFactoryPlacement_Parms.Extent, &Extent, 0xC );
	CalcFactoryPlacement_Parms.bCenterOnGround = bCenterOnGround;

	pFnCalcFactoryPlacement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcFactoryPlacement, &CalcFactoryPlacement_Parms, NULL );

	pFnCalcFactoryPlacement->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &CalcFactoryPlacement_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &CalcFactoryPlacement_Parms.OutRotation, 0xC );
};

// Function TgGame.TgActorFactory.SpawnDemoMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSelectedObjectId              ( CPF_Parm )

void ATgActorFactory::SpawnDemoMesh ( int nSelectedObjectId )
{
	static UFunction* pFnSpawnDemoMesh = NULL;

	if ( ! pFnSpawnDemoMesh )
		pFnSpawnDemoMesh = (UFunction*) UObject::GObjObjects()->Data[ 31106 ];

	ATgActorFactory_execSpawnDemoMesh_Parms SpawnDemoMesh_Parms;
	SpawnDemoMesh_Parms.nSelectedObjectId = nSelectedObjectId;

	pFnSpawnDemoMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDemoMesh, &SpawnDemoMesh_Parms, NULL );

	pFnSpawnDemoMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgActorFactory.SpawnObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgActorFactory::SpawnObject ( )
{
	static UFunction* pFnSpawnObject = NULL;

	if ( ! pFnSpawnObject )
		pFnSpawnObject = (UFunction*) UObject::GObjObjects()->Data[ 31105 ];

	ATgActorFactory_execSpawnObject_Parms SpawnObject_Parms;

	pFnSpawnObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObject, &SpawnObject_Parms, NULL );

	pFnSpawnObject->FunctionFlags |= 0x400;
};

// Function TgGame.TgActorFactory.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgActorFactory::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 31104 ];

	ATgActorFactory_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgBeaconFactory.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgBeaconFactory::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 34566 ];

	ATgBeaconFactory_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgBeaconFactory.OnKillBots
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_KillBots*      inAction                       ( CPF_Parm )

void ATgBeaconFactory::OnKillBots ( class UTgSeqAct_KillBots* inAction )
{
	static UFunction* pFnOnKillBots = NULL;

	if ( ! pFnOnKillBots )
		pFnOnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 34560 ];

	ATgBeaconFactory_execOnKillBots_Parms OnKillBots_Parms;
	OnKillBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnKillBots, &OnKillBots_Parms, NULL );
};

// Function TgGame.TgBeaconFactory.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgBeaconFactory::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 34558 ];

	ATgBeaconFactory_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgBeaconFactory.SpawnObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBeaconFactory::SpawnObject ( )
{
	static UFunction* pFnSpawnObject = NULL;

	if ( ! pFnSpawnObject )
		pFnSpawnObject = (UFunction*) UObject::GObjObjects()->Data[ 34557 ];

	ATgBeaconFactory_execSpawnObject_Parms SpawnObject_Parms;

	pFnSpawnObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObject, &SpawnObject_Parms, NULL );

	pFnSpawnObject->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.OnGetBot
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_GetBot*        inAction                       ( CPF_Parm )

void ATgBotFactory::OnGetBot ( class UTgSeqAct_GetBot* inAction )
{
	static UFunction* pFnOnGetBot = NULL;

	if ( ! pFnOnGetBot )
		pFnOnGetBot = (UFunction*) UObject::GObjObjects()->Data[ 34691 ];

	ATgBotFactory_execOnGetBot_Parms OnGetBot_Parms;
	OnGetBot_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGetBot, &OnGetBot_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnHackBot
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_HackBot*       inAction                       ( CPF_Parm )

void ATgBotFactory::OnHackBot ( class UTgSeqAct_HackBot* inAction )
{
	static UFunction* pFnOnHackBot = NULL;

	if ( ! pFnOnHackBot )
		pFnOnHackBot = (UFunction*) UObject::GObjObjects()->Data[ 34685 ];

	ATgBotFactory_execOnHackBot_Parms OnHackBot_Parms;
	OnHackBot_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnHackBot, &OnHackBot_Parms, NULL );
};

// Function TgGame.TgBotFactory.SetTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 Target                         ( CPF_Parm )
// unsigned long                  bAlarmBot                      ( CPF_Parm )

void ATgBotFactory::eventSetTarget ( class ATgPawn* Target, unsigned long bAlarmBot )
{
	static UFunction* pFnSetTarget = NULL;

	if ( ! pFnSetTarget )
		pFnSetTarget = (UFunction*) UObject::GObjObjects()->Data[ 34681 ];

	ATgBotFactory_eventSetTarget_Parms SetTarget_Parms;
	SetTarget_Parms.Target = Target;
	SetTarget_Parms.bAlarmBot = bAlarmBot;

	this->ProcessEvent ( pFnSetTarget, &SetTarget_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgBotFactory::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 34678 ];

	ATgBotFactory_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnTriggerBots
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_TriggerBots*   Action                         ( CPF_Parm )

void ATgBotFactory::OnTriggerBots ( class UTgSeqAct_TriggerBots* Action )
{
	static UFunction* pFnOnTriggerBots = NULL;

	if ( ! pFnOnTriggerBots )
		pFnOnTriggerBots = (UFunction*) UObject::GObjObjects()->Data[ 34675 ];

	ATgBotFactory_execOnTriggerBots_Parms OnTriggerBots_Parms;
	OnTriggerBots_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTriggerBots, &OnTriggerBots_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnJoinTeam
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_JoinTeam*      Action                         ( CPF_Parm )

void ATgBotFactory::OnJoinTeam ( class UTgSeqAct_JoinTeam* Action )
{
	static UFunction* pFnOnJoinTeam = NULL;

	if ( ! pFnOnJoinTeam )
		pFnOnJoinTeam = (UFunction*) UObject::GObjObjects()->Data[ 34671 ];

	ATgBotFactory_execOnJoinTeam_Parms OnJoinTeam_Parms;
	OnJoinTeam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnJoinTeam, &OnJoinTeam_Parms, NULL );
};

// Function TgGame.TgBotFactory.KillBots
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDespawn                       ( CPF_Parm )

void ATgBotFactory::eventKillBots ( unsigned long bDespawn )
{
	static UFunction* pFnKillBots = NULL;

	if ( ! pFnKillBots )
		pFnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 34667 ];

	ATgBotFactory_eventKillBots_Parms KillBots_Parms;
	KillBots_Parms.bDespawn = bDespawn;

	this->ProcessEvent ( pFnKillBots, &KillBots_Parms, NULL );
};

// Function TgGame.TgBotFactory.Despawn
// [0x00020002] 
// Parameters infos:

void ATgBotFactory::Despawn ( )
{
	static UFunction* pFnDespawn = NULL;

	if ( ! pFnDespawn )
		pFnDespawn = (UFunction*) UObject::GObjObjects()->Data[ 34666 ];

	ATgBotFactory_execDespawn_Parms Despawn_Parms;

	this->ProcessEvent ( pFnDespawn, &Despawn_Parms, NULL );
};

// Function TgGame.TgBotFactory.StartEncounter
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgBotEncounterVolume*   Volume                         ( CPF_Parm )

void ATgBotFactory::eventStartEncounter ( class ATgBotEncounterVolume* Volume )
{
	static UFunction* pFnStartEncounter = NULL;

	if ( ! pFnStartEncounter )
		pFnStartEncounter = (UFunction*) UObject::GObjObjects()->Data[ 34664 ];

	ATgBotFactory_eventStartEncounter_Parms StartEncounter_Parms;
	StartEncounter_Parms.Volume = Volume;

	this->ProcessEvent ( pFnStartEncounter, &StartEncounter_Parms, NULL );
};

// Function TgGame.TgBotFactory.ContinueEncounter
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgBotFactory::eventContinueEncounter ( )
{
	static UFunction* pFnContinueEncounter = NULL;

	if ( ! pFnContinueEncounter )
		pFnContinueEncounter = (UFunction*) UObject::GObjObjects()->Data[ 34663 ];

	ATgBotFactory_eventContinueEncounter_Parms ContinueEncounter_Parms;

	this->ProcessEvent ( pFnContinueEncounter, &ContinueEncounter_Parms, NULL );
};

// Function TgGame.TgBotFactory.EndEncounter
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgBotFactory::eventEndEncounter ( )
{
	static UFunction* pFnEndEncounter = NULL;

	if ( ! pFnEndEncounter )
		pFnEndEncounter = (UFunction*) UObject::GObjObjects()->Data[ 34662 ];

	ATgBotFactory_eventEndEncounter_Parms EndEncounter_Parms;

	this->ProcessEvent ( pFnEndEncounter, &EndEncounter_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnDespawnBots
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_DespawnBots*   inAction                       ( CPF_Parm )

void ATgBotFactory::OnDespawnBots ( class UTgSeqAct_DespawnBots* inAction )
{
	static UFunction* pFnOnDespawnBots = NULL;

	if ( ! pFnOnDespawnBots )
		pFnOnDespawnBots = (UFunction*) UObject::GObjObjects()->Data[ 34660 ];

	ATgBotFactory_execOnDespawnBots_Parms OnDespawnBots_Parms;
	OnDespawnBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnDespawnBots, &OnDespawnBots_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnKillBots
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_KillBots*      inAction                       ( CPF_Parm )

void ATgBotFactory::OnKillBots ( class UTgSeqAct_KillBots* inAction )
{
	static UFunction* pFnOnKillBots = NULL;

	if ( ! pFnOnKillBots )
		pFnOnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 34658 ];

	ATgBotFactory_execOnKillBots_Parms OnKillBots_Parms;
	OnKillBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnKillBots, &OnKillBots_Parms, NULL );
};

// Function TgGame.TgBotFactory.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgBotFactory::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 34656 ];

	ATgBotFactory_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgBotFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgBotFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34654 ];

	ATgBotFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgBotFactory.GetRemainingTotalSpawns
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgBotFactory::GetRemainingTotalSpawns ( )
{
	static UFunction* pFnGetRemainingTotalSpawns = NULL;

	if ( ! pFnGetRemainingTotalSpawns )
		pFnGetRemainingTotalSpawns = (UFunction*) UObject::GObjObjects()->Data[ 34652 ];

	ATgBotFactory_execGetRemainingTotalSpawns_Parms GetRemainingTotalSpawns_Parms;

	pFnGetRemainingTotalSpawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRemainingTotalSpawns, &GetRemainingTotalSpawns_Parms, NULL );

	pFnGetRemainingTotalSpawns->FunctionFlags |= 0x400;

	return GetRemainingTotalSpawns_Parms.ReturnValue;
};

// Function TgGame.TgBotFactory.BotDied
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pawn                           ( CPF_Parm )
// class ATgAIController*         aic                            ( CPF_Parm )

void ATgBotFactory::BotDied ( class ATgPawn* Pawn, class ATgAIController* aic )
{
	static UFunction* pFnBotDied = NULL;

	if ( ! pFnBotDied )
		pFnBotDied = (UFunction*) UObject::GObjObjects()->Data[ 34649 ];

	ATgBotFactory_execBotDied_Parms BotDied_Parms;
	BotDied_Parms.Pawn = Pawn;
	BotDied_Parms.aic = aic;

	pFnBotDied->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBotDied, &BotDied_Parms, NULL );

	pFnBotDied->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.UseSpawnTable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBotFactory::UseSpawnTable ( )
{
	static UFunction* pFnUseSpawnTable = NULL;

	if ( ! pFnUseSpawnTable )
		pFnUseSpawnTable = (UFunction*) UObject::GObjObjects()->Data[ 34648 ];

	ATgBotFactory_execUseSpawnTable_Parms UseSpawnTable_Parms;

	pFnUseSpawnTable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUseSpawnTable, &UseSpawnTable_Parms, NULL );

	pFnUseSpawnTable->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.JoinTeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 pLeader                        ( CPF_Parm )

void ATgBotFactory::JoinTeam ( class ATgPawn* pLeader )
{
	static UFunction* pFnJoinTeam = NULL;

	if ( ! pFnJoinTeam )
		pFnJoinTeam = (UFunction*) UObject::GObjObjects()->Data[ 34646 ];

	ATgBotFactory_execJoinTeam_Parms JoinTeam_Parms;
	JoinTeam_Parms.pLeader = pLeader;

	pFnJoinTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnJoinTeam, &JoinTeam_Parms, NULL );

	pFnJoinTeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnDemoMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSelectedObjectId              ( CPF_Parm )

void ATgBotFactory::SpawnDemoMesh ( int nSelectedObjectId )
{
	static UFunction* pFnSpawnDemoMesh = NULL;

	if ( ! pFnSpawnDemoMesh )
		pFnSpawnDemoMesh = (UFunction*) UObject::GObjObjects()->Data[ 34644 ];

	ATgBotFactory_execSpawnDemoMesh_Parms SpawnDemoMesh_Parms;
	SpawnDemoMesh_Parms.nSelectedObjectId = nSelectedObjectId;

	pFnSpawnDemoMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDemoMesh, &SpawnDemoMesh_Parms, NULL );

	pFnSpawnDemoMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnBotAdjusted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nBotId                         ( CPF_Parm )
// float                          fAdjustment                    ( CPF_Parm )

void ATgBotFactory::SpawnBotAdjusted ( int nBotId, float fAdjustment )
{
	static UFunction* pFnSpawnBotAdjusted = NULL;

	if ( ! pFnSpawnBotAdjusted )
		pFnSpawnBotAdjusted = (UFunction*) UObject::GObjObjects()->Data[ 34641 ];

	ATgBotFactory_execSpawnBotAdjusted_Parms SpawnBotAdjusted_Parms;
	SpawnBotAdjusted_Parms.nBotId = nBotId;
	SpawnBotAdjusted_Parms.fAdjustment = fAdjustment;

	pFnSpawnBotAdjusted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBotAdjusted, &SpawnBotAdjusted_Parms, NULL );

	pFnSpawnBotAdjusted->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnBotId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nBotId                         ( CPF_Parm )

void ATgBotFactory::SpawnBotId ( int nBotId )
{
	static UFunction* pFnSpawnBotId = NULL;

	if ( ! pFnSpawnBotId )
		pFnSpawnBotId = (UFunction*) UObject::GObjObjects()->Data[ 34639 ];

	ATgBotFactory_execSpawnBotId_Parms SpawnBotId_Parms;
	SpawnBotId_Parms.nBotId = nBotId;

	pFnSpawnBotId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBotId, &SpawnBotId_Parms, NULL );

	pFnSpawnBotId->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnWave
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Num                            ( CPF_Parm )

void ATgBotFactory::SpawnWave ( int Num )
{
	static UFunction* pFnSpawnWave = NULL;

	if ( ! pFnSpawnWave )
		pFnSpawnWave = (UFunction*) UObject::GObjObjects()->Data[ 34637 ];

	ATgBotFactory_execSpawnWave_Parms SpawnWave_Parms;
	SpawnWave_Parms.Num = Num;

	pFnSpawnWave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnWave, &SpawnWave_Parms, NULL );

	pFnSpawnWave->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnNextBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBotFactory::SpawnNextBot ( )
{
	static UFunction* pFnSpawnNextBot = NULL;

	if ( ! pFnSpawnNextBot )
		pFnSpawnNextBot = (UFunction*) UObject::GObjObjects()->Data[ 34636 ];

	ATgBotFactory_execSpawnNextBot_Parms SpawnNextBot_Parms;

	pFnSpawnNextBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnNextBot, &SpawnNextBot_Parms, NULL );

	pFnSpawnNextBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.SpawnBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBotFactory::SpawnBot ( )
{
	static UFunction* pFnSpawnBot = NULL;

	if ( ! pFnSpawnBot )
		pFnSpawnBot = (UFunction*) UObject::GObjObjects()->Data[ 34635 ];

	ATgBotFactory_execSpawnBot_Parms SpawnBot_Parms;

	pFnSpawnBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBot, &SpawnBot_Parms, NULL );

	pFnSpawnBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.ClearQueue
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBotFactory::ClearQueue ( )
{
	static UFunction* pFnClearQueue = NULL;

	if ( ! pFnClearQueue )
		pFnClearQueue = (UFunction*) UObject::GObjObjects()->Data[ 34634 ];

	ATgBotFactory_execClearQueue_Parms ClearQueue_Parms;

	pFnClearQueue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearQueue, &ClearQueue_Parms, NULL );

	pFnClearQueue->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.ResetQueue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nOverrideSpawnTableId          ( CPF_OptionalParm | CPF_Parm )

void ATgBotFactory::ResetQueue ( int nOverrideSpawnTableId )
{
	static UFunction* pFnResetQueue = NULL;

	if ( ! pFnResetQueue )
		pFnResetQueue = (UFunction*) UObject::GObjObjects()->Data[ 34632 ];

	ATgBotFactory_execResetQueue_Parms ResetQueue_Parms;
	ResetQueue_Parms.nOverrideSpawnTableId = nOverrideSpawnTableId;

	pFnResetQueue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetQueue, &ResetQueue_Parms, NULL );

	pFnResetQueue->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotFactory.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBotFactory::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 34631 ];

	ATgBotFactory_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployableFactory.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgDeployableFactory::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 35806 ];

	ATgDeployableFactory_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgDeployableFactory.OnKillBots
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_KillBots*      inAction                       ( CPF_Parm )

void ATgDeployableFactory::OnKillBots ( class UTgSeqAct_KillBots* inAction )
{
	static UFunction* pFnOnKillBots = NULL;

	if ( ! pFnOnKillBots )
		pFnOnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 35803 ];

	ATgDeployableFactory_execOnKillBots_Parms OnKillBots_Parms;
	OnKillBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnKillBots, &OnKillBots_Parms, NULL );
};

// Function TgGame.TgDeployableFactory.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgDeployableFactory::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 35801 ];

	ATgDeployableFactory_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgDeployableFactory.DeployableDied
// [0x00020002] 
// Parameters infos:

void ATgDeployableFactory::DeployableDied ( )
{
	static UFunction* pFnDeployableDied = NULL;

	if ( ! pFnDeployableDied )
		pFnDeployableDied = (UFunction*) UObject::GObjObjects()->Data[ 35800 ];

	ATgDeployableFactory_execDeployableDied_Parms DeployableDied_Parms;

	this->ProcessEvent ( pFnDeployableDied, &DeployableDied_Parms, NULL );
};

// Function TgGame.TgDeployableFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgDeployableFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35798 ];

	ATgDeployableFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeployableFactory.SpawnDemoMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSelectedObjectId              ( CPF_Parm )

void ATgDeployableFactory::SpawnDemoMesh ( int nSelectedObjectId )
{
	static UFunction* pFnSpawnDemoMesh = NULL;

	if ( ! pFnSpawnDemoMesh )
		pFnSpawnDemoMesh = (UFunction*) UObject::GObjObjects()->Data[ 35796 ];

	ATgDeployableFactory_execSpawnDemoMesh_Parms SpawnDemoMesh_Parms;
	SpawnDemoMesh_Parms.nSelectedObjectId = nSelectedObjectId;

	pFnSpawnDemoMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDemoMesh, &SpawnDemoMesh_Parms, NULL );

	pFnSpawnDemoMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgDeployableFactory.SpawnObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDeployableFactory::SpawnObject ( )
{
	static UFunction* pFnSpawnObject = NULL;

	if ( ! pFnSpawnObject )
		pFnSpawnObject = (UFunction*) UObject::GObjObjects()->Data[ 35795 ];

	ATgDeployableFactory_execSpawnObject_Parms SpawnObject_Parms;

	pFnSpawnObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObject, &SpawnObject_Parms, NULL );

	pFnSpawnObject->FunctionFlags |= 0x400;
};

// Function TgGame.TgDestructibleFactory.SpawnObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDestructibleFactory::SpawnObject ( )
{
	static UFunction* pFnSpawnObject = NULL;

	if ( ! pFnSpawnObject )
		pFnSpawnObject = (UFunction*) UObject::GObjObjects()->Data[ 35810 ];

	ATgDestructibleFactory_execSpawnObject_Parms SpawnObject_Parms;

	pFnSpawnObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObject, &SpawnObject_Parms, NULL );

	pFnSpawnObject->FunctionFlags |= 0x400;
};

// Function TgGame.TgHexItemFactory.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgHexItemFactory::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39115 ];

	ATgHexItemFactory_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgHexItemFactory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgHexItemFactory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39114 ];

	ATgHexItemFactory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgHexItemFactory.SpawnObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgHexItemFactory::SpawnObject ( )
{
	static UFunction* pFnSpawnObject = NULL;

	if ( ! pFnSpawnObject )
		pFnSpawnObject = (UFunction*) UObject::GObjObjects()->Data[ 39113 ];

	ATgHexItemFactory_execSpawnObject_Parms SpawnObject_Parms;

	pFnSpawnObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObject, &SpawnObject_Parms, NULL );

	pFnSpawnObject->FunctionFlags |= 0x400;
};

// Function TgGame.TgHexItemFactory.CanSpawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

bool ATgHexItemFactory::CanSpawn ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnCanSpawn = NULL;

	if ( ! pFnCanSpawn )
		pFnCanSpawn = (UFunction*) UObject::GObjObjects()->Data[ 39110 ];

	ATgHexItemFactory_execCanSpawn_Parms CanSpawn_Parms;
	CanSpawn_Parms.newHexItem = newHexItem;

	pFnCanSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSpawn, &CanSpawn_Parms, NULL );

	pFnCanSpawn->FunctionFlags |= 0x400;

	return CanSpawn_Parms.ReturnValue;
};

// Function TgGame.TgHexItemFactory.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgHexItemFactory::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 39108 ];

	ATgHexItemFactory_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgDroppedItem.GiveTo
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 P                              ( CPF_Parm )

void ATgDroppedItem::GiveTo ( class ATgPawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 37412 ];

	ATgDroppedItem_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function TgGame.TgDroppedItem.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDroppedItem::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 37410 ];

	ATgDroppedItem_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDroppedItem.ApplyItemSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDroppedItem::ApplyItemSetup ( )
{
	static UFunction* pFnApplyItemSetup = NULL;

	if ( ! pFnApplyItemSetup )
		pFnApplyItemSetup = (UFunction*) UObject::GObjObjects()->Data[ 37408 ];

	ATgDroppedItem_execApplyItemSetup_Parms ApplyItemSetup_Parms;

	pFnApplyItemSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyItemSetup, &ApplyItemSetup_Parms, NULL );

	pFnApplyItemSetup->FunctionFlags |= 0x400;

	return ApplyItemSetup_Parms.ReturnValue;
};

// Function TgGame.TgDroppedItem.GetEffectGroup
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UTgEffectGroup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nType                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm | CPF_OutParm )

class UTgEffectGroup* ATgDroppedItem::GetEffectGroup ( int nType, int* nIndex )
{
	static UFunction* pFnGetEffectGroup = NULL;

	if ( ! pFnGetEffectGroup )
		pFnGetEffectGroup = (UFunction*) UObject::GObjObjects()->Data[ 37404 ];

	ATgDroppedItem_execGetEffectGroup_Parms GetEffectGroup_Parms;
	GetEffectGroup_Parms.nType = nType;

	pFnGetEffectGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectGroup, &GetEffectGroup_Parms, NULL );

	pFnGetEffectGroup->FunctionFlags |= 0x400;

	if ( nIndex )
		*nIndex = GetEffectGroup_Parms.nIndex;

	return GetEffectGroup_Parms.ReturnValue;
};

// Function TgGame.TgHexItemInstance.SetHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPercent                       ( CPF_Parm )

void UTgHexItemInstance::SetHealthPercent ( float fPercent )
{
	static UFunction* pFnSetHealthPercent = NULL;

	if ( ! pFnSetHealthPercent )
		pFnSetHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 39131 ];

	UTgHexItemInstance_execSetHealthPercent_Parms SetHealthPercent_Parms;
	SetHealthPercent_Parms.fPercent = fPercent;

	pFnSetHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHealthPercent, &SetHealthPercent_Parms, NULL );

	pFnSetHealthPercent->FunctionFlags |= 0x400;
};

// Function TgGame.TgHexItemInstance.TransferHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  newActor                       ( CPF_Parm )

void UTgHexItemInstance::TransferHexItem ( class AActor* newActor )
{
	static UFunction* pFnTransferHexItem = NULL;

	if ( ! pFnTransferHexItem )
		pFnTransferHexItem = (UFunction*) UObject::GObjObjects()->Data[ 39129 ];

	UTgHexItemInstance_execTransferHexItem_Parms TransferHexItem_Parms;
	TransferHexItem_Parms.newActor = newActor;

	pFnTransferHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransferHexItem, &TransferHexItem_Parms, NULL );

	pFnTransferHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgHexItemInstance.SetHexActorState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  hexItemState                   ( CPF_Parm )

void UTgHexItemInstance::SetHexActorState ( unsigned char hexItemState )
{
	static UFunction* pFnSetHexActorState = NULL;

	if ( ! pFnSetHexActorState )
		pFnSetHexActorState = (UFunction*) UObject::GObjObjects()->Data[ 39127 ];

	UTgHexItemInstance_execSetHexActorState_Parms SetHexActorState_Parms;
	SetHexActorState_Parms.hexItemState = hexItemState;

	pFnSetHexActorState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexActorState, &SetHexActorState_Parms, NULL );

	pFnSetHexActorState->FunctionFlags |= 0x400;
};

// Function TgGame.TgHexItemInstance.GetHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgHexItemInstance::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 39125 ];

	UTgHexItemInstance_execGetHealthPercent_Parms GetHealthPercent_Parms;

	pFnGetHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );

	pFnGetHealthPercent->FunctionFlags |= 0x400;

	return GetHealthPercent_Parms.ReturnValue;
};

// Function TgGame.TgHexItemInstance.GetHexActorState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UTgHexItemInstance::GetHexActorState ( )
{
	static UFunction* pFnGetHexActorState = NULL;

	if ( ! pFnGetHexActorState )
		pFnGetHexActorState = (UFunction*) UObject::GObjObjects()->Data[ 39123 ];

	UTgHexItemInstance_execGetHexActorState_Parms GetHexActorState_Parms;

	pFnGetHexActorState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexActorState, &GetHexActorState_Parms, NULL );

	pFnGetHexActorState->FunctionFlags |= 0x400;

	return GetHexActorState_Parms.ReturnValue;
};

// Function TgGame.TgInventoryManager.ServerSetCurrentWeapon
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// class ATgDevice*               NewWeapon                      ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )

void ATgInventoryManager::eventServerSetCurrentWeapon ( class ATgDevice* NewWeapon, int nMode )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39724 ];

	ATgInventoryManager_eventServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.NewWeapon = NewWeapon;
	ServerSetCurrentWeapon_Parms.nMode = nMode;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function TgGame.TgInventoryManager.ClientSetCurrentWeapon
// [0x010201C2] 
// Parameters infos:
// class ATgDevice*               NewWeapon                      ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )

void ATgInventoryManager::ClientSetCurrentWeapon ( class ATgDevice* NewWeapon, int nMode )
{
	static UFunction* pFnClientSetCurrentWeapon = NULL;

	if ( ! pFnClientSetCurrentWeapon )
		pFnClientSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39721 ];

	ATgInventoryManager_execClientSetCurrentWeapon_Parms ClientSetCurrentWeapon_Parms;
	ClientSetCurrentWeapon_Parms.NewWeapon = NewWeapon;
	ClientSetCurrentWeapon_Parms.nMode = nMode;

	this->ProcessEvent ( pFnClientSetCurrentWeapon, &ClientSetCurrentWeapon_Parms, NULL );
};

// Function TgGame.TgInventoryManager.SetCurrentWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               DesiredWeapon                  ( CPF_Parm )
// int                            DesiredMode                    ( CPF_Parm )
// unsigned long                  bMessageFromNetwork            ( CPF_Parm )
// unsigned long                  bForceFastClear                ( CPF_Parm )

bool ATgInventoryManager::SetCurrentWeapon ( class ATgDevice* DesiredWeapon, int DesiredMode, unsigned long bMessageFromNetwork, unsigned long bForceFastClear )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39709 ];

	ATgInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;
	SetCurrentWeapon_Parms.DesiredMode = DesiredMode;
	SetCurrentWeapon_Parms.bMessageFromNetwork = bMessageFromNetwork;
	SetCurrentWeapon_Parms.bForceFastClear = bForceFastClear;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );

	return SetCurrentWeapon_Parms.ReturnValue;
};

// Function TgGame.TgInventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:
// class ATgDevice*               DesiredWeapon                  ( CPF_Parm )

void ATgInventoryManager::ChangedWeapon ( class ATgDevice* DesiredWeapon )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39706 ];

	ATgInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;
	ChangedWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function TgGame.TgInventoryManager.ServerTestShowInventory
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void ATgInventoryManager::eventServerTestShowInventory ( )
{
	static UFunction* pFnServerTestShowInventory = NULL;

	if ( ! pFnServerTestShowInventory )
		pFnServerTestShowInventory = (UFunction*) UObject::GObjObjects()->Data[ 39705 ];

	ATgInventoryManager_eventServerTestShowInventory_Parms ServerTestShowInventory_Parms;

	this->ProcessEvent ( pFnServerTestShowInventory, &ServerTestShowInventory_Parms, NULL );
};

// Function TgGame.TgInventoryManager.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 39704 ];

	ATgInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgInventoryManager.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgInventoryManager::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39703 ];

	ATgInventoryManager_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgInventoryManager.InventoryCleanup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgInventoryManager::InventoryCleanup ( )
{
	static UFunction* pFnInventoryCleanup = NULL;

	if ( ! pFnInventoryCleanup )
		pFnInventoryCleanup = (UFunction*) UObject::GObjObjects()->Data[ 39702 ];

	ATgInventoryManager_execInventoryCleanup_Parms InventoryCleanup_Parms;

	pFnInventoryCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInventoryCleanup, &InventoryCleanup_Parms, NULL );

	pFnInventoryCleanup->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryManager.TestShowInventory
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgInventoryManager::TestShowInventory ( )
{
	static UFunction* pFnTestShowInventory = NULL;

	if ( ! pFnTestShowInventory )
		pFnTestShowInventory = (UFunction*) UObject::GObjObjects()->Data[ 39701 ];

	ATgInventoryManager_execTestShowInventory_Parms TestShowInventory_Parms;

	pFnTestShowInventory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestShowInventory, &TestShowInventory_Parms, NULL );

	pFnTestShowInventory->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryManager.ApplyAllEnhancementEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bRemove                        ( CPF_Parm )

void ATgInventoryManager::ApplyAllEnhancementEffects ( unsigned long bRemove )
{
	static UFunction* pFnApplyAllEnhancementEffects = NULL;

	if ( ! pFnApplyAllEnhancementEffects )
		pFnApplyAllEnhancementEffects = (UFunction*) UObject::GObjObjects()->Data[ 39699 ];

	ATgInventoryManager_execApplyAllEnhancementEffects_Parms ApplyAllEnhancementEffects_Parms;
	ApplyAllEnhancementEffects_Parms.bRemove = bRemove;

	pFnApplyAllEnhancementEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyAllEnhancementEffects, &ApplyAllEnhancementEffects_Parms, NULL );

	pFnApplyAllEnhancementEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryManager.SetInventoryDirty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgInventoryManager::SetInventoryDirty ( )
{
	static UFunction* pFnSetInventoryDirty = NULL;

	if ( ! pFnSetInventoryDirty )
		pFnSetInventoryDirty = (UFunction*) UObject::GObjObjects()->Data[ 39698 ];

	ATgInventoryManager_execSetInventoryDirty_Parms SetInventoryDirty_Parms;

	pFnSetInventoryDirty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInventoryDirty, &SetInventoryDirty_Parms, NULL );

	pFnSetInventoryDirty->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryManager.IsValid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgInventoryManager::IsValid ( )
{
	static UFunction* pFnIsValid = NULL;

	if ( ! pFnIsValid )
		pFnIsValid = (UFunction*) UObject::GObjObjects()->Data[ 39696 ];

	ATgInventoryManager_execIsValid_Parms IsValid_Parms;

	pFnIsValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValid, &IsValid_Parms, NULL );

	pFnIsValid->FunctionFlags |= 0x400;

	return IsValid_Parms.ReturnValue;
};

// Function TgGame.TgInventoryManager.GetDeviceByInstanceId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDeviceInstanceId              ( CPF_Parm )

class ATgDevice* ATgInventoryManager::GetDeviceByInstanceId ( int nDeviceInstanceId )
{
	static UFunction* pFnGetDeviceByInstanceId = NULL;

	if ( ! pFnGetDeviceByInstanceId )
		pFnGetDeviceByInstanceId = (UFunction*) UObject::GObjObjects()->Data[ 39693 ];

	ATgInventoryManager_execGetDeviceByInstanceId_Parms GetDeviceByInstanceId_Parms;
	GetDeviceByInstanceId_Parms.nDeviceInstanceId = nDeviceInstanceId;

	pFnGetDeviceByInstanceId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceByInstanceId, &GetDeviceByInstanceId_Parms, NULL );

	pFnGetDeviceByInstanceId->FunctionFlags |= 0x400;

	return GetDeviceByInstanceId_Parms.ReturnValue;
};

// Function TgGame.TgInventoryManager.NonPersistRemoveDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nEquipPoint                    ( CPF_Parm )

void ATgInventoryManager::NonPersistRemoveDevice ( int nEquipPoint )
{
	static UFunction* pFnNonPersistRemoveDevice = NULL;

	if ( ! pFnNonPersistRemoveDevice )
		pFnNonPersistRemoveDevice = (UFunction*) UObject::GObjObjects()->Data[ 39691 ];

	ATgInventoryManager_execNonPersistRemoveDevice_Parms NonPersistRemoveDevice_Parms;
	NonPersistRemoveDevice_Parms.nEquipPoint = nEquipPoint;

	pFnNonPersistRemoveDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNonPersistRemoveDevice, &NonPersistRemoveDevice_Parms, NULL );

	pFnNonPersistRemoveDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryManager.NonPersistAddDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDeviceId                      ( CPF_Parm )
// int                            nEquipPoint                    ( CPF_Parm )

class ATgDevice* ATgInventoryManager::NonPersistAddDevice ( int nDeviceId, int nEquipPoint )
{
	static UFunction* pFnNonPersistAddDevice = NULL;

	if ( ! pFnNonPersistAddDevice )
		pFnNonPersistAddDevice = (UFunction*) UObject::GObjObjects()->Data[ 39687 ];

	ATgInventoryManager_execNonPersistAddDevice_Parms NonPersistAddDevice_Parms;
	NonPersistAddDevice_Parms.nDeviceId = nDeviceId;
	NonPersistAddDevice_Parms.nEquipPoint = nEquipPoint;

	pFnNonPersistAddDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNonPersistAddDevice, &NonPersistAddDevice_Parms, NULL );

	pFnNonPersistAddDevice->FunctionFlags |= 0x400;

	return NonPersistAddDevice_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject.GetInventoryData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FInventoryData          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FInventoryData UTgInventoryObject::GetInventoryData ( )
{
	static UFunction* pFnGetInventoryData = NULL;

	if ( ! pFnGetInventoryData )
		pFnGetInventoryData = (UFunction*) UObject::GObjObjects()->Data[ 39805 ];

	UTgInventoryObject_execGetInventoryData_Parms GetInventoryData_Parms;

	pFnGetInventoryData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInventoryData, &GetInventoryData_Parms, NULL );

	pFnGetInventoryData->FunctionFlags |= 0x400;

	return GetInventoryData_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject.IsEquippableType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgInventoryObject::IsEquippableType ( )
{
	static UFunction* pFnIsEquippableType = NULL;

	if ( ! pFnIsEquippableType )
		pFnIsEquippableType = (UFunction*) UObject::GObjObjects()->Data[ 39803 ];

	UTgInventoryObject_execIsEquippableType_Parms IsEquippableType_Parms;

	pFnIsEquippableType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEquippableType, &IsEquippableType_Parms, NULL );

	pFnIsEquippableType->FunctionFlags |= 0x400;

	return IsEquippableType_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject.IsUsableType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTgInventoryObject::IsUsableType ( )
{
	static UFunction* pFnIsUsableType = NULL;

	if ( ! pFnIsUsableType )
		pFnIsUsableType = (UFunction*) UObject::GObjObjects()->Data[ 39801 ];

	UTgInventoryObject_execIsUsableType_Parms IsUsableType_Parms;

	pFnIsUsableType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableType, &IsUsableType_Parms, NULL );

	pFnIsUsableType->FunctionFlags |= 0x400;

	return IsUsableType_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject_HexItem.FindInstance
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eState                         ( CPF_OptionalParm | CPF_Parm )

class UTgHexItemInstance* UTgInventoryObject_HexItem::FindInstance ( unsigned char eState )
{
	static UFunction* pFnFindInstance = NULL;

	if ( ! pFnFindInstance )
		pFnFindInstance = (UFunction*) UObject::GObjObjects()->Data[ 39823 ];

	UTgInventoryObject_HexItem_execFindInstance_Parms FindInstance_Parms;
	FindInstance_Parms.eState = eState;

	pFnFindInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInstance, &FindInstance_Parms, NULL );

	pFnFindInstance->FunctionFlags |= 0x400;

	return FindInstance_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject_HexItem.GetItemInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            I                              ( CPF_Parm )

class UTgHexItemInstance* UTgInventoryObject_HexItem::GetItemInstance ( int I )
{
	static UFunction* pFnGetItemInstance = NULL;

	if ( ! pFnGetItemInstance )
		pFnGetItemInstance = (UFunction*) UObject::GObjObjects()->Data[ 39820 ];

	UTgInventoryObject_HexItem_execGetItemInstance_Parms GetItemInstance_Parms;
	GetItemInstance_Parms.I = I;

	pFnGetItemInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetItemInstance, &GetItemInstance_Parms, NULL );

	pFnGetItemInstance->FunctionFlags |= 0x400;

	return GetItemInstance_Parms.ReturnValue;
};

// Function TgGame.TgInventoryObject_HexItem.SetHexActorState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  hexItemState                   ( CPF_Parm )

void UTgInventoryObject_HexItem::SetHexActorState ( unsigned char hexItemState )
{
	static UFunction* pFnSetHexActorState = NULL;

	if ( ! pFnSetHexActorState )
		pFnSetHexActorState = (UFunction*) UObject::GObjObjects()->Data[ 39818 ];

	UTgInventoryObject_HexItem_execSetHexActorState_Parms SetHexActorState_Parms;
	SetHexActorState_Parms.hexItemState = hexItemState;

	pFnSetHexActorState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexActorState, &SetHexActorState_Parms, NULL );

	pFnSetHexActorState->FunctionFlags |= 0x400;
};

// Function TgGame.TgInventoryObject_HexItem.SetTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void UTgInventoryObject_HexItem::SetTaskForce ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnSetTaskForce = NULL;

	if ( ! pFnSetTaskForce )
		pFnSetTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 39816 ];

	UTgInventoryObject_HexItem_execSetTaskForce_Parms SetTaskForce_Parms;
	SetTaskForce_Parms.tf = tf;

	pFnSetTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTaskForce, &SetTaskForce_Parms, NULL );

	pFnSetTaskForce->FunctionFlags |= 0x400;
};

// Function TgGame.TgPickupFactory.StopsProjectile
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AProjectile*             P                              ( CPF_Parm )

bool ATgPickupFactory::StopsProjectile ( class AProjectile* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 44377 ];

	ATgPickupFactory_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function TgGame.TgPickupFactory.RespawnEffect
// [0x00020000] 
// Parameters infos:

void ATgPickupFactory::RespawnEffect ( )
{
	static UFunction* pFnRespawnEffect = NULL;

	if ( ! pFnRespawnEffect )
		pFnRespawnEffect = (UFunction*) UObject::GObjObjects()->Data[ 44376 ];

	ATgPickupFactory_execRespawnEffect_Parms RespawnEffect_Parms;

	this->ProcessEvent ( pFnRespawnEffect, &RespawnEffect_Parms, NULL );
};

// Function TgGame.TgPickupFactory.UpdateHUD
// [0x00022100] 
// Parameters infos:
// class ATgHUD*                  H                              ( CPF_Parm )

void ATgPickupFactory::UpdateHUD ( class ATgHUD* H )
{
	static UFunction* pFnUpdateHUD = NULL;

	if ( ! pFnUpdateHUD )
		pFnUpdateHUD = (UFunction*) UObject::GObjObjects()->Data[ 44374 ];

	ATgPickupFactory_execUpdateHUD_Parms UpdateHUD_Parms;
	UpdateHUD_Parms.H = H;

	this->ProcessEvent ( pFnUpdateHUD, &UpdateHUD_Parms, NULL );
};

// Function TgGame.TgPickupFactory.ShouldCamp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgAIController*         B                              ( CPF_Parm )
// float                          MaxWait                        ( CPF_Parm )

bool ATgPickupFactory::ShouldCamp ( class ATgAIController* B, float MaxWait )
{
	static UFunction* pFnShouldCamp = NULL;

	if ( ! pFnShouldCamp )
		pFnShouldCamp = (UFunction*) UObject::GObjObjects()->Data[ 44370 ];

	ATgPickupFactory_execShouldCamp_Parms ShouldCamp_Parms;
	ShouldCamp_Parms.B = B;
	ShouldCamp_Parms.MaxWait = MaxWait;

	this->ProcessEvent ( pFnShouldCamp, &ShouldCamp_Parms, NULL );

	return ShouldCamp_Parms.ReturnValue;
};

// Function TgGame.TgSeqAct_EndMission.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqAct_EndMission::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47285 ];

	UTgSeqAct_EndMission_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgSeqEvent_MissionTimer.UpdateChallengerWonValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void UTgSeqEvent_MissionTimer::UpdateChallengerWonValue ( unsigned long bValue )
{
	static UFunction* pFnUpdateChallengerWonValue = NULL;

	if ( ! pFnUpdateChallengerWonValue )
		pFnUpdateChallengerWonValue = (UFunction*) UObject::GObjObjects()->Data[ 47390 ];

	UTgSeqEvent_MissionTimer_execUpdateChallengerWonValue_Parms UpdateChallengerWonValue_Parms;
	UpdateChallengerWonValue_Parms.bValue = bValue;

	pFnUpdateChallengerWonValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateChallengerWonValue, &UpdateChallengerWonValue_Parms, NULL );

	pFnUpdateChallengerWonValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_ObjectiveAssignmentChanged.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqEvent_ObjectiveAssignmentChanged::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47395 ];

	UTgSeqEvent_ObjectiveAssignmentChanged_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgSeqEvent_ObjectiveMatineeCommander.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Position                       ( CPF_Parm )

void UTgSeqEvent_ObjectiveMatineeCommander::SetPosition ( float Position )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 47405 ];

	UTgSeqEvent_ObjectiveMatineeCommander_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.Position = Position;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_ObjectiveMatineeCommander.SetPlayRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          PlayRate                       ( CPF_Parm )

void UTgSeqEvent_ObjectiveMatineeCommander::SetPlayRate ( float PlayRate )
{
	static UFunction* pFnSetPlayRate = NULL;

	if ( ! pFnSetPlayRate )
		pFnSetPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 47403 ];

	UTgSeqEvent_ObjectiveMatineeCommander_execSetPlayRate_Parms SetPlayRate_Parms;
	SetPlayRate_Parms.PlayRate = PlayRate;

	pFnSetPlayRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPlayRate, &SetPlayRate_Parms, NULL );

	pFnSetPlayRate->FunctionFlags |= 0x400;
};

// Function TgGame.TgSeqEvent_PlayerLeveledUp.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqEvent_PlayerLeveledUp::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47408 ];

	UTgSeqEvent_PlayerLeveledUp_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgSeqEvent_QuestRequirementUpdated.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqEvent_QuestRequirementUpdated::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47412 ];

	UTgSeqEvent_QuestRequirementUpdated_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgSeqEvent_QuestUpdated.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgSeqEvent_QuestUpdated::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 47416 ];

	UTgSeqEvent_QuestUpdated_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function TgGame.TgTrigger_Instance.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgTrigger_Instance::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48649 ];

	ATgTrigger_Instance_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgTrigger_Instance.HandleTouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgTrigger_Instance::HandleTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnHandleTouch = NULL;

	if ( ! pFnHandleTouch )
		pFnHandleTouch = (UFunction*) UObject::GObjObjects()->Data[ 48645 ];

	ATgTrigger_Instance_execHandleTouch_Parms HandleTouch_Parms;
	HandleTouch_Parms.Other = Other;
	memcpy ( &HandleTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &HandleTouch_Parms.HitNormal, &HitNormal, 0xC );

	pFnHandleTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleTouch, &HandleTouch_Parms, NULL );

	pFnHandleTouch->FunctionFlags |= 0x400;
};

// Function TgGame.TgTrigger_Use.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgTrigger_Use::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48677 ];

	ATgTrigger_Use_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgTrigger_Use.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgTrigger_Use::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48668 ];

	ATgTrigger_Use_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgTrigger_Use.GetMsgIdToDisplay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgTrigger_Use::GetMsgIdToDisplay ( )
{
	static UFunction* pFnGetMsgIdToDisplay = NULL;

	if ( ! pFnGetMsgIdToDisplay )
		pFnGetMsgIdToDisplay = (UFunction*) UObject::GObjObjects()->Data[ 48666 ];

	ATgTrigger_Use_execGetMsgIdToDisplay_Parms GetMsgIdToDisplay_Parms;

	pFnGetMsgIdToDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMsgIdToDisplay, &GetMsgIdToDisplay_Parms, NULL );

	pFnGetMsgIdToDisplay->FunctionFlags |= 0x400;

	return GetMsgIdToDisplay_Parms.ReturnValue;
};

// Function TgGame.TgTrigger_Use.IsUsedEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgTrigger_Use::IsUsedEnabled ( )
{
	static UFunction* pFnIsUsedEnabled = NULL;

	if ( ! pFnIsUsedEnabled )
		pFnIsUsedEnabled = (UFunction*) UObject::GObjObjects()->Data[ 48664 ];

	ATgTrigger_Use_execIsUsedEnabled_Parms IsUsedEnabled_Parms;

	pFnIsUsedEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsedEnabled, &IsUsedEnabled_Parms, NULL );

	pFnIsUsedEnabled->FunctionFlags |= 0x400;

	return IsUsedEnabled_Parms.ReturnValue;
};

// Function TgGame.TgTrigger_Use.UsedByPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 User                           ( CPF_Parm )

void ATgTrigger_Use::UsedByPawn ( class ATgPawn* User )
{
	static UFunction* pFnUsedByPawn = NULL;

	if ( ! pFnUsedByPawn )
		pFnUsedByPawn = (UFunction*) UObject::GObjObjects()->Data[ 48662 ];

	ATgTrigger_Use_execUsedByPawn_Parms UsedByPawn_Parms;
	UsedByPawn_Parms.User = User;

	pFnUsedByPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUsedByPawn, &UsedByPawn_Parms, NULL );

	pFnUsedByPawn->FunctionFlags |= 0x400;
};

// Function TgGame.TgDoorMarker.SetDoorStatus
// [0x00020002] 
// Parameters infos:
// unsigned char                  eStatus                        ( CPF_Parm )

void ATgDoorMarker::SetDoorStatus ( unsigned char eStatus )
{
	static UFunction* pFnSetDoorStatus = NULL;

	if ( ! pFnSetDoorStatus )
		pFnSetDoorStatus = (UFunction*) UObject::GObjObjects()->Data[ 37391 ];

	ATgDoorMarker_execSetDoorStatus_Parms SetDoorStatus_Parms;
	SetDoorStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnSetDoorStatus, &SetDoorStatus_Parms, NULL );
};

// Function TgGame.TgDoorMarker.CalculateDoorStatus
// [0x00020002] 
// Parameters infos:

void ATgDoorMarker::CalculateDoorStatus ( )
{
	static UFunction* pFnCalculateDoorStatus = NULL;

	if ( ! pFnCalculateDoorStatus )
		pFnCalculateDoorStatus = (UFunction*) UObject::GObjObjects()->Data[ 37390 ];

	ATgDoorMarker_execCalculateDoorStatus_Parms CalculateDoorStatus_Parms;

	this->ProcessEvent ( pFnCalculateDoorStatus, &CalculateDoorStatus_Parms, NULL );
};

// Function TgGame.TgDoorMarker.ShouldDoorBeClosed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDoorMarker::ShouldDoorBeClosed ( )
{
	static UFunction* pFnShouldDoorBeClosed = NULL;

	if ( ! pFnShouldDoorBeClosed )
		pFnShouldDoorBeClosed = (UFunction*) UObject::GObjObjects()->Data[ 37384 ];

	ATgDoorMarker_execShouldDoorBeClosed_Parms ShouldDoorBeClosed_Parms;

	this->ProcessEvent ( pFnShouldDoorBeClosed, &ShouldDoorBeClosed_Parms, NULL );

	return ShouldDoorBeClosed_Parms.ReturnValue;
};

// Function TgGame.TgDoorMarker.ShouldDoorBeOpened
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDoorMarker::ShouldDoorBeOpened ( )
{
	static UFunction* pFnShouldDoorBeOpened = NULL;

	if ( ! pFnShouldDoorBeOpened )
		pFnShouldDoorBeOpened = (UFunction*) UObject::GObjObjects()->Data[ 37378 ];

	ATgDoorMarker_execShouldDoorBeOpened_Parms ShouldDoorBeOpened_Parms;

	this->ProcessEvent ( pFnShouldDoorBeOpened, &ShouldDoorBeOpened_Parms, NULL );

	return ShouldDoorBeOpened_Parms.ReturnValue;
};

// Function TgGame.TgDoorMarker.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDoorMarker::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 37376 ];

	ATgDoorMarker_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgDoorMarker.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDoorMarker::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 37371 ];

	ATgDoorMarker_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDoorMarker.ClientOnStatusChange
// [0x00020102] 
// Parameters infos:

void ATgDoorMarker::ClientOnStatusChange ( )
{
	static UFunction* pFnClientOnStatusChange = NULL;

	if ( ! pFnClientOnStatusChange )
		pFnClientOnStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 37368 ];

	ATgDoorMarker_execClientOnStatusChange_Parms ClientOnStatusChange_Parms;

	this->ProcessEvent ( pFnClientOnStatusChange, &ClientOnStatusChange_Parms, NULL );
};

// Function TgGame.TgDoorMarker.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgDoorMarker::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 37367 ];

	ATgDoorMarker_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDoorMarker.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgDoorMarker::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 37365 ];

	ATgDoorMarker_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgDoorMarker.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgDoorMarker::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 37364 ];

	ATgDoorMarker_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgCoverPoint.PostBeginPlay
// [0x00820102] 
// Parameters infos:

void ATgCoverPoint::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34841 ];

	ATgCoverPoint_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgCoverPoint.Claim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   pClaimedBy                     ( CPF_Parm )

void ATgCoverPoint::Claim ( class APawn* pClaimedBy )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = (UFunction*) UObject::GObjObjects()->Data[ 34839 ];

	ATgCoverPoint_execClaim_Parms Claim_Parms;
	Claim_Parms.pClaimedBy = pClaimedBy;

	pFnClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	pFnClaim->FunctionFlags |= 0x400;
};

// Function TgGame.TgCoverPoint.GetClaimedBy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APawn* ATgCoverPoint::GetClaimedBy ( )
{
	static UFunction* pFnGetClaimedBy = NULL;

	if ( ! pFnGetClaimedBy )
		pFnGetClaimedBy = (UFunction*) UObject::GObjObjects()->Data[ 34837 ];

	ATgCoverPoint_execGetClaimedBy_Parms GetClaimedBy_Parms;

	pFnGetClaimedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClaimedBy, &GetClaimedBy_Parms, NULL );

	pFnGetClaimedBy->FunctionFlags |= 0x400;

	return GetClaimedBy_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor.DoKismetAttachment
// [0x00020002] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void ATgSkeletalMeshActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 40383 ];

	ATgSkeletalMeshActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor.OnParentAnimComponent
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_ParentAnimComponent* Action                         ( CPF_Parm )

void ATgSkeletalMeshActor::OnParentAnimComponent ( class UTgSeqAct_ParentAnimComponent* Action )
{
	static UFunction* pFnOnParentAnimComponent = NULL;

	if ( ! pFnOnParentAnimComponent )
		pFnOnParentAnimComponent = (UFunction*) UObject::GObjObjects()->Data[ 40375 ];

	ATgSkeletalMeshActor_execOnParentAnimComponent_Parms OnParentAnimComponent_Parms;
	OnParentAnimComponent_Parms.Action = Action;

	this->ProcessEvent ( pFnOnParentAnimComponent, &OnParentAnimComponent_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor.LoadClientOnlyMeshAssets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor::LoadClientOnlyMeshAssets ( )
{
	static UFunction* pFnLoadClientOnlyMeshAssets = NULL;

	if ( ! pFnLoadClientOnlyMeshAssets )
		pFnLoadClientOnlyMeshAssets = (UFunction*) UObject::GObjObjects()->Data[ 40374 ];

	ATgSkeletalMeshActor_execLoadClientOnlyMeshAssets_Parms LoadClientOnlyMeshAssets_Parms;

	pFnLoadClientOnlyMeshAssets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadClientOnlyMeshAssets, &LoadClientOnlyMeshAssets_Parms, NULL );

	pFnLoadClientOnlyMeshAssets->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor.CreateMeshComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UMeshComponent*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// int                            MeshAsmId                      ( CPF_Parm )
// class UMeshComponent*          DestComponent                  ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bPartialFixup                  ( CPF_OptionalParm | CPF_Parm )

class UMeshComponent* ATgSkeletalMeshActor::CreateMeshComponent ( int MeshAsmId, class UMeshComponent* DestComponent, unsigned long bPartialFixup )
{
	static UFunction* pFnCreateMeshComponent = NULL;

	if ( ! pFnCreateMeshComponent )
		pFnCreateMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 40369 ];

	ATgSkeletalMeshActor_execCreateMeshComponent_Parms CreateMeshComponent_Parms;
	CreateMeshComponent_Parms.MeshAsmId = MeshAsmId;
	CreateMeshComponent_Parms.DestComponent = DestComponent;
	CreateMeshComponent_Parms.bPartialFixup = bPartialFixup;

	pFnCreateMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateMeshComponent, &CreateMeshComponent_Parms, NULL );

	pFnCreateMeshComponent->FunctionFlags |= 0x400;

	return CreateMeshComponent_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor.CreateStaticMeshComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgStaticMeshComponent*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// int                            MeshAsmId                      ( CPF_Parm )
// class UTgStaticMeshComponent*  DestComponent                  ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

class UTgStaticMeshComponent* ATgSkeletalMeshActor::CreateStaticMeshComponent ( int MeshAsmId, class UTgStaticMeshComponent* DestComponent )
{
	static UFunction* pFnCreateStaticMeshComponent = NULL;

	if ( ! pFnCreateStaticMeshComponent )
		pFnCreateStaticMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 40365 ];

	ATgSkeletalMeshActor_execCreateStaticMeshComponent_Parms CreateStaticMeshComponent_Parms;
	CreateStaticMeshComponent_Parms.MeshAsmId = MeshAsmId;
	CreateStaticMeshComponent_Parms.DestComponent = DestComponent;

	pFnCreateStaticMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateStaticMeshComponent, &CreateStaticMeshComponent_Parms, NULL );

	pFnCreateStaticMeshComponent->FunctionFlags |= 0x400;

	return CreateStaticMeshComponent_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor.CreateSkeletalMeshComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgSkeletalMeshComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// int                            MeshAsmId                      ( CPF_Parm )
// class UTgSkeletalMeshComponent* DestComponent                  ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bPartialFixup                  ( CPF_OptionalParm | CPF_Parm )

class UTgSkeletalMeshComponent* ATgSkeletalMeshActor::CreateSkeletalMeshComponent ( int MeshAsmId, class UTgSkeletalMeshComponent* DestComponent, unsigned long bPartialFixup )
{
	static UFunction* pFnCreateSkeletalMeshComponent = NULL;

	if ( ! pFnCreateSkeletalMeshComponent )
		pFnCreateSkeletalMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 40360 ];

	ATgSkeletalMeshActor_execCreateSkeletalMeshComponent_Parms CreateSkeletalMeshComponent_Parms;
	CreateSkeletalMeshComponent_Parms.MeshAsmId = MeshAsmId;
	CreateSkeletalMeshComponent_Parms.DestComponent = DestComponent;
	CreateSkeletalMeshComponent_Parms.bPartialFixup = bPartialFixup;

	pFnCreateSkeletalMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateSkeletalMeshComponent, &CreateSkeletalMeshComponent_Parms, NULL );

	pFnCreateSkeletalMeshComponent->FunctionFlags |= 0x400;

	return CreateSkeletalMeshComponent_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor.AttachToSocket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Attachment                     ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

bool ATgSkeletalMeshActor::AttachToSocket ( class AActor* Attachment, struct FName BoneName )
{
	static UFunction* pFnAttachToSocket = NULL;

	if ( ! pFnAttachToSocket )
		pFnAttachToSocket = (UFunction*) UObject::GObjObjects()->Data[ 40356 ];

	ATgSkeletalMeshActor_execAttachToSocket_Parms AttachToSocket_Parms;
	AttachToSocket_Parms.Attachment = Attachment;
	memcpy ( &AttachToSocket_Parms.BoneName, &BoneName, 0x8 );

	pFnAttachToSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachToSocket, &AttachToSocket_Parms, NULL );

	pFnAttachToSocket->FunctionFlags |= 0x400;

	return AttachToSocket_Parms.ReturnValue;
};

// Function TgGame.TgNavRouteIndicator.StartNextPath
// [0x00020102] 
// Parameters infos:

void ATgNavRouteIndicator::StartNextPath ( )
{
	static UFunction* pFnStartNextPath = NULL;

	if ( ! pFnStartNextPath )
		pFnStartNextPath = (UFunction*) UObject::GObjObjects()->Data[ 40426 ];

	ATgNavRouteIndicator_execStartNextPath_Parms StartNextPath_Parms;

	this->ProcessEvent ( pFnStartNextPath, &StartNextPath_Parms, NULL );
};

// Function TgGame.TgNavRouteIndicator.StartSeeking
// [0x00820102] 
// Parameters infos:

void ATgNavRouteIndicator::StartSeeking ( )
{
	static UFunction* pFnStartSeeking = NULL;

	if ( ! pFnStartSeeking )
		pFnStartSeeking = (UFunction*) UObject::GObjObjects()->Data[ 40424 ];

	ATgNavRouteIndicator_execStartSeeking_Parms StartSeeking_Parms;

	this->ProcessEvent ( pFnStartSeeking, &StartSeeking_Parms, NULL );
};

// Function TgGame.TgNavRouteIndicator.SetRouteTo
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  destActor                      ( CPF_Parm )

unsigned char ATgNavRouteIndicator::SetRouteTo ( class AActor* destActor )
{
	static UFunction* pFnSetRouteTo = NULL;

	if ( ! pFnSetRouteTo )
		pFnSetRouteTo = (UFunction*) UObject::GObjObjects()->Data[ 40421 ];

	ATgNavRouteIndicator_execSetRouteTo_Parms SetRouteTo_Parms;
	SetRouteTo_Parms.destActor = destActor;

	this->ProcessEvent ( pFnSetRouteTo, &SetRouteTo_Parms, NULL );

	return SetRouteTo_Parms.ReturnValue;
};

// Function TgGame.TgNavRouteIndicator.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgNavRouteIndicator::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 40420 ];

	ATgNavRouteIndicator_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgNavRouteIndicator.AdvanceWayPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgNavRouteIndicator::AdvanceWayPoint ( )
{
	static UFunction* pFnAdvanceWayPoint = NULL;

	if ( ! pFnAdvanceWayPoint )
		pFnAdvanceWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 40418 ];

	ATgNavRouteIndicator_execAdvanceWayPoint_Parms AdvanceWayPoint_Parms;

	pFnAdvanceWayPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvanceWayPoint, &AdvanceWayPoint_Parms, NULL );

	pFnAdvanceWayPoint->FunctionFlags |= 0x400;

	return AdvanceWayPoint_Parms.ReturnValue;
};

// Function TgGame.TgNavRouteIndicator.GetCurrentWayPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgNavRouteIndicator::GetCurrentWayPoint ( )
{
	static UFunction* pFnGetCurrentWayPoint = NULL;

	if ( ! pFnGetCurrentWayPoint )
		pFnGetCurrentWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 40416 ];

	ATgNavRouteIndicator_execGetCurrentWayPoint_Parms GetCurrentWayPoint_Parms;

	pFnGetCurrentWayPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWayPoint, &GetCurrentWayPoint_Parms, NULL );

	pFnGetCurrentWayPoint->FunctionFlags |= 0x400;

	return GetCurrentWayPoint_Parms.ReturnValue;
};

// Function TgGame.TgNavRouteIndicator.SetRoute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDest                          ( CPF_Parm )

unsigned char ATgNavRouteIndicator::SetRoute ( struct FVector vDest )
{
	static UFunction* pFnSetRoute = NULL;

	if ( ! pFnSetRoute )
		pFnSetRoute = (UFunction*) UObject::GObjObjects()->Data[ 40413 ];

	ATgNavRouteIndicator_execSetRoute_Parms SetRoute_Parms;
	memcpy ( &SetRoute_Parms.vDest, &vDest, 0xC );

	pFnSetRoute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRoute, &SetRoute_Parms, NULL );

	pFnSetRoute->FunctionFlags |= 0x400;

	return SetRoute_Parms.ReturnValue;
};

// Function TgGame.TgNavRouteIndicator.DeactivatePathingFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNavRouteIndicator::DeactivatePathingFx ( )
{
	static UFunction* pFnDeactivatePathingFx = NULL;

	if ( ! pFnDeactivatePathingFx )
		pFnDeactivatePathingFx = (UFunction*) UObject::GObjObjects()->Data[ 40412 ];

	ATgNavRouteIndicator_execDeactivatePathingFx_Parms DeactivatePathingFx_Parms;

	pFnDeactivatePathingFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivatePathingFx, &DeactivatePathingFx_Parms, NULL );

	pFnDeactivatePathingFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgNavRouteIndicator.DeactivateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNavRouteIndicator::DeactivateFx ( )
{
	static UFunction* pFnDeactivateFx = NULL;

	if ( ! pFnDeactivateFx )
		pFnDeactivateFx = (UFunction*) UObject::GObjObjects()->Data[ 40411 ];

	ATgNavRouteIndicator_execDeactivateFx_Parms DeactivateFx_Parms;

	pFnDeactivateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateFx, &DeactivateFx_Parms, NULL );

	pFnDeactivateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgNavRouteIndicator.ActivatePathingFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNavRouteIndicator::ActivatePathingFx ( )
{
	static UFunction* pFnActivatePathingFx = NULL;

	if ( ! pFnActivatePathingFx )
		pFnActivatePathingFx = (UFunction*) UObject::GObjObjects()->Data[ 40410 ];

	ATgNavRouteIndicator_execActivatePathingFx_Parms ActivatePathingFx_Parms;

	pFnActivatePathingFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivatePathingFx, &ActivatePathingFx_Parms, NULL );

	pFnActivatePathingFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgNavRouteIndicator.ActivateSpinDownFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNavRouteIndicator::ActivateSpinDownFx ( )
{
	static UFunction* pFnActivateSpinDownFx = NULL;

	if ( ! pFnActivateSpinDownFx )
		pFnActivateSpinDownFx = (UFunction*) UObject::GObjObjects()->Data[ 40409 ];

	ATgNavRouteIndicator_execActivateSpinDownFx_Parms ActivateSpinDownFx_Parms;

	pFnActivateSpinDownFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSpinDownFx, &ActivateSpinDownFx_Parms, NULL );

	pFnActivateSpinDownFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgNavRouteIndicator.ActivateSpinUpFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgNavRouteIndicator::ActivateSpinUpFx ( )
{
	static UFunction* pFnActivateSpinUpFx = NULL;

	if ( ! pFnActivateSpinUpFx )
		pFnActivateSpinUpFx = (UFunction*) UObject::GObjObjects()->Data[ 40408 ];

	ATgNavRouteIndicator_execActivateSpinUpFx_Parms ActivateSpinUpFx_Parms;

	pFnActivateSpinUpFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSpinUpFx, &ActivateSpinUpFx_Parms, NULL );

	pFnActivateSpinUpFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgStartPoint.GetStartGroupNumber
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgStartPoint::GetStartGroupNumber ( )
{
	static UFunction* pFnGetStartGroupNumber = NULL;

	if ( ! pFnGetStartGroupNumber )
		pFnGetStartGroupNumber = (UFunction*) UObject::GObjObjects()->Data[ 48423 ];

	ATgStartPoint_execGetStartGroupNumber_Parms GetStartGroupNumber_Parms;

	this->ProcessEvent ( pFnGetStartGroupNumber, &GetStartGroupNumber_Parms, NULL );

	return GetStartGroupNumber_Parms.ReturnValue;
};

// Function TgGame.TgStartPoint.AdjustRating
// [0x00020102] 
// Parameters infos:

void ATgStartPoint::AdjustRating ( )
{
	static UFunction* pFnAdjustRating = NULL;

	if ( ! pFnAdjustRating )
		pFnAdjustRating = (UFunction*) UObject::GObjObjects()->Data[ 48422 ];

	ATgStartPoint_execAdjustRating_Parms AdjustRating_Parms;

	this->ProcessEvent ( pFnAdjustRating, &AdjustRating_Parms, NULL );
};

// Function TgGame.TgStartPoint.GetRating
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

float ATgStartPoint::GetRating ( class AController* Player )
{
	static UFunction* pFnGetRating = NULL;

	if ( ! pFnGetRating )
		pFnGetRating = (UFunction*) UObject::GObjObjects()->Data[ 48418 ];

	ATgStartPoint_execGetRating_Parms GetRating_Parms;
	GetRating_Parms.Player = Player;

	this->ProcessEvent ( pFnGetRating, &GetRating_Parms, NULL );

	return GetRating_Parms.ReturnValue;
};

// Function TgGame.TgStartPoint.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgStartPoint::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48417 ];

	ATgStartPoint_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgStartPoint.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgStartPoint::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 48416 ];

	ATgStartPoint_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamPlayerStart.GetRating
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

float ATgTeamPlayerStart::GetRating ( class AController* Player )
{
	static UFunction* pFnGetRating = NULL;

	if ( ! pFnGetRating )
		pFnGetRating = (UFunction*) UObject::GObjObjects()->Data[ 48486 ];

	ATgTeamPlayerStart_execGetRating_Parms GetRating_Parms;
	GetRating_Parms.Player = Player;

	pFnGetRating->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRating, &GetRating_Parms, NULL );

	pFnGetRating->FunctionFlags |= 0x400;

	return GetRating_Parms.ReturnValue;
};

// Function TgGame.TgTeamPlayerStart.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgTeamPlayerStart::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 48485 ];

	ATgTeamPlayerStart_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeleporter.UsePlayerStart
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool ATgTeleporter::eventUsePlayerStart ( class AActor* Other )
{
	static UFunction* pFnUsePlayerStart = NULL;

	if ( ! pFnUsePlayerStart )
		pFnUsePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 48557 ];

	ATgTeleporter_eventUsePlayerStart_Parms UsePlayerStart_Parms;
	UsePlayerStart_Parms.Other = Other;

	this->ProcessEvent ( pFnUsePlayerStart, &UsePlayerStart_Parms, NULL );

	return UsePlayerStart_Parms.ReturnValue;
};

// Function TgGame.TgTeleporter.PostTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgTeleporter::PostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 48555 ];

	ATgTeleporter_execPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function TgGame.TgTeleporter.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ATgTeleporter::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48554 ];

	ATgTeleporter_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgTeleporter.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgTeleporter::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48553 ];

	ATgTeleporter_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgTeleporter.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgTeleporter::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 48552 ];

	ATgTeleporter_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeleporter.HandlePostTouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool ATgTeleporter::HandlePostTouch ( class AActor* Other )
{
	static UFunction* pFnHandlePostTouch = NULL;

	if ( ! pFnHandlePostTouch )
		pFnHandlePostTouch = (UFunction*) UObject::GObjObjects()->Data[ 48549 ];

	ATgTeleporter_execHandlePostTouch_Parms HandlePostTouch_Parms;
	HandlePostTouch_Parms.Other = Other;

	pFnHandlePostTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandlePostTouch, &HandlePostTouch_Parms, NULL );

	pFnHandlePostTouch->FunctionFlags |= 0x400;

	return HandlePostTouch_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAttachActor.ClientOnStatusChange
// [0x00020102] 
// Parameters infos:
// unsigned char                  Status                         ( CPF_Parm )
// unsigned long                  bIsLocalPawnAttacker           ( CPF_Parm )

void ATgObjectiveAttachActor::ClientOnStatusChange ( unsigned char Status, unsigned long bIsLocalPawnAttacker )
{
	static UFunction* pFnClientOnStatusChange = NULL;

	if ( ! pFnClientOnStatusChange )
		pFnClientOnStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 40546 ];

	ATgObjectiveAttachActor_execClientOnStatusChange_Parms ClientOnStatusChange_Parms;
	ClientOnStatusChange_Parms.Status = Status;
	ClientOnStatusChange_Parms.bIsLocalPawnAttacker = bIsLocalPawnAttacker;

	this->ProcessEvent ( pFnClientOnStatusChange, &ClientOnStatusChange_Parms, NULL );
};

// Function TgGame.TgObjectiveAttachActor.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool ATgObjectiveAttachActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 40542 ];

	ATgObjectiveAttachActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAttachActor.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgObjectiveAttachActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 40540 ];

	ATgObjectiveAttachActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function TgGame.TgObjectiveAttachActor.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgObjectiveAttachActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40535 ];

	ATgObjectiveAttachActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgObjectiveAttachActor.DrawHealth
// [0x00020102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgObjectiveAttachActor::DrawHealth ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawHealth = NULL;

	if ( ! pFnDrawHealth )
		pFnDrawHealth = (UFunction*) UObject::GObjObjects()->Data[ 40530 ];

	ATgObjectiveAttachActor_execDrawHealth_Parms DrawHealth_Parms;
	DrawHealth_Parms.PC = PC;
	DrawHealth_Parms.Canvas = Canvas;
	memcpy ( &DrawHealth_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawHealth_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnDrawHealth, &DrawHealth_Parms, NULL );
};

// Function TgGame.TgObjectiveAttachActor.ProcessEffect
// [0x00024102] 
// Parameters infos:
// class UTgEffectGroup*          Effect                         ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgObjectiveAttachActor::ProcessEffect ( class UTgEffectGroup* Effect, unsigned long bRemove, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 40525 ];

	ATgObjectiveAttachActor_execProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.Effect = Effect;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgObjectiveAttachActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgObjectiveAttachActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 40517 ];

	ATgObjectiveAttachActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgMissionObjective.UpdateObjectiveBasedMICs
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          PlayRate                       ( CPF_Parm )

void ATgMissionObjective::eventUpdateObjectiveBasedMICs ( float PlayRate )
{
	static UFunction* pFnUpdateObjectiveBasedMICs = NULL;

	if ( ! pFnUpdateObjectiveBasedMICs )
		pFnUpdateObjectiveBasedMICs = (UFunction*) UObject::GObjObjects()->Data[ 34320 ];

	ATgMissionObjective_eventUpdateObjectiveBasedMICs_Parms UpdateObjectiveBasedMICs_Parms;
	UpdateObjectiveBasedMICs_Parms.PlayRate = PlayRate;

	this->ProcessEvent ( pFnUpdateObjectiveBasedMICs, &UpdateObjectiveBasedMICs_Parms, NULL );
};

// Function TgGame.TgMissionObjective.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgMissionObjective::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 34318 ];

	ATgMissionObjective_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgMissionObjective.SetMatineePlayRate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          PlayRate                       ( CPF_Parm )

void ATgMissionObjective::eventSetMatineePlayRate ( float PlayRate )
{
	static UFunction* pFnSetMatineePlayRate = NULL;

	if ( ! pFnSetMatineePlayRate )
		pFnSetMatineePlayRate = (UFunction*) UObject::GObjObjects()->Data[ 34315 ];

	ATgMissionObjective_eventSetMatineePlayRate_Parms SetMatineePlayRate_Parms;
	SetMatineePlayRate_Parms.PlayRate = PlayRate;

	this->ProcessEvent ( pFnSetMatineePlayRate, &SetMatineePlayRate_Parms, NULL );
};

// Function TgGame.TgMissionObjective.SetMatineePosition
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Position                       ( CPF_Parm )

void ATgMissionObjective::eventSetMatineePosition ( float Position )
{
	static UFunction* pFnSetMatineePosition = NULL;

	if ( ! pFnSetMatineePosition )
		pFnSetMatineePosition = (UFunction*) UObject::GObjObjects()->Data[ 34312 ];

	ATgMissionObjective_eventSetMatineePosition_Parms SetMatineePosition_Parms;
	SetMatineePosition_Parms.Position = Position;

	this->ProcessEvent ( pFnSetMatineePosition, &SetMatineePosition_Parms, NULL );
};

// Function TgGame.TgMissionObjective.TriggerNodeCommander
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nWhichInputToActivate          ( CPF_Parm )

void ATgMissionObjective::eventTriggerNodeCommander ( int nWhichInputToActivate )
{
	static UFunction* pFnTriggerNodeCommander = NULL;

	if ( ! pFnTriggerNodeCommander )
		pFnTriggerNodeCommander = (UFunction*) UObject::GObjObjects()->Data[ 34310 ];

	ATgMissionObjective_eventTriggerNodeCommander_Parms TriggerNodeCommander_Parms;
	TriggerNodeCommander_Parms.nWhichInputToActivate = nWhichInputToActivate;

	this->ProcessEvent ( pFnTriggerNodeCommander, &TriggerNodeCommander_Parms, NULL );
};

// Function TgGame.TgMissionObjective.AssignmentChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nWhichInputToActivate          ( CPF_Parm )

void ATgMissionObjective::eventAssignmentChanged ( int nWhichInputToActivate )
{
	static UFunction* pFnAssignmentChanged = NULL;

	if ( ! pFnAssignmentChanged )
		pFnAssignmentChanged = (UFunction*) UObject::GObjObjects()->Data[ 34308 ];

	ATgMissionObjective_eventAssignmentChanged_Parms AssignmentChanged_Parms;
	AssignmentChanged_Parms.nWhichInputToActivate = nWhichInputToActivate;

	this->ProcessEvent ( pFnAssignmentChanged, &AssignmentChanged_Parms, NULL );
};

// Function TgGame.TgMissionObjective.SelectObjective
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgMissionObjective::eventSelectObjective ( )
{
	static UFunction* pFnSelectObjective = NULL;

	if ( ! pFnSelectObjective )
		pFnSelectObjective = (UFunction*) UObject::GObjObjects()->Data[ 34307 ];

	ATgMissionObjective_eventSelectObjective_Parms SelectObjective_Parms;

	this->ProcessEvent ( pFnSelectObjective, &SelectObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective.LockObjective
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgMissionObjective::eventLockObjective ( )
{
	static UFunction* pFnLockObjective = NULL;

	if ( ! pFnLockObjective )
		pFnLockObjective = (UFunction*) UObject::GObjObjects()->Data[ 34305 ];

	ATgMissionObjective_eventLockObjective_Parms LockObjective_Parms;

	this->ProcessEvent ( pFnLockObjective, &LockObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective.UnlockObjective
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bActivateObjective             ( CPF_OptionalParm | CPF_Parm )

void ATgMissionObjective::eventUnlockObjective ( unsigned long bActivateObjective )
{
	static UFunction* pFnUnlockObjective = NULL;

	if ( ! pFnUnlockObjective )
		pFnUnlockObjective = (UFunction*) UObject::GObjObjects()->Data[ 34302 ];

	ATgMissionObjective_eventUnlockObjective_Parms UnlockObjective_Parms;
	UnlockObjective_Parms.bActivateObjective = bActivateObjective;

	this->ProcessEvent ( pFnUnlockObjective, &UnlockObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective.ShouldBlockNextObjective
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::eventShouldBlockNextObjective ( )
{
	static UFunction* pFnShouldBlockNextObjective = NULL;

	if ( ! pFnShouldBlockNextObjective )
		pFnShouldBlockNextObjective = (UFunction*) UObject::GObjObjects()->Data[ 34300 ];

	ATgMissionObjective_eventShouldBlockNextObjective_Parms ShouldBlockNextObjective_Parms;

	this->ProcessEvent ( pFnShouldBlockNextObjective, &ShouldBlockNextObjective_Parms, NULL );

	return ShouldBlockNextObjective_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.OnObjectiveStatusChange
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective::OnObjectiveStatusChange ( )
{
	static UFunction* pFnOnObjectiveStatusChange = NULL;

	if ( ! pFnOnObjectiveStatusChange )
		pFnOnObjectiveStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 34293 ];

	ATgMissionObjective_execOnObjectiveStatusChange_Parms OnObjectiveStatusChange_Parms;

	this->ProcessEvent ( pFnOnObjectiveStatusChange, &OnObjectiveStatusChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective.OnEndObjectiveAssignment
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_EndObjectiveAssignment* Action                         ( CPF_Parm )

void ATgMissionObjective::OnEndObjectiveAssignment ( class UTgSeqAct_EndObjectiveAssignment* Action )
{
	static UFunction* pFnOnEndObjectiveAssignment = NULL;

	if ( ! pFnOnEndObjectiveAssignment )
		pFnOnEndObjectiveAssignment = (UFunction*) UObject::GObjObjects()->Data[ 34291 ];

	ATgMissionObjective_execOnEndObjectiveAssignment_Parms OnEndObjectiveAssignment_Parms;
	OnEndObjectiveAssignment_Parms.Action = Action;

	this->ProcessEvent ( pFnOnEndObjectiveAssignment, &OnEndObjectiveAssignment_Parms, NULL );
};

// Function TgGame.TgMissionObjective.OnActivateObjective
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_ActivateObjective* Action                         ( CPF_Parm )

void ATgMissionObjective::OnActivateObjective ( class UTgSeqAct_ActivateObjective* Action )
{
	static UFunction* pFnOnActivateObjective = NULL;

	if ( ! pFnOnActivateObjective )
		pFnOnActivateObjective = (UFunction*) UObject::GObjObjects()->Data[ 34289 ];

	ATgMissionObjective_execOnActivateObjective_Parms OnActivateObjective_Parms;
	OnActivateObjective_Parms.Action = Action;

	this->ProcessEvent ( pFnOnActivateObjective, &OnActivateObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective.UpdateObjectiveStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eStatus                        ( CPF_Parm )

bool ATgMissionObjective::eventUpdateObjectiveStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 34285 ];

	ATgMissionObjective_eventUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;
	UpdateObjectiveStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );

	return UpdateObjectiveStatus_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.ObjectiveOverTimeNotify
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgMissionObjective::eventObjectiveOverTimeNotify ( )
{
	static UFunction* pFnObjectiveOverTimeNotify = NULL;

	if ( ! pFnObjectiveOverTimeNotify )
		pFnObjectiveOverTimeNotify = (UFunction*) UObject::GObjObjects()->Data[ 34284 ];

	ATgMissionObjective_eventObjectiveOverTimeNotify_Parms ObjectiveOverTimeNotify_Parms;

	this->ProcessEvent ( pFnObjectiveOverTimeNotify, &ObjectiveOverTimeNotify_Parms, NULL );
};

// Function TgGame.TgMissionObjective.GetLocationActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgMissionObjective::eventGetLocationActor ( )
{
	static UFunction* pFnGetLocationActor = NULL;

	if ( ! pFnGetLocationActor )
		pFnGetLocationActor = (UFunction*) UObject::GObjObjects()->Data[ 34282 ];

	ATgMissionObjective_eventGetLocationActor_Parms GetLocationActor_Parms;

	this->ProcessEvent ( pFnGetLocationActor, &GetLocationActor_Parms, NULL );

	return GetLocationActor_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.GetDisplayLocation
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgMissionObjective::eventGetDisplayLocation ( )
{
	static UFunction* pFnGetDisplayLocation = NULL;

	if ( ! pFnGetDisplayLocation )
		pFnGetDisplayLocation = (UFunction*) UObject::GObjObjects()->Data[ 34280 ];

	ATgMissionObjective_eventGetDisplayLocation_Parms GetDisplayLocation_Parms;

	this->ProcessEvent ( pFnGetDisplayLocation, &GetDisplayLocation_Parms, NULL );

	return GetDisplayLocation_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.GetDefaultStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgMissionObjective::eventGetDefaultStatus ( )
{
	static UFunction* pFnGetDefaultStatus = NULL;

	if ( ! pFnGetDefaultStatus )
		pFnGetDefaultStatus = (UFunction*) UObject::GObjObjects()->Data[ 34278 ];

	ATgMissionObjective_eventGetDefaultStatus_Parms GetDefaultStatus_Parms;

	this->ProcessEvent ( pFnGetDefaultStatus, &GetDefaultStatus_Parms, NULL );

	return GetDefaultStatus_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.ResetObjective
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgMissionObjective::eventResetObjective ( )
{
	static UFunction* pFnResetObjective = NULL;

	if ( ! pFnResetObjective )
		pFnResetObjective = (UFunction*) UObject::GObjObjects()->Data[ 34277 ];

	ATgMissionObjective_eventResetObjective_Parms ResetObjective_Parms;

	this->ProcessEvent ( pFnResetObjective, &ResetObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34276 ];

	ATgMissionObjective_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgMissionObjective.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34275 ];

	ATgMissionObjective_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgMissionObjective.DrawTaggedElements
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgMissionObjective::eventDrawTaggedElements ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawTaggedElements = NULL;

	if ( ! pFnDrawTaggedElements )
		pFnDrawTaggedElements = (UFunction*) UObject::GObjObjects()->Data[ 34269 ];

	ATgMissionObjective_eventDrawTaggedElements_Parms DrawTaggedElements_Parms;
	DrawTaggedElements_Parms.thePlayerController = thePlayerController;
	DrawTaggedElements_Parms.Canvas = Canvas;
	memcpy ( &DrawTaggedElements_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawTaggedElements_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnDrawTaggedElements, &DrawTaggedElements_Parms, NULL );
};

// Function TgGame.TgMissionObjective.IsLocalPlayerAttacker
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceEvaluate                 ( CPF_OptionalParm | CPF_Parm )

bool ATgMissionObjective::eventIsLocalPlayerAttacker ( unsigned long bForceEvaluate )
{
	static UFunction* pFnIsLocalPlayerAttacker = NULL;

	if ( ! pFnIsLocalPlayerAttacker )
		pFnIsLocalPlayerAttacker = (UFunction*) UObject::GObjObjects()->Data[ 34264 ];

	ATgMissionObjective_eventIsLocalPlayerAttacker_Parms IsLocalPlayerAttacker_Parms;
	IsLocalPlayerAttacker_Parms.bForceEvaluate = bForceEvaluate;

	this->ProcessEvent ( pFnIsLocalPlayerAttacker, &IsLocalPlayerAttacker_Parms, NULL );

	return IsLocalPlayerAttacker_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsCapturePaused
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::eventIsCapturePaused ( )
{
	static UFunction* pFnIsCapturePaused = NULL;

	if ( ! pFnIsCapturePaused )
		pFnIsCapturePaused = (UFunction*) UObject::GObjObjects()->Data[ 34262 ];

	ATgMissionObjective_eventIsCapturePaused_Parms IsCapturePaused_Parms;

	this->ProcessEvent ( pFnIsCapturePaused, &IsCapturePaused_Parms, NULL );

	return IsCapturePaused_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsCaptureInProgress
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::eventIsCaptureInProgress ( )
{
	static UFunction* pFnIsCaptureInProgress = NULL;

	if ( ! pFnIsCaptureInProgress )
		pFnIsCaptureInProgress = (UFunction*) UObject::GObjObjects()->Data[ 34260 ];

	ATgMissionObjective_eventIsCaptureInProgress_Parms IsCaptureInProgress_Parms;

	this->ProcessEvent ( pFnIsCaptureInProgress, &IsCaptureInProgress_Parms, NULL );

	return IsCaptureInProgress_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsContested
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::eventIsContested ( )
{
	static UFunction* pFnIsContested = NULL;

	if ( ! pFnIsContested )
		pFnIsContested = (UFunction*) UObject::GObjObjects()->Data[ 34258 ];

	ATgMissionObjective_eventIsContested_Parms IsContested_Parms;

	this->ProcessEvent ( pFnIsContested, &IsContested_Parms, NULL );

	return IsContested_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsFriendlyWithLocalPawn
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::eventIsFriendlyWithLocalPawn ( )
{
	static UFunction* pFnIsFriendlyWithLocalPawn = NULL;

	if ( ! pFnIsFriendlyWithLocalPawn )
		pFnIsFriendlyWithLocalPawn = (UFunction*) UObject::GObjObjects()->Data[ 34254 ];

	ATgMissionObjective_eventIsFriendlyWithLocalPawn_Parms IsFriendlyWithLocalPawn_Parms;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPawn, &IsFriendlyWithLocalPawn_Parms, NULL );

	return IsFriendlyWithLocalPawn_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.ClientCalcCapturePerc
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective::ClientCalcCapturePerc ( )
{
	static UFunction* pFnClientCalcCapturePerc = NULL;

	if ( ! pFnClientCalcCapturePerc )
		pFnClientCalcCapturePerc = (UFunction*) UObject::GObjObjects()->Data[ 34252 ];

	ATgMissionObjective_execClientCalcCapturePerc_Parms ClientCalcCapturePerc_Parms;

	this->ProcessEvent ( pFnClientCalcCapturePerc, &ClientCalcCapturePerc_Parms, NULL );
};

// Function TgGame.TgMissionObjective.ClientOnLocalPawnGroupChange
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective::ClientOnLocalPawnGroupChange ( )
{
	static UFunction* pFnClientOnLocalPawnGroupChange = NULL;

	if ( ! pFnClientOnLocalPawnGroupChange )
		pFnClientOnLocalPawnGroupChange = (UFunction*) UObject::GObjObjects()->Data[ 34250 ];

	ATgMissionObjective_execClientOnLocalPawnGroupChange_Parms ClientOnLocalPawnGroupChange_Parms;

	this->ProcessEvent ( pFnClientOnLocalPawnGroupChange, &ClientOnLocalPawnGroupChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective.FindLocalPlayerPawn
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgMissionObjective::FindLocalPlayerPawn ( )
{
	static UFunction* pFnFindLocalPlayerPawn = NULL;

	if ( ! pFnFindLocalPlayerPawn )
		pFnFindLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 34247 ];

	ATgMissionObjective_execFindLocalPlayerPawn_Parms FindLocalPlayerPawn_Parms;

	this->ProcessEvent ( pFnFindLocalPlayerPawn, &FindLocalPlayerPawn_Parms, NULL );

	return FindLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.InitLocalPawnForActiveState
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::InitLocalPawnForActiveState ( )
{
	static UFunction* pFnInitLocalPawnForActiveState = NULL;

	if ( ! pFnInitLocalPawnForActiveState )
		pFnInitLocalPawnForActiveState = (UFunction*) UObject::GObjObjects()->Data[ 34243 ];

	ATgMissionObjective_execInitLocalPawnForActiveState_Parms InitLocalPawnForActiveState_Parms;

	this->ProcessEvent ( pFnInitLocalPawnForActiveState, &InitLocalPawnForActiveState_Parms, NULL );

	return InitLocalPawnForActiveState_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgMissionObjective::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 34241 ];

	ATgMissionObjective_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgMissionObjective.FillOutObjectiveMICInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FObjectiveMICInfo       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FObjectiveMICInfo ATgMissionObjective::FillOutObjectiveMICInfo ( )
{
	static UFunction* pFnFillOutObjectiveMICInfo = NULL;

	if ( ! pFnFillOutObjectiveMICInfo )
		pFnFillOutObjectiveMICInfo = (UFunction*) UObject::GObjObjects()->Data[ 34239 ];

	ATgMissionObjective_execFillOutObjectiveMICInfo_Parms FillOutObjectiveMICInfo_Parms;

	pFnFillOutObjectiveMICInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFillOutObjectiveMICInfo, &FillOutObjectiveMICInfo_Parms, NULL );

	pFnFillOutObjectiveMICInfo->FunctionFlags |= 0x400;

	return FillOutObjectiveMICInfo_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.OnSetUITextBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_SetUITextBox*  Action                         ( CPF_Parm )

void ATgMissionObjective::OnSetUITextBox ( class UTgSeqAct_SetUITextBox* Action )
{
	static UFunction* pFnOnSetUITextBox = NULL;

	if ( ! pFnOnSetUITextBox )
		pFnOnSetUITextBox = (UFunction*) UObject::GObjObjects()->Data[ 34237 ];

	ATgMissionObjective_execOnSetUITextBox_Parms OnSetUITextBox_Parms;
	OnSetUITextBox_Parms.Action = Action;

	pFnOnSetUITextBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSetUITextBox, &OnSetUITextBox_Parms, NULL );

	pFnOnSetUITextBox->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.AwardObjectiveLoot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::AwardObjectiveLoot ( )
{
	static UFunction* pFnAwardObjectiveLoot = NULL;

	if ( ! pFnAwardObjectiveLoot )
		pFnAwardObjectiveLoot = (UFunction*) UObject::GObjObjects()->Data[ 34236 ];

	ATgMissionObjective_execAwardObjectiveLoot_Parms AwardObjectiveLoot_Parms;

	pFnAwardObjectiveLoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardObjectiveLoot, &AwardObjectiveLoot_Parms, NULL );

	pFnAwardObjectiveLoot->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.UpdateMatineeNodeStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eStatus                        ( CPF_Parm )

void ATgMissionObjective::UpdateMatineeNodeStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateMatineeNodeStatus = NULL;

	if ( ! pFnUpdateMatineeNodeStatus )
		pFnUpdateMatineeNodeStatus = (UFunction*) UObject::GObjObjects()->Data[ 34234 ];

	ATgMissionObjective_execUpdateMatineeNodeStatus_Parms UpdateMatineeNodeStatus_Parms;
	UpdateMatineeNodeStatus_Parms.eStatus = eStatus;

	pFnUpdateMatineeNodeStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMatineeNodeStatus, &UpdateMatineeNodeStatus_Parms, NULL );

	pFnUpdateMatineeNodeStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.AttackerTimeTakenToCapture
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgMissionObjective::AttackerTimeTakenToCapture ( )
{
	static UFunction* pFnAttackerTimeTakenToCapture = NULL;

	if ( ! pFnAttackerTimeTakenToCapture )
		pFnAttackerTimeTakenToCapture = (UFunction*) UObject::GObjObjects()->Data[ 34232 ];

	ATgMissionObjective_execAttackerTimeTakenToCapture_Parms AttackerTimeTakenToCapture_Parms;

	pFnAttackerTimeTakenToCapture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttackerTimeTakenToCapture, &AttackerTimeTakenToCapture_Parms, NULL );

	pFnAttackerTimeTakenToCapture->FunctionFlags |= 0x400;

	return AttackerTimeTakenToCapture_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.OnActiveStateChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::OnActiveStateChanged ( )
{
	static UFunction* pFnOnActiveStateChanged = NULL;

	if ( ! pFnOnActiveStateChanged )
		pFnOnActiveStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 34231 ];

	ATgMissionObjective_execOnActiveStateChanged_Parms OnActiveStateChanged_Parms;

	pFnOnActiveStateChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnActiveStateChanged, &OnActiveStateChanged_Parms, NULL );

	pFnOnActiveStateChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SetTagParameters
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     tgpc                           ( CPF_Parm )
// class UMaterialInstanceConstant* tagMIC                         ( CPF_Parm )
// unsigned long                  bNoChangeParent                ( CPF_OptionalParm | CPF_Parm )

void ATgMissionObjective::SetTagParameters ( class ATgPlayerController* tgpc, class UMaterialInstanceConstant* tagMIC, unsigned long bNoChangeParent )
{
	static UFunction* pFnSetTagParameters = NULL;

	if ( ! pFnSetTagParameters )
		pFnSetTagParameters = (UFunction*) UObject::GObjObjects()->Data[ 34227 ];

	ATgMissionObjective_execSetTagParameters_Parms SetTagParameters_Parms;
	SetTagParameters_Parms.tgpc = tgpc;
	SetTagParameters_Parms.tagMIC = tagMIC;
	SetTagParameters_Parms.bNoChangeParent = bNoChangeParent;

	pFnSetTagParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTagParameters, &SetTagParameters_Parms, NULL );

	pFnSetTagParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.DrawObjectiveTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

void ATgMissionObjective::DrawObjectiveTag ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir, struct FVector vLocation )
{
	static UFunction* pFnDrawObjectiveTag = NULL;

	if ( ! pFnDrawObjectiveTag )
		pFnDrawObjectiveTag = (UFunction*) UObject::GObjObjects()->Data[ 34221 ];

	ATgMissionObjective_execDrawObjectiveTag_Parms DrawObjectiveTag_Parms;
	DrawObjectiveTag_Parms.thePlayerController = thePlayerController;
	DrawObjectiveTag_Parms.Canvas = Canvas;
	memcpy ( &DrawObjectiveTag_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawObjectiveTag_Parms.CameraDir, &CameraDir, 0xC );
	memcpy ( &DrawObjectiveTag_Parms.vLocation, &vLocation, 0xC );

	pFnDrawObjectiveTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawObjectiveTag, &DrawObjectiveTag_Parms, NULL );

	pFnDrawObjectiveTag->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.DrawOffscreenObjectivePointer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )

void ATgMissionObjective::DrawOffscreenObjectivePointer ( class UCanvas* Canvas, struct FVector ScreenLoc )
{
	static UFunction* pFnDrawOffscreenObjectivePointer = NULL;

	if ( ! pFnDrawOffscreenObjectivePointer )
		pFnDrawOffscreenObjectivePointer = (UFunction*) UObject::GObjObjects()->Data[ 34218 ];

	ATgMissionObjective_execDrawOffscreenObjectivePointer_Parms DrawOffscreenObjectivePointer_Parms;
	DrawOffscreenObjectivePointer_Parms.Canvas = Canvas;
	memcpy ( &DrawOffscreenObjectivePointer_Parms.ScreenLoc, &ScreenLoc, 0xC );

	pFnDrawOffscreenObjectivePointer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawOffscreenObjectivePointer, &DrawOffscreenObjectivePointer_Parms, NULL );

	pFnDrawOffscreenObjectivePointer->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.IsDefenderTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskForce                     ( CPF_Parm )

bool ATgMissionObjective::IsDefenderTaskForceNumber ( int nTaskForce )
{
	static UFunction* pFnIsDefenderTaskForceNumber = NULL;

	if ( ! pFnIsDefenderTaskForceNumber )
		pFnIsDefenderTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 34215 ];

	ATgMissionObjective_execIsDefenderTaskForceNumber_Parms IsDefenderTaskForceNumber_Parms;
	IsDefenderTaskForceNumber_Parms.nTaskForce = nTaskForce;

	pFnIsDefenderTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDefenderTaskForceNumber, &IsDefenderTaskForceNumber_Parms, NULL );

	pFnIsDefenderTaskForceNumber->FunctionFlags |= 0x400;

	return IsDefenderTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsDefenderTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tfri                           ( CPF_Parm )

bool ATgMissionObjective::IsDefenderTaskForce ( class ATgRepInfo_TaskForce* tfri )
{
	static UFunction* pFnIsDefenderTaskForce = NULL;

	if ( ! pFnIsDefenderTaskForce )
		pFnIsDefenderTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 34212 ];

	ATgMissionObjective_execIsDefenderTaskForce_Parms IsDefenderTaskForce_Parms;
	IsDefenderTaskForce_Parms.tfri = tfri;

	pFnIsDefenderTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDefenderTaskForce, &IsDefenderTaskForce_Parms, NULL );

	pFnIsDefenderTaskForce->FunctionFlags |= 0x400;

	return IsDefenderTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsAttackerTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskForce                     ( CPF_Parm )

bool ATgMissionObjective::IsAttackerTaskForceNumber ( int nTaskForce )
{
	static UFunction* pFnIsAttackerTaskForceNumber = NULL;

	if ( ! pFnIsAttackerTaskForceNumber )
		pFnIsAttackerTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 34209 ];

	ATgMissionObjective_execIsAttackerTaskForceNumber_Parms IsAttackerTaskForceNumber_Parms;
	IsAttackerTaskForceNumber_Parms.nTaskForce = nTaskForce;

	pFnIsAttackerTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAttackerTaskForceNumber, &IsAttackerTaskForceNumber_Parms, NULL );

	pFnIsAttackerTaskForceNumber->FunctionFlags |= 0x400;

	return IsAttackerTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsAttackerTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tfri                           ( CPF_Parm )

bool ATgMissionObjective::IsAttackerTaskForce ( class ATgRepInfo_TaskForce* tfri )
{
	static UFunction* pFnIsAttackerTaskForce = NULL;

	if ( ! pFnIsAttackerTaskForce )
		pFnIsAttackerTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 34206 ];

	ATgMissionObjective_execIsAttackerTaskForce_Parms IsAttackerTaskForce_Parms;
	IsAttackerTaskForce_Parms.tfri = tfri;

	pFnIsAttackerTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAttackerTaskForce, &IsAttackerTaskForce_Parms, NULL );

	pFnIsAttackerTaskForce->FunctionFlags |= 0x400;

	return IsAttackerTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsValidTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskForce                     ( CPF_Parm )

bool ATgMissionObjective::IsValidTaskForceNumber ( int nTaskForce )
{
	static UFunction* pFnIsValidTaskForceNumber = NULL;

	if ( ! pFnIsValidTaskForceNumber )
		pFnIsValidTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 34203 ];

	ATgMissionObjective_execIsValidTaskForceNumber_Parms IsValidTaskForceNumber_Parms;
	IsValidTaskForceNumber_Parms.nTaskForce = nTaskForce;

	pFnIsValidTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTaskForceNumber, &IsValidTaskForceNumber_Parms, NULL );

	pFnIsValidTaskForceNumber->FunctionFlags |= 0x400;

	return IsValidTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsValidTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tfri                           ( CPF_Parm )

bool ATgMissionObjective::IsValidTaskForce ( class ATgRepInfo_TaskForce* tfri )
{
	static UFunction* pFnIsValidTaskForce = NULL;

	if ( ! pFnIsValidTaskForce )
		pFnIsValidTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 34200 ];

	ATgMissionObjective_execIsValidTaskForce_Parms IsValidTaskForce_Parms;
	IsValidTaskForce_Parms.tfri = tfri;

	pFnIsValidTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTaskForce, &IsValidTaskForce_Parms, NULL );

	pFnIsValidTaskForce->FunctionFlags |= 0x400;

	return IsValidTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.IsValidForLocalPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective::IsValidForLocalPlayer ( )
{
	static UFunction* pFnIsValidForLocalPlayer = NULL;

	if ( ! pFnIsValidForLocalPlayer )
		pFnIsValidForLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 34198 ];

	ATgMissionObjective_execIsValidForLocalPlayer_Parms IsValidForLocalPlayer_Parms;

	pFnIsValidForLocalPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidForLocalPlayer, &IsValidForLocalPlayer_Parms, NULL );

	pFnIsValidForLocalPlayer->FunctionFlags |= 0x400;

	return IsValidForLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective.UpdateSpawnOrder
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nCurrent                       ( CPF_Parm )

void ATgMissionObjective::UpdateSpawnOrder ( int nCurrent )
{
	static UFunction* pFnUpdateSpawnOrder = NULL;

	if ( ! pFnUpdateSpawnOrder )
		pFnUpdateSpawnOrder = (UFunction*) UObject::GObjObjects()->Data[ 34196 ];

	ATgMissionObjective_execUpdateSpawnOrder_Parms UpdateSpawnOrder_Parms;
	UpdateSpawnOrder_Parms.nCurrent = nCurrent;

	pFnUpdateSpawnOrder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpawnOrder, &UpdateSpawnOrder_Parms, NULL );

	pFnUpdateSpawnOrder->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.TeleportBots
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::TeleportBots ( )
{
	static UFunction* pFnTeleportBots = NULL;

	if ( ! pFnTeleportBots )
		pFnTeleportBots = (UFunction*) UObject::GObjObjects()->Data[ 34195 ];

	ATgMissionObjective_execTeleportBots_Parms TeleportBots_Parms;

	pFnTeleportBots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeleportBots, &TeleportBots_Parms, NULL );

	pFnTeleportBots->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SendServerObjectiveCaptured
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAttackerCaptured              ( CPF_Parm )

void ATgMissionObjective::SendServerObjectiveCaptured ( unsigned long bAttackerCaptured )
{
	static UFunction* pFnSendServerObjectiveCaptured = NULL;

	if ( ! pFnSendServerObjectiveCaptured )
		pFnSendServerObjectiveCaptured = (UFunction*) UObject::GObjObjects()->Data[ 34193 ];

	ATgMissionObjective_execSendServerObjectiveCaptured_Parms SendServerObjectiveCaptured_Parms;
	SendServerObjectiveCaptured_Parms.bAttackerCaptured = bAttackerCaptured;

	pFnSendServerObjectiveCaptured->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendServerObjectiveCaptured, &SendServerObjectiveCaptured_Parms, NULL );

	pFnSendServerObjectiveCaptured->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.RegisterSelf
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::RegisterSelf ( )
{
	static UFunction* pFnRegisterSelf = NULL;

	if ( ! pFnRegisterSelf )
		pFnRegisterSelf = (UFunction*) UObject::GObjObjects()->Data[ 34192 ];

	ATgMissionObjective_execRegisterSelf_Parms RegisterSelf_Parms;

	pFnRegisterSelf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterSelf, &RegisterSelf_Parms, NULL );

	pFnRegisterSelf->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.UpdateFxVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::UpdateFxVisibility ( )
{
	static UFunction* pFnUpdateFxVisibility = NULL;

	if ( ! pFnUpdateFxVisibility )
		pFnUpdateFxVisibility = (UFunction*) UObject::GObjObjects()->Data[ 34191 ];

	ATgMissionObjective_execUpdateFxVisibility_Parms UpdateFxVisibility_Parms;

	pFnUpdateFxVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFxVisibility, &UpdateFxVisibility_Parms, NULL );

	pFnUpdateFxVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.RecalculateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::RecalculateFx ( )
{
	static UFunction* pFnRecalculateFx = NULL;

	if ( ! pFnRecalculateFx )
		pFnRecalculateFx = (UFunction*) UObject::GObjObjects()->Data[ 34190 ];

	ATgMissionObjective_execRecalculateFx_Parms RecalculateFx_Parms;

	pFnRecalculateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateFx, &RecalculateFx_Parms, NULL );

	pFnRecalculateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.LoadMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::LoadMesh ( )
{
	static UFunction* pFnLoadMesh = NULL;

	if ( ! pFnLoadMesh )
		pFnLoadMesh = (UFunction*) UObject::GObjObjects()->Data[ 34189 ];

	ATgMissionObjective_execLoadMesh_Parms LoadMesh_Parms;

	pFnLoadMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadMesh, &LoadMesh_Parms, NULL );

	pFnLoadMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 34188 ];

	ATgMissionObjective_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.AddToList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective::AddToList ( )
{
	static UFunction* pFnAddToList = NULL;

	if ( ! pFnAddToList )
		pFnAddToList = (UFunction*) UObject::GObjObjects()->Data[ 34187 ];

	ATgMissionObjective_execAddToList_Parms AddToList_Parms;

	pFnAddToList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToList, &AddToList_Parms, NULL );

	pFnAddToList->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SetDoorsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ATgMissionObjective::SetDoorsActive ( unsigned long bActive )
{
	static UFunction* pFnSetDoorsActive = NULL;

	if ( ! pFnSetDoorsActive )
		pFnSetDoorsActive = (UFunction*) UObject::GObjObjects()->Data[ 34185 ];

	ATgMissionObjective_execSetDoorsActive_Parms SetDoorsActive_Parms;
	SetDoorsActive_Parms.bActive = bActive;

	pFnSetDoorsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDoorsActive, &SetDoorsActive_Parms, NULL );

	pFnSetDoorsActive->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SetSpawnersActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ATgMissionObjective::SetSpawnersActive ( unsigned long bActive )
{
	static UFunction* pFnSetSpawnersActive = NULL;

	if ( ! pFnSetSpawnersActive )
		pFnSetSpawnersActive = (UFunction*) UObject::GObjObjects()->Data[ 34183 ];

	ATgMissionObjective_execSetSpawnersActive_Parms SetSpawnersActive_Parms;
	SetSpawnersActive_Parms.bActive = bActive;

	pFnSetSpawnersActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpawnersActive, &SetSpawnersActive_Parms, NULL );

	pFnSetSpawnersActive->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SetObjectiveActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ATgMissionObjective::SetObjectiveActive ( unsigned long bActive )
{
	static UFunction* pFnSetObjectiveActive = NULL;

	if ( ! pFnSetObjectiveActive )
		pFnSetObjectiveActive = (UFunction*) UObject::GObjObjects()->Data[ 34181 ];

	ATgMissionObjective_execSetObjectiveActive_Parms SetObjectiveActive_Parms;
	SetObjectiveActive_Parms.bActive = bActive;

	pFnSetObjectiveActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectiveActive, &SetObjectiveActive_Parms, NULL );

	pFnSetObjectiveActive->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective.SetObjectivePending
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bPending                       ( CPF_Parm )

void ATgMissionObjective::SetObjectivePending ( unsigned long bPending )
{
	static UFunction* pFnSetObjectivePending = NULL;

	if ( ! pFnSetObjectivePending )
		pFnSetObjectivePending = (UFunction*) UObject::GObjObjects()->Data[ 34179 ];

	ATgMissionObjective_execSetObjectivePending_Parms SetObjectivePending_Parms;
	SetObjectivePending_Parms.bPending = bPending;

	pFnSetObjectivePending->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectivePending, &SetObjectivePending_Parms, NULL );

	pFnSetObjectivePending->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Bot.OnHackBot
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_HackBot*       inAction                       ( CPF_Parm )

void ATgMissionObjective_Bot::OnHackBot ( class UTgSeqAct_HackBot* inAction )
{
	static UFunction* pFnOnHackBot = NULL;

	if ( ! pFnOnHackBot )
		pFnOnHackBot = (UFunction*) UObject::GObjObjects()->Data[ 34404 ];

	ATgMissionObjective_Bot_execOnHackBot_Parms OnHackBot_Parms;
	OnHackBot_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnHackBot, &OnHackBot_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnAlarmBots
// [0x00020100] 
// Parameters infos:
// class UTgSeqAct_AlarmBots*     Action                         ( CPF_Parm )

void ATgMissionObjective_Bot::OnAlarmBots ( class UTgSeqAct_AlarmBots* Action )
{
	static UFunction* pFnOnAlarmBots = NULL;

	if ( ! pFnOnAlarmBots )
		pFnOnAlarmBots = (UFunction*) UObject::GObjObjects()->Data[ 34402 ];

	ATgMissionObjective_Bot_execOnAlarmBots_Parms OnAlarmBots_Parms;
	OnAlarmBots_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAlarmBots, &OnAlarmBots_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnJoinTeam
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_JoinTeam*      Action                         ( CPF_Parm )

void ATgMissionObjective_Bot::OnJoinTeam ( class UTgSeqAct_JoinTeam* Action )
{
	static UFunction* pFnOnJoinTeam = NULL;

	if ( ! pFnOnJoinTeam )
		pFnOnJoinTeam = (UFunction*) UObject::GObjObjects()->Data[ 34395 ];

	ATgMissionObjective_Bot_execOnJoinTeam_Parms OnJoinTeam_Parms;
	OnJoinTeam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnJoinTeam, &OnJoinTeam_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnTriggerBots
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_TriggerBots*   Action                         ( CPF_Parm )

void ATgMissionObjective_Bot::OnTriggerBots ( class UTgSeqAct_TriggerBots* Action )
{
	static UFunction* pFnOnTriggerBots = NULL;

	if ( ! pFnOnTriggerBots )
		pFnOnTriggerBots = (UFunction*) UObject::GObjObjects()->Data[ 34393 ];

	ATgMissionObjective_Bot_execOnTriggerBots_Parms OnTriggerBots_Parms;
	OnTriggerBots_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTriggerBots, &OnTriggerBots_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnGetBot
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_GetBot*        inAction                       ( CPF_Parm )

void ATgMissionObjective_Bot::OnGetBot ( class UTgSeqAct_GetBot* inAction )
{
	static UFunction* pFnOnGetBot = NULL;

	if ( ! pFnOnGetBot )
		pFnOnGetBot = (UFunction*) UObject::GObjObjects()->Data[ 34389 ];

	ATgMissionObjective_Bot_execOnGetBot_Parms OnGetBot_Parms;
	OnGetBot_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGetBot, &OnGetBot_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnDespawnBots
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UTgSeqAct_DespawnBots*   inAction                       ( CPF_Parm )

void ATgMissionObjective_Bot::eventOnDespawnBots ( class UTgSeqAct_DespawnBots* inAction )
{
	static UFunction* pFnOnDespawnBots = NULL;

	if ( ! pFnOnDespawnBots )
		pFnOnDespawnBots = (UFunction*) UObject::GObjObjects()->Data[ 34386 ];

	ATgMissionObjective_Bot_eventOnDespawnBots_Parms OnDespawnBots_Parms;
	OnDespawnBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnDespawnBots, &OnDespawnBots_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.OnKillBots
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UTgSeqAct_KillBots*      inAction                       ( CPF_Parm )

void ATgMissionObjective_Bot::eventOnKillBots ( class UTgSeqAct_KillBots* inAction )
{
	static UFunction* pFnOnKillBots = NULL;

	if ( ! pFnOnKillBots )
		pFnOnKillBots = (UFunction*) UObject::GObjObjects()->Data[ 34383 ];

	ATgMissionObjective_Bot_eventOnKillBots_Parms OnKillBots_Parms;
	OnKillBots_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnKillBots, &OnKillBots_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.UpdateObjectiveStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eStatus                        ( CPF_Parm )

bool ATgMissionObjective_Bot::eventUpdateObjectiveStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 34379 ];

	ATgMissionObjective_Bot_eventUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;
	UpdateObjectiveStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );

	return UpdateObjectiveStatus_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Bot.ServerCalcStatus
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgMissionObjective_Bot::ServerCalcStatus ( float DeltaTime )
{
	static UFunction* pFnServerCalcStatus = NULL;

	if ( ! pFnServerCalcStatus )
		pFnServerCalcStatus = (UFunction*) UObject::GObjObjects()->Data[ 34376 ];

	ATgMissionObjective_Bot_execServerCalcStatus_Parms ServerCalcStatus_Parms;
	ServerCalcStatus_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnServerCalcStatus, &ServerCalcStatus_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.ClientCalcCapturePerc
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Bot::ClientCalcCapturePerc ( )
{
	static UFunction* pFnClientCalcCapturePerc = NULL;

	if ( ! pFnClientCalcCapturePerc )
		pFnClientCalcCapturePerc = (UFunction*) UObject::GObjObjects()->Data[ 34373 ];

	ATgMissionObjective_Bot_execClientCalcCapturePerc_Parms ClientCalcCapturePerc_Parms;

	this->ProcessEvent ( pFnClientCalcCapturePerc, &ClientCalcCapturePerc_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgMissionObjective_Bot::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 34371 ];

	ATgMissionObjective_Bot_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.DrawTaggedElements
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgMissionObjective_Bot::eventDrawTaggedElements ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawTaggedElements = NULL;

	if ( ! pFnDrawTaggedElements )
		pFnDrawTaggedElements = (UFunction*) UObject::GObjObjects()->Data[ 34363 ];

	ATgMissionObjective_Bot_eventDrawTaggedElements_Parms DrawTaggedElements_Parms;
	DrawTaggedElements_Parms.thePlayerController = thePlayerController;
	DrawTaggedElements_Parms.Canvas = Canvas;
	memcpy ( &DrawTaggedElements_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawTaggedElements_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnDrawTaggedElements, &DrawTaggedElements_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.IsFriendlyWithLocalPawn
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgMissionObjective_Bot::eventIsFriendlyWithLocalPawn ( )
{
	static UFunction* pFnIsFriendlyWithLocalPawn = NULL;

	if ( ! pFnIsFriendlyWithLocalPawn )
		pFnIsFriendlyWithLocalPawn = (UFunction*) UObject::GObjObjects()->Data[ 34359 ];

	ATgMissionObjective_Bot_eventIsFriendlyWithLocalPawn_Parms IsFriendlyWithLocalPawn_Parms;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPawn, &IsFriendlyWithLocalPawn_Parms, NULL );

	return IsFriendlyWithLocalPawn_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Bot.ResetObjective
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgMissionObjective_Bot::eventResetObjective ( )
{
	static UFunction* pFnResetObjective = NULL;

	if ( ! pFnResetObjective )
		pFnResetObjective = (UFunction*) UObject::GObjObjects()->Data[ 34358 ];

	ATgMissionObjective_Bot_eventResetObjective_Parms ResetObjective_Parms;

	this->ProcessEvent ( pFnResetObjective, &ResetObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.GetLocationActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgMissionObjective_Bot::eventGetLocationActor ( )
{
	static UFunction* pFnGetLocationActor = NULL;

	if ( ! pFnGetLocationActor )
		pFnGetLocationActor = (UFunction*) UObject::GObjObjects()->Data[ 34356 ];

	ATgMissionObjective_Bot_eventGetLocationActor_Parms GetLocationActor_Parms;

	this->ProcessEvent ( pFnGetLocationActor, &GetLocationActor_Parms, NULL );

	return GetLocationActor_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Bot.GetDisplayLocation
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgMissionObjective_Bot::eventGetDisplayLocation ( )
{
	static UFunction* pFnGetDisplayLocation = NULL;

	if ( ! pFnGetDisplayLocation )
		pFnGetDisplayLocation = (UFunction*) UObject::GObjObjects()->Data[ 34353 ];

	ATgMissionObjective_Bot_eventGetDisplayLocation_Parms GetDisplayLocation_Parms;

	this->ProcessEvent ( pFnGetDisplayLocation, &GetDisplayLocation_Parms, NULL );

	return GetDisplayLocation_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Bot.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Bot::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34352 ];

	ATgMissionObjective_Bot_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Bot.SetTagParameters
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     tgpc                           ( CPF_Parm )
// class UMaterialInstanceConstant* tagMIC                         ( CPF_Parm )
// unsigned long                  bNoChangeParent                ( CPF_OptionalParm | CPF_Parm )

void ATgMissionObjective_Bot::SetTagParameters ( class ATgPlayerController* tgpc, class UMaterialInstanceConstant* tagMIC, unsigned long bNoChangeParent )
{
	static UFunction* pFnSetTagParameters = NULL;

	if ( ! pFnSetTagParameters )
		pFnSetTagParameters = (UFunction*) UObject::GObjObjects()->Data[ 34348 ];

	ATgMissionObjective_Bot_execSetTagParameters_Parms SetTagParameters_Parms;
	SetTagParameters_Parms.tgpc = tgpc;
	SetTagParameters_Parms.tagMIC = tagMIC;
	SetTagParameters_Parms.bNoChangeParent = bNoChangeParent;

	pFnSetTagParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTagParameters, &SetTagParameters_Parms, NULL );

	pFnSetTagParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Bot.RequestLoadResources
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective_Bot::RequestLoadResources ( )
{
	static UFunction* pFnRequestLoadResources = NULL;

	if ( ! pFnRequestLoadResources )
		pFnRequestLoadResources = (UFunction*) UObject::GObjObjects()->Data[ 34347 ];

	ATgMissionObjective_Bot_execRequestLoadResources_Parms RequestLoadResources_Parms;

	pFnRequestLoadResources->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestLoadResources, &RequestLoadResources_Parms, NULL );

	pFnRequestLoadResources->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Bot.SpawnObjectiveBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective_Bot::SpawnObjectiveBot ( )
{
	static UFunction* pFnSpawnObjectiveBot = NULL;

	if ( ! pFnSpawnObjectiveBot )
		pFnSpawnObjectiveBot = (UFunction*) UObject::GObjObjects()->Data[ 34346 ];

	ATgMissionObjective_Bot_execSpawnObjectiveBot_Parms SpawnObjectiveBot_Parms;

	pFnSpawnObjectiveBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObjectiveBot, &SpawnObjectiveBot_Parms, NULL );

	pFnSpawnObjectiveBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Bot.SetObjectiveActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ATgMissionObjective_Bot::SetObjectiveActive ( unsigned long bActive )
{
	static UFunction* pFnSetObjectiveActive = NULL;

	if ( ! pFnSetObjectiveActive )
		pFnSetObjectiveActive = (UFunction*) UObject::GObjObjects()->Data[ 34344 ];

	ATgMissionObjective_Bot_execSetObjectiveActive_Parms SetObjectiveActive_Parms;
	SetObjectiveActive_Parms.bActive = bActive;

	pFnSetObjectiveActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectiveActive, &SetObjectiveActive_Parms, NULL );

	pFnSetObjectiveActive->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Bot.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective_Bot::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 34343 ];

	ATgMissionObjective_Bot_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.ServerCalcStatus
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgBaseObjective_CTFBot::ServerCalcStatus ( float DeltaTime )
{
	static UFunction* pFnServerCalcStatus = NULL;

	if ( ! pFnServerCalcStatus )
		pFnServerCalcStatus = (UFunction*) UObject::GObjObjects()->Data[ 34460 ];

	ATgBaseObjective_CTFBot_execServerCalcStatus_Parms ServerCalcStatus_Parms;
	ServerCalcStatus_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnServerCalcStatus, &ServerCalcStatus_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.DrawTaggedElements
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgBaseObjective_CTFBot::eventDrawTaggedElements ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawTaggedElements = NULL;

	if ( ! pFnDrawTaggedElements )
		pFnDrawTaggedElements = (UFunction*) UObject::GObjObjects()->Data[ 34453 ];

	ATgBaseObjective_CTFBot_eventDrawTaggedElements_Parms DrawTaggedElements_Parms;
	DrawTaggedElements_Parms.thePlayerController = thePlayerController;
	DrawTaggedElements_Parms.Canvas = Canvas;
	memcpy ( &DrawTaggedElements_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawTaggedElements_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnDrawTaggedElements, &DrawTaggedElements_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.OnFlagConsumed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 consumer                       ( CPF_Parm )

void ATgBaseObjective_CTFBot::eventOnFlagConsumed ( class ATgPawn* consumer )
{
	static UFunction* pFnOnFlagConsumed = NULL;

	if ( ! pFnOnFlagConsumed )
		pFnOnFlagConsumed = (UFunction*) UObject::GObjObjects()->Data[ 34451 ];

	ATgBaseObjective_CTFBot_eventOnFlagConsumed_Parms OnFlagConsumed_Parms;
	OnFlagConsumed_Parms.consumer = consumer;

	this->ProcessEvent ( pFnOnFlagConsumed, &OnFlagConsumed_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.OnFlagUncrewed
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 Target                         ( CPF_Parm )

void ATgBaseObjective_CTFBot::eventOnFlagUncrewed ( class ATgPawn* Target )
{
	static UFunction* pFnOnFlagUncrewed = NULL;

	if ( ! pFnOnFlagUncrewed )
		pFnOnFlagUncrewed = (UFunction*) UObject::GObjObjects()->Data[ 34449 ];

	ATgBaseObjective_CTFBot_eventOnFlagUncrewed_Parms OnFlagUncrewed_Parms;
	OnFlagUncrewed_Parms.Target = Target;

	this->ProcessEvent ( pFnOnFlagUncrewed, &OnFlagUncrewed_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.OnFlagPickedUp
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 Target                         ( CPF_Parm )

void ATgBaseObjective_CTFBot::eventOnFlagPickedUp ( class ATgPawn* Target )
{
	static UFunction* pFnOnFlagPickedUp = NULL;

	if ( ! pFnOnFlagPickedUp )
		pFnOnFlagPickedUp = (UFunction*) UObject::GObjObjects()->Data[ 34442 ];

	ATgBaseObjective_CTFBot_eventOnFlagPickedUp_Parms OnFlagPickedUp_Parms;
	OnFlagPickedUp_Parms.Target = Target;

	this->ProcessEvent ( pFnOnFlagPickedUp, &OnFlagPickedUp_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.OnTimerRemoveImmunity
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgBaseObjective_CTFBot::eventOnTimerRemoveImmunity ( )
{
	static UFunction* pFnOnTimerRemoveImmunity = NULL;

	if ( ! pFnOnTimerRemoveImmunity )
		pFnOnTimerRemoveImmunity = (UFunction*) UObject::GObjObjects()->Data[ 34440 ];

	ATgBaseObjective_CTFBot_eventOnTimerRemoveImmunity_Parms OnTimerRemoveImmunity_Parms;

	this->ProcessEvent ( pFnOnTimerRemoveImmunity, &OnTimerRemoveImmunity_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.CaptureFlag
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 capturingbot                   ( CPF_Parm )

bool ATgBaseObjective_CTFBot::eventCaptureFlag ( class ATgPawn* capturingbot )
{
	static UFunction* pFnCaptureFlag = NULL;

	if ( ! pFnCaptureFlag )
		pFnCaptureFlag = (UFunction*) UObject::GObjObjects()->Data[ 34437 ];

	ATgBaseObjective_CTFBot_eventCaptureFlag_Parms CaptureFlag_Parms;
	CaptureFlag_Parms.capturingbot = capturingbot;

	this->ProcessEvent ( pFnCaptureFlag, &CaptureFlag_Parms, NULL );

	return CaptureFlag_Parms.ReturnValue;
};

// Function TgGame.TgBaseObjective_CTFBot.AddFlagToObjectiveBot
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgBaseObjective_CTFBot::eventAddFlagToObjectiveBot ( )
{
	static UFunction* pFnAddFlagToObjectiveBot = NULL;

	if ( ! pFnAddFlagToObjectiveBot )
		pFnAddFlagToObjectiveBot = (UFunction*) UObject::GObjObjects()->Data[ 34432 ];

	ATgBaseObjective_CTFBot_eventAddFlagToObjectiveBot_Parms AddFlagToObjectiveBot_Parms;

	this->ProcessEvent ( pFnAddFlagToObjectiveBot, &AddFlagToObjectiveBot_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.RequestFlagSpawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgBaseObjective_CTFBot::eventRequestFlagSpawn ( )
{
	static UFunction* pFnRequestFlagSpawn = NULL;

	if ( ! pFnRequestFlagSpawn )
		pFnRequestFlagSpawn = (UFunction*) UObject::GObjObjects()->Data[ 34431 ];

	ATgBaseObjective_CTFBot_eventRequestFlagSpawn_Parms RequestFlagSpawn_Parms;

	this->ProcessEvent ( pFnRequestFlagSpawn, &RequestFlagSpawn_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.GetDefaultStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgBaseObjective_CTFBot::eventGetDefaultStatus ( )
{
	static UFunction* pFnGetDefaultStatus = NULL;

	if ( ! pFnGetDefaultStatus )
		pFnGetDefaultStatus = (UFunction*) UObject::GObjObjects()->Data[ 34429 ];

	ATgBaseObjective_CTFBot_eventGetDefaultStatus_Parms GetDefaultStatus_Parms;

	this->ProcessEvent ( pFnGetDefaultStatus, &GetDefaultStatus_Parms, NULL );

	return GetDefaultStatus_Parms.ReturnValue;
};

// Function TgGame.TgBaseObjective_CTFBot.ResetObjective
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgBaseObjective_CTFBot::eventResetObjective ( )
{
	static UFunction* pFnResetObjective = NULL;

	if ( ! pFnResetObjective )
		pFnResetObjective = (UFunction*) UObject::GObjObjects()->Data[ 34428 ];

	ATgBaseObjective_CTFBot_eventResetObjective_Parms ResetObjective_Parms;

	this->ProcessEvent ( pFnResetObjective, &ResetObjective_Parms, NULL );
};

// Function TgGame.TgBaseObjective_CTFBot.SetTagParameters
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     tgpc                           ( CPF_Parm )
// class UMaterialInstanceConstant* tagMIC                         ( CPF_Parm )
// unsigned long                  bNoChangeParent                ( CPF_OptionalParm | CPF_Parm )

void ATgBaseObjective_CTFBot::SetTagParameters ( class ATgPlayerController* tgpc, class UMaterialInstanceConstant* tagMIC, unsigned long bNoChangeParent )
{
	static UFunction* pFnSetTagParameters = NULL;

	if ( ! pFnSetTagParameters )
		pFnSetTagParameters = (UFunction*) UObject::GObjObjects()->Data[ 34424 ];

	ATgBaseObjective_CTFBot_execSetTagParameters_Parms SetTagParameters_Parms;
	SetTagParameters_Parms.tgpc = tgpc;
	SetTagParameters_Parms.tagMIC = tagMIC;
	SetTagParameters_Parms.bNoChangeParent = bNoChangeParent;

	pFnSetTagParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTagParameters, &SetTagParameters_Parms, NULL );

	pFnSetTagParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SendFlagConsumedMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBaseObjective_CTFBot::SendFlagConsumedMessage ( )
{
	static UFunction* pFnSendFlagConsumedMessage = NULL;

	if ( ! pFnSendFlagConsumedMessage )
		pFnSendFlagConsumedMessage = (UFunction*) UObject::GObjObjects()->Data[ 34423 ];

	ATgBaseObjective_CTFBot_execSendFlagConsumedMessage_Parms SendFlagConsumedMessage_Parms;

	pFnSendFlagConsumedMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFlagConsumedMessage, &SendFlagConsumedMessage_Parms, NULL );

	pFnSendFlagConsumedMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SendFlagSpawnedMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBaseObjective_CTFBot::SendFlagSpawnedMessage ( )
{
	static UFunction* pFnSendFlagSpawnedMessage = NULL;

	if ( ! pFnSendFlagSpawnedMessage )
		pFnSendFlagSpawnedMessage = (UFunction*) UObject::GObjObjects()->Data[ 34422 ];

	ATgBaseObjective_CTFBot_execSendFlagSpawnedMessage_Parms SendFlagSpawnedMessage_Parms;

	pFnSendFlagSpawnedMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFlagSpawnedMessage, &SendFlagSpawnedMessage_Parms, NULL );

	pFnSendFlagSpawnedMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SendFlagCapturedMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nFriendlyTaskForce             ( CPF_Parm )

void ATgBaseObjective_CTFBot::SendFlagCapturedMessage ( int nFriendlyTaskForce )
{
	static UFunction* pFnSendFlagCapturedMessage = NULL;

	if ( ! pFnSendFlagCapturedMessage )
		pFnSendFlagCapturedMessage = (UFunction*) UObject::GObjObjects()->Data[ 34420 ];

	ATgBaseObjective_CTFBot_execSendFlagCapturedMessage_Parms SendFlagCapturedMessage_Parms;
	SendFlagCapturedMessage_Parms.nFriendlyTaskForce = nFriendlyTaskForce;

	pFnSendFlagCapturedMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFlagCapturedMessage, &SendFlagCapturedMessage_Parms, NULL );

	pFnSendFlagCapturedMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SendFlagPickedUpMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nFriendlyTaskForce             ( CPF_Parm )

void ATgBaseObjective_CTFBot::SendFlagPickedUpMessage ( int nFriendlyTaskForce )
{
	static UFunction* pFnSendFlagPickedUpMessage = NULL;

	if ( ! pFnSendFlagPickedUpMessage )
		pFnSendFlagPickedUpMessage = (UFunction*) UObject::GObjObjects()->Data[ 34418 ];

	ATgBaseObjective_CTFBot_execSendFlagPickedUpMessage_Parms SendFlagPickedUpMessage_Parms;
	SendFlagPickedUpMessage_Parms.nFriendlyTaskForce = nFriendlyTaskForce;

	pFnSendFlagPickedUpMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendFlagPickedUpMessage, &SendFlagPickedUpMessage_Parms, NULL );

	pFnSendFlagPickedUpMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SpawnObjectiveBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBaseObjective_CTFBot::SpawnObjectiveBot ( )
{
	static UFunction* pFnSpawnObjectiveBot = NULL;

	if ( ! pFnSpawnObjectiveBot )
		pFnSpawnObjectiveBot = (UFunction*) UObject::GObjObjects()->Data[ 34417 ];

	ATgBaseObjective_CTFBot_execSpawnObjectiveBot_Parms SpawnObjectiveBot_Parms;

	pFnSpawnObjectiveBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnObjectiveBot, &SpawnObjectiveBot_Parms, NULL );

	pFnSpawnObjectiveBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.SetObjectiveActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void ATgBaseObjective_CTFBot::SetObjectiveActive ( unsigned long bActive )
{
	static UFunction* pFnSetObjectiveActive = NULL;

	if ( ! pFnSetObjectiveActive )
		pFnSetObjectiveActive = (UFunction*) UObject::GObjObjects()->Data[ 34415 ];

	ATgBaseObjective_CTFBot_execSetObjectiveActive_Parms SetObjectiveActive_Parms;
	SetObjectiveActive_Parms.bActive = bActive;

	pFnSetObjectiveActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectiveActive, &SetObjectiveActive_Parms, NULL );

	pFnSetObjectiveActive->FunctionFlags |= 0x400;
};

// Function TgGame.TgBaseObjective_CTFBot.RemoveFlagFromPlayField
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgBaseObjective_CTFBot::RemoveFlagFromPlayField ( )
{
	static UFunction* pFnRemoveFlagFromPlayField = NULL;

	if ( ! pFnRemoveFlagFromPlayField )
		pFnRemoveFlagFromPlayField = (UFunction*) UObject::GObjObjects()->Data[ 34414 ];

	ATgBaseObjective_CTFBot_execRemoveFlagFromPlayField_Parms RemoveFlagFromPlayField_Parms;

	pFnRemoveFlagFromPlayField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFlagFromPlayField, &RemoveFlagFromPlayField_Parms, NULL );

	pFnRemoveFlagFromPlayField->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Kismet.UpdateObjectiveStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eStatus                        ( CPF_Parm )

bool ATgMissionObjective_Kismet::eventUpdateObjectiveStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 40148 ];

	ATgMissionObjective_Kismet_eventUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;
	UpdateObjectiveStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );

	return UpdateObjectiveStatus_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Kismet.OnTriggerEventObjective
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_TriggerEventObjective* Action                         ( CPF_Parm )

void ATgMissionObjective_Kismet::OnTriggerEventObjective ( class UTgSeqAct_TriggerEventObjective* Action )
{
	static UFunction* pFnOnTriggerEventObjective = NULL;

	if ( ! pFnOnTriggerEventObjective )
		pFnOnTriggerEventObjective = (UFunction*) UObject::GObjObjects()->Data[ 40144 ];

	ATgMissionObjective_Kismet_execOnTriggerEventObjective_Parms OnTriggerEventObjective_Parms;
	OnTriggerEventObjective_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTriggerEventObjective, &OnTriggerEventObjective_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.UpdateObjectiveStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eStatus                        ( CPF_Parm )

bool ATgMissionObjective_Proximity::eventUpdateObjectiveStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 34536 ];

	ATgMissionObjective_Proximity_eventUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;
	UpdateObjectiveStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );

	return UpdateObjectiveStatus_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Proximity.CalculateAdjDeltaTime
// [0x00024002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// float                          fAdjustedRate                  ( CPF_OptionalParm | CPF_Parm )

float ATgMissionObjective_Proximity::CalculateAdjDeltaTime ( float fDeltaTime, float fAdjustedRate )
{
	static UFunction* pFnCalculateAdjDeltaTime = NULL;

	if ( ! pFnCalculateAdjDeltaTime )
		pFnCalculateAdjDeltaTime = (UFunction*) UObject::GObjObjects()->Data[ 34525 ];

	ATgMissionObjective_Proximity_execCalculateAdjDeltaTime_Parms CalculateAdjDeltaTime_Parms;
	CalculateAdjDeltaTime_Parms.fDeltaTime = fDeltaTime;
	CalculateAdjDeltaTime_Parms.fAdjustedRate = fAdjustedRate;

	this->ProcessEvent ( pFnCalculateAdjDeltaTime, &CalculateAdjDeltaTime_Parms, NULL );

	return CalculateAdjDeltaTime_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Proximity.CalculateNearByPlayers
// [0x00020002] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgMissionObjective_Proximity::CalculateNearByPlayers ( float fDeltaTime )
{
	static UFunction* pFnCalculateNearByPlayers = NULL;

	if ( ! pFnCalculateNearByPlayers )
		pFnCalculateNearByPlayers = (UFunction*) UObject::GObjObjects()->Data[ 34513 ];

	ATgMissionObjective_Proximity_execCalculateNearByPlayers_Parms CalculateNearByPlayers_Parms;
	CalculateNearByPlayers_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalculateNearByPlayers, &CalculateNearByPlayers_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.GetLocationActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgMissionObjective_Proximity::eventGetLocationActor ( )
{
	static UFunction* pFnGetLocationActor = NULL;

	if ( ! pFnGetLocationActor )
		pFnGetLocationActor = (UFunction*) UObject::GObjObjects()->Data[ 34511 ];

	ATgMissionObjective_Proximity_eventGetLocationActor_Parms GetLocationActor_Parms;

	this->ProcessEvent ( pFnGetLocationActor, &GetLocationActor_Parms, NULL );

	return GetLocationActor_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Proximity.InvalidateHoldTimer
// [0x00020002] 
// Parameters infos:

void ATgMissionObjective_Proximity::InvalidateHoldTimer ( )
{
	static UFunction* pFnInvalidateHoldTimer = NULL;

	if ( ! pFnInvalidateHoldTimer )
		pFnInvalidateHoldTimer = (UFunction*) UObject::GObjObjects()->Data[ 34510 ];

	ATgMissionObjective_Proximity_execInvalidateHoldTimer_Parms InvalidateHoldTimer_Parms;

	this->ProcessEvent ( pFnInvalidateHoldTimer, &InvalidateHoldTimer_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.CheckHoldTime
// [0x00020002] 
// Parameters infos:

void ATgMissionObjective_Proximity::CheckHoldTime ( )
{
	static UFunction* pFnCheckHoldTime = NULL;

	if ( ! pFnCheckHoldTime )
		pFnCheckHoldTime = (UFunction*) UObject::GObjObjects()->Data[ 34509 ];

	ATgMissionObjective_Proximity_execCheckHoldTime_Parms CheckHoldTime_Parms;

	this->ProcessEvent ( pFnCheckHoldTime, &CheckHoldTime_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.OnOwnerTaskForceChange
// [0x00020002] 
// Parameters infos:
// int                            nCurrOwnerTaskForce            ( CPF_Parm )

void ATgMissionObjective_Proximity::OnOwnerTaskForceChange ( int nCurrOwnerTaskForce )
{
	static UFunction* pFnOnOwnerTaskForceChange = NULL;

	if ( ! pFnOnOwnerTaskForceChange )
		pFnOnOwnerTaskForceChange = (UFunction*) UObject::GObjObjects()->Data[ 34507 ];

	ATgMissionObjective_Proximity_execOnOwnerTaskForceChange_Parms OnOwnerTaskForceChange_Parms;
	OnOwnerTaskForceChange_Parms.nCurrOwnerTaskForce = nCurrOwnerTaskForce;

	this->ProcessEvent ( pFnOnOwnerTaskForceChange, &OnOwnerTaskForceChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.GetNearbyPlayerPresence
// [0x00420002] 
// Parameters infos:
// int                            nNumAttackers                  ( CPF_Parm | CPF_OutParm )
// int                            nNumDefenders                  ( CPF_Parm | CPF_OutParm )
// int                            nFirstAttackerTaskForce        ( CPF_Parm | CPF_OutParm )
// int                            nFirstDefenderTaskForce        ( CPF_Parm | CPF_OutParm )

void ATgMissionObjective_Proximity::GetNearbyPlayerPresence ( int* nNumAttackers, int* nNumDefenders, int* nFirstAttackerTaskForce, int* nFirstDefenderTaskForce )
{
	static UFunction* pFnGetNearbyPlayerPresence = NULL;

	if ( ! pFnGetNearbyPlayerPresence )
		pFnGetNearbyPlayerPresence = (UFunction*) UObject::GObjObjects()->Data[ 34499 ];

	ATgMissionObjective_Proximity_execGetNearbyPlayerPresence_Parms GetNearbyPlayerPresence_Parms;

	this->ProcessEvent ( pFnGetNearbyPlayerPresence, &GetNearbyPlayerPresence_Parms, NULL );

	if ( nNumAttackers )
		*nNumAttackers = GetNearbyPlayerPresence_Parms.nNumAttackers;

	if ( nNumDefenders )
		*nNumDefenders = GetNearbyPlayerPresence_Parms.nNumDefenders;

	if ( nFirstAttackerTaskForce )
		*nFirstAttackerTaskForce = GetNearbyPlayerPresence_Parms.nFirstAttackerTaskForce;

	if ( nFirstDefenderTaskForce )
		*nFirstDefenderTaskForce = GetNearbyPlayerPresence_Parms.nFirstDefenderTaskForce;
};

// Function TgGame.TgMissionObjective_Proximity.ShouldIgnoreOwnerEvent
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool ATgMissionObjective_Proximity::ShouldIgnoreOwnerEvent ( class AActor* Other )
{
	static UFunction* pFnShouldIgnoreOwnerEvent = NULL;

	if ( ! pFnShouldIgnoreOwnerEvent )
		pFnShouldIgnoreOwnerEvent = (UFunction*) UObject::GObjObjects()->Data[ 34495 ];

	ATgMissionObjective_Proximity_execShouldIgnoreOwnerEvent_Parms ShouldIgnoreOwnerEvent_Parms;
	ShouldIgnoreOwnerEvent_Parms.Other = Other;

	this->ProcessEvent ( pFnShouldIgnoreOwnerEvent, &ShouldIgnoreOwnerEvent_Parms, NULL );

	return ShouldIgnoreOwnerEvent_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Proximity.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgMissionObjective_Proximity::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34493 ];

	ATgMissionObjective_Proximity_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgMissionObjective_Proximity::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34488 ];

	ATgMissionObjective_Proximity_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ClientCalcCapturePerc
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Proximity::ClientCalcCapturePerc ( )
{
	static UFunction* pFnClientCalcCapturePerc = NULL;

	if ( ! pFnClientCalcCapturePerc )
		pFnClientCalcCapturePerc = (UFunction*) UObject::GObjObjects()->Data[ 34486 ];

	ATgMissionObjective_Proximity_execClientCalcCapturePerc_Parms ClientCalcCapturePerc_Parms;

	this->ProcessEvent ( pFnClientCalcCapturePerc, &ClientCalcCapturePerc_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ClientTickProgress
// [0x00020102] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgMissionObjective_Proximity::ClientTickProgress ( float fDeltaTime )
{
	static UFunction* pFnClientTickProgress = NULL;

	if ( ! pFnClientTickProgress )
		pFnClientTickProgress = (UFunction*) UObject::GObjObjects()->Data[ 34483 ];

	ATgMissionObjective_Proximity_execClientTickProgress_Parms ClientTickProgress_Parms;
	ClientTickProgress_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnClientTickProgress, &ClientTickProgress_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ClientResetFx
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Proximity::ClientResetFx ( )
{
	static UFunction* pFnClientResetFx = NULL;

	if ( ! pFnClientResetFx )
		pFnClientResetFx = (UFunction*) UObject::GObjObjects()->Data[ 34482 ];

	ATgMissionObjective_Proximity_execClientResetFx_Parms ClientResetFx_Parms;

	this->ProcessEvent ( pFnClientResetFx, &ClientResetFx_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ClientOnStatusChange
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Proximity::ClientOnStatusChange ( )
{
	static UFunction* pFnClientOnStatusChange = NULL;

	if ( ! pFnClientOnStatusChange )
		pFnClientOnStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 34481 ];

	ATgMissionObjective_Proximity_execClientOnStatusChange_Parms ClientOnStatusChange_Parms;

	this->ProcessEvent ( pFnClientOnStatusChange, &ClientOnStatusChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ClientPlayInitialContestedFx
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Proximity::ClientPlayInitialContestedFx ( )
{
	static UFunction* pFnClientPlayInitialContestedFx = NULL;

	if ( ! pFnClientPlayInitialContestedFx )
		pFnClientPlayInitialContestedFx = (UFunction*) UObject::GObjObjects()->Data[ 34480 ];

	ATgMissionObjective_Proximity_execClientPlayInitialContestedFx_Parms ClientPlayInitialContestedFx_Parms;

	this->ProcessEvent ( pFnClientPlayInitialContestedFx, &ClientPlayInitialContestedFx_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgMissionObjective_Proximity::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 34478 ];

	ATgMissionObjective_Proximity_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgMissionObjective_Proximity::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 34476 ];

	ATgMissionObjective_Proximity_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Proximity::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34475 ];

	ATgMissionObjective_Proximity_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Proximity.ScoreObjectiveProgress
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgMissionObjective_Proximity::ScoreObjectiveProgress ( float fDeltaTime )
{
	static UFunction* pFnScoreObjectiveProgress = NULL;

	if ( ! pFnScoreObjectiveProgress )
		pFnScoreObjectiveProgress = (UFunction*) UObject::GObjObjects()->Data[ 34473 ];

	ATgMissionObjective_Proximity_execScoreObjectiveProgress_Parms ScoreObjectiveProgress_Parms;
	ScoreObjectiveProgress_Parms.fDeltaTime = fDeltaTime;

	pFnScoreObjectiveProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScoreObjectiveProgress, &ScoreObjectiveProgress_Parms, NULL );

	pFnScoreObjectiveProgress->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Proximity.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgMissionObjective_Proximity::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 34472 ];

	ATgMissionObjective_Proximity_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgMissionObjective_Escort.ClientCalcCapturePerc
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Escort::ClientCalcCapturePerc ( )
{
	static UFunction* pFnClientCalcCapturePerc = NULL;

	if ( ! pFnClientCalcCapturePerc )
		pFnClientCalcCapturePerc = (UFunction*) UObject::GObjObjects()->Data[ 40141 ];

	ATgMissionObjective_Escort_execClientCalcCapturePerc_Parms ClientCalcCapturePerc_Parms;

	this->ProcessEvent ( pFnClientCalcCapturePerc, &ClientCalcCapturePerc_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Escort.ClientOnStatusChange
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Escort::ClientOnStatusChange ( )
{
	static UFunction* pFnClientOnStatusChange = NULL;

	if ( ! pFnClientOnStatusChange )
		pFnClientOnStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 40139 ];

	ATgMissionObjective_Escort_execClientOnStatusChange_Parms ClientOnStatusChange_Parms;

	this->ProcessEvent ( pFnClientOnStatusChange, &ClientOnStatusChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Escort.OnOwnerTaskForceChange
// [0x00020002] 
// Parameters infos:
// int                            nCurrOwnerTaskForce            ( CPF_Parm )

void ATgMissionObjective_Escort::OnOwnerTaskForceChange ( int nCurrOwnerTaskForce )
{
	static UFunction* pFnOnOwnerTaskForceChange = NULL;

	if ( ! pFnOnOwnerTaskForceChange )
		pFnOnOwnerTaskForceChange = (UFunction*) UObject::GObjObjects()->Data[ 40137 ];

	ATgMissionObjective_Escort_execOnOwnerTaskForceChange_Parms OnOwnerTaskForceChange_Parms;
	OnOwnerTaskForceChange_Parms.nCurrOwnerTaskForce = nCurrOwnerTaskForce;

	this->ProcessEvent ( pFnOnOwnerTaskForceChange, &OnOwnerTaskForceChange_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Escort.CalculateNearByPlayers
// [0x00020002] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgMissionObjective_Escort::CalculateNearByPlayers ( float fDeltaTime )
{
	static UFunction* pFnCalculateNearByPlayers = NULL;

	if ( ! pFnCalculateNearByPlayers )
		pFnCalculateNearByPlayers = (UFunction*) UObject::GObjObjects()->Data[ 40125 ];

	ATgMissionObjective_Escort_execCalculateNearByPlayers_Parms CalculateNearByPlayers_Parms;
	CalculateNearByPlayers_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalculateNearByPlayers, &CalculateNearByPlayers_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Escort.GetLocationActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgMissionObjective_Escort::eventGetLocationActor ( )
{
	static UFunction* pFnGetLocationActor = NULL;

	if ( ! pFnGetLocationActor )
		pFnGetLocationActor = (UFunction*) UObject::GObjObjects()->Data[ 40123 ];

	ATgMissionObjective_Escort_eventGetLocationActor_Parms GetLocationActor_Parms;

	this->ProcessEvent ( pFnGetLocationActor, &GetLocationActor_Parms, NULL );

	return GetLocationActor_Parms.ReturnValue;
};

// Function TgGame.TgMissionObjective_Escort.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgMissionObjective_Escort::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 40121 ];

	ATgMissionObjective_Escort_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgMissionObjective_Escort.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgMissionObjective_Escort::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40120 ];

	ATgMissionObjective_Escort_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgObjectiveAssignment.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgObjectiveAssignment::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 40510 ];

	ATgObjectiveAssignment_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgObjectiveAssignment.OnClientStateUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgObjectiveAssignment::OnClientStateUpdated ( )
{
	static UFunction* pFnOnClientStateUpdated = NULL;

	if ( ! pFnOnClientStateUpdated )
		pFnOnClientStateUpdated = (UFunction*) UObject::GObjObjects()->Data[ 40509 ];

	ATgObjectiveAssignment_execOnClientStateUpdated_Parms OnClientStateUpdated_Parms;

	pFnOnClientStateUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnClientStateUpdated, &OnClientStateUpdated_Parms, NULL );

	pFnOnClientStateUpdated->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.GetTimeRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgObjectiveAssignment::GetTimeRemaining ( )
{
	static UFunction* pFnGetTimeRemaining = NULL;

	if ( ! pFnGetTimeRemaining )
		pFnGetTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 40507 ];

	ATgObjectiveAssignment_execGetTimeRemaining_Parms GetTimeRemaining_Parms;

	pFnGetTimeRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeRemaining, &GetTimeRemaining_Parms, NULL );

	pFnGetTimeRemaining->FunctionFlags |= 0x400;

	return GetTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.UpdateClientTimer
// [0x01020DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          fSeconds                       ( CPF_Parm )

void ATgObjectiveAssignment::eventUpdateClientTimer ( float fSeconds )
{
	static UFunction* pFnUpdateClientTimer = NULL;

	if ( ! pFnUpdateClientTimer )
		pFnUpdateClientTimer = (UFunction*) UObject::GObjObjects()->Data[ 40505 ];

	ATgObjectiveAssignment_eventUpdateClientTimer_Parms UpdateClientTimer_Parms;
	UpdateClientTimer_Parms.fSeconds = fSeconds;

	pFnUpdateClientTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClientTimer, &UpdateClientTimer_Parms, NULL );

	pFnUpdateClientTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.SetAssignmentTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fSeconds                       ( CPF_Parm )

void ATgObjectiveAssignment::SetAssignmentTimer ( float fSeconds )
{
	static UFunction* pFnSetAssignmentTimer = NULL;

	if ( ! pFnSetAssignmentTimer )
		pFnSetAssignmentTimer = (UFunction*) UObject::GObjObjects()->Data[ 40503 ];

	ATgObjectiveAssignment_execSetAssignmentTimer_Parms SetAssignmentTimer_Parms;
	SetAssignmentTimer_Parms.fSeconds = fSeconds;

	pFnSetAssignmentTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAssignmentTimer, &SetAssignmentTimer_Parms, NULL );

	pFnSetAssignmentTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.AssignmentTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgObjectiveAssignment::AssignmentTimer ( )
{
	static UFunction* pFnAssignmentTimer = NULL;

	if ( ! pFnAssignmentTimer )
		pFnAssignmentTimer = (UFunction*) UObject::GObjObjects()->Data[ 40502 ];

	ATgObjectiveAssignment_execAssignmentTimer_Parms AssignmentTimer_Parms;

	pFnAssignmentTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAssignmentTimer, &AssignmentTimer_Parms, NULL );

	pFnAssignmentTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.ObjectiveEndAssignment
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_EndObjectiveAssignment* Action                         ( CPF_Parm )

void ATgObjectiveAssignment::ObjectiveEndAssignment ( class UTgSeqAct_EndObjectiveAssignment* Action )
{
	static UFunction* pFnObjectiveEndAssignment = NULL;

	if ( ! pFnObjectiveEndAssignment )
		pFnObjectiveEndAssignment = (UFunction*) UObject::GObjObjects()->Data[ 40500 ];

	ATgObjectiveAssignment_execObjectiveEndAssignment_Parms ObjectiveEndAssignment_Parms;
	ObjectiveEndAssignment_Parms.Action = Action;

	pFnObjectiveEndAssignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObjectiveEndAssignment, &ObjectiveEndAssignment_Parms, NULL );

	pFnObjectiveEndAssignment->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.ObjectiveTaken
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

void ATgObjectiveAssignment::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 40498 ];

	ATgObjectiveAssignment_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	pFnObjectiveTaken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	pFnObjectiveTaken->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.ObjectiveBegun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

void ATgObjectiveAssignment::ObjectiveBegun ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveBegun = NULL;

	if ( ! pFnObjectiveBegun )
		pFnObjectiveBegun = (UFunction*) UObject::GObjObjects()->Data[ 40496 ];

	ATgObjectiveAssignment_execObjectiveBegun_Parms ObjectiveBegun_Parms;
	ObjectiveBegun_Parms.Objective = Objective;

	pFnObjectiveBegun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObjectiveBegun, &ObjectiveBegun_Parms, NULL );

	pFnObjectiveBegun->FunctionFlags |= 0x400;
};

// Function TgGame.TgObjectiveAssignment.IsFinished
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgObjectiveAssignment::IsFinished ( )
{
	static UFunction* pFnIsFinished = NULL;

	if ( ! pFnIsFinished )
		pFnIsFinished = (UFunction*) UObject::GObjObjects()->Data[ 40494 ];

	ATgObjectiveAssignment_execIsFinished_Parms IsFinished_Parms;

	pFnIsFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFinished, &IsFinished_Parms, NULL );

	pFnIsFinished->FunctionFlags |= 0x400;

	return IsFinished_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgObjectiveAssignment::IsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 40492 ];

	ATgObjectiveAssignment_execIsActive_Parms IsActive_Parms;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsPending
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgObjectiveAssignment::IsPending ( )
{
	static UFunction* pFnIsPending = NULL;

	if ( ! pFnIsPending )
		pFnIsPending = (UFunction*) UObject::GObjObjects()->Data[ 40490 ];

	ATgObjectiveAssignment_execIsPending_Parms IsPending_Parms;

	pFnIsPending->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPending, &IsPending_Parms, NULL );

	pFnIsPending->FunctionFlags |= 0x400;

	return IsPending_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsDefender
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

bool ATgObjectiveAssignment::IsDefender ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnIsDefender = NULL;

	if ( ! pFnIsDefender )
		pFnIsDefender = (UFunction*) UObject::GObjObjects()->Data[ 40487 ];

	ATgObjectiveAssignment_execIsDefender_Parms IsDefender_Parms;
	IsDefender_Parms.tf = tf;

	pFnIsDefender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDefender, &IsDefender_Parms, NULL );

	pFnIsDefender->FunctionFlags |= 0x400;

	return IsDefender_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

bool ATgObjectiveAssignment::IsAttacker ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnIsAttacker = NULL;

	if ( ! pFnIsAttacker )
		pFnIsAttacker = (UFunction*) UObject::GObjObjects()->Data[ 40484 ];

	ATgObjectiveAssignment_execIsAttacker_Parms IsAttacker_Parms;
	IsAttacker_Parms.tf = tf;

	pFnIsAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAttacker, &IsAttacker_Parms, NULL );

	pFnIsAttacker->FunctionFlags |= 0x400;

	return IsAttacker_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsValidForTaskforceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskNum                       ( CPF_Parm )

bool ATgObjectiveAssignment::IsValidForTaskforceNumber ( int nTaskNum )
{
	static UFunction* pFnIsValidForTaskforceNumber = NULL;

	if ( ! pFnIsValidForTaskforceNumber )
		pFnIsValidForTaskforceNumber = (UFunction*) UObject::GObjObjects()->Data[ 40481 ];

	ATgObjectiveAssignment_execIsValidForTaskforceNumber_Parms IsValidForTaskforceNumber_Parms;
	IsValidForTaskforceNumber_Parms.nTaskNum = nTaskNum;

	pFnIsValidForTaskforceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidForTaskforceNumber, &IsValidForTaskforceNumber_Parms, NULL );

	pFnIsValidForTaskforceNumber->FunctionFlags |= 0x400;

	return IsValidForTaskforceNumber_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsValidForTaskforce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

bool ATgObjectiveAssignment::IsValidForTaskforce ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnIsValidForTaskforce = NULL;

	if ( ! pFnIsValidForTaskforce )
		pFnIsValidForTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 40478 ];

	ATgObjectiveAssignment_execIsValidForTaskforce_Parms IsValidForTaskforce_Parms;
	IsValidForTaskforce_Parms.tf = tf;

	pFnIsValidForTaskforce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidForTaskforce, &IsValidForTaskforce_Parms, NULL );

	pFnIsValidForTaskforce->FunctionFlags |= 0x400;

	return IsValidForTaskforce_Parms.ReturnValue;
};

// Function TgGame.TgObjectiveAssignment.IsValidForLocalPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgObjectiveAssignment::IsValidForLocalPlayer ( )
{
	static UFunction* pFnIsValidForLocalPlayer = NULL;

	if ( ! pFnIsValidForLocalPlayer )
		pFnIsValidForLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 40476 ];

	ATgObjectiveAssignment_execIsValidForLocalPlayer_Parms IsValidForLocalPlayer_Parms;

	pFnIsValidForLocalPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidForLocalPlayer, &IsValidForLocalPlayer_Parms, NULL );

	pFnIsValidForLocalPlayer->FunctionFlags |= 0x400;

	return IsValidForLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SetPawnDebug
// [0x00020002] 
// Parameters infos:

void ATgAIController::SetPawnDebug ( )
{
	static UFunction* pFnSetPawnDebug = NULL;

	if ( ! pFnSetPawnDebug )
		pFnSetPawnDebug = (UFunction*) UObject::GObjObjects()->Data[ 33128 ];

	ATgAIController_execSetPawnDebug_Parms SetPawnDebug_Parms;

	this->ProcessEvent ( pFnSetPawnDebug, &SetPawnDebug_Parms, NULL );
};

// Function TgGame.TgAIController.GetStateNameEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ATgAIController::eventGetStateNameEx ( )
{
	static UFunction* pFnGetStateNameEx = NULL;

	if ( ! pFnGetStateNameEx )
		pFnGetStateNameEx = (UFunction*) UObject::GObjObjects()->Data[ 33126 ];

	ATgAIController_eventGetStateNameEx_Parms GetStateNameEx_Parms;

	this->ProcessEvent ( pFnGetStateNameEx, &GetStateNameEx_Parms, NULL );

	return GetStateNameEx_Parms.ReturnValue;
};

// Function TgGame.TgAIController.ServerReleasePet
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventServerReleasePet ( )
{
	static UFunction* pFnServerReleasePet = NULL;

	if ( ! pFnServerReleasePet )
		pFnServerReleasePet = (UFunction*) UObject::GObjObjects()->Data[ 33124 ];

	ATgAIController_eventServerReleasePet_Parms ServerReleasePet_Parms;

	this->ProcessEvent ( pFnServerReleasePet, &ServerReleasePet_Parms, NULL );
};

// Function TgGame.TgAIController.ControlPet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventControlPet ( )
{
	static UFunction* pFnControlPet = NULL;

	if ( ! pFnControlPet )
		pFnControlPet = (UFunction*) UObject::GObjObjects()->Data[ 33123 ];

	ATgAIController_eventControlPet_Parms ControlPet_Parms;

	this->ProcessEvent ( pFnControlPet, &ControlPet_Parms, NULL );
};

// Function TgGame.TgAIController.EndSuspend
// [0x00020002] 
// Parameters infos:

void ATgAIController::EndSuspend ( )
{
	static UFunction* pFnEndSuspend = NULL;

	if ( ! pFnEndSuspend )
		pFnEndSuspend = (UFunction*) UObject::GObjObjects()->Data[ 33101 ];

	ATgAIController_execEndSuspend_Parms EndSuspend_Parms;

	this->ProcessEvent ( pFnEndSuspend, &EndSuspend_Parms, NULL );
};

// Function TgGame.TgAIController.Suspend
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          SuspendLength                  ( CPF_Parm )
// unsigned long                  bPauseAI                       ( CPF_Parm )

void ATgAIController::eventSuspend ( float SuspendLength, unsigned long bPauseAI )
{
	static UFunction* pFnSuspend = NULL;

	if ( ! pFnSuspend )
		pFnSuspend = (UFunction*) UObject::GObjObjects()->Data[ 33098 ];

	ATgAIController_eventSuspend_Parms Suspend_Parms;
	Suspend_Parms.SuspendLength = SuspendLength;
	Suspend_Parms.bPauseAI = bPauseAI;

	this->ProcessEvent ( pFnSuspend, &Suspend_Parms, NULL );
};

// Function TgGame.TgAIController.ReviveTimer
// [0x00020000] 
// Parameters infos:

void ATgAIController::ReviveTimer ( )
{
	static UFunction* pFnReviveTimer = NULL;

	if ( ! pFnReviveTimer )
		pFnReviveTimer = (UFunction*) UObject::GObjObjects()->Data[ 33097 ];

	ATgAIController_execReviveTimer_Parms ReviveTimer_Parms;

	this->ProcessEvent ( pFnReviveTimer, &ReviveTimer_Parms, NULL );
};

// Function TgGame.TgAIController.Revive
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventRevive ( )
{
	static UFunction* pFnRevive = NULL;

	if ( ! pFnRevive )
		pFnRevive = (UFunction*) UObject::GObjObjects()->Data[ 33096 ];

	ATgAIController_eventRevive_Parms Revive_Parms;

	this->ProcessEvent ( pFnRevive, &Revive_Parms, NULL );
};

// Function TgGame.TgAIController.DoPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          PauseLength                    ( CPF_Parm )

void ATgAIController::eventDoPause ( float PauseLength )
{
	static UFunction* pFnDoPause = NULL;

	if ( ! pFnDoPause )
		pFnDoPause = (UFunction*) UObject::GObjObjects()->Data[ 33094 ];

	ATgAIController_eventDoPause_Parms DoPause_Parms;
	DoPause_Parms.PauseLength = PauseLength;

	this->ProcessEvent ( pFnDoPause, &DoPause_Parms, NULL );
};

// Function TgGame.TgAIController.SetActionlessPause
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgAIController::SetActionlessPause ( unsigned long bOn )
{
	static UFunction* pFnSetActionlessPause = NULL;

	if ( ! pFnSetActionlessPause )
		pFnSetActionlessPause = (UFunction*) UObject::GObjObjects()->Data[ 33092 ];

	ATgAIController_execSetActionlessPause_Parms SetActionlessPause_Parms;
	SetActionlessPause_Parms.bOn = bOn;

	this->ProcessEvent ( pFnSetActionlessPause, &SetActionlessPause_Parms, NULL );
};

// Function TgGame.TgAIController.PauseAI
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bStart                         ( CPF_Parm )
// float                          fPauseDuration                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceNewPauseDuration         ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::eventPauseAI ( unsigned long bStart, float fPauseDuration, unsigned long bForceNewPauseDuration )
{
	static UFunction* pFnPauseAI = NULL;

	if ( ! pFnPauseAI )
		pFnPauseAI = (UFunction*) UObject::GObjObjects()->Data[ 33028 ];

	ATgAIController_eventPauseAI_Parms PauseAI_Parms;
	PauseAI_Parms.bStart = bStart;
	PauseAI_Parms.fPauseDuration = fPauseDuration;
	PauseAI_Parms.bForceNewPauseDuration = bForceNewPauseDuration;

	this->ProcessEvent ( pFnPauseAI, &PauseAI_Parms, NULL );
};

// Function TgGame.TgAIController.Stun
// [0x00024102] 
// Parameters infos:
// unsigned long                  bStunController                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::Stun ( unsigned long bStunController, unsigned char eType )
{
	static UFunction* pFnStun = NULL;

	if ( ! pFnStun )
		pFnStun = (UFunction*) UObject::GObjObjects()->Data[ 33024 ];

	ATgAIController_execStun_Parms Stun_Parms;
	Stun_Parms.bStunController = bStunController;
	Stun_Parms.eType = eType;

	this->ProcessEvent ( pFnStun, &Stun_Parms, NULL );
};

// Function TgGame.TgAIController.GetAdjustedAimFor
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ATgAIController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 32999 ];

	ATgAIController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function TgGame.TgAIController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ATgAIController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 32997 ];

	ATgAIController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function TgGame.TgAIController.LookForSquad
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 BotOwner                       ( CPF_Parm )

void ATgAIController::eventLookForSquad ( class ATgPawn* BotOwner )
{
	static UFunction* pFnLookForSquad = NULL;

	if ( ! pFnLookForSquad )
		pFnLookForSquad = (UFunction*) UObject::GObjObjects()->Data[ 32991 ];

	ATgAIController_eventLookForSquad_Parms LookForSquad_Parms;
	LookForSquad_Parms.BotOwner = BotOwner;

	this->ProcessEvent ( pFnLookForSquad, &LookForSquad_Parms, NULL );
};

// Function TgGame.TgAIController.CallForHelp
// [0x00020002] 
// Parameters infos:

void ATgAIController::CallForHelp ( )
{
	static UFunction* pFnCallForHelp = NULL;

	if ( ! pFnCallForHelp )
		pFnCallForHelp = (UFunction*) UObject::GObjObjects()->Data[ 32990 ];

	ATgAIController_execCallForHelp_Parms CallForHelp_Parms;

	this->ProcessEvent ( pFnCallForHelp, &CallForHelp_Parms, NULL );
};

// Function TgGame.TgAIController.UseDevice
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// unsigned long                  bSecondary                     ( CPF_Parm )
// unsigned long                  bEquipOnly                     ( CPF_Parm )

bool ATgAIController::UseDevice ( unsigned char eEquipmentSlot, int nMode, unsigned long bSecondary, unsigned long bEquipOnly )
{
	static UFunction* pFnUseDevice = NULL;

	if ( ! pFnUseDevice )
		pFnUseDevice = (UFunction*) UObject::GObjObjects()->Data[ 32977 ];

	ATgAIController_execUseDevice_Parms UseDevice_Parms;
	UseDevice_Parms.eEquipmentSlot = eEquipmentSlot;
	UseDevice_Parms.nMode = nMode;
	UseDevice_Parms.bSecondary = bSecondary;
	UseDevice_Parms.bEquipOnly = bEquipOnly;

	this->ProcessEvent ( pFnUseDevice, &UseDevice_Parms, NULL );

	return UseDevice_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DoBlock
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )

void ATgAIController::DoBlock ( unsigned long bOn, unsigned char eEquipmentSlot )
{
	static UFunction* pFnDoBlock = NULL;

	if ( ! pFnDoBlock )
		pFnDoBlock = (UFunction*) UObject::GObjObjects()->Data[ 32215 ];

	ATgAIController_execDoBlock_Parms DoBlock_Parms;
	DoBlock_Parms.bOn = bOn;
	DoBlock_Parms.eEquipmentSlot = eEquipmentSlot;

	this->ProcessEvent ( pFnDoBlock, &DoBlock_Parms, NULL );
};

// Function TgGame.TgAIController.CauseConsoleEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void ATgAIController::eventCauseConsoleEvent ( struct FName EventName )
{
	static UFunction* pFnCauseConsoleEvent = NULL;

	if ( ! pFnCauseConsoleEvent )
		pFnCauseConsoleEvent = (UFunction*) UObject::GObjObjects()->Data[ 32207 ];

	ATgAIController_eventCauseConsoleEvent_Parms CauseConsoleEvent_Parms;
	memcpy ( &CauseConsoleEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseConsoleEvent, &CauseConsoleEvent_Parms, NULL );
};

// Function TgGame.TgAIController.GetFriendsTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgAIController::GetFriendsTarget ( )
{
	static UFunction* pFnGetFriendsTarget = NULL;

	if ( ! pFnGetFriendsTarget )
		pFnGetFriendsTarget = (UFunction*) UObject::GObjObjects()->Data[ 32205 ];

	ATgAIController_execGetFriendsTarget_Parms GetFriendsTarget_Parms;

	this->ProcessEvent ( pFnGetFriendsTarget, &GetFriendsTarget_Parms, NULL );

	return GetFriendsTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetFriendsAttacker
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgAIController::GetFriendsAttacker ( )
{
	static UFunction* pFnGetFriendsAttacker = NULL;

	if ( ! pFnGetFriendsAttacker )
		pFnGetFriendsAttacker = (UFunction*) UObject::GObjObjects()->Data[ 32202 ];

	ATgAIController_execGetFriendsAttacker_Parms GetFriendsAttacker_Parms;

	this->ProcessEvent ( pFnGetFriendsAttacker, &GetFriendsAttacker_Parms, NULL );

	return GetFriendsAttacker_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetClosestPlayer
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgAIController::TargetClosestPlayer ( )
{
	static UFunction* pFnTargetClosestPlayer = NULL;

	if ( ! pFnTargetClosestPlayer )
		pFnTargetClosestPlayer = (UFunction*) UObject::GObjObjects()->Data[ 32195 ];

	ATgAIController_execTargetClosestPlayer_Parms TargetClosestPlayer_Parms;

	this->ProcessEvent ( pFnTargetClosestPlayer, &TargetClosestPlayer_Parms, NULL );

	return TargetClosestPlayer_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetRandomPlayer
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIgnoreLos                     ( CPF_Parm )

class ATgPawn* ATgAIController::TargetRandomPlayer ( unsigned long bIgnoreLos )
{
	static UFunction* pFnTargetRandomPlayer = NULL;

	if ( ! pFnTargetRandomPlayer )
		pFnTargetRandomPlayer = (UFunction*) UObject::GObjObjects()->Data[ 32187 ];

	ATgAIController_execTargetRandomPlayer_Parms TargetRandomPlayer_Parms;
	TargetRandomPlayer_Parms.bIgnoreLos = bIgnoreLos;

	this->ProcessEvent ( pFnTargetRandomPlayer, &TargetRandomPlayer_Parms, NULL );

	return TargetRandomPlayer_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LoseTarget
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventLoseTarget ( )
{
	static UFunction* pFnLoseTarget = NULL;

	if ( ! pFnLoseTarget )
		pFnLoseTarget = (UFunction*) UObject::GObjObjects()->Data[ 32186 ];

	ATgAIController_eventLoseTarget_Parms LoseTarget_Parms;

	this->ProcessEvent ( pFnLoseTarget, &LoseTarget_Parms, NULL );
};

// Function TgGame.TgAIController.SetFormationLocation
// [0x00820002] 
// Parameters infos:

void ATgAIController::SetFormationLocation ( )
{
	static UFunction* pFnSetFormationLocation = NULL;

	if ( ! pFnSetFormationLocation )
		pFnSetFormationLocation = (UFunction*) UObject::GObjObjects()->Data[ 32181 ];

	ATgAIController_execSetFormationLocation_Parms SetFormationLocation_Parms;

	this->ProcessEvent ( pFnSetFormationLocation, &SetFormationLocation_Parms, NULL );
};

// Function TgGame.TgAIController.SetMovementLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 TargetLocation                 ( CPF_Parm )

void ATgAIController::SetMovementLocation ( struct FVector TargetLocation )
{
	static UFunction* pFnSetMovementLocation = NULL;

	if ( ! pFnSetMovementLocation )
		pFnSetMovementLocation = (UFunction*) UObject::GObjObjects()->Data[ 32179 ];

	ATgAIController_execSetMovementLocation_Parms SetMovementLocation_Parms;
	memcpy ( &SetMovementLocation_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnSetMovementLocation, &SetMovementLocation_Parms, NULL );
};

// Function TgGame.TgAIController.SetMovementLocationFromActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ATgAIController::SetMovementLocationFromActor ( class AActor* TargetActor )
{
	static UFunction* pFnSetMovementLocationFromActor = NULL;

	if ( ! pFnSetMovementLocationFromActor )
		pFnSetMovementLocationFromActor = (UFunction*) UObject::GObjObjects()->Data[ 32177 ];

	ATgAIController_execSetMovementLocationFromActor_Parms SetMovementLocationFromActor_Parms;
	SetMovementLocationFromActor_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnSetMovementLocationFromActor, &SetMovementLocationFromActor_Parms, NULL );
};

// Function TgGame.TgAIController.SetMovementTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  MovementTarget                 ( CPF_Parm )

void ATgAIController::SetMovementTarget ( class AActor* MovementTarget )
{
	static UFunction* pFnSetMovementTarget = NULL;

	if ( ! pFnSetMovementTarget )
		pFnSetMovementTarget = (UFunction*) UObject::GObjObjects()->Data[ 32170 ];

	ATgAIController_execSetMovementTarget_Parms SetMovementTarget_Parms;
	SetMovementTarget_Parms.MovementTarget = MovementTarget;

	this->ProcessEvent ( pFnSetMovementTarget, &SetMovementTarget_Parms, NULL );
};

// Function TgGame.TgAIController.GetNextPatrolPoint
// [0x00020002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* ATgAIController::GetNextPatrolPoint ( )
{
	static UFunction* pFnGetNextPatrolPoint = NULL;

	if ( ! pFnGetNextPatrolPoint )
		pFnGetNextPatrolPoint = (UFunction*) UObject::GObjObjects()->Data[ 32163 ];

	ATgAIController_execGetNextPatrolPoint_Parms GetNextPatrolPoint_Parms;

	this->ProcessEvent ( pFnGetNextPatrolPoint, &GetNextPatrolPoint_Parms, NULL );

	return GetNextPatrolPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CylinderContainsPoint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLoc                           ( CPF_Parm )
// int                            nRadius                        ( CPF_Parm )
// int                            nHeight                        ( CPF_Parm )
// struct FVector                 vPoint                         ( CPF_Parm )

bool ATgAIController::CylinderContainsPoint ( struct FVector vLoc, int nRadius, int nHeight, struct FVector vPoint )
{
	static UFunction* pFnCylinderContainsPoint = NULL;

	if ( ! pFnCylinderContainsPoint )
		pFnCylinderContainsPoint = (UFunction*) UObject::GObjObjects()->Data[ 32156 ];

	ATgAIController_execCylinderContainsPoint_Parms CylinderContainsPoint_Parms;
	memcpy ( &CylinderContainsPoint_Parms.vLoc, &vLoc, 0xC );
	CylinderContainsPoint_Parms.nRadius = nRadius;
	CylinderContainsPoint_Parms.nHeight = nHeight;
	memcpy ( &CylinderContainsPoint_Parms.vPoint, &vPoint, 0xC );

	this->ProcessEvent ( pFnCylinderContainsPoint, &CylinderContainsPoint_Parms, NULL );

	return CylinderContainsPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SetTarget
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nTargetCode                    ( CPF_Parm )

void ATgAIController::eventSetTarget ( int nTargetCode )
{
	static UFunction* pFnSetTarget = NULL;

	if ( ! pFnSetTarget )
		pFnSetTarget = (UFunction*) UObject::GObjObjects()->Data[ 32148 ];

	ATgAIController_eventSetTarget_Parms SetTarget_Parms;
	SetTarget_Parms.nTargetCode = nTargetCode;

	this->ProcessEvent ( pFnSetTarget, &SetTarget_Parms, NULL );
};

// Function TgGame.TgAIController.SetMovement
// [0x00020002] 
// Parameters infos:
// int                            nDestinationCode               ( CPF_Parm )

void ATgAIController::SetMovement ( int nDestinationCode )
{
	static UFunction* pFnSetMovement = NULL;

	if ( ! pFnSetMovement )
		pFnSetMovement = (UFunction*) UObject::GObjObjects()->Data[ 32146 ];

	ATgAIController_execSetMovement_Parms SetMovement_Parms;
	SetMovement_Parms.nDestinationCode = nDestinationCode;

	this->ProcessEvent ( pFnSetMovement, &SetMovement_Parms, NULL );
};

// Function TgGame.TgAIController.SetPace
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nPaceCode                      ( CPF_Parm )

void ATgAIController::eventSetPace ( int nPaceCode )
{
	static UFunction* pFnSetPace = NULL;

	if ( ! pFnSetPace )
		pFnSetPace = (UFunction*) UObject::GObjObjects()->Data[ 32143 ];

	ATgAIController_eventSetPace_Parms SetPace_Parms;
	SetPace_Parms.nPaceCode = nPaceCode;

	this->ProcessEvent ( pFnSetPace, &SetPace_Parms, NULL );
};

// Function TgGame.TgAIController.SetPosture
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nPosture                       ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::eventSetPosture ( int nPosture, unsigned long bForce, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnSetPosture = NULL;

	if ( ! pFnSetPosture )
		pFnSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 32129 ];

	ATgAIController_eventSetPosture_Parms SetPosture_Parms;
	SetPosture_Parms.nPosture = nPosture;
	SetPosture_Parms.bForce = bForce;
	SetPosture_Parms.fRateScale = fRateScale;
	SetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnSetPosture, &SetPosture_Parms, NULL );
};

// Function TgGame.TgAIController.ExecuteAction
// [0x00020002] 
// Parameters infos:

void ATgAIController::ExecuteAction ( )
{
	static UFunction* pFnExecuteAction = NULL;

	if ( ! pFnExecuteAction )
		pFnExecuteAction = (UFunction*) UObject::GObjObjects()->Data[ 32126 ];

	ATgAIController_execExecuteAction_Parms ExecuteAction_Parms;

	this->ProcessEvent ( pFnExecuteAction, &ExecuteAction_Parms, NULL );
};

// Function TgGame.TgAIController.DespawnAlarmBots
// [0x00020002] 
// Parameters infos:

void ATgAIController::DespawnAlarmBots ( )
{
	static UFunction* pFnDespawnAlarmBots = NULL;

	if ( ! pFnDespawnAlarmBots )
		pFnDespawnAlarmBots = (UFunction*) UObject::GObjObjects()->Data[ 32122 ];

	ATgAIController_execDespawnAlarmBots_Parms DespawnAlarmBots_Parms;

	this->ProcessEvent ( pFnDespawnAlarmBots, &DespawnAlarmBots_Parms, NULL );
};

// Function TgGame.TgAIController.Despawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventDespawn ( )
{
	static UFunction* pFnDespawn = NULL;

	if ( ! pFnDespawn )
		pFnDespawn = (UFunction*) UObject::GObjObjects()->Data[ 32121 ];

	ATgAIController_eventDespawn_Parms Despawn_Parms;

	this->ProcessEvent ( pFnDespawn, &Despawn_Parms, NULL );
};

// Function TgGame.TgAIController.StopDevices
// [0x00020002] 
// Parameters infos:

void ATgAIController::StopDevices ( )
{
	static UFunction* pFnStopDevices = NULL;

	if ( ! pFnStopDevices )
		pFnStopDevices = (UFunction*) UObject::GObjObjects()->Data[ 32120 ];

	ATgAIController_execStopDevices_Parms StopDevices_Parms;

	this->ProcessEvent ( pFnStopDevices, &StopDevices_Parms, NULL );
};

// Function TgGame.TgAIController.UseDevices
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventUseDevices ( )
{
	static UFunction* pFnUseDevices = NULL;

	if ( ! pFnUseDevices )
		pFnUseDevices = (UFunction*) UObject::GObjObjects()->Data[ 32119 ];

	ATgAIController_eventUseDevices_Parms UseDevices_Parms;

	this->ProcessEvent ( pFnUseDevices, &UseDevices_Parms, NULL );
};

// Function TgGame.TgAIController.GetTargetAngle
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::eventGetTargetAngle ( )
{
	static UFunction* pFnGetTargetAngle = NULL;

	if ( ! pFnGetTargetAngle )
		pFnGetTargetAngle = (UFunction*) UObject::GObjObjects()->Data[ 32115 ];

	ATgAIController_eventGetTargetAngle_Parms GetTargetAngle_Parms;

	this->ProcessEvent ( pFnGetTargetAngle, &GetTargetAngle_Parms, NULL );

	return GetTargetAngle_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SetFocus
// [0x00020002] 
// Parameters infos:
// int                            nLookAtCode                    ( CPF_Parm )

void ATgAIController::SetFocus ( int nLookAtCode )
{
	static UFunction* pFnSetFocus = NULL;

	if ( ! pFnSetFocus )
		pFnSetFocus = (UFunction*) UObject::GObjObjects()->Data[ 32108 ];

	ATgAIController_execSetFocus_Parms SetFocus_Parms;
	SetFocus_Parms.nLookAtCode = nLookAtCode;

	this->ProcessEvent ( pFnSetFocus, &SetFocus_Parms, NULL );
};

// Function TgGame.TgAIController.CheckSelfDestruct
// [0x00020002] 
// Parameters infos:

void ATgAIController::CheckSelfDestruct ( )
{
	static UFunction* pFnCheckSelfDestruct = NULL;

	if ( ! pFnCheckSelfDestruct )
		pFnCheckSelfDestruct = (UFunction*) UObject::GObjObjects()->Data[ 32106 ];

	ATgAIController_execCheckSelfDestruct_Parms CheckSelfDestruct_Parms;

	this->ProcessEvent ( pFnCheckSelfDestruct, &CheckSelfDestruct_Parms, NULL );
};

// Function TgGame.TgAIController.Suicide
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventSuicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 32105 ];

	ATgAIController_eventSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function TgGame.TgAIController.CheckContinuousFire
// [0x00020002] 
// Parameters infos:

void ATgAIController::CheckContinuousFire ( )
{
	static UFunction* pFnCheckContinuousFire = NULL;

	if ( ! pFnCheckContinuousFire )
		pFnCheckContinuousFire = (UFunction*) UObject::GObjObjects()->Data[ 32102 ];

	ATgAIController_execCheckContinuousFire_Parms CheckContinuousFire_Parms;

	this->ProcessEvent ( pFnCheckContinuousFire, &CheckContinuousFire_Parms, NULL );
};

// Function TgGame.TgAIController.UsingDevice
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::UsingDevice ( )
{
	static UFunction* pFnUsingDevice = NULL;

	if ( ! pFnUsingDevice )
		pFnUsingDevice = (UFunction*) UObject::GObjObjects()->Data[ 32100 ];

	ATgAIController_execUsingDevice_Parms UsingDevice_Parms;

	this->ProcessEvent ( pFnUsingDevice, &UsingDevice_Parms, NULL );

	return UsingDevice_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SetWhatToDoNext
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nMovementCode                  ( CPF_OptionalParm | CPF_Parm )
// int                            nMoveDestination               ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::eventSetWhatToDoNext ( int nMovementCode, int nMoveDestination )
{
	static UFunction* pFnSetWhatToDoNext = NULL;

	if ( ! pFnSetWhatToDoNext )
		pFnSetWhatToDoNext = (UFunction*) UObject::GObjObjects()->Data[ 32092 ];

	ATgAIController_eventSetWhatToDoNext_Parms SetWhatToDoNext_Parms;
	SetWhatToDoNext_Parms.nMovementCode = nMovementCode;
	SetWhatToDoNext_Parms.nMoveDestination = nMoveDestination;

	this->ProcessEvent ( pFnSetWhatToDoNext, &SetWhatToDoNext_Parms, NULL );
};

// Function TgGame.TgAIController.WhatToDoNext
// [0x00020002] 
// Parameters infos:

void ATgAIController::WhatToDoNext ( )
{
	static UFunction* pFnWhatToDoNext = NULL;

	if ( ! pFnWhatToDoNext )
		pFnWhatToDoNext = (UFunction*) UObject::GObjObjects()->Data[ 32088 ];

	ATgAIController_execWhatToDoNext_Parms WhatToDoNext_Parms;

	this->ProcessEvent ( pFnWhatToDoNext, &WhatToDoNext_Parms, NULL );
};

// Function TgGame.TgAIController.CheckDestinationRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CheckDestinationRange ( )
{
	static UFunction* pFnCheckDestinationRange = NULL;

	if ( ! pFnCheckDestinationRange )
		pFnCheckDestinationRange = (UFunction*) UObject::GObjObjects()->Data[ 32084 ];

	ATgAIController_execCheckDestinationRange_Parms CheckDestinationRange_Parms;

	this->ProcessEvent ( pFnCheckDestinationRange, &CheckDestinationRange_Parms, NULL );

	return CheckDestinationRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckLocationRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CheckLocationRange ( )
{
	static UFunction* pFnCheckLocationRange = NULL;

	if ( ! pFnCheckLocationRange )
		pFnCheckLocationRange = (UFunction*) UObject::GObjObjects()->Data[ 32081 ];

	ATgAIController_execCheckLocationRange_Parms CheckLocationRange_Parms;

	this->ProcessEvent ( pFnCheckLocationRange, &CheckLocationRange_Parms, NULL );

	return CheckLocationRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.Regenerate
// [0x00020002] 
// Parameters infos:

void ATgAIController::Regenerate ( )
{
	static UFunction* pFnRegenerate = NULL;

	if ( ! pFnRegenerate )
		pFnRegenerate = (UFunction*) UObject::GObjObjects()->Data[ 32074 ];

	ATgAIController_execRegenerate_Parms Regenerate_Parms;

	this->ProcessEvent ( pFnRegenerate, &Regenerate_Parms, NULL );
};

// Function TgGame.TgAIController.MovementUpdate
// [0x00020002] 
// Parameters infos:

void ATgAIController::MovementUpdate ( )
{
	static UFunction* pFnMovementUpdate = NULL;

	if ( ! pFnMovementUpdate )
		pFnMovementUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32073 ];

	ATgAIController_execMovementUpdate_Parms MovementUpdate_Parms;

	this->ProcessEvent ( pFnMovementUpdate, &MovementUpdate_Parms, NULL );
};

// Function TgGame.TgAIController.GetSpreadLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgAIController::GetSpreadLocation ( )
{
	static UFunction* pFnGetSpreadLocation = NULL;

	if ( ! pFnGetSpreadLocation )
		pFnGetSpreadLocation = (UFunction*) UObject::GObjObjects()->Data[ 32063 ];

	ATgAIController_execGetSpreadLocation_Parms GetSpreadLocation_Parms;

	this->ProcessEvent ( pFnGetSpreadLocation, &GetSpreadLocation_Parms, NULL );

	return GetSpreadLocation_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetBackstepLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFarBackup                     ( CPF_Parm )

struct FVector ATgAIController::GetBackstepLocation ( unsigned long bFarBackup )
{
	static UFunction* pFnGetBackstepLocation = NULL;

	if ( ! pFnGetBackstepLocation )
		pFnGetBackstepLocation = (UFunction*) UObject::GObjObjects()->Data[ 32056 ];

	ATgAIController_execGetBackstepLocation_Parms GetBackstepLocation_Parms;
	GetBackstepLocation_Parms.bFarBackup = bFarBackup;

	this->ProcessEvent ( pFnGetBackstepLocation, &GetBackstepLocation_Parms, NULL );

	return GetBackstepLocation_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetRandomDestination
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Dist                           ( CPF_Parm )

struct FVector ATgAIController::GetRandomDestination ( float Dist )
{
	static UFunction* pFnGetRandomDestination = NULL;

	if ( ! pFnGetRandomDestination )
		pFnGetRandomDestination = (UFunction*) UObject::GObjObjects()->Data[ 32050 ];

	ATgAIController_execGetRandomDestination_Parms GetRandomDestination_Parms;
	GetRandomDestination_Parms.Dist = Dist;

	this->ProcessEvent ( pFnGetRandomDestination, &GetRandomDestination_Parms, NULL );

	return GetRandomDestination_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetCircleEnemyLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgAIController::GetCircleEnemyLocation ( )
{
	static UFunction* pFnGetCircleEnemyLocation = NULL;

	if ( ! pFnGetCircleEnemyLocation )
		pFnGetCircleEnemyLocation = (UFunction*) UObject::GObjObjects()->Data[ 32045 ];

	ATgAIController_execGetCircleEnemyLocation_Parms GetCircleEnemyLocation_Parms;

	this->ProcessEvent ( pFnGetCircleEnemyLocation, &GetCircleEnemyLocation_Parms, NULL );

	return GetCircleEnemyLocation_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsStuck
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsStuck ( )
{
	static UFunction* pFnIsStuck = NULL;

	if ( ! pFnIsStuck )
		pFnIsStuck = (UFunction*) UObject::GObjObjects()->Data[ 32041 ];

	ATgAIController_execIsStuck_Parms IsStuck_Parms;

	this->ProcessEvent ( pFnIsStuck, &IsStuck_Parms, NULL );

	return IsStuck_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetObjectivePath
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgAIController::GetObjectivePath ( )
{
	static UFunction* pFnGetObjectivePath = NULL;

	if ( ! pFnGetObjectivePath )
		pFnGetObjectivePath = (UFunction*) UObject::GObjObjects()->Data[ 32035 ];

	ATgAIController_execGetObjectivePath_Parms GetObjectivePath_Parms;

	this->ProcessEvent ( pFnGetObjectivePath, &GetObjectivePath_Parms, NULL );

	return GetObjectivePath_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetObjectiveNav
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )

class AActor* ATgAIController::GetObjectiveNav ( unsigned long bEnemy )
{
	static UFunction* pFnGetObjectiveNav = NULL;

	if ( ! pFnGetObjectiveNav )
		pFnGetObjectiveNav = (UFunction*) UObject::GObjObjects()->Data[ 32024 ];

	ATgAIController_execGetObjectiveNav_Parms GetObjectiveNav_Parms;
	GetObjectiveNav_Parms.bEnemy = bEnemy;

	this->ProcessEvent ( pFnGetObjectiveNav, &GetObjectiveNav_Parms, NULL );

	return GetObjectiveNav_Parms.ReturnValue;
};

// Function TgGame.TgAIController.StopHibernating
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::StopHibernating ( )
{
	static UFunction* pFnStopHibernating = NULL;

	if ( ! pFnStopHibernating )
		pFnStopHibernating = (UFunction*) UObject::GObjObjects()->Data[ 32022 ];

	ATgAIController_execStopHibernating_Parms StopHibernating_Parms;

	this->ProcessEvent ( pFnStopHibernating, &StopHibernating_Parms, NULL );

	return StopHibernating_Parms.ReturnValue;
};

// Function TgGame.TgAIController.ExecActionTest
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nActionTest                    ( CPF_Parm )

float ATgAIController::eventExecActionTest ( int nActionTest )
{
	static UFunction* pFnExecActionTest = NULL;

	if ( ! pFnExecActionTest )
		pFnExecActionTest = (UFunction*) UObject::GObjObjects()->Data[ 32019 ];

	ATgAIController_eventExecActionTest_Parms ExecActionTest_Parms;
	ExecActionTest_Parms.nActionTest = nActionTest;

	this->ProcessEvent ( pFnExecActionTest, &ExecActionTest_Parms, NULL );

	return ExecActionTest_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NotifyDamagedTarget
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )

void ATgAIController::NotifyDamagedTarget ( class ATgPawn* TargetPawn )
{
	static UFunction* pFnNotifyDamagedTarget = NULL;

	if ( ! pFnNotifyDamagedTarget )
		pFnNotifyDamagedTarget = (UFunction*) UObject::GObjObjects()->Data[ 32017 ];

	ATgAIController_execNotifyDamagedTarget_Parms NotifyDamagedTarget_Parms;
	NotifyDamagedTarget_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnNotifyDamagedTarget, &NotifyDamagedTarget_Parms, NULL );
};

// Function TgGame.TgAIController.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ATgAIController::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 32014 ];

	ATgAIController_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function TgGame.TgAIController.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgAIController::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 32010 ];

	ATgAIController_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgAIController.OnTriggerBots
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_TriggerBots*   Action                         ( CPF_Parm )

void ATgAIController::OnTriggerBots ( class UTgSeqAct_TriggerBots* Action )
{
	static UFunction* pFnOnTriggerBots = NULL;

	if ( ! pFnOnTriggerBots )
		pFnOnTriggerBots = (UFunction*) UObject::GObjObjects()->Data[ 32008 ];

	ATgAIController_execOnTriggerBots_Parms OnTriggerBots_Parms;
	OnTriggerBots_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTriggerBots, &OnTriggerBots_Parms, NULL );
};

// Function TgGame.TgAIController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ATgAIController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 31996 ];

	ATgAIController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function TgGame.TgAIController.HearNoise
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 31991 ];

	ATgAIController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function TgGame.TgAIController.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   SeenPlayer                     ( CPF_Parm )

void ATgAIController::eventSeePlayer ( class APawn* SeenPlayer )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 31988 ];

	ATgAIController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.SeenPlayer = SeenPlayer;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function TgGame.TgAIController.Falling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgAIController::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 31987 ];

	ATgAIController_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function TgGame.TgAIController.NotifyHitWall
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool ATgAIController::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 31979 ];

	ATgAIController_eventNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NotifyBump
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ATgAIController::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 31975 ];

	ATgAIController_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetHighestThreat
// [0x00020002] 
// Parameters infos:

void ATgAIController::TargetHighestThreat ( )
{
	static UFunction* pFnTargetHighestThreat = NULL;

	if ( ! pFnTargetHighestThreat )
		pFnTargetHighestThreat = (UFunction*) UObject::GObjObjects()->Data[ 31973 ];

	ATgAIController_execTargetHighestThreat_Parms TargetHighestThreat_Parms;

	this->ProcessEvent ( pFnTargetHighestThreat, &TargetHighestThreat_Parms, NULL );
};

// Function TgGame.TgAIController.OnPhaseChange
// [0x00020002] 
// Parameters infos:

void ATgAIController::OnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 31972 ];

	ATgAIController_execOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgAIController.OnEnterCombat
// [0x00020002] 
// Parameters infos:

void ATgAIController::OnEnterCombat ( )
{
	static UFunction* pFnOnEnterCombat = NULL;

	if ( ! pFnOnEnterCombat )
		pFnOnEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 31971 ];

	ATgAIController_execOnEnterCombat_Parms OnEnterCombat_Parms;

	this->ProcessEvent ( pFnOnEnterCombat, &OnEnterCombat_Parms, NULL );
};

// Function TgGame.TgAIController.OnExitCombat
// [0x00020002] 
// Parameters infos:

void ATgAIController::OnExitCombat ( )
{
	static UFunction* pFnOnExitCombat = NULL;

	if ( ! pFnOnExitCombat )
		pFnOnExitCombat = (UFunction*) UObject::GObjObjects()->Data[ 31970 ];

	ATgAIController_execOnExitCombat_Parms OnExitCombat_Parms;

	this->ProcessEvent ( pFnOnExitCombat, &OnExitCombat_Parms, NULL );
};

// Function TgGame.TgAIController.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void ATgAIController::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 31967 ];

	ATgAIController_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function TgGame.TgAIController.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ATgAIController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 31964 ];

	ATgAIController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function TgGame.TgAIController.Possess
// [0x00024002] 
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )
// unsigned long                  bIgnoreTouchEvent              ( CPF_OptionalParm | CPF_Parm )

void ATgAIController::Possess ( class APawn* aPawn, unsigned long bVehicleTransition, unsigned long bIgnoreTouchEvent )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 31960 ];

	ATgAIController_execPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;
	Possess_Parms.bIgnoreTouchEvent = bIgnoreTouchEvent;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function TgGame.TgAIController.GetBossRoomAlarmBotCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetBossRoomAlarmBotCount ( )
{
	static UFunction* pFnGetBossRoomAlarmBotCount = NULL;

	if ( ! pFnGetBossRoomAlarmBotCount )
		pFnGetBossRoomAlarmBotCount = (UFunction*) UObject::GObjObjects()->Data[ 31958 ];

	ATgAIController_execGetBossRoomAlarmBotCount_Parms GetBossRoomAlarmBotCount_Parms;

	pFnGetBossRoomAlarmBotCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBossRoomAlarmBotCount, &GetBossRoomAlarmBotCount_Parms, NULL );

	pFnGetBossRoomAlarmBotCount->FunctionFlags |= 0x400;

	return GetBossRoomAlarmBotCount_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetBossRoomHumanEnemyCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetBossRoomHumanEnemyCount ( )
{
	static UFunction* pFnGetBossRoomHumanEnemyCount = NULL;

	if ( ! pFnGetBossRoomHumanEnemyCount )
		pFnGetBossRoomHumanEnemyCount = (UFunction*) UObject::GObjObjects()->Data[ 31956 ];

	ATgAIController_execGetBossRoomHumanEnemyCount_Parms GetBossRoomHumanEnemyCount_Parms;

	pFnGetBossRoomHumanEnemyCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBossRoomHumanEnemyCount, &GetBossRoomHumanEnemyCount_Parms, NULL );

	pFnGetBossRoomHumanEnemyCount->FunctionFlags |= 0x400;

	return GetBossRoomHumanEnemyCount_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetHealthRatio
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::TargetHealthRatio ( )
{
	static UFunction* pFnTargetHealthRatio = NULL;

	if ( ! pFnTargetHealthRatio )
		pFnTargetHealthRatio = (UFunction*) UObject::GObjObjects()->Data[ 31954 ];

	ATgAIController_execTargetHealthRatio_Parms TargetHealthRatio_Parms;

	pFnTargetHealthRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetHealthRatio, &TargetHealthRatio_Parms, NULL );

	pFnTargetHealthRatio->FunctionFlags |= 0x400;

	return TargetHealthRatio_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FriendToEnemyRatio
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::FriendToEnemyRatio ( )
{
	static UFunction* pFnFriendToEnemyRatio = NULL;

	if ( ! pFnFriendToEnemyRatio )
		pFnFriendToEnemyRatio = (UFunction*) UObject::GObjObjects()->Data[ 31952 ];

	ATgAIController_execFriendToEnemyRatio_Parms FriendToEnemyRatio_Parms;

	pFnFriendToEnemyRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFriendToEnemyRatio, &FriendToEnemyRatio_Parms, NULL );

	pFnFriendToEnemyRatio->FunctionFlags |= 0x400;

	return FriendToEnemyRatio_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NumFriendsInRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRange                         ( CPF_Parm )

float ATgAIController::NumFriendsInRange ( int nRange )
{
	static UFunction* pFnNumFriendsInRange = NULL;

	if ( ! pFnNumFriendsInRange )
		pFnNumFriendsInRange = (UFunction*) UObject::GObjObjects()->Data[ 31949 ];

	ATgAIController_execNumFriendsInRange_Parms NumFriendsInRange_Parms;
	NumFriendsInRange_Parms.nRange = nRange;

	pFnNumFriendsInRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNumFriendsInRange, &NumFriendsInRange_Parms, NULL );

	pFnNumFriendsInRange->FunctionFlags |= 0x400;

	return NumFriendsInRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NumHumanFriends
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::NumHumanFriends ( )
{
	static UFunction* pFnNumHumanFriends = NULL;

	if ( ! pFnNumHumanFriends )
		pFnNumHumanFriends = (UFunction*) UObject::GObjObjects()->Data[ 31947 ];

	ATgAIController_execNumHumanFriends_Parms NumHumanFriends_Parms;

	pFnNumHumanFriends->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNumHumanFriends, &NumHumanFriends_Parms, NULL );

	pFnNumHumanFriends->FunctionFlags |= 0x400;

	return NumHumanFriends_Parms.ReturnValue;
};

// Function TgGame.TgAIController.EnemyRecentlyUnstealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::EnemyRecentlyUnstealthed ( )
{
	static UFunction* pFnEnemyRecentlyUnstealthed = NULL;

	if ( ! pFnEnemyRecentlyUnstealthed )
		pFnEnemyRecentlyUnstealthed = (UFunction*) UObject::GObjObjects()->Data[ 31945 ];

	ATgAIController_execEnemyRecentlyUnstealthed_Parms EnemyRecentlyUnstealthed_Parms;

	pFnEnemyRecentlyUnstealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnemyRecentlyUnstealthed, &EnemyRecentlyUnstealthed_Parms, NULL );

	pFnEnemyRecentlyUnstealthed->FunctionFlags |= 0x400;

	return EnemyRecentlyUnstealthed_Parms.ReturnValue;
};

// Function TgGame.TgAIController.WeakestFriendHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPhysicalType                  ( CPF_Parm )

float ATgAIController::WeakestFriendHealth ( int nPhysicalType )
{
	static UFunction* pFnWeakestFriendHealth = NULL;

	if ( ! pFnWeakestFriendHealth )
		pFnWeakestFriendHealth = (UFunction*) UObject::GObjObjects()->Data[ 31942 ];

	ATgAIController_execWeakestFriendHealth_Parms WeakestFriendHealth_Parms;
	WeakestFriendHealth_Parms.nPhysicalType = nPhysicalType;

	pFnWeakestFriendHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWeakestFriendHealth, &WeakestFriendHealth_Parms, NULL );

	pFnWeakestFriendHealth->FunctionFlags |= 0x400;

	return WeakestFriendHealth_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetIsProfileType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nProfileType                   ( CPF_Parm )

bool ATgAIController::TargetIsProfileType ( int nProfileType )
{
	static UFunction* pFnTargetIsProfileType = NULL;

	if ( ! pFnTargetIsProfileType )
		pFnTargetIsProfileType = (UFunction*) UObject::GObjObjects()->Data[ 31939 ];

	ATgAIController_execTargetIsProfileType_Parms TargetIsProfileType_Parms;
	TargetIsProfileType_Parms.nProfileType = nProfileType;

	pFnTargetIsProfileType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetIsProfileType, &TargetIsProfileType_Parms, NULL );

	pFnTargetIsProfileType->FunctionFlags |= 0x400;

	return TargetIsProfileType_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsBehindTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsBehindTarget ( )
{
	static UFunction* pFnIsBehindTarget = NULL;

	if ( ! pFnIsBehindTarget )
		pFnIsBehindTarget = (UFunction*) UObject::GObjObjects()->Data[ 31937 ];

	ATgAIController_execIsBehindTarget_Parms IsBehindTarget_Parms;

	pFnIsBehindTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBehindTarget, &IsBehindTarget_Parms, NULL );

	pFnIsBehindTarget->FunctionFlags |= 0x400;

	return IsBehindTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsTargetInMeleeeAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsTargetInMeleeeAttack ( )
{
	static UFunction* pFnIsTargetInMeleeeAttack = NULL;

	if ( ! pFnIsTargetInMeleeeAttack )
		pFnIsTargetInMeleeeAttack = (UFunction*) UObject::GObjObjects()->Data[ 31935 ];

	ATgAIController_execIsTargetInMeleeeAttack_Parms IsTargetInMeleeeAttack_Parms;

	pFnIsTargetInMeleeeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetInMeleeeAttack, &IsTargetInMeleeeAttack_Parms, NULL );

	pFnIsTargetInMeleeeAttack->FunctionFlags |= 0x400;

	return IsTargetInMeleeeAttack_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsTargetMeleeEquipped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsTargetMeleeEquipped ( )
{
	static UFunction* pFnIsTargetMeleeEquipped = NULL;

	if ( ! pFnIsTargetMeleeEquipped )
		pFnIsTargetMeleeEquipped = (UFunction*) UObject::GObjObjects()->Data[ 31933 ];

	ATgAIController_execIsTargetMeleeEquipped_Parms IsTargetMeleeEquipped_Parms;

	pFnIsTargetMeleeEquipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetMeleeEquipped, &IsTargetMeleeEquipped_Parms, NULL );

	pFnIsTargetMeleeEquipped->FunctionFlags |= 0x400;

	return IsTargetMeleeEquipped_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsTargetBlocking
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsTargetBlocking ( )
{
	static UFunction* pFnIsTargetBlocking = NULL;

	if ( ! pFnIsTargetBlocking )
		pFnIsTargetBlocking = (UFunction*) UObject::GObjObjects()->Data[ 31931 ];

	ATgAIController_execIsTargetBlocking_Parms IsTargetBlocking_Parms;

	pFnIsTargetBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetBlocking, &IsTargetBlocking_Parms, NULL );

	pFnIsTargetBlocking->FunctionFlags |= 0x400;

	return IsTargetBlocking_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsTargetStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsTargetStealthed ( )
{
	static UFunction* pFnIsTargetStealthed = NULL;

	if ( ! pFnIsTargetStealthed )
		pFnIsTargetStealthed = (UFunction*) UObject::GObjObjects()->Data[ 31929 ];

	ATgAIController_execIsTargetStealthed_Parms IsTargetStealthed_Parms;

	pFnIsTargetStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetStealthed, &IsTargetStealthed_Parms, NULL );

	pFnIsTargetStealthed->FunctionFlags |= 0x400;

	return IsTargetStealthed_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsTargetStunned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsTargetStunned ( )
{
	static UFunction* pFnIsTargetStunned = NULL;

	if ( ! pFnIsTargetStunned )
		pFnIsTargetStunned = (UFunction*) UObject::GObjObjects()->Data[ 31927 ];

	ATgAIController_execIsTargetStunned_Parms IsTargetStunned_Parms;

	pFnIsTargetStunned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetStunned, &IsTargetStunned_Parms, NULL );

	pFnIsTargetStunned->FunctionFlags |= 0x400;

	return IsTargetStunned_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetIsReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::TargetIsReachable ( )
{
	static UFunction* pFnTargetIsReachable = NULL;

	if ( ! pFnTargetIsReachable )
		pFnTargetIsReachable = (UFunction*) UObject::GObjObjects()->Data[ 31925 ];

	ATgAIController_execTargetIsReachable_Parms TargetIsReachable_Parms;

	pFnTargetIsReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetIsReachable, &TargetIsReachable_Parms, NULL );

	pFnTargetIsReachable->FunctionFlags |= 0x400;

	return TargetIsReachable_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FindWeakestTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )
// int                            nPhysicalType                  ( CPF_Parm )

class ATgPawn* ATgAIController::FindWeakestTarget ( unsigned long bEnemy, int nPhysicalType )
{
	static UFunction* pFnFindWeakestTarget = NULL;

	if ( ! pFnFindWeakestTarget )
		pFnFindWeakestTarget = (UFunction*) UObject::GObjObjects()->Data[ 31921 ];

	ATgAIController_execFindWeakestTarget_Parms FindWeakestTarget_Parms;
	FindWeakestTarget_Parms.bEnemy = bEnemy;
	FindWeakestTarget_Parms.nPhysicalType = nPhysicalType;

	pFnFindWeakestTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindWeakestTarget, &FindWeakestTarget_Parms, NULL );

	pFnFindWeakestTarget->FunctionFlags |= 0x400;

	return FindWeakestTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FindClosestTaunter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgAIController::FindClosestTaunter ( )
{
	static UFunction* pFnFindClosestTaunter = NULL;

	if ( ! pFnFindClosestTaunter )
		pFnFindClosestTaunter = (UFunction*) UObject::GObjObjects()->Data[ 31919 ];

	ATgAIController_execFindClosestTaunter_Parms FindClosestTaunter_Parms;

	pFnFindClosestTaunter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestTaunter, &FindClosestTaunter_Parms, NULL );

	pFnFindClosestTaunter->FunctionFlags |= 0x400;

	return FindClosestTaunter_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FindClosestTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )
// int                            nPhysicalType                  ( CPF_Parm )
// int                            nProfileType                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreLos                     ( CPF_OptionalParm | CPF_Parm )

class ATgPawn* ATgAIController::FindClosestTarget ( unsigned long bEnemy, int nPhysicalType, int nProfileType, unsigned long bIgnoreLos )
{
	static UFunction* pFnFindClosestTarget = NULL;

	if ( ! pFnFindClosestTarget )
		pFnFindClosestTarget = (UFunction*) UObject::GObjObjects()->Data[ 31913 ];

	ATgAIController_execFindClosestTarget_Parms FindClosestTarget_Parms;
	FindClosestTarget_Parms.bEnemy = bEnemy;
	FindClosestTarget_Parms.nPhysicalType = nPhysicalType;
	FindClosestTarget_Parms.nProfileType = nProfileType;
	FindClosestTarget_Parms.bIgnoreLos = bIgnoreLos;

	pFnFindClosestTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestTarget, &FindClosestTarget_Parms, NULL );

	pFnFindClosestTarget->FunctionFlags |= 0x400;

	return FindClosestTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NearestDeployable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDeployable*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )
// unsigned long                  bFirst                         ( CPF_Parm )

class ATgDeployable* ATgAIController::NearestDeployable ( unsigned long bEnemy, unsigned long bFirst )
{
	static UFunction* pFnNearestDeployable = NULL;

	if ( ! pFnNearestDeployable )
		pFnNearestDeployable = (UFunction*) UObject::GObjObjects()->Data[ 31909 ];

	ATgAIController_execNearestDeployable_Parms NearestDeployable_Parms;
	NearestDeployable_Parms.bEnemy = bEnemy;
	NearestDeployable_Parms.bFirst = bFirst;

	pFnNearestDeployable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNearestDeployable, &NearestDeployable_Parms, NULL );

	pFnNearestDeployable->FunctionFlags |= 0x400;

	return NearestDeployable_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsDeployableDead
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDeployable*           Deployable                     ( CPF_Parm )

bool ATgAIController::IsDeployableDead ( class ATgDeployable* Deployable )
{
	static UFunction* pFnIsDeployableDead = NULL;

	if ( ! pFnIsDeployableDead )
		pFnIsDeployableDead = (UFunction*) UObject::GObjObjects()->Data[ 31906 ];

	ATgAIController_execIsDeployableDead_Parms IsDeployableDead_Parms;
	IsDeployableDead_Parms.Deployable = Deployable;

	pFnIsDeployableDead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDeployableDead, &IsDeployableDead_Parms, NULL );

	pFnIsDeployableDead->FunctionFlags |= 0x400;

	return IsDeployableDead_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsPawnDead
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 DeadPawn                       ( CPF_Parm )

bool ATgAIController::IsPawnDead ( class ATgPawn* DeadPawn )
{
	static UFunction* pFnIsPawnDead = NULL;

	if ( ! pFnIsPawnDead )
		pFnIsPawnDead = (UFunction*) UObject::GObjObjects()->Data[ 31903 ];

	ATgAIController_execIsPawnDead_Parms IsPawnDead_Parms;
	IsPawnDead_Parms.DeadPawn = DeadPawn;

	pFnIsPawnDead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnDead, &IsPawnDead_Parms, NULL );

	pFnIsPawnDead->FunctionFlags |= 0x400;

	return IsPawnDead_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckForDeadTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::CheckForDeadTarget ( )
{
	static UFunction* pFnCheckForDeadTarget = NULL;

	if ( ! pFnCheckForDeadTarget )
		pFnCheckForDeadTarget = (UFunction*) UObject::GObjObjects()->Data[ 31902 ];

	ATgAIController_execCheckForDeadTarget_Parms CheckForDeadTarget_Parms;

	pFnCheckForDeadTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForDeadTarget, &CheckForDeadTarget_Parms, NULL );

	pFnCheckForDeadTarget->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.GetTargetProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )

float ATgAIController::GetTargetProperty ( int nPropertyId )
{
	static UFunction* pFnGetTargetProperty = NULL;

	if ( ! pFnGetTargetProperty )
		pFnGetTargetProperty = (UFunction*) UObject::GObjObjects()->Data[ 31899 ];

	ATgAIController_execGetTargetProperty_Parms GetTargetProperty_Parms;
	GetTargetProperty_Parms.nPropertyId = nPropertyId;

	pFnGetTargetProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetProperty, &GetTargetProperty_Parms, NULL );

	pFnGetTargetProperty->FunctionFlags |= 0x400;

	return GetTargetProperty_Parms.ReturnValue;
};

// Function TgGame.TgAIController.InvalidDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDest                          ( CPF_Parm )

bool ATgAIController::InvalidDestination ( struct FVector vDest )
{
	static UFunction* pFnInvalidDestination = NULL;

	if ( ! pFnInvalidDestination )
		pFnInvalidDestination = (UFunction*) UObject::GObjObjects()->Data[ 31896 ];

	ATgAIController_execInvalidDestination_Parms InvalidDestination_Parms;
	memcpy ( &InvalidDestination_Parms.vDest, &vDest, 0xC );

	pFnInvalidDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvalidDestination, &InvalidDestination_Parms, NULL );

	pFnInvalidDestination->FunctionFlags |= 0x400;

	return InvalidDestination_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsCliff
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDest                          ( CPF_Parm )

bool ATgAIController::IsCliff ( struct FVector vDest )
{
	static UFunction* pFnIsCliff = NULL;

	if ( ! pFnIsCliff )
		pFnIsCliff = (UFunction*) UObject::GObjObjects()->Data[ 31893 ];

	ATgAIController_execIsCliff_Parms IsCliff_Parms;
	memcpy ( &IsCliff_Parms.vDest, &vDest, 0xC );

	pFnIsCliff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCliff, &IsCliff_Parms, NULL );

	pFnIsCliff->FunctionFlags |= 0x400;

	return IsCliff_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtNavPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Point                          ( CPF_Parm )

bool ATgAIController::AtNavPoint ( class ANavigationPoint* Point )
{
	static UFunction* pFnAtNavPoint = NULL;

	if ( ! pFnAtNavPoint )
		pFnAtNavPoint = (UFunction*) UObject::GObjObjects()->Data[ 31890 ];

	ATgAIController_execAtNavPoint_Parms AtNavPoint_Parms;
	AtNavPoint_Parms.Point = Point;

	pFnAtNavPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtNavPoint, &AtNavPoint_Parms, NULL );

	pFnAtNavPoint->FunctionFlags |= 0x400;

	return AtNavPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )

bool ATgAIController::AtLocation ( struct FVector vLocation )
{
	static UFunction* pFnAtLocation = NULL;

	if ( ! pFnAtLocation )
		pFnAtLocation = (UFunction*) UObject::GObjObjects()->Data[ 31887 ];

	ATgAIController_execAtLocation_Parms AtLocation_Parms;
	memcpy ( &AtLocation_Parms.vLocation, &vLocation, 0xC );

	pFnAtLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtLocation, &AtLocation_Parms, NULL );

	pFnAtLocation->FunctionFlags |= 0x400;

	return AtLocation_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::AtCover ( )
{
	static UFunction* pFnAtCover = NULL;

	if ( ! pFnAtCover )
		pFnAtCover = (UFunction*) UObject::GObjObjects()->Data[ 31885 ];

	ATgAIController_execAtCover_Parms AtCover_Parms;

	pFnAtCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtCover, &AtCover_Parms, NULL );

	pFnAtCover->FunctionFlags |= 0x400;

	return AtCover_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pActor                         ( CPF_Parm )

bool ATgAIController::AtActor ( class AActor* pActor )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 31882 ];

	ATgAIController_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.pActor = pActor;

	pFnAtActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	pFnAtActor->FunctionFlags |= 0x400;

	return AtActor_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtActionPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Action                         ( CPF_Parm )

bool ATgAIController::AtActionPoint ( int Action )
{
	static UFunction* pFnAtActionPoint = NULL;

	if ( ! pFnAtActionPoint )
		pFnAtActionPoint = (UFunction*) UObject::GObjObjects()->Data[ 31879 ];

	ATgAIController_execAtActionPoint_Parms AtActionPoint_Parms;
	AtActionPoint_Parms.Action = Action;

	pFnAtActionPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtActionPoint, &AtActionPoint_Parms, NULL );

	pFnAtActionPoint->FunctionFlags |= 0x400;

	return AtActionPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtCoverForTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::AtCoverForTarget ( )
{
	static UFunction* pFnAtCoverForTarget = NULL;

	if ( ! pFnAtCoverForTarget )
		pFnAtCoverForTarget = (UFunction*) UObject::GObjObjects()->Data[ 31877 ];

	ATgAIController_execAtCoverForTarget_Parms AtCoverForTarget_Parms;

	pFnAtCoverForTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtCoverForTarget, &AtCoverForTarget_Parms, NULL );

	pFnAtCoverForTarget->FunctionFlags |= 0x400;

	return AtCoverForTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtCommandDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::AtCommandDestination ( )
{
	static UFunction* pFnAtCommandDestination = NULL;

	if ( ! pFnAtCommandDestination )
		pFnAtCommandDestination = (UFunction*) UObject::GObjObjects()->Data[ 31875 ];

	ATgAIController_execAtCommandDestination_Parms AtCommandDestination_Parms;

	pFnAtCommandDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtCommandDestination, &AtCommandDestination_Parms, NULL );

	pFnAtCommandDestination->FunctionFlags |= 0x400;

	return AtCommandDestination_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromCommandDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromCommandDestination ( )
{
	static UFunction* pFnDistanceFromCommandDestination = NULL;

	if ( ! pFnDistanceFromCommandDestination )
		pFnDistanceFromCommandDestination = (UFunction*) UObject::GObjObjects()->Data[ 31873 ];

	ATgAIController_execDistanceFromCommandDestination_Parms DistanceFromCommandDestination_Parms;

	pFnDistanceFromCommandDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromCommandDestination, &DistanceFromCommandDestination_Parms, NULL );

	pFnDistanceFromCommandDestination->FunctionFlags |= 0x400;

	return DistanceFromCommandDestination_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DestroyCommandBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::DestroyCommandBeacon ( )
{
	static UFunction* pFnDestroyCommandBeacon = NULL;

	if ( ! pFnDestroyCommandBeacon )
		pFnDestroyCommandBeacon = (UFunction*) UObject::GObjObjects()->Data[ 31872 ];

	ATgAIController_execDestroyCommandBeacon_Parms DestroyCommandBeacon_Parms;

	pFnDestroyCommandBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyCommandBeacon, &DestroyCommandBeacon_Parms, NULL );

	pFnDestroyCommandBeacon->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.IsValidCoverForTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgCoverPoint*           Cover                          ( CPF_Parm )

bool ATgAIController::IsValidCoverForTarget ( class ATgCoverPoint* Cover )
{
	static UFunction* pFnIsValidCoverForTarget = NULL;

	if ( ! pFnIsValidCoverForTarget )
		pFnIsValidCoverForTarget = (UFunction*) UObject::GObjObjects()->Data[ 31869 ];

	ATgAIController_execIsValidCoverForTarget_Parms IsValidCoverForTarget_Parms;
	IsValidCoverForTarget_Parms.Cover = Cover;

	pFnIsValidCoverForTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidCoverForTarget, &IsValidCoverForTarget_Parms, NULL );

	pFnIsValidCoverForTarget->FunctionFlags |= 0x400;

	return IsValidCoverForTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromQuickestCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromQuickestCover ( )
{
	static UFunction* pFnDistanceFromQuickestCover = NULL;

	if ( ! pFnDistanceFromQuickestCover )
		pFnDistanceFromQuickestCover = (UFunction*) UObject::GObjObjects()->Data[ 31867 ];

	ATgAIController_execDistanceFromQuickestCover_Parms DistanceFromQuickestCover_Parms;

	pFnDistanceFromQuickestCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromQuickestCover, &DistanceFromQuickestCover_Parms, NULL );

	pFnDistanceFromQuickestCover->FunctionFlags |= 0x400;

	return DistanceFromQuickestCover_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetQuickestCoverForTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgCoverPoint*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseCache                      ( CPF_OptionalParm | CPF_Parm )

class ATgCoverPoint* ATgAIController::GetQuickestCoverForTarget ( unsigned long bUseCache )
{
	static UFunction* pFnGetQuickestCoverForTarget = NULL;

	if ( ! pFnGetQuickestCoverForTarget )
		pFnGetQuickestCoverForTarget = (UFunction*) UObject::GObjObjects()->Data[ 31864 ];

	ATgAIController_execGetQuickestCoverForTarget_Parms GetQuickestCoverForTarget_Parms;
	GetQuickestCoverForTarget_Parms.bUseCache = bUseCache;

	pFnGetQuickestCoverForTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQuickestCoverForTarget, &GetQuickestCoverForTarget_Parms, NULL );

	pFnGetQuickestCoverForTarget->FunctionFlags |= 0x400;

	return GetQuickestCoverForTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetCloserCoverForTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgCoverPoint*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseCache                      ( CPF_OptionalParm | CPF_Parm )

class ATgCoverPoint* ATgAIController::GetCloserCoverForTarget ( unsigned long bUseCache )
{
	static UFunction* pFnGetCloserCoverForTarget = NULL;

	if ( ! pFnGetCloserCoverForTarget )
		pFnGetCloserCoverForTarget = (UFunction*) UObject::GObjObjects()->Data[ 31861 ];

	ATgAIController_execGetCloserCoverForTarget_Parms GetCloserCoverForTarget_Parms;
	GetCloserCoverForTarget_Parms.bUseCache = bUseCache;

	pFnGetCloserCoverForTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCloserCoverForTarget, &GetCloserCoverForTarget_Parms, NULL );

	pFnGetCloserCoverForTarget->FunctionFlags |= 0x400;

	return GetCloserCoverForTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsValidCoverForGoto
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgCoverPoint*           Cover                          ( CPF_Parm )

bool ATgAIController::IsValidCoverForGoto ( class ATgCoverPoint* Cover )
{
	static UFunction* pFnIsValidCoverForGoto = NULL;

	if ( ! pFnIsValidCoverForGoto )
		pFnIsValidCoverForGoto = (UFunction*) UObject::GObjObjects()->Data[ 31858 ];

	ATgAIController_execIsValidCoverForGoto_Parms IsValidCoverForGoto_Parms;
	IsValidCoverForGoto_Parms.Cover = Cover;

	pFnIsValidCoverForGoto->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidCoverForGoto, &IsValidCoverForGoto_Parms, NULL );

	pFnIsValidCoverForGoto->FunctionFlags |= 0x400;

	return IsValidCoverForGoto_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetCloserCoverForGoto
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgCoverPoint*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseCache                      ( CPF_OptionalParm | CPF_Parm )

class ATgCoverPoint* ATgAIController::GetCloserCoverForGoto ( unsigned long bUseCache )
{
	static UFunction* pFnGetCloserCoverForGoto = NULL;

	if ( ! pFnGetCloserCoverForGoto )
		pFnGetCloserCoverForGoto = (UFunction*) UObject::GObjObjects()->Data[ 31855 ];

	ATgAIController_execGetCloserCoverForGoto_Parms GetCloserCoverForGoto_Parms;
	GetCloserCoverForGoto_Parms.bUseCache = bUseCache;

	pFnGetCloserCoverForGoto->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCloserCoverForGoto, &GetCloserCoverForGoto_Parms, NULL );

	pFnGetCloserCoverForGoto->FunctionFlags |= 0x400;

	return GetCloserCoverForGoto_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetClosestCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgCoverPoint*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgCoverPoint* ATgAIController::GetClosestCover ( )
{
	static UFunction* pFnGetClosestCover = NULL;

	if ( ! pFnGetClosestCover )
		pFnGetClosestCover = (UFunction*) UObject::GObjObjects()->Data[ 31853 ];

	ATgAIController_execGetClosestCover_Parms GetClosestCover_Parms;

	pFnGetClosestCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestCover, &GetClosestCover_Parms, NULL );

	pFnGetClosestCover->FunctionFlags |= 0x400;

	return GetClosestCover_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsSquadFollower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsSquadFollower ( )
{
	static UFunction* pFnIsSquadFollower = NULL;

	if ( ! pFnIsSquadFollower )
		pFnIsSquadFollower = (UFunction*) UObject::GObjObjects()->Data[ 31851 ];

	ATgAIController_execIsSquadFollower_Parms IsSquadFollower_Parms;

	pFnIsSquadFollower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSquadFollower, &IsSquadFollower_Parms, NULL );

	pFnIsSquadFollower->FunctionFlags |= 0x400;

	return IsSquadFollower_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsSquadLeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsSquadLeader ( )
{
	static UFunction* pFnIsSquadLeader = NULL;

	if ( ! pFnIsSquadLeader )
		pFnIsSquadLeader = (UFunction*) UObject::GObjObjects()->Data[ 31849 ];

	ATgAIController_execIsSquadLeader_Parms IsSquadLeader_Parms;

	pFnIsSquadLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSquadLeader, &IsSquadLeader_Parms, NULL );

	pFnIsSquadLeader->FunctionFlags |= 0x400;

	return IsSquadLeader_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TimeSinceTargetInLOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::TimeSinceTargetInLOS ( )
{
	static UFunction* pFnTimeSinceTargetInLOS = NULL;

	if ( ! pFnTimeSinceTargetInLOS )
		pFnTimeSinceTargetInLOS = (UFunction*) UObject::GObjObjects()->Data[ 31847 ];

	ATgAIController_execTimeSinceTargetInLOS_Parms TimeSinceTargetInLOS_Parms;

	pFnTimeSinceTargetInLOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTimeSinceTargetInLOS, &TimeSinceTargetInLOS_Parms, NULL );

	pFnTimeSinceTargetInLOS->FunctionFlags |= 0x400;

	return TimeSinceTargetInLOS_Parms.ReturnValue;
};

// Function TgGame.TgAIController.InDriveBy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::InDriveBy ( )
{
	static UFunction* pFnInDriveBy = NULL;

	if ( ! pFnInDriveBy )
		pFnInDriveBy = (UFunction*) UObject::GObjObjects()->Data[ 31845 ];

	ATgAIController_execInDriveBy_Parms InDriveBy_Parms;

	pFnInDriveBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInDriveBy, &InDriveBy_Parms, NULL );

	pFnInDriveBy->FunctionFlags |= 0x400;

	return InDriveBy_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsDeviceReady
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )

bool ATgAIController::IsDeviceReady ( unsigned char eEquipmentSlot )
{
	static UFunction* pFnIsDeviceReady = NULL;

	if ( ! pFnIsDeviceReady )
		pFnIsDeviceReady = (UFunction*) UObject::GObjObjects()->Data[ 31842 ];

	ATgAIController_execIsDeviceReady_Parms IsDeviceReady_Parms;
	IsDeviceReady_Parms.eEquipmentSlot = eEquipmentSlot;

	pFnIsDeviceReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDeviceReady, &IsDeviceReady_Parms, NULL );

	pFnIsDeviceReady->FunctionFlags |= 0x400;

	return IsDeviceReady_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetCurrentObjectivePercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetCurrentObjectivePercent ( )
{
	static UFunction* pFnGetCurrentObjectivePercent = NULL;

	if ( ! pFnGetCurrentObjectivePercent )
		pFnGetCurrentObjectivePercent = (UFunction*) UObject::GObjObjects()->Data[ 31840 ];

	ATgAIController_execGetCurrentObjectivePercent_Parms GetCurrentObjectivePercent_Parms;

	pFnGetCurrentObjectivePercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentObjectivePercent, &GetCurrentObjectivePercent_Parms, NULL );

	pFnGetCurrentObjectivePercent->FunctionFlags |= 0x400;

	return GetCurrentObjectivePercent_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TimeElapsed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fEventTime                     ( CPF_Parm )

float ATgAIController::TimeElapsed ( float fEventTime )
{
	static UFunction* pFnTimeElapsed = NULL;

	if ( ! pFnTimeElapsed )
		pFnTimeElapsed = (UFunction*) UObject::GObjObjects()->Data[ 31837 ];

	ATgAIController_execTimeElapsed_Parms TimeElapsed_Parms;
	TimeElapsed_Parms.fEventTime = fEventTime;

	pFnTimeElapsed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTimeElapsed, &TimeElapsed_Parms, NULL );

	pFnTimeElapsed->FunctionFlags |= 0x400;

	return TimeElapsed_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckLastLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CheckLastLocation ( )
{
	static UFunction* pFnCheckLastLocation = NULL;

	if ( ! pFnCheckLastLocation )
		pFnCheckLastLocation = (UFunction*) UObject::GObjObjects()->Data[ 31835 ];

	ATgAIController_execCheckLastLocation_Parms CheckLastLocation_Parms;

	pFnCheckLastLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLastLocation, &CheckLastLocation_Parms, NULL );

	pFnCheckLastLocation->FunctionFlags |= 0x400;

	return CheckLastLocation_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckLastTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgAIController::CheckLastTarget ( )
{
	static UFunction* pFnCheckLastTarget = NULL;

	if ( ! pFnCheckLastTarget )
		pFnCheckLastTarget = (UFunction*) UObject::GObjObjects()->Data[ 31833 ];

	ATgAIController_execCheckLastTarget_Parms CheckLastTarget_Parms;

	pFnCheckLastTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLastTarget, &CheckLastTarget_Parms, NULL );

	pFnCheckLastTarget->FunctionFlags |= 0x400;

	return CheckLastTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckLastAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CheckLastAttacker ( )
{
	static UFunction* pFnCheckLastAttacker = NULL;

	if ( ! pFnCheckLastAttacker )
		pFnCheckLastAttacker = (UFunction*) UObject::GObjObjects()->Data[ 31831 ];

	ATgAIController_execCheckLastAttacker_Parms CheckLastAttacker_Parms;

	pFnCheckLastAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLastAttacker, &CheckLastAttacker_Parms, NULL );

	pFnCheckLastAttacker->FunctionFlags |= 0x400;

	return CheckLastAttacker_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TimeSinceHearHelpCall
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::TimeSinceHearHelpCall ( )
{
	static UFunction* pFnTimeSinceHearHelpCall = NULL;

	if ( ! pFnTimeSinceHearHelpCall )
		pFnTimeSinceHearHelpCall = (UFunction*) UObject::GObjObjects()->Data[ 31829 ];

	ATgAIController_execTimeSinceHearHelpCall_Parms TimeSinceHearHelpCall_Parms;

	pFnTimeSinceHearHelpCall->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTimeSinceHearHelpCall, &TimeSinceHearHelpCall_Parms, NULL );

	pFnTimeSinceHearHelpCall->FunctionFlags |= 0x400;

	return TimeSinceHearHelpCall_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TimeSinceHearSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::TimeSinceHearSound ( )
{
	static UFunction* pFnTimeSinceHearSound = NULL;

	if ( ! pFnTimeSinceHearSound )
		pFnTimeSinceHearSound = (UFunction*) UObject::GObjObjects()->Data[ 31827 ];

	ATgAIController_execTimeSinceHearSound_Parms TimeSinceHearSound_Parms;

	pFnTimeSinceHearSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTimeSinceHearSound, &TimeSinceHearSound_Parms, NULL );

	pFnTimeSinceHearSound->FunctionFlags |= 0x400;

	return TimeSinceHearSound_Parms.ReturnValue;
};

// Function TgGame.TgAIController.ThreatendedByGrenade
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::ThreatendedByGrenade ( )
{
	static UFunction* pFnThreatendedByGrenade = NULL;

	if ( ! pFnThreatendedByGrenade )
		pFnThreatendedByGrenade = (UFunction*) UObject::GObjObjects()->Data[ 31825 ];

	ATgAIController_execThreatendedByGrenade_Parms ThreatendedByGrenade_Parms;

	pFnThreatendedByGrenade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnThreatendedByGrenade, &ThreatendedByGrenade_Parms, NULL );

	pFnThreatendedByGrenade->FunctionFlags |= 0x400;

	return ThreatendedByGrenade_Parms.ReturnValue;
};

// Function TgGame.TgAIController.RecentAOEDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::RecentAOEDamage ( )
{
	static UFunction* pFnRecentAOEDamage = NULL;

	if ( ! pFnRecentAOEDamage )
		pFnRecentAOEDamage = (UFunction*) UObject::GObjObjects()->Data[ 31823 ];

	ATgAIController_execRecentAOEDamage_Parms RecentAOEDamage_Parms;

	pFnRecentAOEDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecentAOEDamage, &RecentAOEDamage_Parms, NULL );

	pFnRecentAOEDamage->FunctionFlags |= 0x400;

	return RecentAOEDamage_Parms.ReturnValue;
};

// Function TgGame.TgAIController.RecentDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::RecentDamage ( )
{
	static UFunction* pFnRecentDamage = NULL;

	if ( ! pFnRecentDamage )
		pFnRecentDamage = (UFunction*) UObject::GObjObjects()->Data[ 31821 ];

	ATgAIController_execRecentDamage_Parms RecentDamage_Parms;

	pFnRecentDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecentDamage, &RecentDamage_Parms, NULL );

	pFnRecentDamage->FunctionFlags |= 0x400;

	return RecentDamage_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsRecent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fTime                          ( CPF_Parm )

bool ATgAIController::IsRecent ( float fTime )
{
	static UFunction* pFnIsRecent = NULL;

	if ( ! pFnIsRecent )
		pFnIsRecent = (UFunction*) UObject::GObjObjects()->Data[ 31818 ];

	ATgAIController_execIsRecent_Parms IsRecent_Parms;
	IsRecent_Parms.fTime = fTime;

	pFnIsRecent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRecent, &IsRecent_Parms, NULL );

	pFnIsRecent->FunctionFlags |= 0x400;

	return IsRecent_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HasHelp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HasHelp ( )
{
	static UFunction* pFnHasHelp = NULL;

	if ( ! pFnHasHelp )
		pFnHasHelp = (UFunction*) UObject::GObjObjects()->Data[ 31816 ];

	ATgAIController_execHasHelp_Parms HasHelp_Parms;

	pFnHasHelp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasHelp, &HasHelp_Parms, NULL );

	pFnHasHelp->FunctionFlags |= 0x400;

	return HasHelp_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HeardSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HeardSound ( )
{
	static UFunction* pFnHeardSound = NULL;

	if ( ! pFnHeardSound )
		pFnHeardSound = (UFunction*) UObject::GObjObjects()->Data[ 31814 ];

	ATgAIController_execHeardSound_Parms HeardSound_Parms;

	pFnHeardSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHeardSound, &HeardSound_Parms, NULL );

	pFnHeardSound->FunctionFlags |= 0x400;

	return HeardSound_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HelpRequested
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HelpRequested ( )
{
	static UFunction* pFnHelpRequested = NULL;

	if ( ! pFnHelpRequested )
		pFnHelpRequested = (UFunction*) UObject::GObjObjects()->Data[ 31812 ];

	ATgAIController_execHelpRequested_Parms HelpRequested_Parms;

	pFnHelpRequested->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHelpRequested, &HelpRequested_Parms, NULL );

	pFnHelpRequested->FunctionFlags |= 0x400;

	return HelpRequested_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CanBeRepaired
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CanBeRepaired ( )
{
	static UFunction* pFnCanBeRepaired = NULL;

	if ( ! pFnCanBeRepaired )
		pFnCanBeRepaired = (UFunction*) UObject::GObjObjects()->Data[ 31810 ];

	ATgAIController_execCanBeRepaired_Parms CanBeRepaired_Parms;

	pFnCanBeRepaired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeRepaired, &CanBeRepaired_Parms, NULL );

	pFnCanBeRepaired->FunctionFlags |= 0x400;

	return CanBeRepaired_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FriendHasAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::FriendHasAttacker ( )
{
	static UFunction* pFnFriendHasAttacker = NULL;

	if ( ! pFnFriendHasAttacker )
		pFnFriendHasAttacker = (UFunction*) UObject::GObjObjects()->Data[ 31808 ];

	ATgAIController_execFriendHasAttacker_Parms FriendHasAttacker_Parms;

	pFnFriendHasAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFriendHasAttacker, &FriendHasAttacker_Parms, NULL );

	pFnFriendHasAttacker->FunctionFlags |= 0x400;

	return FriendHasAttacker_Parms.ReturnValue;
};

// Function TgGame.TgAIController.FriendHasTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::FriendHasTarget ( )
{
	static UFunction* pFnFriendHasTarget = NULL;

	if ( ! pFnFriendHasTarget )
		pFnFriendHasTarget = (UFunction*) UObject::GObjObjects()->Data[ 31806 ];

	ATgAIController_execFriendHasTarget_Parms FriendHasTarget_Parms;

	pFnFriendHasTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFriendHasTarget, &FriendHasTarget_Parms, NULL );

	pFnFriendHasTarget->FunctionFlags |= 0x400;

	return FriendHasTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsIdle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsIdle ( )
{
	static UFunction* pFnIsIdle = NULL;

	if ( ! pFnIsIdle )
		pFnIsIdle = (UFunction*) UObject::GObjObjects()->Data[ 31804 ];

	ATgAIController_execIsIdle_Parms IsIdle_Parms;

	pFnIsIdle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsIdle, &IsIdle_Parms, NULL );

	pFnIsIdle->FunctionFlags |= 0x400;

	return IsIdle_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsHibernating
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsHibernating ( )
{
	static UFunction* pFnIsHibernating = NULL;

	if ( ! pFnIsHibernating )
		pFnIsHibernating = (UFunction*) UObject::GObjObjects()->Data[ 31802 ];

	ATgAIController_execIsHibernating_Parms IsHibernating_Parms;

	pFnIsHibernating->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHibernating, &IsHibernating_Parms, NULL );

	pFnIsHibernating->FunctionFlags |= 0x400;

	return IsHibernating_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::IsStealthed ( )
{
	static UFunction* pFnIsStealthed = NULL;

	if ( ! pFnIsStealthed )
		pFnIsStealthed = (UFunction*) UObject::GObjObjects()->Data[ 31800 ];

	ATgAIController_execIsStealthed_Parms IsStealthed_Parms;

	pFnIsStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStealthed, &IsStealthed_Parms, NULL );

	pFnIsStealthed->FunctionFlags |= 0x400;

	return IsStealthed_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HasDriveByDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HasDriveByDestination ( )
{
	static UFunction* pFnHasDriveByDestination = NULL;

	if ( ! pFnHasDriveByDestination )
		pFnHasDriveByDestination = (UFunction*) UObject::GObjObjects()->Data[ 31798 ];

	ATgAIController_execHasDriveByDestination_Parms HasDriveByDestination_Parms;

	pFnHasDriveByDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasDriveByDestination, &HasDriveByDestination_Parms, NULL );

	pFnHasDriveByDestination->FunctionFlags |= 0x400;

	return HasDriveByDestination_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HighestThreatInLOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HighestThreatInLOS ( )
{
	static UFunction* pFnHighestThreatInLOS = NULL;

	if ( ! pFnHighestThreatInLOS )
		pFnHighestThreatInLOS = (UFunction*) UObject::GObjObjects()->Data[ 31796 ];

	ATgAIController_execHighestThreatInLOS_Parms HighestThreatInLOS_Parms;

	pFnHighestThreatInLOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHighestThreatInLOS, &HighestThreatInLOS_Parms, NULL );

	pFnHighestThreatInLOS->FunctionFlags |= 0x400;

	return HighestThreatInLOS_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LastAttackerInLOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::LastAttackerInLOS ( )
{
	static UFunction* pFnLastAttackerInLOS = NULL;

	if ( ! pFnLastAttackerInLOS )
		pFnLastAttackerInLOS = (UFunction*) UObject::GObjObjects()->Data[ 31794 ];

	ATgAIController_execLastAttackerInLOS_Parms LastAttackerInLOS_Parms;

	pFnLastAttackerInLOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLastAttackerInLOS, &LastAttackerInLOS_Parms, NULL );

	pFnLastAttackerInLOS->FunctionFlags |= 0x400;

	return LastAttackerInLOS_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetInLOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::TargetInLOS ( )
{
	static UFunction* pFnTargetInLOS = NULL;

	if ( ! pFnTargetInLOS )
		pFnTargetInLOS = (UFunction*) UObject::GObjObjects()->Data[ 31792 ];

	ATgAIController_execTargetInLOS_Parms TargetInLOS_Parms;

	pFnTargetInLOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetInLOS, &TargetInLOS_Parms, NULL );

	pFnTargetInLOS->FunctionFlags |= 0x400;

	return TargetInLOS_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetInIndirectFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::TargetInIndirectFire ( )
{
	static UFunction* pFnTargetInIndirectFire = NULL;

	if ( ! pFnTargetInIndirectFire )
		pFnTargetInIndirectFire = (UFunction*) UObject::GObjObjects()->Data[ 31790 ];

	ATgAIController_execTargetInIndirectFire_Parms TargetInIndirectFire_Parms;

	pFnTargetInIndirectFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetInIndirectFire, &TargetInIndirectFire_Parms, NULL );

	pFnTargetInIndirectFire->FunctionFlags |= 0x400;

	return TargetInIndirectFire_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetInEncounterVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::TargetInEncounterVolume ( )
{
	static UFunction* pFnTargetInEncounterVolume = NULL;

	if ( ! pFnTargetInEncounterVolume )
		pFnTargetInEncounterVolume = (UFunction*) UObject::GObjObjects()->Data[ 31788 ];

	ATgAIController_execTargetInEncounterVolume_Parms TargetInEncounterVolume_Parms;

	pFnTargetInEncounterVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetInEncounterVolume, &TargetInEncounterVolume_Parms, NULL );

	pFnTargetInEncounterVolume->FunctionFlags |= 0x400;

	return TargetInEncounterVolume_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CheckIndirectFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Loc                            ( CPF_Parm )
// float                          fadj                           ( CPF_Parm )

bool ATgAIController::CheckIndirectFire ( struct FVector Loc, float fadj )
{
	static UFunction* pFnCheckIndirectFire = NULL;

	if ( ! pFnCheckIndirectFire )
		pFnCheckIndirectFire = (UFunction*) UObject::GObjObjects()->Data[ 31784 ];

	ATgAIController_execCheckIndirectFire_Parms CheckIndirectFire_Parms;
	memcpy ( &CheckIndirectFire_Parms.Loc, &Loc, 0xC );
	CheckIndirectFire_Parms.fadj = fadj;

	pFnCheckIndirectFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckIndirectFire, &CheckIndirectFire_Parms, NULL );

	pFnCheckIndirectFire->FunctionFlags |= 0x400;

	return CheckIndirectFire_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NumEnemyInRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Range                          ( CPF_Parm )

float ATgAIController::NumEnemyInRange ( float Range )
{
	static UFunction* pFnNumEnemyInRange = NULL;

	if ( ! pFnNumEnemyInRange )
		pFnNumEnemyInRange = (UFunction*) UObject::GObjObjects()->Data[ 31781 ];

	ATgAIController_execNumEnemyInRange_Parms NumEnemyInRange_Parms;
	NumEnemyInRange_Parms.Range = Range;

	pFnNumEnemyInRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNumEnemyInRange, &NumEnemyInRange_Parms, NULL );

	pFnNumEnemyInRange->FunctionFlags |= 0x400;

	return NumEnemyInRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.NumEnemySighted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::NumEnemySighted ( )
{
	static UFunction* pFnNumEnemySighted = NULL;

	if ( ! pFnNumEnemySighted )
		pFnNumEnemySighted = (UFunction*) UObject::GObjObjects()->Data[ 31779 ];

	ATgAIController_execNumEnemySighted_Parms NumEnemySighted_Parms;

	pFnNumEnemySighted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNumEnemySighted, &NumEnemySighted_Parms, NULL );

	pFnNumEnemySighted->FunctionFlags |= 0x400;

	return NumEnemySighted_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AtValidPetSpawnPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::AtValidPetSpawnPoint ( )
{
	static UFunction* pFnAtValidPetSpawnPoint = NULL;

	if ( ! pFnAtValidPetSpawnPoint )
		pFnAtValidPetSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 31777 ];

	ATgAIController_execAtValidPetSpawnPoint_Parms AtValidPetSpawnPoint_Parms;

	pFnAtValidPetSpawnPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAtValidPetSpawnPoint, &AtValidPetSpawnPoint_Parms, NULL );

	pFnAtValidPetSpawnPoint->FunctionFlags |= 0x400;

	return AtValidPetSpawnPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HasValidNearbyPetSpawnPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::HasValidNearbyPetSpawnPoint ( )
{
	static UFunction* pFnHasValidNearbyPetSpawnPoint = NULL;

	if ( ! pFnHasValidNearbyPetSpawnPoint )
		pFnHasValidNearbyPetSpawnPoint = (UFunction*) UObject::GObjObjects()->Data[ 31775 ];

	ATgAIController_execHasValidNearbyPetSpawnPoint_Parms HasValidNearbyPetSpawnPoint_Parms;

	pFnHasValidNearbyPetSpawnPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidNearbyPetSpawnPoint, &HasValidNearbyPetSpawnPoint_Parms, NULL );

	pFnHasValidNearbyPetSpawnPoint->FunctionFlags |= 0x400;

	return HasValidNearbyPetSpawnPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetNumberActiveSpawnedPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgAIController::GetNumberActiveSpawnedPets ( )
{
	static UFunction* pFnGetNumberActiveSpawnedPets = NULL;

	if ( ! pFnGetNumberActiveSpawnedPets )
		pFnGetNumberActiveSpawnedPets = (UFunction*) UObject::GObjObjects()->Data[ 31773 ];

	ATgAIController_execGetNumberActiveSpawnedPets_Parms GetNumberActiveSpawnedPets_Parms;

	pFnGetNumberActiveSpawnedPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumberActiveSpawnedPets, &GetNumberActiveSpawnedPets_Parms, NULL );

	pFnGetNumberActiveSpawnedPets->FunctionFlags |= 0x400;

	return GetNumberActiveSpawnedPets_Parms.ReturnValue;
};

// Function TgGame.TgAIController.MinionsInHelpRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgAIController::MinionsInHelpRange ( )
{
	static UFunction* pFnMinionsInHelpRange = NULL;

	if ( ! pFnMinionsInHelpRange )
		pFnMinionsInHelpRange = (UFunction*) UObject::GObjObjects()->Data[ 31771 ];

	ATgAIController_execMinionsInHelpRange_Parms MinionsInHelpRange_Parms;

	pFnMinionsInHelpRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMinionsInHelpRange, &MinionsInHelpRange_Parms, NULL );

	pFnMinionsInHelpRange->FunctionFlags |= 0x400;

	return MinionsInHelpRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.OwnerHasLastAttacked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::OwnerHasLastAttacked ( )
{
	static UFunction* pFnOwnerHasLastAttacked = NULL;

	if ( ! pFnOwnerHasLastAttacked )
		pFnOwnerHasLastAttacked = (UFunction*) UObject::GObjObjects()->Data[ 31769 ];

	ATgAIController_execOwnerHasLastAttacked_Parms OwnerHasLastAttacked_Parms;

	pFnOwnerHasLastAttacked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOwnerHasLastAttacked, &OwnerHasLastAttacked_Parms, NULL );

	pFnOwnerHasLastAttacked->FunctionFlags |= 0x400;

	return OwnerHasLastAttacked_Parms.ReturnValue;
};

// Function TgGame.TgAIController.OwnerHasLastAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::OwnerHasLastAttacker ( )
{
	static UFunction* pFnOwnerHasLastAttacker = NULL;

	if ( ! pFnOwnerHasLastAttacker )
		pFnOwnerHasLastAttacker = (UFunction*) UObject::GObjObjects()->Data[ 31767 ];

	ATgAIController_execOwnerHasLastAttacker_Parms OwnerHasLastAttacker_Parms;

	pFnOwnerHasLastAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOwnerHasLastAttacker, &OwnerHasLastAttacker_Parms, NULL );

	pFnOwnerHasLastAttacker->FunctionFlags |= 0x400;

	return OwnerHasLastAttacker_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetClosestVolumePathNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AVolumePathNode*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ATarget                        ( CPF_Parm )
// unsigned long                  bTestValidSpawnPetPoint        ( CPF_Parm )

class AVolumePathNode* ATgAIController::GetClosestVolumePathNode ( class AActor* ATarget, unsigned long bTestValidSpawnPetPoint )
{
	static UFunction* pFnGetClosestVolumePathNode = NULL;

	if ( ! pFnGetClosestVolumePathNode )
		pFnGetClosestVolumePathNode = (UFunction*) UObject::GObjObjects()->Data[ 31763 ];

	ATgAIController_execGetClosestVolumePathNode_Parms GetClosestVolumePathNode_Parms;
	GetClosestVolumePathNode_Parms.ATarget = ATarget;
	GetClosestVolumePathNode_Parms.bTestValidSpawnPetPoint = bTestValidSpawnPetPoint;

	pFnGetClosestVolumePathNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestVolumePathNode, &GetClosestVolumePathNode_Parms, NULL );

	pFnGetClosestVolumePathNode->FunctionFlags |= 0x400;

	return GetClosestVolumePathNode_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromNearestEmptyActionPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            eType                          ( CPF_Parm )

float ATgAIController::DistanceFromNearestEmptyActionPoint ( int eType )
{
	static UFunction* pFnDistanceFromNearestEmptyActionPoint = NULL;

	if ( ! pFnDistanceFromNearestEmptyActionPoint )
		pFnDistanceFromNearestEmptyActionPoint = (UFunction*) UObject::GObjObjects()->Data[ 31760 ];

	ATgAIController_execDistanceFromNearestEmptyActionPoint_Parms DistanceFromNearestEmptyActionPoint_Parms;
	DistanceFromNearestEmptyActionPoint_Parms.eType = eType;

	pFnDistanceFromNearestEmptyActionPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromNearestEmptyActionPoint, &DistanceFromNearestEmptyActionPoint_Parms, NULL );

	pFnDistanceFromNearestEmptyActionPoint->FunctionFlags |= 0x400;

	return DistanceFromNearestEmptyActionPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetNearestEmptyActionPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgActionPoint*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            eType                          ( CPF_Parm )

class ATgActionPoint* ATgAIController::GetNearestEmptyActionPoint ( int eType )
{
	static UFunction* pFnGetNearestEmptyActionPoint = NULL;

	if ( ! pFnGetNearestEmptyActionPoint )
		pFnGetNearestEmptyActionPoint = (UFunction*) UObject::GObjObjects()->Data[ 31757 ];

	ATgAIController_execGetNearestEmptyActionPoint_Parms GetNearestEmptyActionPoint_Parms;
	GetNearestEmptyActionPoint_Parms.eType = eType;

	pFnGetNearestEmptyActionPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNearestEmptyActionPoint, &GetNearestEmptyActionPoint_Parms, NULL );

	pFnGetNearestEmptyActionPoint->FunctionFlags |= 0x400;

	return GetNearestEmptyActionPoint_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetClosestObjectiveActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )

class AActor* ATgAIController::GetClosestObjectiveActor ( unsigned long bEnemy )
{
	static UFunction* pFnGetClosestObjectiveActor = NULL;

	if ( ! pFnGetClosestObjectiveActor )
		pFnGetClosestObjectiveActor = (UFunction*) UObject::GObjObjects()->Data[ 31754 ];

	ATgAIController_execGetClosestObjectiveActor_Parms GetClosestObjectiveActor_Parms;
	GetClosestObjectiveActor_Parms.bEnemy = bEnemy;

	pFnGetClosestObjectiveActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestObjectiveActor, &GetClosestObjectiveActor_Parms, NULL );

	pFnGetClosestObjectiveActor->FunctionFlags |= 0x400;

	return GetClosestObjectiveActor_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetNearestAlarm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgAlarmPoint*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgAlarmPoint* ATgAIController::GetNearestAlarm ( )
{
	static UFunction* pFnGetNearestAlarm = NULL;

	if ( ! pFnGetNearestAlarm )
		pFnGetNearestAlarm = (UFunction*) UObject::GObjObjects()->Data[ 31752 ];

	ATgAIController_execGetNearestAlarm_Parms GetNearestAlarm_Parms;

	pFnGetNearestAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNearestAlarm, &GetNearestAlarm_Parms, NULL );

	pFnGetNearestAlarm->FunctionFlags |= 0x400;

	return GetNearestAlarm_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetNearestAlarmDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetNearestAlarmDistance ( )
{
	static UFunction* pFnGetNearestAlarmDistance = NULL;

	if ( ! pFnGetNearestAlarmDistance )
		pFnGetNearestAlarmDistance = (UFunction*) UObject::GObjObjects()->Data[ 31750 ];

	ATgAIController_execGetNearestAlarmDistance_Parms GetNearestAlarmDistance_Parms;

	pFnGetNearestAlarmDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNearestAlarmDistance, &GetNearestAlarmDistance_Parms, NULL );

	pFnGetNearestAlarmDistance->FunctionFlags |= 0x400;

	return GetNearestAlarmDistance_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromNearest
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnemy                         ( CPF_Parm )
// int                            nPhysicalType                  ( CPF_Parm )
// int                            nProfileType                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreLos                     ( CPF_OptionalParm | CPF_Parm )

float ATgAIController::DistanceFromNearest ( unsigned long bEnemy, int nPhysicalType, int nProfileType, unsigned long bIgnoreLos )
{
	static UFunction* pFnDistanceFromNearest = NULL;

	if ( ! pFnDistanceFromNearest )
		pFnDistanceFromNearest = (UFunction*) UObject::GObjObjects()->Data[ 31744 ];

	ATgAIController_execDistanceFromNearest_Parms DistanceFromNearest_Parms;
	DistanceFromNearest_Parms.bEnemy = bEnemy;
	DistanceFromNearest_Parms.nPhysicalType = nPhysicalType;
	DistanceFromNearest_Parms.nProfileType = nProfileType;
	DistanceFromNearest_Parms.bIgnoreLos = bIgnoreLos;

	pFnDistanceFromNearest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromNearest, &DistanceFromNearest_Parms, NULL );

	pFnDistanceFromNearest->FunctionFlags |= 0x400;

	return DistanceFromNearest_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetMaxMeleeDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetMaxMeleeDistance ( )
{
	static UFunction* pFnGetMaxMeleeDistance = NULL;

	if ( ! pFnGetMaxMeleeDistance )
		pFnGetMaxMeleeDistance = (UFunction*) UObject::GObjObjects()->Data[ 31742 ];

	ATgAIController_execGetMaxMeleeDistance_Parms GetMaxMeleeDistance_Parms;

	pFnGetMaxMeleeDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxMeleeDistance, &GetMaxMeleeDistance_Parms, NULL );

	pFnGetMaxMeleeDistance->FunctionFlags |= 0x400;

	return GetMaxMeleeDistance_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetMaxRangedDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::GetMaxRangedDistance ( )
{
	static UFunction* pFnGetMaxRangedDistance = NULL;

	if ( ! pFnGetMaxRangedDistance )
		pFnGetMaxRangedDistance = (UFunction*) UObject::GObjObjects()->Data[ 31740 ];

	ATgAIController_execGetMaxRangedDistance_Parms GetMaxRangedDistance_Parms;

	pFnGetMaxRangedDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxRangedDistance, &GetMaxRangedDistance_Parms, NULL );

	pFnGetMaxRangedDistance->FunctionFlags |= 0x400;

	return GetMaxRangedDistance_Parms.ReturnValue;
};

// Function TgGame.TgAIController.InDeviceRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  aSource                        ( CPF_Parm )
// class AActor*                  ATarget                        ( CPF_Parm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )
// int                            nDeviceMode                    ( CPF_Parm )

bool ATgAIController::InDeviceRange ( class AActor* aSource, class AActor* ATarget, unsigned char eEquipmentSlot, int nDeviceMode )
{
	static UFunction* pFnInDeviceRange = NULL;

	if ( ! pFnInDeviceRange )
		pFnInDeviceRange = (UFunction*) UObject::GObjObjects()->Data[ 31734 ];

	ATgAIController_execInDeviceRange_Parms InDeviceRange_Parms;
	InDeviceRange_Parms.aSource = aSource;
	InDeviceRange_Parms.ATarget = ATarget;
	InDeviceRange_Parms.eEquipmentSlot = eEquipmentSlot;
	InDeviceRange_Parms.nDeviceMode = nDeviceMode;

	pFnInDeviceRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInDeviceRange, &InDeviceRange_Parms, NULL );

	pFnInDeviceRange->FunctionFlags |= 0x400;

	return InDeviceRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HighestThreatInDeviceRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )

bool ATgAIController::HighestThreatInDeviceRange ( unsigned char eEquipmentSlot )
{
	static UFunction* pFnHighestThreatInDeviceRange = NULL;

	if ( ! pFnHighestThreatInDeviceRange )
		pFnHighestThreatInDeviceRange = (UFunction*) UObject::GObjObjects()->Data[ 31731 ];

	ATgAIController_execHighestThreatInDeviceRange_Parms HighestThreatInDeviceRange_Parms;
	HighestThreatInDeviceRange_Parms.eEquipmentSlot = eEquipmentSlot;

	pFnHighestThreatInDeviceRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHighestThreatInDeviceRange, &HighestThreatInDeviceRange_Parms, NULL );

	pFnHighestThreatInDeviceRange->FunctionFlags |= 0x400;

	return HighestThreatInDeviceRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AttackerInDeviceRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )

bool ATgAIController::AttackerInDeviceRange ( unsigned char eEquipmentSlot )
{
	static UFunction* pFnAttackerInDeviceRange = NULL;

	if ( ! pFnAttackerInDeviceRange )
		pFnAttackerInDeviceRange = (UFunction*) UObject::GObjObjects()->Data[ 31728 ];

	ATgAIController_execAttackerInDeviceRange_Parms AttackerInDeviceRange_Parms;
	AttackerInDeviceRange_Parms.eEquipmentSlot = eEquipmentSlot;

	pFnAttackerInDeviceRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttackerInDeviceRange, &AttackerInDeviceRange_Parms, NULL );

	pFnAttackerInDeviceRange->FunctionFlags |= 0x400;

	return AttackerInDeviceRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetInDeviceRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEquipmentSlot                 ( CPF_Parm )
// int                            nDeviceMode                    ( CPF_Parm )

bool ATgAIController::TargetInDeviceRange ( unsigned char eEquipmentSlot, int nDeviceMode )
{
	static UFunction* pFnTargetInDeviceRange = NULL;

	if ( ! pFnTargetInDeviceRange )
		pFnTargetInDeviceRange = (UFunction*) UObject::GObjObjects()->Data[ 31724 ];

	ATgAIController_execTargetInDeviceRange_Parms TargetInDeviceRange_Parms;
	TargetInDeviceRange_Parms.eEquipmentSlot = eEquipmentSlot;
	TargetInDeviceRange_Parms.nDeviceMode = nDeviceMode;

	pFnTargetInDeviceRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetInDeviceRange, &TargetInDeviceRange_Parms, NULL );

	pFnTargetInDeviceRange->FunctionFlags |= 0x400;

	return TargetInDeviceRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.TargetInRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Range                          ( CPF_Parm )

bool ATgAIController::TargetInRange ( float Range )
{
	static UFunction* pFnTargetInRange = NULL;

	if ( ! pFnTargetInRange )
		pFnTargetInRange = (UFunction*) UObject::GObjObjects()->Data[ 31721 ];

	ATgAIController_execTargetInRange_Parms TargetInRange_Parms;
	TargetInRange_Parms.Range = Range;

	pFnTargetInRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTargetInRange, &TargetInRange_Parms, NULL );

	pFnTargetInRange->FunctionFlags |= 0x400;

	return TargetInRange_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromCurrentObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromCurrentObjective ( )
{
	static UFunction* pFnDistanceFromCurrentObjective = NULL;

	if ( ! pFnDistanceFromCurrentObjective )
		pFnDistanceFromCurrentObjective = (UFunction*) UObject::GObjObjects()->Data[ 31719 ];

	ATgAIController_execDistanceFromCurrentObjective_Parms DistanceFromCurrentObjective_Parms;

	pFnDistanceFromCurrentObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromCurrentObjective, &DistanceFromCurrentObjective_Parms, NULL );

	pFnDistanceFromCurrentObjective->FunctionFlags |= 0x400;

	return DistanceFromCurrentObjective_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromOwner
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromOwner ( )
{
	static UFunction* pFnDistanceFromOwner = NULL;

	if ( ! pFnDistanceFromOwner )
		pFnDistanceFromOwner = (UFunction*) UObject::GObjObjects()->Data[ 31717 ];

	ATgAIController_execDistanceFromOwner_Parms DistanceFromOwner_Parms;

	pFnDistanceFromOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromOwner, &DistanceFromOwner_Parms, NULL );

	pFnDistanceFromOwner->FunctionFlags |= 0x400;

	return DistanceFromOwner_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromTarget ( )
{
	static UFunction* pFnDistanceFromTarget = NULL;

	if ( ! pFnDistanceFromTarget )
		pFnDistanceFromTarget = (UFunction*) UObject::GObjObjects()->Data[ 31715 ];

	ATgAIController_execDistanceFromTarget_Parms DistanceFromTarget_Parms;

	pFnDistanceFromTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromTarget, &DistanceFromTarget_Parms, NULL );

	pFnDistanceFromTarget->FunctionFlags |= 0x400;

	return DistanceFromTarget_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromLastAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromLastAttacker ( )
{
	static UFunction* pFnDistanceFromLastAttacker = NULL;

	if ( ! pFnDistanceFromLastAttacker )
		pFnDistanceFromLastAttacker = (UFunction*) UObject::GObjObjects()->Data[ 31713 ];

	ATgAIController_execDistanceFromLastAttacker_Parms DistanceFromLastAttacker_Parms;

	pFnDistanceFromLastAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromLastAttacker, &DistanceFromLastAttacker_Parms, NULL );

	pFnDistanceFromLastAttacker->FunctionFlags |= 0x400;

	return DistanceFromLastAttacker_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromSound ( )
{
	static UFunction* pFnDistanceFromSound = NULL;

	if ( ! pFnDistanceFromSound )
		pFnDistanceFromSound = (UFunction*) UObject::GObjObjects()->Data[ 31711 ];

	ATgAIController_execDistanceFromSound_Parms DistanceFromSound_Parms;

	pFnDistanceFromSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromSound, &DistanceFromSound_Parms, NULL );

	pFnDistanceFromSound->FunctionFlags |= 0x400;

	return DistanceFromSound_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromTrigger
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromTrigger ( )
{
	static UFunction* pFnDistanceFromTrigger = NULL;

	if ( ! pFnDistanceFromTrigger )
		pFnDistanceFromTrigger = (UFunction*) UObject::GObjObjects()->Data[ 31709 ];

	ATgAIController_execDistanceFromTrigger_Parms DistanceFromTrigger_Parms;

	pFnDistanceFromTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromTrigger, &DistanceFromTrigger_Parms, NULL );

	pFnDistanceFromTrigger->FunctionFlags |= 0x400;

	return DistanceFromTrigger_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFromHelpRequest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgAIController::DistanceFromHelpRequest ( )
{
	static UFunction* pFnDistanceFromHelpRequest = NULL;

	if ( ! pFnDistanceFromHelpRequest )
		pFnDistanceFromHelpRequest = (UFunction*) UObject::GObjObjects()->Data[ 31707 ];

	ATgAIController_execDistanceFromHelpRequest_Parms DistanceFromHelpRequest_Parms;

	pFnDistanceFromHelpRequest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFromHelpRequest, &DistanceFromHelpRequest_Parms, NULL );

	pFnDistanceFromHelpRequest->FunctionFlags |= 0x400;

	return DistanceFromHelpRequest_Parms.ReturnValue;
};

// Function TgGame.TgAIController.DistanceFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

float ATgAIController::DistanceFrom ( class AActor* Target )
{
	static UFunction* pFnDistanceFrom = NULL;

	if ( ! pFnDistanceFrom )
		pFnDistanceFrom = (UFunction*) UObject::GObjObjects()->Data[ 31704 ];

	ATgAIController_execDistanceFrom_Parms DistanceFrom_Parms;
	DistanceFrom_Parms.Target = Target;

	pFnDistanceFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDistanceFrom, &DistanceFrom_Parms, NULL );

	pFnDistanceFrom->FunctionFlags |= 0x400;

	return DistanceFrom_Parms.ReturnValue;
};

// Function TgGame.TgAIController.AddThreat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 attacker                       ( CPF_Parm )
// float                          fAmount                        ( CPF_Parm )

void ATgAIController::AddThreat ( class ATgPawn* attacker, float fAmount )
{
	static UFunction* pFnAddThreat = NULL;

	if ( ! pFnAddThreat )
		pFnAddThreat = (UFunction*) UObject::GObjObjects()->Data[ 31701 ];

	ATgAIController_execAddThreat_Parms AddThreat_Parms;
	AddThreat_Parms.attacker = attacker;
	AddThreat_Parms.fAmount = fAmount;

	pFnAddThreat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddThreat, &AddThreat_Parms, NULL );

	pFnAddThreat->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.UpdateTargetReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::UpdateTargetReachable ( )
{
	static UFunction* pFnUpdateTargetReachable = NULL;

	if ( ! pFnUpdateTargetReachable )
		pFnUpdateTargetReachable = (UFunction*) UObject::GObjObjects()->Data[ 31700 ];

	ATgAIController_execUpdateTargetReachable_Parms UpdateTargetReachable_Parms;

	pFnUpdateTargetReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetReachable, &UpdateTargetReachable_Parms, NULL );

	pFnUpdateTargetReachable->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.InvalidateTargetReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::InvalidateTargetReachable ( )
{
	static UFunction* pFnInvalidateTargetReachable = NULL;

	if ( ! pFnInvalidateTargetReachable )
		pFnInvalidateTargetReachable = (UFunction*) UObject::GObjObjects()->Data[ 31699 ];

	ATgAIController_execInvalidateTargetReachable_Parms InvalidateTargetReachable_Parms;

	pFnInvalidateTargetReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInvalidateTargetReachable, &InvalidateTargetReachable_Parms, NULL );

	pFnInvalidateTargetReachable->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.TriggerBots
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_TriggerBots*   Action                         ( CPF_Parm )

void ATgAIController::TriggerBots ( class UTgSeqAct_TriggerBots* Action )
{
	static UFunction* pFnTriggerBots = NULL;

	if ( ! pFnTriggerBots )
		pFnTriggerBots = (UFunction*) UObject::GObjObjects()->Data[ 31697 ];

	ATgAIController_execTriggerBots_Parms TriggerBots_Parms;
	TriggerBots_Parms.Action = Action;

	pFnTriggerBots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerBots, &TriggerBots_Parms, NULL );

	pFnTriggerBots->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.UpdateTargetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInLOS                         ( CPF_Parm )

void ATgAIController::UpdateTargetLocation ( unsigned long bInLOS )
{
	static UFunction* pFnUpdateTargetLocation = NULL;

	if ( ! pFnUpdateTargetLocation )
		pFnUpdateTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 31695 ];

	ATgAIController_execUpdateTargetLocation_Parms UpdateTargetLocation_Parms;
	UpdateTargetLocation_Parms.bInLOS = bInLOS;

	pFnUpdateTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetLocation, &UpdateTargetLocation_Parms, NULL );

	pFnUpdateTargetLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.SetTargetActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void ATgAIController::SetTargetActor ( class AActor* Target )
{
	static UFunction* pFnSetTargetActor = NULL;

	if ( ! pFnSetTargetActor )
		pFnSetTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 31693 ];

	ATgAIController_execSetTargetActor_Parms SetTargetActor_Parms;
	SetTargetActor_Parms.Target = Target;

	pFnSetTargetActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetActor, &SetTargetActor_Parms, NULL );

	pFnSetTargetActor->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.GetCurrentObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgMissionObjective*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgMissionObjective* ATgAIController::GetCurrentObjective ( )
{
	static UFunction* pFnGetCurrentObjective = NULL;

	if ( ! pFnGetCurrentObjective )
		pFnGetCurrentObjective = (UFunction*) UObject::GObjObjects()->Data[ 31691 ];

	ATgAIController_execGetCurrentObjective_Parms GetCurrentObjective_Parms;

	pFnGetCurrentObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentObjective, &GetCurrentObjective_Parms, NULL );

	pFnGetCurrentObjective->FunctionFlags |= 0x400;

	return GetCurrentObjective_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetCurrentObjectiveActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgAIController::GetCurrentObjectiveActor ( )
{
	static UFunction* pFnGetCurrentObjectiveActor = NULL;

	if ( ! pFnGetCurrentObjectiveActor )
		pFnGetCurrentObjectiveActor = (UFunction*) UObject::GObjObjects()->Data[ 31689 ];

	ATgAIController_execGetCurrentObjectiveActor_Parms GetCurrentObjectiveActor_Parms;

	pFnGetCurrentObjectiveActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentObjectiveActor, &GetCurrentObjectiveActor_Parms, NULL );

	pFnGetCurrentObjectiveActor->FunctionFlags |= 0x400;

	return GetCurrentObjectiveActor_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetHighestThreat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgAIController::GetHighestThreat ( )
{
	static UFunction* pFnGetHighestThreat = NULL;

	if ( ! pFnGetHighestThreat )
		pFnGetHighestThreat = (UFunction*) UObject::GObjObjects()->Data[ 31687 ];

	ATgAIController_execGetHighestThreat_Parms GetHighestThreat_Parms;

	pFnGetHighestThreat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHighestThreat, &GetHighestThreat_Parms, NULL );

	pFnGetHighestThreat->FunctionFlags |= 0x400;

	return GetHighestThreat_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetTargetDeployable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDeployable*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDeployable* ATgAIController::GetTargetDeployable ( )
{
	static UFunction* pFnGetTargetDeployable = NULL;

	if ( ! pFnGetTargetDeployable )
		pFnGetTargetDeployable = (UFunction*) UObject::GObjObjects()->Data[ 31685 ];

	ATgAIController_execGetTargetDeployable_Parms GetTargetDeployable_Parms;

	pFnGetTargetDeployable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetDeployable, &GetTargetDeployable_Parms, NULL );

	pFnGetTargetDeployable->FunctionFlags |= 0x400;

	return GetTargetDeployable_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetTargetPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgAIController::GetTargetPawn ( )
{
	static UFunction* pFnGetTargetPawn = NULL;

	if ( ! pFnGetTargetPawn )
		pFnGetTargetPawn = (UFunction*) UObject::GObjObjects()->Data[ 31683 ];

	ATgAIController_execGetTargetPawn_Parms GetTargetPawn_Parms;

	pFnGetTargetPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetPawn, &GetTargetPawn_Parms, NULL );

	pFnGetTargetPawn->FunctionFlags |= 0x400;

	return GetTargetPawn_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetTargetActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgAIController::GetTargetActor ( )
{
	static UFunction* pFnGetTargetActor = NULL;

	if ( ! pFnGetTargetActor )
		pFnGetTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 31681 ];

	ATgAIController_execGetTargetActor_Parms GetTargetActor_Parms;

	pFnGetTargetActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetActor, &GetTargetActor_Parms, NULL );

	pFnGetTargetActor->FunctionFlags |= 0x400;

	return GetTargetActor_Parms.ReturnValue;
};

// Function TgGame.TgAIController.CalculateHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::CalculateHealth ( )
{
	static UFunction* pFnCalculateHealth = NULL;

	if ( ! pFnCalculateHealth )
		pFnCalculateHealth = (UFunction*) UObject::GObjObjects()->Data[ 31680 ];

	ATgAIController_execCalculateHealth_Parms CalculateHealth_Parms;

	pFnCalculateHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateHealth, &CalculateHealth_Parms, NULL );

	pFnCalculateHealth->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.EndClimbLadder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgAIController::EndClimbLadder ( )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 31679 ];

	ATgAIController_execEndClimbLadder_Parms EndClimbLadder_Parms;

	pFnEndClimbLadder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );

	pFnEndClimbLadder->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 Other                          ( CPF_Parm )

bool ATgAIController::IsInvisible ( class ATgPawn* Other )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 31676 ];

	ATgAIController_execIsInvisible_Parms IsInvisible_Parms;
	IsInvisible_Parms.Other = Other;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function TgGame.TgAIController.GetRandomNav
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fMaxDistance                   ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )

class ANavigationPoint* ATgAIController::GetRandomNav ( float fMaxDistance, class AActor* Target )
{
	static UFunction* pFnGetRandomNav = NULL;

	if ( ! pFnGetRandomNav )
		pFnGetRandomNav = (UFunction*) UObject::GObjObjects()->Data[ 31672 ];

	ATgAIController_execGetRandomNav_Parms GetRandomNav_Parms;
	GetRandomNav_Parms.fMaxDistance = fMaxDistance;
	GetRandomNav_Parms.Target = Target;

	pFnGetRandomNav->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRandomNav, &GetRandomNav_Parms, NULL );

	pFnGetRandomNav->FunctionFlags |= 0x400;

	return GetRandomNav_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsValidTargetEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   CheckTarget                    ( CPF_Parm )
// unsigned long                  bEnemy                         ( CPF_Parm )

bool ATgAIController::IsValidTargetEx ( class APawn* CheckTarget, unsigned long bEnemy )
{
	static UFunction* pFnIsValidTargetEx = NULL;

	if ( ! pFnIsValidTargetEx )
		pFnIsValidTargetEx = (UFunction*) UObject::GObjObjects()->Data[ 31668 ];

	ATgAIController_execIsValidTargetEx_Parms IsValidTargetEx_Parms;
	IsValidTargetEx_Parms.CheckTarget = CheckTarget;
	IsValidTargetEx_Parms.bEnemy = bEnemy;

	pFnIsValidTargetEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTargetEx, &IsValidTargetEx_Parms, NULL );

	pFnIsValidTargetEx->FunctionFlags |= 0x400;

	return IsValidTargetEx_Parms.ReturnValue;
};

// Function TgGame.TgAIController.IsEnemy
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pOther                         ( CPF_Parm )

bool ATgAIController::IsEnemy ( class AActor* pOther )
{
	static UFunction* pFnIsEnemy = NULL;

	if ( ! pFnIsEnemy )
		pFnIsEnemy = (UFunction*) UObject::GObjObjects()->Data[ 31665 ];

	ATgAIController_execIsEnemy_Parms IsEnemy_Parms;
	IsEnemy_Parms.pOther = pOther;

	pFnIsEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnemy, &IsEnemy_Parms, NULL );

	pFnIsEnemy->FunctionFlags |= 0x400;

	return IsEnemy_Parms.ReturnValue;
};

// Function TgGame.TgAIController.InPatrol
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::InPatrol ( )
{
	static UFunction* pFnInPatrol = NULL;

	if ( ! pFnInPatrol )
		pFnInPatrol = (UFunction*) UObject::GObjObjects()->Data[ 31663 ];

	ATgAIController_execInPatrol_Parms InPatrol_Parms;

	pFnInPatrol->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInPatrol, &InPatrol_Parms, NULL );

	pFnInPatrol->FunctionFlags |= 0x400;

	return InPatrol_Parms.ReturnValue;
};

// Function TgGame.TgAIController.HasCondition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 pPawn                          ( CPF_Parm )
// int                            nCondition                     ( CPF_Parm )

bool ATgAIController::HasCondition ( class ATgPawn* pPawn, int nCondition )
{
	static UFunction* pFnHasCondition = NULL;

	if ( ! pFnHasCondition )
		pFnHasCondition = (UFunction*) UObject::GObjObjects()->Data[ 31659 ];

	ATgAIController_execHasCondition_Parms HasCondition_Parms;
	HasCondition_Parms.pPawn = pPawn;
	HasCondition_Parms.nCondition = nCondition;

	pFnHasCondition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasCondition, &HasCondition_Parms, NULL );

	pFnHasCondition->FunctionFlags |= 0x400;

	return HasCondition_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SetTaskForceNumber
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTaskForce                     ( CPF_Parm )

void ATgAIController::SetTaskForceNumber ( int nTaskForce )
{
	static UFunction* pFnSetTaskForceNumber = NULL;

	if ( ! pFnSetTaskForceNumber )
		pFnSetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 31657 ];

	ATgAIController_execSetTaskForceNumber_Parms SetTaskForceNumber_Parms;
	SetTaskForceNumber_Parms.nTaskForce = nTaskForce;

	pFnSetTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTaskForceNumber, &SetTaskForceNumber_Parms, NULL );

	pFnSetTaskForceNumber->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.SetBotTeam
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTeamIndex                     ( CPF_Parm )

void ATgAIController::SetBotTeam ( int nTeamIndex )
{
	static UFunction* pFnSetBotTeam = NULL;

	if ( ! pFnSetBotTeam )
		pFnSetBotTeam = (UFunction*) UObject::GObjObjects()->Data[ 31655 ];

	ATgAIController_execSetBotTeam_Parms SetBotTeam_Parms;
	SetBotTeam_Parms.nTeamIndex = nTeamIndex;

	pFnSetBotTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBotTeam, &SetBotTeam_Parms, NULL );

	pFnSetBotTeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.FindClosestNav
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )

class ANavigationPoint* ATgAIController::FindClosestNav ( class AActor* Goal )
{
	static UFunction* pFnFindClosestNav = NULL;

	if ( ! pFnFindClosestNav )
		pFnFindClosestNav = (UFunction*) UObject::GObjObjects()->Data[ 31652 ];

	ATgAIController_execFindClosestNav_Parms FindClosestNav_Parms;
	FindClosestNav_Parms.Goal = Goal;

	pFnFindClosestNav->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestNav, &FindClosestNav_Parms, NULL );

	pFnFindClosestNav->FunctionFlags |= 0x400;

	return FindClosestNav_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LineCheckRecurse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )
// class AActor*                  pTarget                        ( CPF_Parm )
// struct FVector                 vTarget                        ( CPF_Parm )
// class AActor*                  pSource                        ( CPF_Parm )
// int                            nDepth                         ( CPF_Parm )

bool ATgAIController::LineCheckRecurse ( struct FVector vLocation, class AActor* pTarget, struct FVector vTarget, class AActor* pSource, int nDepth )
{
	static UFunction* pFnLineCheckRecurse = NULL;

	if ( ! pFnLineCheckRecurse )
		pFnLineCheckRecurse = (UFunction*) UObject::GObjObjects()->Data[ 31645 ];

	ATgAIController_execLineCheckRecurse_Parms LineCheckRecurse_Parms;
	memcpy ( &LineCheckRecurse_Parms.vLocation, &vLocation, 0xC );
	LineCheckRecurse_Parms.pTarget = pTarget;
	memcpy ( &LineCheckRecurse_Parms.vTarget, &vTarget, 0xC );
	LineCheckRecurse_Parms.pSource = pSource;
	LineCheckRecurse_Parms.nDepth = nDepth;

	pFnLineCheckRecurse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheckRecurse, &LineCheckRecurse_Parms, NULL );

	pFnLineCheckRecurse->FunctionFlags |= 0x400;

	return LineCheckRecurse_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LineCheckEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )
// class AActor*                  pTarget                        ( CPF_Parm )
// struct FVector                 vTarget                        ( CPF_Parm )

bool ATgAIController::LineCheckEx ( struct FVector vLocation, class AActor* pTarget, struct FVector vTarget )
{
	static UFunction* pFnLineCheckEx = NULL;

	if ( ! pFnLineCheckEx )
		pFnLineCheckEx = (UFunction*) UObject::GObjObjects()->Data[ 31640 ];

	ATgAIController_execLineCheckEx_Parms LineCheckEx_Parms;
	memcpy ( &LineCheckEx_Parms.vLocation, &vLocation, 0xC );
	LineCheckEx_Parms.pTarget = pTarget;
	memcpy ( &LineCheckEx_Parms.vTarget, &vTarget, 0xC );

	pFnLineCheckEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheckEx, &LineCheckEx_Parms, NULL );

	pFnLineCheckEx->FunctionFlags |= 0x400;

	return LineCheckEx_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LineCheck
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Parm )
// class AActor*                  pTarget                        ( CPF_Parm )

bool ATgAIController::LineCheck ( struct FVector vLocation, class AActor* pTarget )
{
	static UFunction* pFnLineCheck = NULL;

	if ( ! pFnLineCheck )
		pFnLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 31636 ];

	ATgAIController_execLineCheck_Parms LineCheck_Parms;
	memcpy ( &LineCheck_Parms.vLocation, &vLocation, 0xC );
	LineCheck_Parms.pTarget = pTarget;

	pFnLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheck, &LineCheck_Parms, NULL );

	pFnLineCheck->FunctionFlags |= 0x400;

	return LineCheck_Parms.ReturnValue;
};

// Function TgGame.TgAIController.LineCheckMovement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pTarget                        ( CPF_Parm )

bool ATgAIController::LineCheckMovement ( class AActor* pTarget )
{
	static UFunction* pFnLineCheckMovement = NULL;

	if ( ! pFnLineCheckMovement )
		pFnLineCheckMovement = (UFunction*) UObject::GObjObjects()->Data[ 31633 ];

	ATgAIController_execLineCheckMovement_Parms LineCheckMovement_Parms;
	LineCheckMovement_Parms.pTarget = pTarget;

	pFnLineCheckMovement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheckMovement, &LineCheckMovement_Parms, NULL );

	pFnLineCheckMovement->FunctionFlags |= 0x400;

	return LineCheckMovement_Parms.ReturnValue;
};

// Function TgGame.TgAIController.ChooseNextAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::ChooseNextAction ( )
{
	static UFunction* pFnChooseNextAction = NULL;

	if ( ! pFnChooseNextAction )
		pFnChooseNextAction = (UFunction*) UObject::GObjObjects()->Data[ 31631 ];

	ATgAIController_execChooseNextAction_Parms ChooseNextAction_Parms;

	pFnChooseNextAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChooseNextAction, &ChooseNextAction_Parms, NULL );

	pFnChooseNextAction->FunctionFlags |= 0x400;

	return ChooseNextAction_Parms.ReturnValue;
};

// Function TgGame.TgAIController.SpawnNextPet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATgAIController::SpawnNextPet ( )
{
	static UFunction* pFnSpawnNextPet = NULL;

	if ( ! pFnSpawnNextPet )
		pFnSpawnNextPet = (UFunction*) UObject::GObjObjects()->Data[ 31630 ];

	ATgAIController_execSpawnNextPet_Parms SpawnNextPet_Parms;

	pFnSpawnNextPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnNextPet, &SpawnNextPet_Parms, NULL );

	pFnSpawnNextPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.SpawnPets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATgAIController::SpawnPets ( )
{
	static UFunction* pFnSpawnPets = NULL;

	if ( ! pFnSpawnPets )
		pFnSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 31629 ];

	ATgAIController_execSpawnPets_Parms SpawnPets_Parms;

	pFnSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPets, &SpawnPets_Parms, NULL );

	pFnSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.RadioAlarm
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATgAIController::RadioAlarm ( )
{
	static UFunction* pFnRadioAlarm = NULL;

	if ( ! pFnRadioAlarm )
		pFnRadioAlarm = (UFunction*) UObject::GObjObjects()->Data[ 31628 ];

	ATgAIController_execRadioAlarm_Parms RadioAlarm_Parms;

	pFnRadioAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadioAlarm, &RadioAlarm_Parms, NULL );

	pFnRadioAlarm->FunctionFlags |= 0x400;
};

// Function TgGame.TgAIController.CheckInterrupt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgAIController::CheckInterrupt ( )
{
	static UFunction* pFnCheckInterrupt = NULL;

	if ( ! pFnCheckInterrupt )
		pFnCheckInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 31626 ];

	ATgAIController_execCheckInterrupt_Parms CheckInterrupt_Parms;

	pFnCheckInterrupt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckInterrupt, &CheckInterrupt_Parms, NULL );

	pFnCheckInterrupt->FunctionFlags |= 0x400;

	return CheckInterrupt_Parms.ReturnValue;
};

// Function TgGame.TgAIController.Debugger
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATgAIController::Debugger ( )
{
	static UFunction* pFnDebugger = NULL;

	if ( ! pFnDebugger )
		pFnDebugger = (UFunction*) UObject::GObjObjects()->Data[ 31625 ];

	ATgAIController_execDebugger_Parms Debugger_Parms;

	pFnDebugger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugger, &Debugger_Parms, NULL );

	pFnDebugger->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OutputScannerSettings
// [0x00020002] 
// Parameters infos:

void ATgPawn::OutputScannerSettings ( )
{
	static UFunction* pFnOutputScannerSettings = NULL;

	if ( ! pFnOutputScannerSettings )
		pFnOutputScannerSettings = (UFunction*) UObject::GObjObjects()->Data[ 42579 ];

	ATgPawn_execOutputScannerSettings_Parms OutputScannerSettings_Parms;

	this->ProcessEvent ( pFnOutputScannerSettings, &OutputScannerSettings_Parms, NULL );
};

// Function TgGame.TgPawn.OnGenericAIEventChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOnGenericAIEventChanged ( )
{
	static UFunction* pFnOnGenericAIEventChanged = NULL;

	if ( ! pFnOnGenericAIEventChanged )
		pFnOnGenericAIEventChanged = (UFunction*) UObject::GObjObjects()->Data[ 42578 ];

	ATgPawn_eventOnGenericAIEventChanged_Parms OnGenericAIEventChanged_Parms;

	this->ProcessEvent ( pFnOnGenericAIEventChanged, &OnGenericAIEventChanged_Parms, NULL );
};

// Function TgGame.TgPawn.ServerChangePhase
// [0x002200C2] 
// Parameters infos:
// int                            NewPhase                       ( CPF_Parm )

void ATgPawn::ServerChangePhase ( int NewPhase )
{
	static UFunction* pFnServerChangePhase = NULL;

	if ( ! pFnServerChangePhase )
		pFnServerChangePhase = (UFunction*) UObject::GObjObjects()->Data[ 42576 ];

	ATgPawn_execServerChangePhase_Parms ServerChangePhase_Parms;
	ServerChangePhase_Parms.NewPhase = NewPhase;

	this->ProcessEvent ( pFnServerChangePhase, &ServerChangePhase_Parms, NULL );
};

// Function TgGame.TgPawn.ChangePhase
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            NewPhase                       ( CPF_Parm )

void ATgPawn::ChangePhase ( int NewPhase )
{
	static UFunction* pFnChangePhase = NULL;

	if ( ! pFnChangePhase )
		pFnChangePhase = (UFunction*) UObject::GObjObjects()->Data[ 42574 ];

	ATgPawn_execChangePhase_Parms ChangePhase_Parms;
	ChangePhase_Parms.NewPhase = NewPhase;

	this->ProcessEvent ( pFnChangePhase, &ChangePhase_Parms, NULL );
};

// Function TgGame.TgPawn.Perf2
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPawn::Perf2 ( unsigned long bEnabled )
{
	static UFunction* pFnPerf2 = NULL;

	if ( ! pFnPerf2 )
		pFnPerf2 = (UFunction*) UObject::GObjObjects()->Data[ 42571 ];

	ATgPawn_execPerf2_Parms Perf2_Parms;
	Perf2_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnPerf2, &Perf2_Parms, NULL );
};

// Function TgGame.TgPawn.Perf1
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPawn::Perf1 ( unsigned long bEnabled )
{
	static UFunction* pFnPerf1 = NULL;

	if ( ! pFnPerf1 )
		pFnPerf1 = (UFunction*) UObject::GObjObjects()->Data[ 42566 ];

	ATgPawn_execPerf1_Parms Perf1_Parms;
	Perf1_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnPerf1, &Perf1_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetPushBlockParam
// [0x002200C2] 
// Parameters infos:
// float                          fPushBlockPressure             ( CPF_Parm )
// float                          fSlowVelSizeSquard             ( CPF_Parm )
// float                          fVelModifier                   ( CPF_Parm )

void ATgPawn::ServerSetPushBlockParam ( float fPushBlockPressure, float fSlowVelSizeSquard, float fVelModifier )
{
	static UFunction* pFnServerSetPushBlockParam = NULL;

	if ( ! pFnServerSetPushBlockParam )
		pFnServerSetPushBlockParam = (UFunction*) UObject::GObjObjects()->Data[ 42562 ];

	ATgPawn_execServerSetPushBlockParam_Parms ServerSetPushBlockParam_Parms;
	ServerSetPushBlockParam_Parms.fPushBlockPressure = fPushBlockPressure;
	ServerSetPushBlockParam_Parms.fSlowVelSizeSquard = fSlowVelSizeSquard;
	ServerSetPushBlockParam_Parms.fVelModifier = fVelModifier;

	this->ProcessEvent ( pFnServerSetPushBlockParam, &ServerSetPushBlockParam_Parms, NULL );
};

// Function TgGame.TgPawn.SetPushBlockParam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fPushBlockPressure             ( CPF_Parm )
// float                          fSlowVelSizeSquard             ( CPF_Parm )
// float                          fVelModifier                   ( CPF_Parm )

void ATgPawn::SetPushBlockParam ( float fPushBlockPressure, float fSlowVelSizeSquard, float fVelModifier )
{
	static UFunction* pFnSetPushBlockParam = NULL;

	if ( ! pFnSetPushBlockParam )
		pFnSetPushBlockParam = (UFunction*) UObject::GObjObjects()->Data[ 42558 ];

	ATgPawn_execSetPushBlockParam_Parms SetPushBlockParam_Parms;
	SetPushBlockParam_Parms.fPushBlockPressure = fPushBlockPressure;
	SetPushBlockParam_Parms.fSlowVelSizeSquard = fSlowVelSizeSquard;
	SetPushBlockParam_Parms.fVelModifier = fVelModifier;

	this->ProcessEvent ( pFnSetPushBlockParam, &SetPushBlockParam_Parms, NULL );
};

// Function TgGame.TgPawn.SetPushBlockParamHelper
// [0x00020002] 
// Parameters infos:
// float                          fPushBlockPressure             ( CPF_Parm )
// float                          fSlowVelSizeSquard             ( CPF_Parm )
// float                          fVelModifier                   ( CPF_Parm )

void ATgPawn::SetPushBlockParamHelper ( float fPushBlockPressure, float fSlowVelSizeSquard, float fVelModifier )
{
	static UFunction* pFnSetPushBlockParamHelper = NULL;

	if ( ! pFnSetPushBlockParamHelper )
		pFnSetPushBlockParamHelper = (UFunction*) UObject::GObjObjects()->Data[ 42554 ];

	ATgPawn_execSetPushBlockParamHelper_Parms SetPushBlockParamHelper_Parms;
	SetPushBlockParamHelper_Parms.fPushBlockPressure = fPushBlockPressure;
	SetPushBlockParamHelper_Parms.fSlowVelSizeSquard = fSlowVelSizeSquard;
	SetPushBlockParamHelper_Parms.fVelModifier = fVelModifier;

	this->ProcessEvent ( pFnSetPushBlockParamHelper, &SetPushBlockParamHelper_Parms, NULL );
};

// Function TgGame.TgPawn.SetDeviceTypeAnim
// [0x00020102] 
// Parameters infos:
// int                            NewActiveChild                 ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void ATgPawn::SetDeviceTypeAnim ( int NewActiveChild, float BlendTime )
{
	static UFunction* pFnSetDeviceTypeAnim = NULL;

	if ( ! pFnSetDeviceTypeAnim )
		pFnSetDeviceTypeAnim = (UFunction*) UObject::GObjObjects()->Data[ 42550 ];

	ATgPawn_execSetDeviceTypeAnim_Parms SetDeviceTypeAnim_Parms;
	SetDeviceTypeAnim_Parms.NewActiveChild = NewActiveChild;
	SetDeviceTypeAnim_Parms.BlendTime = BlendTime;

	this->ProcessEvent ( pFnSetDeviceTypeAnim, &SetDeviceTypeAnim_Parms, NULL );
};

// Function TgGame.TgPawn.RemoveAlarmBotDetectionFX
// [0x00020102] 
// Parameters infos:

void ATgPawn::RemoveAlarmBotDetectionFX ( )
{
	static UFunction* pFnRemoveAlarmBotDetectionFX = NULL;

	if ( ! pFnRemoveAlarmBotDetectionFX )
		pFnRemoveAlarmBotDetectionFX = (UFunction*) UObject::GObjObjects()->Data[ 42549 ];

	ATgPawn_execRemoveAlarmBotDetectionFX_Parms RemoveAlarmBotDetectionFX_Parms;

	this->ProcessEvent ( pFnRemoveAlarmBotDetectionFX, &RemoveAlarmBotDetectionFX_Parms, NULL );
};

// Function TgGame.TgPawn.OnDetectedByAnAlarmBot
// [0x00020102] 
// Parameters infos:

void ATgPawn::OnDetectedByAnAlarmBot ( )
{
	static UFunction* pFnOnDetectedByAnAlarmBot = NULL;

	if ( ! pFnOnDetectedByAnAlarmBot )
		pFnOnDetectedByAnAlarmBot = (UFunction*) UObject::GObjObjects()->Data[ 42548 ];

	ATgPawn_execOnDetectedByAnAlarmBot_Parms OnDetectedByAnAlarmBot_Parms;

	this->ProcessEvent ( pFnOnDetectedByAnAlarmBot, &OnDetectedByAnAlarmBot_Parms, NULL );
};

// Function TgGame.TgPawn.OnPhaseTransitionComplete
// [0x00020100] 
// Parameters infos:

void ATgPawn::OnPhaseTransitionComplete ( )
{
	static UFunction* pFnOnPhaseTransitionComplete = NULL;

	if ( ! pFnOnPhaseTransitionComplete )
		pFnOnPhaseTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 42547 ];

	ATgPawn_execOnPhaseTransitionComplete_Parms OnPhaseTransitionComplete_Parms;

	this->ProcessEvent ( pFnOnPhaseTransitionComplete, &OnPhaseTransitionComplete_Parms, NULL );
};

// Function TgGame.TgPawn.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 42545 ];

	ATgPawn_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn.OnPhaseEnded
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// int                            nPhaseThatEnded                ( CPF_Parm )

void ATgPawn::eventOnPhaseEnded ( int nPhaseThatEnded )
{
	static UFunction* pFnOnPhaseEnded = NULL;

	if ( ! pFnOnPhaseEnded )
		pFnOnPhaseEnded = (UFunction*) UObject::GObjObjects()->Data[ 42543 ];

	ATgPawn_eventOnPhaseEnded_Parms OnPhaseEnded_Parms;
	OnPhaseEnded_Parms.nPhaseThatEnded = nPhaseThatEnded;

	this->ProcessEvent ( pFnOnPhaseEnded, &OnPhaseEnded_Parms, NULL );
};

// Function TgGame.TgPawn.BaseChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 42541 ];

	ATgPawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function TgGame.TgPawn.ClientClosedVendorScene
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventClientClosedVendorScene ( )
{
	static UFunction* pFnClientClosedVendorScene = NULL;

	if ( ! pFnClientClosedVendorScene )
		pFnClientClosedVendorScene = (UFunction*) UObject::GObjObjects()->Data[ 42540 ];

	ATgPawn_eventClientClosedVendorScene_Parms ClientClosedVendorScene_Parms;

	this->ProcessEvent ( pFnClientClosedVendorScene, &ClientClosedVendorScene_Parms, NULL );
};

// Function TgGame.TgPawn.CanPickupDroppedItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanPickupDroppedItem ( )
{
	static UFunction* pFnCanPickupDroppedItem = NULL;

	if ( ! pFnCanPickupDroppedItem )
		pFnCanPickupDroppedItem = (UFunction*) UObject::GObjObjects()->Data[ 42538 ];

	ATgPawn_execCanPickupDroppedItem_Parms CanPickupDroppedItem_Parms;

	this->ProcessEvent ( pFnCanPickupDroppedItem, &CanPickupDroppedItem_Parms, NULL );

	return CanPickupDroppedItem_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetRestDevice
// [0x00020002] 
// Parameters infos:
// class ATgDevice*               newDev                         ( CPF_Parm )

void ATgPawn::SetRestDevice ( class ATgDevice* newDev )
{
	static UFunction* pFnSetRestDevice = NULL;

	if ( ! pFnSetRestDevice )
		pFnSetRestDevice = (UFunction*) UObject::GObjObjects()->Data[ 42536 ];

	ATgPawn_execSetRestDevice_Parms SetRestDevice_Parms;
	SetRestDevice_Parms.newDev = newDev;

	this->ProcessEvent ( pFnSetRestDevice, &SetRestDevice_Parms, NULL );
};

// Function TgGame.TgPawn.PickUpBot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 pReceiver                      ( CPF_Parm )

bool ATgPawn::PickUpBot ( class ATgPawn* pReceiver )
{
	static UFunction* pFnPickUpBot = NULL;

	if ( ! pFnPickUpBot )
		pFnPickUpBot = (UFunction*) UObject::GObjObjects()->Data[ 42533 ];

	ATgPawn_execPickUpBot_Parms PickUpBot_Parms;
	PickUpBot_Parms.pReceiver = pReceiver;

	this->ProcessEvent ( pFnPickUpBot, &PickUpBot_Parms, NULL );

	return PickUpBot_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CanBePickedUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanBePickedUp ( )
{
	static UFunction* pFnCanBePickedUp = NULL;

	if ( ! pFnCanBePickedUp )
		pFnCanBePickedUp = (UFunction*) UObject::GObjObjects()->Data[ 42531 ];

	ATgPawn_execCanBePickedUp_Parms CanBePickedUp_Parms;

	this->ProcessEvent ( pFnCanBePickedUp, &CanBePickedUp_Parms, NULL );

	return CanBePickedUp_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PickupNearestBot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::PickupNearestBot ( )
{
	static UFunction* pFnPickupNearestBot = NULL;

	if ( ! pFnPickupNearestBot )
		pFnPickupNearestBot = (UFunction*) UObject::GObjObjects()->Data[ 42525 ];

	ATgPawn_execPickupNearestBot_Parms PickupNearestBot_Parms;

	this->ProcessEvent ( pFnPickupNearestBot, &PickupNearestBot_Parms, NULL );

	return PickupNearestBot_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsCrewed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsCrewed ( )
{
	static UFunction* pFnIsCrewed = NULL;

	if ( ! pFnIsCrewed )
		pFnIsCrewed = (UFunction*) UObject::GObjObjects()->Data[ 42523 ];

	ATgPawn_eventIsCrewed_Parms IsCrewed_Parms;

	this->ProcessEvent ( pFnIsCrewed, &IsCrewed_Parms, NULL );

	return IsCrewed_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ClientOnCrewingBot
// [0x00020002] 
// Parameters infos:

void ATgPawn::ClientOnCrewingBot ( )
{
	static UFunction* pFnClientOnCrewingBot = NULL;

	if ( ! pFnClientOnCrewingBot )
		pFnClientOnCrewingBot = (UFunction*) UObject::GObjObjects()->Data[ 42522 ];

	ATgPawn_execClientOnCrewingBot_Parms ClientOnCrewingBot_Parms;

	this->ProcessEvent ( pFnClientOnCrewingBot, &ClientOnCrewingBot_Parms, NULL );
};

// Function TgGame.TgPawn.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgPawn::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42516 ];

	ATgPawn_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgPawn.CanBeCrewedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )

bool ATgPawn::CanBeCrewedBy ( class ATgPawn* P )
{
	static UFunction* pFnCanBeCrewedBy = NULL;

	if ( ! pFnCanBeCrewedBy )
		pFnCanBeCrewedBy = (UFunction*) UObject::GObjObjects()->Data[ 42513 ];

	ATgPawn_execCanBeCrewedBy_Parms CanBeCrewedBy_Parms;
	CanBeCrewedBy_Parms.P = P;

	this->ProcessEvent ( pFnCanBeCrewedBy, &CanBeCrewedBy_Parms, NULL );

	return CanBeCrewedBy_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetDevice
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            DeviceID                       ( CPF_Parm )

void ATgPawn::SetDevice ( int DeviceID )
{
	static UFunction* pFnSetDevice = NULL;

	if ( ! pFnSetDevice )
		pFnSetDevice = (UFunction*) UObject::GObjObjects()->Data[ 42511 ];

	ATgPawn_execSetDevice_Parms SetDevice_Parms;
	SetDevice_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnSetDevice, &SetDevice_Parms, NULL );
};

// Function TgGame.TgPawn.GetPlayerId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::eventGetPlayerId ( )
{
	static UFunction* pFnGetPlayerId = NULL;

	if ( ! pFnGetPlayerId )
		pFnGetPlayerId = (UFunction*) UObject::GObjObjects()->Data[ 42508 ];

	ATgPawn_eventGetPlayerId_Parms GetPlayerId_Parms;

	this->ProcessEvent ( pFnGetPlayerId, &GetPlayerId_Parms, NULL );

	return GetPlayerId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ResetMoralePoints
// [0x00020002] 
// Parameters infos:

void ATgPawn::ResetMoralePoints ( )
{
	static UFunction* pFnResetMoralePoints = NULL;

	if ( ! pFnResetMoralePoints )
		pFnResetMoralePoints = (UFunction*) UObject::GObjObjects()->Data[ 42507 ];

	ATgPawn_execResetMoralePoints_Parms ResetMoralePoints_Parms;

	this->ProcessEvent ( pFnResetMoralePoints, &ResetMoralePoints_Parms, NULL );
};

// Function TgGame.TgPawn.Shoulderpads
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::Shoulderpads ( unsigned long bOn )
{
	static UFunction* pFnShoulderpads = NULL;

	if ( ! pFnShoulderpads )
		pFnShoulderpads = (UFunction*) UObject::GObjObjects()->Data[ 42504 ];

	ATgPawn_execShoulderpads_Parms Shoulderpads_Parms;
	Shoulderpads_Parms.bOn = bOn;

	this->ProcessEvent ( pFnShoulderpads, &Shoulderpads_Parms, NULL );
};

// Function TgGame.TgPawn.GetGenderTypeCode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::eventGetGenderTypeCode ( )
{
	static UFunction* pFnGetGenderTypeCode = NULL;

	if ( ! pFnGetGenderTypeCode )
		pFnGetGenderTypeCode = (UFunction*) UObject::GObjObjects()->Data[ 42502 ];

	ATgPawn_eventGetGenderTypeCode_Parms GetGenderTypeCode_Parms;

	this->ProcessEvent ( pFnGetGenderTypeCode, &GetGenderTypeCode_Parms, NULL );

	return GetGenderTypeCode_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsMedic
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsMedic ( )
{
	static UFunction* pFnIsMedic = NULL;

	if ( ! pFnIsMedic )
		pFnIsMedic = (UFunction*) UObject::GObjObjects()->Data[ 42500 ];

	ATgPawn_eventIsMedic_Parms IsMedic_Parms;

	this->ProcessEvent ( pFnIsMedic, &IsMedic_Parms, NULL );

	return IsMedic_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ResetClientUIAndSensorsOnWeaponChange
// [0x00020002] 
// Parameters infos:

void ATgPawn::ResetClientUIAndSensorsOnWeaponChange ( )
{
	static UFunction* pFnResetClientUIAndSensorsOnWeaponChange = NULL;

	if ( ! pFnResetClientUIAndSensorsOnWeaponChange )
		pFnResetClientUIAndSensorsOnWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 42497 ];

	ATgPawn_execResetClientUIAndSensorsOnWeaponChange_Parms ResetClientUIAndSensorsOnWeaponChange_Parms;

	this->ProcessEvent ( pFnResetClientUIAndSensorsOnWeaponChange, &ResetClientUIAndSensorsOnWeaponChange_Parms, NULL );
};

// Function TgGame.TgPawn.AimModeAllowed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventAimModeAllowed ( )
{
	static UFunction* pFnAimModeAllowed = NULL;

	if ( ! pFnAimModeAllowed )
		pFnAimModeAllowed = (UFunction*) UObject::GObjObjects()->Data[ 42494 ];

	ATgPawn_eventAimModeAllowed_Parms AimModeAllowed_Parms;

	this->ProcessEvent ( pFnAimModeAllowed, &AimModeAllowed_Parms, NULL );

	return AimModeAllowed_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetCameraValues
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FTgCameraValues         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTgCameraValues ATgPawn::eventGetCameraValues ( )
{
	static UFunction* pFnGetCameraValues = NULL;

	if ( ! pFnGetCameraValues )
		pFnGetCameraValues = (UFunction*) UObject::GObjObjects()->Data[ 42488 ];

	ATgPawn_eventGetCameraValues_Parms GetCameraValues_Parms;

	this->ProcessEvent ( pFnGetCameraValues, &GetCameraValues_Parms, NULL );

	return GetCameraValues_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsValidMeleeTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 ProspectiveMeleeTarget         ( CPF_Parm )

bool ATgPawn::IsValidMeleeTarget ( class ATgPawn* ProspectiveMeleeTarget )
{
	static UFunction* pFnIsValidMeleeTarget = NULL;

	if ( ! pFnIsValidMeleeTarget )
		pFnIsValidMeleeTarget = (UFunction*) UObject::GObjObjects()->Data[ 42484 ];

	ATgPawn_execIsValidMeleeTarget_Parms IsValidMeleeTarget_Parms;
	IsValidMeleeTarget_Parms.ProspectiveMeleeTarget = ProspectiveMeleeTarget;

	this->ProcessEvent ( pFnIsValidMeleeTarget, &IsValidMeleeTarget_Parms, NULL );

	return IsValidMeleeTarget_Parms.ReturnValue;
};

// Function TgGame.TgPawn.EndSkydiving
// [0x00020102] 
// Parameters infos:

void ATgPawn::EndSkydiving ( )
{
	static UFunction* pFnEndSkydiving = NULL;

	if ( ! pFnEndSkydiving )
		pFnEndSkydiving = (UFunction*) UObject::GObjObjects()->Data[ 42483 ];

	ATgPawn_execEndSkydiving_Parms EndSkydiving_Parms;

	this->ProcessEvent ( pFnEndSkydiving, &EndSkydiving_Parms, NULL );
};

// Function TgGame.TgPawn.StartSkydiving
// [0x00020102] 
// Parameters infos:
// class ATgSkydivingVolume*      V                              ( CPF_Parm )

void ATgPawn::StartSkydiving ( class ATgSkydivingVolume* V )
{
	static UFunction* pFnStartSkydiving = NULL;

	if ( ! pFnStartSkydiving )
		pFnStartSkydiving = (UFunction*) UObject::GObjObjects()->Data[ 42477 ];

	ATgPawn_execStartSkydiving_Parms StartSkydiving_Parms;
	StartSkydiving_Parms.V = V;

	this->ProcessEvent ( pFnStartSkydiving, &StartSkydiving_Parms, NULL );
};

// Function TgGame.TgPawn.SaveDeathInfoForZoomCam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 KillerOwner                    ( CPF_Parm )
// class ATgPawn*                 Killer                         ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// unsigned long                  bPetKill                       ( CPF_Parm )

void ATgPawn::eventSaveDeathInfoForZoomCam ( class ATgPawn* KillerOwner, class ATgPawn* Killer, int DeviceID, unsigned long bPetKill )
{
	static UFunction* pFnSaveDeathInfoForZoomCam = NULL;

	if ( ! pFnSaveDeathInfoForZoomCam )
		pFnSaveDeathInfoForZoomCam = (UFunction*) UObject::GObjObjects()->Data[ 42468 ];

	ATgPawn_eventSaveDeathInfoForZoomCam_Parms SaveDeathInfoForZoomCam_Parms;
	SaveDeathInfoForZoomCam_Parms.KillerOwner = KillerOwner;
	SaveDeathInfoForZoomCam_Parms.Killer = Killer;
	SaveDeathInfoForZoomCam_Parms.DeviceID = DeviceID;
	SaveDeathInfoForZoomCam_Parms.bPetKill = bPetKill;

	this->ProcessEvent ( pFnSaveDeathInfoForZoomCam, &SaveDeathInfoForZoomCam_Parms, NULL );
};

// Function TgGame.TgPawn.ClientSendBuff
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FBuffInfo               theBuffInfo                    ( CPF_Parm )

void ATgPawn::eventClientSendBuff ( struct FBuffInfo theBuffInfo )
{
	static UFunction* pFnClientSendBuff = NULL;

	if ( ! pFnClientSendBuff )
		pFnClientSendBuff = (UFunction*) UObject::GObjObjects()->Data[ 42465 ];

	ATgPawn_eventClientSendBuff_Parms ClientSendBuff_Parms;
	memcpy ( &ClientSendBuff_Parms.theBuffInfo, &theBuffInfo, 0x30 );

	this->ProcessEvent ( pFnClientSendBuff, &ClientSendBuff_Parms, NULL );
};

// Function TgGame.TgPawn.InitKnockdown
// [0x00020102] 
// Parameters infos:

void ATgPawn::InitKnockdown ( )
{
	static UFunction* pFnInitKnockdown = NULL;

	if ( ! pFnInitKnockdown )
		pFnInitKnockdown = (UFunction*) UObject::GObjObjects()->Data[ 42464 ];

	ATgPawn_execInitKnockdown_Parms InitKnockdown_Parms;

	this->ProcessEvent ( pFnInitKnockdown, &InitKnockdown_Parms, NULL );
};

// Function TgGame.TgPawn.Stun
// [0x00024102] 
// Parameters infos:
// unsigned long                  bStunController                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::Stun ( unsigned long bStunController, unsigned char eType )
{
	static UFunction* pFnStun = NULL;

	if ( ! pFnStun )
		pFnStun = (UFunction*) UObject::GObjObjects()->Data[ 42461 ];

	ATgPawn_execStun_Parms Stun_Parms;
	Stun_Parms.bStunController = bStunController;
	Stun_Parms.eType = eType;

	this->ProcessEvent ( pFnStun, &Stun_Parms, NULL );
};

// Function TgGame.TgPawn.HangingPropelDismountTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::HangingPropelDismountTimer ( )
{
	static UFunction* pFnHangingPropelDismountTimer = NULL;

	if ( ! pFnHangingPropelDismountTimer )
		pFnHangingPropelDismountTimer = (UFunction*) UObject::GObjObjects()->Data[ 42460 ];

	ATgPawn_execHangingPropelDismountTimer_Parms HangingPropelDismountTimer_Parms;

	this->ProcessEvent ( pFnHangingPropelDismountTimer, &HangingPropelDismountTimer_Parms, NULL );
};

// Function TgGame.TgPawn.LetGoOfHangingLedge
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// float                          SecondsBeforePawnCanHangAgain  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventLetGoOfHangingLedge ( float SecondsBeforePawnCanHangAgain )
{
	static UFunction* pFnLetGoOfHangingLedge = NULL;

	if ( ! pFnLetGoOfHangingLedge )
		pFnLetGoOfHangingLedge = (UFunction*) UObject::GObjObjects()->Data[ 42458 ];

	ATgPawn_eventLetGoOfHangingLedge_Parms LetGoOfHangingLedge_Parms;
	LetGoOfHangingLedge_Parms.SecondsBeforePawnCanHangAgain = SecondsBeforePawnCanHangAgain;

	this->ProcessEvent ( pFnLetGoOfHangingLedge, &LetGoOfHangingLedge_Parms, NULL );
};

// Function TgGame.TgPawn.IsPet
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsPet ( )
{
	static UFunction* pFnIsPet = NULL;

	if ( ! pFnIsPet )
		pFnIsPet = (UFunction*) UObject::GObjObjects()->Data[ 42456 ];

	ATgPawn_eventIsPet_Parms IsPet_Parms;

	this->ProcessEvent ( pFnIsPet, &IsPet_Parms, NULL );

	return IsPet_Parms.ReturnValue;
};

// Function TgGame.TgPawn.TriggerBeaconEntrance
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventTriggerBeaconEntrance ( )
{
	static UFunction* pFnTriggerBeaconEntrance = NULL;

	if ( ! pFnTriggerBeaconEntrance )
		pFnTriggerBeaconEntrance = (UFunction*) UObject::GObjObjects()->Data[ 42452 ];

	ATgPawn_eventTriggerBeaconEntrance_Parms TriggerBeaconEntrance_Parms;

	this->ProcessEvent ( pFnTriggerBeaconEntrance, &TriggerBeaconEntrance_Parms, NULL );
};

// Function TgGame.TgPawn.ClearTeleportDelayTimer
// [0x00020002] 
// Parameters infos:

void ATgPawn::ClearTeleportDelayTimer ( )
{
	static UFunction* pFnClearTeleportDelayTimer = NULL;

	if ( ! pFnClearTeleportDelayTimer )
		pFnClearTeleportDelayTimer = (UFunction*) UObject::GObjObjects()->Data[ 42451 ];

	ATgPawn_execClearTeleportDelayTimer_Parms ClearTeleportDelayTimer_Parms;

	this->ProcessEvent ( pFnClearTeleportDelayTimer, &ClearTeleportDelayTimer_Parms, NULL );
};

// Function TgGame.TgPawn.SetTeleportDelayTimer
// [0x00020002] 
// Parameters infos:
// float                          Delay                          ( CPF_Parm )

void ATgPawn::SetTeleportDelayTimer ( float Delay )
{
	static UFunction* pFnSetTeleportDelayTimer = NULL;

	if ( ! pFnSetTeleportDelayTimer )
		pFnSetTeleportDelayTimer = (UFunction*) UObject::GObjObjects()->Data[ 42449 ];

	ATgPawn_execSetTeleportDelayTimer_Parms SetTeleportDelayTimer_Parms;
	SetTeleportDelayTimer_Parms.Delay = Delay;

	this->ProcessEvent ( pFnSetTeleportDelayTimer, &SetTeleportDelayTimer_Parms, NULL );
};

// Function TgGame.TgPawn.GotoBeacon
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class ATgDeploy_Beacon*        beacon                         ( CPF_Parm )

void ATgPawn::eventGotoBeacon ( class ATgDeploy_Beacon* beacon )
{
	static UFunction* pFnGotoBeacon = NULL;

	if ( ! pFnGotoBeacon )
		pFnGotoBeacon = (UFunction*) UObject::GObjObjects()->Data[ 42446 ];

	ATgPawn_eventGotoBeacon_Parms GotoBeacon_Parms;
	GotoBeacon_Parms.beacon = beacon;

	this->ProcessEvent ( pFnGotoBeacon, &GotoBeacon_Parms, NULL );
};

// Function TgGame.TgPawn.Teleport
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 vDest                          ( CPF_Parm )
// struct FRotator                rDest                          ( CPF_Parm )
// unsigned long                  bPlayFx                        ( CPF_Parm )

void ATgPawn::eventTeleport ( struct FVector vDest, struct FRotator rDest, unsigned long bPlayFx )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 42438 ];

	ATgPawn_eventTeleport_Parms Teleport_Parms;
	memcpy ( &Teleport_Parms.vDest, &vDest, 0xC );
	memcpy ( &Teleport_Parms.rDest, &rDest, 0xC );
	Teleport_Parms.bPlayFx = bPlayFx;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function TgGame.TgPawn.TeleportTraceCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vTestLoc                       ( CPF_Parm )
// struct FVector                 vDestLoc                       ( CPF_Parm )

bool ATgPawn::TeleportTraceCheck ( struct FVector vTestLoc, struct FVector vDestLoc )
{
	static UFunction* pFnTeleportTraceCheck = NULL;

	if ( ! pFnTeleportTraceCheck )
		pFnTeleportTraceCheck = (UFunction*) UObject::GObjObjects()->Data[ 42434 ];

	ATgPawn_execTeleportTraceCheck_Parms TeleportTraceCheck_Parms;
	memcpy ( &TeleportTraceCheck_Parms.vTestLoc, &vTestLoc, 0xC );
	memcpy ( &TeleportTraceCheck_Parms.vDestLoc, &vDestLoc, 0xC );

	pFnTeleportTraceCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeleportTraceCheck, &TeleportTraceCheck_Parms, NULL );

	pFnTeleportTraceCheck->FunctionFlags |= 0x400;

	return TeleportTraceCheck_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PickupNearestDeployable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::PickupNearestDeployable ( )
{
	static UFunction* pFnPickupNearestDeployable = NULL;

	if ( ! pFnPickupNearestDeployable )
		pFnPickupNearestDeployable = (UFunction*) UObject::GObjObjects()->Data[ 42429 ];

	ATgPawn_execPickupNearestDeployable_Parms PickupNearestDeployable_Parms;

	this->ProcessEvent ( pFnPickupNearestDeployable, &PickupNearestDeployable_Parms, NULL );

	return PickupNearestDeployable_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DebugEmitterMask
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            MaskValue                      ( CPF_Parm )

void ATgPawn::DebugEmitterMask ( int MaskValue )
{
	static UFunction* pFnDebugEmitterMask = NULL;

	if ( ! pFnDebugEmitterMask )
		pFnDebugEmitterMask = (UFunction*) UObject::GObjObjects()->Data[ 42427 ];

	ATgPawn_execDebugEmitterMask_Parms DebugEmitterMask_Parms;
	DebugEmitterMask_Parms.MaskValue = MaskValue;

	this->ProcessEvent ( pFnDebugEmitterMask, &DebugEmitterMask_Parms, NULL );
};

// Function TgGame.TgPawn.KillPets
// [0x00020002] 
// Parameters infos:

void ATgPawn::KillPets ( )
{
	static UFunction* pFnKillPets = NULL;

	if ( ! pFnKillPets )
		pFnKillPets = (UFunction*) UObject::GObjObjects()->Data[ 42425 ];

	ATgPawn_execKillPets_Parms KillPets_Parms;

	this->ProcessEvent ( pFnKillPets, &KillPets_Parms, NULL );
};

// Function TgGame.TgPawn.GetCurrentOwnerPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgPawn::GetCurrentOwnerPawn ( )
{
	static UFunction* pFnGetCurrentOwnerPawn = NULL;

	if ( ! pFnGetCurrentOwnerPawn )
		pFnGetCurrentOwnerPawn = (UFunction*) UObject::GObjObjects()->Data[ 42423 ];

	ATgPawn_execGetCurrentOwnerPawn_Parms GetCurrentOwnerPawn_Parms;

	pFnGetCurrentOwnerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentOwnerPawn, &GetCurrentOwnerPawn_Parms, NULL );

	pFnGetCurrentOwnerPawn->FunctionFlags |= 0x400;

	return GetCurrentOwnerPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.WasPlayerControlled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::WasPlayerControlled ( )
{
	static UFunction* pFnWasPlayerControlled = NULL;

	if ( ! pFnWasPlayerControlled )
		pFnWasPlayerControlled = (UFunction*) UObject::GObjObjects()->Data[ 42421 ];

	ATgPawn_execWasPlayerControlled_Parms WasPlayerControlled_Parms;

	pFnWasPlayerControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWasPlayerControlled, &WasPlayerControlled_Parms, NULL );

	pFnWasPlayerControlled->FunctionFlags |= 0x400;

	return WasPlayerControlled_Parms.ReturnValue;
};

// Function TgGame.TgPawn.WasPlayerSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::WasPlayerSpawned ( )
{
	static UFunction* pFnWasPlayerSpawned = NULL;

	if ( ! pFnWasPlayerSpawned )
		pFnWasPlayerSpawned = (UFunction*) UObject::GObjObjects()->Data[ 42419 ];

	ATgPawn_execWasPlayerSpawned_Parms WasPlayerSpawned_Parms;

	pFnWasPlayerSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWasPlayerSpawned, &WasPlayerSpawned_Parms, NULL );

	pFnWasPlayerSpawned->FunctionFlags |= 0x400;

	return WasPlayerSpawned_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetSensorAlertLevel
// [0x00020002] 
// Parameters infos:
// int                            nNewLevel                      ( CPF_Parm )

void ATgPawn::SetSensorAlertLevel ( int nNewLevel )
{
	static UFunction* pFnSetSensorAlertLevel = NULL;

	if ( ! pFnSetSensorAlertLevel )
		pFnSetSensorAlertLevel = (UFunction*) UObject::GObjObjects()->Data[ 42417 ];

	ATgPawn_execSetSensorAlertLevel_Parms SetSensorAlertLevel_Parms;
	SetSensorAlertLevel_Parms.nNewLevel = nNewLevel;

	this->ProcessEvent ( pFnSetSensorAlertLevel, &SetSensorAlertLevel_Parms, NULL );
};

// Function TgGame.TgPawn.SetAllowAddMoralePoints
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAllowAdd                      ( CPF_Parm )

void ATgPawn::SetAllowAddMoralePoints ( unsigned long bAllowAdd )
{
	static UFunction* pFnSetAllowAddMoralePoints = NULL;

	if ( ! pFnSetAllowAddMoralePoints )
		pFnSetAllowAddMoralePoints = (UFunction*) UObject::GObjObjects()->Data[ 42415 ];

	ATgPawn_execSetAllowAddMoralePoints_Parms SetAllowAddMoralePoints_Parms;
	SetAllowAddMoralePoints_Parms.bAllowAdd = bAllowAdd;

	this->ProcessEvent ( pFnSetAllowAddMoralePoints, &SetAllowAddMoralePoints_Parms, NULL );
};

// Function TgGame.TgPawn.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 42411 ];

	ATgPawn_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn.DoubleCheckSimulatedProxy
// [0x00020102] 
// Parameters infos:

void ATgPawn::DoubleCheckSimulatedProxy ( )
{
	static UFunction* pFnDoubleCheckSimulatedProxy = NULL;

	if ( ! pFnDoubleCheckSimulatedProxy )
		pFnDoubleCheckSimulatedProxy = (UFunction*) UObject::GObjObjects()->Data[ 42409 ];

	ATgPawn_execDoubleCheckSimulatedProxy_Parms DoubleCheckSimulatedProxy_Parms;

	this->ProcessEvent ( pFnDoubleCheckSimulatedProxy, &DoubleCheckSimulatedProxy_Parms, NULL );
};

// Function TgGame.TgPawn.TickFriendlyPush
// [0x00820102] 
// Parameters infos:

void ATgPawn::TickFriendlyPush ( )
{
	static UFunction* pFnTickFriendlyPush = NULL;

	if ( ! pFnTickFriendlyPush )
		pFnTickFriendlyPush = (UFunction*) UObject::GObjObjects()->Data[ 42405 ];

	ATgPawn_execTickFriendlyPush_Parms TickFriendlyPush_Parms;

	this->ProcessEvent ( pFnTickFriendlyPush, &TickFriendlyPush_Parms, NULL );
};

// Function TgGame.TgPawn.ConsumePowerPool
// [0x00020002] 
// Parameters infos:
// float                          Amount                         ( CPF_Parm )

void ATgPawn::ConsumePowerPool ( float Amount )
{
	static UFunction* pFnConsumePowerPool = NULL;

	if ( ! pFnConsumePowerPool )
		pFnConsumePowerPool = (UFunction*) UObject::GObjObjects()->Data[ 42403 ];

	ATgPawn_execConsumePowerPool_Parms ConsumePowerPool_Parms;
	ConsumePowerPool_Parms.Amount = Amount;

	this->ProcessEvent ( pFnConsumePowerPool, &ConsumePowerPool_Parms, NULL );
};

// Function TgGame.TgPawn.ShouldRechargePowerPool
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventShouldRechargePowerPool ( )
{
	static UFunction* pFnShouldRechargePowerPool = NULL;

	if ( ! pFnShouldRechargePowerPool )
		pFnShouldRechargePowerPool = (UFunction*) UObject::GObjObjects()->Data[ 42399 ];

	ATgPawn_eventShouldRechargePowerPool_Parms ShouldRechargePowerPool_Parms;

	this->ProcessEvent ( pFnShouldRechargePowerPool, &ShouldRechargePowerPool_Parms, NULL );

	return ShouldRechargePowerPool_Parms.ReturnValue;
};

// Function TgGame.TgPawn.FPT
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void ATgPawn::FPT ( float X, float Y, float Z )
{
	static UFunction* pFnFPT = NULL;

	if ( ! pFnFPT )
		pFnFPT = (UFunction*) UObject::GObjObjects()->Data[ 42395 ];

	ATgPawn_execFPT_Parms FPT_Parms;
	FPT_Parms.X = X;
	FPT_Parms.Y = Y;
	FPT_Parms.Z = Z;

	this->ProcessEvent ( pFnFPT, &FPT_Parms, NULL );
};

// Function TgGame.TgPawn.LogAnimSetUpdates
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::LogAnimSetUpdates ( )
{
	static UFunction* pFnLogAnimSetUpdates = NULL;

	if ( ! pFnLogAnimSetUpdates )
		pFnLogAnimSetUpdates = (UFunction*) UObject::GObjObjects()->Data[ 42394 ];

	ATgPawn_execLogAnimSetUpdates_Parms LogAnimSetUpdates_Parms;

	this->ProcessEvent ( pFnLogAnimSetUpdates, &LogAnimSetUpdates_Parms, NULL );
};

// Function TgGame.TgPawn.ShowMeleeSlice
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::ShowMeleeSlice ( )
{
	static UFunction* pFnShowMeleeSlice = NULL;

	if ( ! pFnShowMeleeSlice )
		pFnShowMeleeSlice = (UFunction*) UObject::GObjObjects()->Data[ 42393 ];

	ATgPawn_execShowMeleeSlice_Parms ShowMeleeSlice_Parms;

	this->ProcessEvent ( pFnShowMeleeSlice, &ShowMeleeSlice_Parms, NULL );
};

// Function TgGame.TgPawn.gunFOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          MyGunFOV                       ( CPF_Parm )

void ATgPawn::gunFOV ( float MyGunFOV )
{
	static UFunction* pFngunFOV = NULL;

	if ( ! pFngunFOV )
		pFngunFOV = (UFunction*) UObject::GObjObjects()->Data[ 42391 ];

	ATgPawn_execgunFOV_Parms gunFOV_Parms;
	gunFOV_Parms.MyGunFOV = MyGunFOV;

	this->ProcessEvent ( pFngunFOV, &gunFOV_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetTestGlobalVar
// [0x002200C2] 
// Parameters infos:
// int                            aVar                           ( CPF_Parm )

void ATgPawn::ServerSetTestGlobalVar ( int aVar )
{
	static UFunction* pFnServerSetTestGlobalVar = NULL;

	if ( ! pFnServerSetTestGlobalVar )
		pFnServerSetTestGlobalVar = (UFunction*) UObject::GObjObjects()->Data[ 42389 ];

	ATgPawn_execServerSetTestGlobalVar_Parms ServerSetTestGlobalVar_Parms;
	ServerSetTestGlobalVar_Parms.aVar = aVar;

	this->ProcessEvent ( pFnServerSetTestGlobalVar, &ServerSetTestGlobalVar_Parms, NULL );
};

// Function TgGame.TgPawn.SetTestGlobalVar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            aVar                           ( CPF_Parm )

void ATgPawn::SetTestGlobalVar ( int aVar )
{
	static UFunction* pFnSetTestGlobalVar = NULL;

	if ( ! pFnSetTestGlobalVar )
		pFnSetTestGlobalVar = (UFunction*) UObject::GObjObjects()->Data[ 42387 ];

	ATgPawn_execSetTestGlobalVar_Parms SetTestGlobalVar_Parms;
	SetTestGlobalVar_Parms.aVar = aVar;

	this->ProcessEvent ( pFnSetTestGlobalVar, &SetTestGlobalVar_Parms, NULL );
};

// Function TgGame.TgPawn.MWLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            logNumber                      ( CPF_Parm )

void ATgPawn::MWLog ( int logNumber )
{
	static UFunction* pFnMWLog = NULL;

	if ( ! pFnMWLog )
		pFnMWLog = (UFunction*) UObject::GObjObjects()->Data[ 42385 ];

	ATgPawn_execMWLog_Parms MWLog_Parms;
	MWLog_Parms.logNumber = logNumber;

	this->ProcessEvent ( pFnMWLog, &MWLog_Parms, NULL );
};

// Function TgGame.TgPawn.IsInBackStabPosition
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 Target                         ( CPF_Parm )

bool ATgPawn::IsInBackStabPosition ( class ATgPawn* Target )
{
	static UFunction* pFnIsInBackStabPosition = NULL;

	if ( ! pFnIsInBackStabPosition )
		pFnIsInBackStabPosition = (UFunction*) UObject::GObjObjects()->Data[ 42379 ];

	ATgPawn_execIsInBackStabPosition_Parms IsInBackStabPosition_Parms;
	IsInBackStabPosition_Parms.Target = Target;

	this->ProcessEvent ( pFnIsInBackStabPosition, &IsInBackStabPosition_Parms, NULL );

	return IsInBackStabPosition_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DisplayMessage
// [0x00020102] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::DisplayMessage ( struct FString sMessage )
{
	static UFunction* pFnDisplayMessage = NULL;

	if ( ! pFnDisplayMessage )
		pFnDisplayMessage = (UFunction*) UObject::GObjObjects()->Data[ 42377 ];

	ATgPawn_execDisplayMessage_Parms DisplayMessage_Parms;
	memcpy ( &DisplayMessage_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnDisplayMessage, &DisplayMessage_Parms, NULL );
};

// Function TgGame.TgPawn.UpdateMadeSound
// [0x00020102] 
// Parameters infos:

void ATgPawn::UpdateMadeSound ( )
{
	static UFunction* pFnUpdateMadeSound = NULL;

	if ( ! pFnUpdateMadeSound )
		pFnUpdateMadeSound = (UFunction*) UObject::GObjObjects()->Data[ 42376 ];

	ATgPawn_execUpdateMadeSound_Parms UpdateMadeSound_Parms;

	this->ProcessEvent ( pFnUpdateMadeSound, &UpdateMadeSound_Parms, NULL );
};

// Function TgGame.TgPawn.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgPawn::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42369 ];

	ATgPawn_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgPawn.OmegaVolumePropertiesChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOmegaVolumePropertiesChanged ( )
{
	static UFunction* pFnOmegaVolumePropertiesChanged = NULL;

	if ( ! pFnOmegaVolumePropertiesChanged )
		pFnOmegaVolumePropertiesChanged = (UFunction*) UObject::GObjObjects()->Data[ 42362 ];

	ATgPawn_eventOmegaVolumePropertiesChanged_Parms OmegaVolumePropertiesChanged_Parms;

	this->ProcessEvent ( pFnOmegaVolumePropertiesChanged, &OmegaVolumePropertiesChanged_Parms, NULL );
};

// Function TgGame.TgPawn.ModifyPawnPropertiesVolumeChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventModifyPawnPropertiesVolumeChanged ( )
{
	static UFunction* pFnModifyPawnPropertiesVolumeChanged = NULL;

	if ( ! pFnModifyPawnPropertiesVolumeChanged )
		pFnModifyPawnPropertiesVolumeChanged = (UFunction*) UObject::GObjObjects()->Data[ 42355 ];

	ATgPawn_eventModifyPawnPropertiesVolumeChanged_Parms ModifyPawnPropertiesVolumeChanged_Parms;

	this->ProcessEvent ( pFnModifyPawnPropertiesVolumeChanged, &ModifyPawnPropertiesVolumeChanged_Parms, NULL );
};

// Function TgGame.TgPawn.RiseFromYourGrave
// [0x00020302] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::RiseFromYourGrave ( )
{
	static UFunction* pFnRiseFromYourGrave = NULL;

	if ( ! pFnRiseFromYourGrave )
		pFnRiseFromYourGrave = (UFunction*) UObject::GObjObjects()->Data[ 42352 ];

	ATgPawn_execRiseFromYourGrave_Parms RiseFromYourGrave_Parms;

	this->ProcessEvent ( pFnRiseFromYourGrave, &RiseFromYourGrave_Parms, NULL );

	return RiseFromYourGrave_Parms.ReturnValue;
};

// Function TgGame.TgPawn.TurnOffBoneSprings
// [0x00020102] 
// Parameters infos:

void ATgPawn::TurnOffBoneSprings ( )
{
	static UFunction* pFnTurnOffBoneSprings = NULL;

	if ( ! pFnTurnOffBoneSprings )
		pFnTurnOffBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 42351 ];

	ATgPawn_execTurnOffBoneSprings_Parms TurnOffBoneSprings_Parms;

	this->ProcessEvent ( pFnTurnOffBoneSprings, &TurnOffBoneSprings_Parms, NULL );
};

// Function TgGame.TgPawn.OnRigidBodySpringOverextension
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class URB_BodyInstance*        BodyInstance                   ( CPF_Parm )

void ATgPawn::eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = (UFunction*) UObject::GObjObjects()->Data[ 42349 ];

	ATgPawn_eventOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;
	OnRigidBodySpringOverextension_Parms.BodyInstance = BodyInstance;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function TgGame.TgPawn.SetBoneSprings
// [0x00820102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPawn::SetBoneSprings ( unsigned long bEnabled )
{
	static UFunction* pFnSetBoneSprings = NULL;

	if ( ! pFnSetBoneSprings )
		pFnSetBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 42340 ];

	ATgPawn_execSetBoneSprings_Parms SetBoneSprings_Parms;
	SetBoneSprings_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetBoneSprings, &SetBoneSprings_Parms, NULL );
};

// Function TgGame.TgPawn.IsAngularBoneSpringName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPawn::IsAngularBoneSpringName ( struct FName InName )
{
	static UFunction* pFnIsAngularBoneSpringName = NULL;

	if ( ! pFnIsAngularBoneSpringName )
		pFnIsAngularBoneSpringName = (UFunction*) UObject::GObjObjects()->Data[ 42336 ];

	ATgPawn_execIsAngularBoneSpringName_Parms IsAngularBoneSpringName_Parms;
	memcpy ( &IsAngularBoneSpringName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsAngularBoneSpringName, &IsAngularBoneSpringName_Parms, NULL );

	return IsAngularBoneSpringName_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsLinearBoneSpringName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPawn::IsLinearBoneSpringName ( struct FName InName )
{
	static UFunction* pFnIsLinearBoneSpringName = NULL;

	if ( ! pFnIsLinearBoneSpringName )
		pFnIsLinearBoneSpringName = (UFunction*) UObject::GObjObjects()->Data[ 42332 ];

	ATgPawn_execIsLinearBoneSpringName_Parms IsLinearBoneSpringName_Parms;
	memcpy ( &IsLinearBoneSpringName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsLinearBoneSpringName, &IsLinearBoneSpringName_Parms, NULL );

	return IsLinearBoneSpringName_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetBonesFixed
// [0x00024102] 
// Parameters infos:
// unsigned long                  bSetAllBonesFixed              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SetBonesFixed ( unsigned long bSetAllBonesFixed )
{
	static UFunction* pFnSetBonesFixed = NULL;

	if ( ! pFnSetBonesFixed )
		pFnSetBonesFixed = (UFunction*) UObject::GObjObjects()->Data[ 42327 ];

	ATgPawn_execSetBonesFixed_Parms SetBonesFixed_Parms;
	SetBonesFixed_Parms.bSetAllBonesFixed = bSetAllBonesFixed;

	this->ProcessEvent ( pFnSetBonesFixed, &SetBonesFixed_Parms, NULL );
};

// Function TgGame.TgPawn.IsAimModeName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPawn::IsAimModeName ( struct FName InName )
{
	static UFunction* pFnIsAimModeName = NULL;

	if ( ! pFnIsAimModeName )
		pFnIsAimModeName = (UFunction*) UObject::GObjObjects()->Data[ 42323 ];

	ATgPawn_execIsAimModeName_Parms IsAimModeName_Parms;
	memcpy ( &IsAimModeName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsAimModeName, &IsAimModeName_Parms, NULL );

	return IsAimModeName_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsLowerBodyName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPawn::IsLowerBodyName ( struct FName InName )
{
	static UFunction* pFnIsLowerBodyName = NULL;

	if ( ! pFnIsLowerBodyName )
		pFnIsLowerBodyName = (UFunction*) UObject::GObjObjects()->Data[ 42319 ];

	ATgPawn_execIsLowerBodyName_Parms IsLowerBodyName_Parms;
	memcpy ( &IsLowerBodyName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsLowerBodyName, &IsLowerBodyName_Parms, NULL );

	return IsLowerBodyName_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetBodiesFixed
// [0x00020102] 
// Parameters infos:
// unsigned long                  InFixed                        ( CPF_Parm )

void ATgPawn::SetBodiesFixed ( unsigned long InFixed )
{
	static UFunction* pFnSetBodiesFixed = NULL;

	if ( ! pFnSetBodiesFixed )
		pFnSetBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 42317 ];

	ATgPawn_execSetBodiesFixed_Parms SetBodiesFixed_Parms;
	SetBodiesFixed_Parms.InFixed = InFixed;

	this->ProcessEvent ( pFnSetBodiesFixed, &SetBodiesFixed_Parms, NULL );
};

// Function TgGame.TgPawn.EnableMotors
// [0x00020102] 
// Parameters infos:
// unsigned long                  InEnabled                      ( CPF_Parm )

void ATgPawn::EnableMotors ( unsigned long InEnabled )
{
	static UFunction* pFnEnableMotors = NULL;

	if ( ! pFnEnableMotors )
		pFnEnableMotors = (UFunction*) UObject::GObjObjects()->Data[ 42315 ];

	ATgPawn_execEnableMotors_Parms EnableMotors_Parms;
	EnableMotors_Parms.InEnabled = InEnabled;

	this->ProcessEvent ( pFnEnableMotors, &EnableMotors_Parms, NULL );
};

// Function TgGame.TgPawn.SetPhysAnimState
// [0x00020302] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )

void ATgPawn::SetPhysAnimState ( unsigned char NewState )
{
	static UFunction* pFnSetPhysAnimState = NULL;

	if ( ! pFnSetPhysAnimState )
		pFnSetPhysAnimState = (UFunction*) UObject::GObjObjects()->Data[ 42312 ];

	ATgPawn_execSetPhysAnimState_Parms SetPhysAnimState_Parms;
	SetPhysAnimState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnSetPhysAnimState, &SetPhysAnimState_Parms, NULL );
};

// Function TgGame.TgPawn.PrePokeActor
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PokeDir                        ( CPF_Parm )

bool ATgPawn::PrePokeActor ( struct FVector PokeDir )
{
	static UFunction* pFnPrePokeActor = NULL;

	if ( ! pFnPrePokeActor )
		pFnPrePokeActor = (UFunction*) UObject::GObjObjects()->Data[ 42309 ];

	ATgPawn_execPrePokeActor_Parms PrePokeActor_Parms;
	memcpy ( &PrePokeActor_Parms.PokeDir, &PokeDir, 0xC );

	this->ProcessEvent ( pFnPrePokeActor, &PrePokeActor_Parms, NULL );

	return PrePokeActor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.BoneImpulse
// [0x00020102] 
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void ATgPawn::BoneImpulse ( struct FVector Impulse, struct FVector Loc, struct FName BoneName )
{
	static UFunction* pFnBoneImpulse = NULL;

	if ( ! pFnBoneImpulse )
		pFnBoneImpulse = (UFunction*) UObject::GObjObjects()->Data[ 42305 ];

	ATgPawn_execBoneImpulse_Parms BoneImpulse_Parms;
	memcpy ( &BoneImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &BoneImpulse_Parms.Loc, &Loc, 0xC );
	memcpy ( &BoneImpulse_Parms.BoneName, &BoneName, 0x8 );

	this->ProcessEvent ( pFnBoneImpulse, &BoneImpulse_Parms, NULL );
};

// Function TgGame.TgPawn.Poke
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  byHitType                      ( CPF_Parm )
// unsigned char                  byHitMagnitude                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 RayDirection                   ( CPF_Parm )

void ATgPawn::eventPoke ( unsigned char byHitType, unsigned char byHitMagnitude, struct FVector HitLocation, struct FVector RayDirection )
{
	static UFunction* pFnPoke = NULL;

	if ( ! pFnPoke )
		pFnPoke = (UFunction*) UObject::GObjObjects()->Data[ 42298 ];

	ATgPawn_eventPoke_Parms Poke_Parms;
	Poke_Parms.byHitType = byHitType;
	Poke_Parms.byHitMagnitude = byHitMagnitude;
	memcpy ( &Poke_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Poke_Parms.RayDirection, &RayDirection, 0xC );

	this->ProcessEvent ( pFnPoke, &Poke_Parms, NULL );
};

// Function TgGame.TgPawn.IsLocalPlayerInFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsLocalPlayerInFirstPerson ( )
{
	static UFunction* pFnIsLocalPlayerInFirstPerson = NULL;

	if ( ! pFnIsLocalPlayerInFirstPerson )
		pFnIsLocalPlayerInFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 42296 ];

	ATgPawn_execIsLocalPlayerInFirstPerson_Parms IsLocalPlayerInFirstPerson_Parms;

	this->ProcessEvent ( pFnIsLocalPlayerInFirstPerson, &IsLocalPlayerInFirstPerson_Parms, NULL );

	return IsLocalPlayerInFirstPerson_Parms.ReturnValue;
};

// Function TgGame.TgPawn.FindLocalPlayerPawn
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgPawn::FindLocalPlayerPawn ( )
{
	static UFunction* pFnFindLocalPlayerPawn = NULL;

	if ( ! pFnFindLocalPlayerPawn )
		pFnFindLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 42293 ];

	ATgPawn_execFindLocalPlayerPawn_Parms FindLocalPlayerPawn_Parms;

	this->ProcessEvent ( pFnFindLocalPlayerPawn, &FindLocalPlayerPawn_Parms, NULL );

	return FindLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.BlendPawnAnimtreeToMatchInHandDevice
// [0x00020102] 
// Parameters infos:

void ATgPawn::BlendPawnAnimtreeToMatchInHandDevice ( )
{
	static UFunction* pFnBlendPawnAnimtreeToMatchInHandDevice = NULL;

	if ( ! pFnBlendPawnAnimtreeToMatchInHandDevice )
		pFnBlendPawnAnimtreeToMatchInHandDevice = (UFunction*) UObject::GObjObjects()->Data[ 42281 ];

	ATgPawn_execBlendPawnAnimtreeToMatchInHandDevice_Parms BlendPawnAnimtreeToMatchInHandDevice_Parms;

	this->ProcessEvent ( pFnBlendPawnAnimtreeToMatchInHandDevice, &BlendPawnAnimtreeToMatchInHandDevice_Parms, NULL );
};

// Function TgGame.TgPawn.BlendToAnimTreeDeviceType
// [0x00024102] 
// Parameters infos:
// float                          fDeviceType                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::BlendToAnimTreeDeviceType ( float fDeviceType, float BlendTime )
{
	static UFunction* pFnBlendToAnimTreeDeviceType = NULL;

	if ( ! pFnBlendToAnimTreeDeviceType )
		pFnBlendToAnimTreeDeviceType = (UFunction*) UObject::GObjObjects()->Data[ 42278 ];

	ATgPawn_execBlendToAnimTreeDeviceType_Parms BlendToAnimTreeDeviceType_Parms;
	BlendToAnimTreeDeviceType_Parms.fDeviceType = fDeviceType;
	BlendToAnimTreeDeviceType_Parms.BlendTime = BlendTime;

	this->ProcessEvent ( pFnBlendToAnimTreeDeviceType, &BlendToAnimTreeDeviceType_Parms, NULL );
};

// Function TgGame.TgPawn.SetVar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            varId                          ( CPF_Parm )

void ATgPawn::SetVar ( int varId )
{
	static UFunction* pFnSetVar = NULL;

	if ( ! pFnSetVar )
		pFnSetVar = (UFunction*) UObject::GObjObjects()->Data[ 42276 ];

	ATgPawn_execSetVar_Parms SetVar_Parms;
	SetVar_Parms.varId = varId;

	this->ProcessEvent ( pFnSetVar, &SetVar_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetVar
// [0x00A200C2] 
// Parameters infos:
// int                            varId                          ( CPF_Parm )

void ATgPawn::ServerSetVar ( int varId )
{
	static UFunction* pFnServerSetVar = NULL;

	if ( ! pFnServerSetVar )
		pFnServerSetVar = (UFunction*) UObject::GObjObjects()->Data[ 42273 ];

	ATgPawn_execServerSetVar_Parms ServerSetVar_Parms;
	ServerSetVar_Parms.varId = varId;

	this->ProcessEvent ( pFnServerSetVar, &ServerSetVar_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetGrappleDismount
// [0x002200C2] 
// Parameters infos:
// float                          Z                              ( CPF_Parm )
// float                          Intensity                      ( CPF_Parm )

void ATgPawn::ServerSetGrappleDismount ( float Z, float Intensity )
{
	static UFunction* pFnServerSetGrappleDismount = NULL;

	if ( ! pFnServerSetGrappleDismount )
		pFnServerSetGrappleDismount = (UFunction*) UObject::GObjObjects()->Data[ 42270 ];

	ATgPawn_execServerSetGrappleDismount_Parms ServerSetGrappleDismount_Parms;
	ServerSetGrappleDismount_Parms.Z = Z;
	ServerSetGrappleDismount_Parms.Intensity = Intensity;

	this->ProcessEvent ( pFnServerSetGrappleDismount, &ServerSetGrappleDismount_Parms, NULL );
};

// Function TgGame.TgPawn.SetGrappleDismount
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Z                              ( CPF_Parm )
// float                          Intensity                      ( CPF_Parm )

void ATgPawn::SetGrappleDismount ( float Z, float Intensity )
{
	static UFunction* pFnSetGrappleDismount = NULL;

	if ( ! pFnSetGrappleDismount )
		pFnSetGrappleDismount = (UFunction*) UObject::GObjObjects()->Data[ 42267 ];

	ATgPawn_execSetGrappleDismount_Parms SetGrappleDismount_Parms;
	SetGrappleDismount_Parms.Z = Z;
	SetGrappleDismount_Parms.Intensity = Intensity;

	this->ProcessEvent ( pFnSetGrappleDismount, &SetGrappleDismount_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetProp
// [0x002200C2] 
// Parameters infos:
// struct FString                 sCommand                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::ServerSetProp ( struct FString sCommand )
{
	static UFunction* pFnServerSetProp = NULL;

	if ( ! pFnServerSetProp )
		pFnServerSetProp = (UFunction*) UObject::GObjObjects()->Data[ 42265 ];

	ATgPawn_execServerSetProp_Parms ServerSetProp_Parms;
	memcpy ( &ServerSetProp_Parms.sCommand, &sCommand, 0xC );

	this->ProcessEvent ( pFnServerSetProp, &ServerSetProp_Parms, NULL );
};

// Function TgGame.TgPawn.SetProp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sCmd                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sValue                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::SetProp ( struct FString sCmd, struct FString sValue )
{
	static UFunction* pFnSetProp = NULL;

	if ( ! pFnSetProp )
		pFnSetProp = (UFunction*) UObject::GObjObjects()->Data[ 42261 ];

	ATgPawn_execSetProp_Parms SetProp_Parms;
	memcpy ( &SetProp_Parms.sCmd, &sCmd, 0xC );
	memcpy ( &SetProp_Parms.sValue, &sValue, 0xC );

	this->ProcessEvent ( pFnSetProp, &SetProp_Parms, NULL );
};

// Function TgGame.TgPawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void ATgPawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 42259 ];

	ATgPawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function TgGame.TgPawn.ClientOnMatchJoin
// [0x010201C2] 
// Parameters infos:
// class UTgSeqAct_MatchJoin*     Action                         ( CPF_Parm )

void ATgPawn::ClientOnMatchJoin ( class UTgSeqAct_MatchJoin* Action )
{
	static UFunction* pFnClientOnMatchJoin = NULL;

	if ( ! pFnClientOnMatchJoin )
		pFnClientOnMatchJoin = (UFunction*) UObject::GObjObjects()->Data[ 42257 ];

	ATgPawn_execClientOnMatchJoin_Parms ClientOnMatchJoin_Parms;
	ClientOnMatchJoin_Parms.Action = Action;

	this->ProcessEvent ( pFnClientOnMatchJoin, &ClientOnMatchJoin_Parms, NULL );
};

// Function TgGame.TgPawn.OnMatchJoin
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_MatchJoin*     Action                         ( CPF_Parm )

void ATgPawn::OnMatchJoin ( class UTgSeqAct_MatchJoin* Action )
{
	static UFunction* pFnOnMatchJoin = NULL;

	if ( ! pFnOnMatchJoin )
		pFnOnMatchJoin = (UFunction*) UObject::GObjObjects()->Data[ 42255 ];

	ATgPawn_execOnMatchJoin_Parms OnMatchJoin_Parms;
	OnMatchJoin_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMatchJoin, &OnMatchJoin_Parms, NULL );
};

// Function TgGame.TgPawn.GrappleDismountTimer
// [0x00020002] 
// Parameters infos:

void ATgPawn::GrappleDismountTimer ( )
{
	static UFunction* pFnGrappleDismountTimer = NULL;

	if ( ! pFnGrappleDismountTimer )
		pFnGrappleDismountTimer = (UFunction*) UObject::GObjObjects()->Data[ 42254 ];

	ATgPawn_execGrappleDismountTimer_Parms GrappleDismountTimer_Parms;

	this->ProcessEvent ( pFnGrappleDismountTimer, &GrappleDismountTimer_Parms, NULL );
};

// Function TgGame.TgPawn.EnableHangingCapable
// [0x00020002] 
// Parameters infos:

void ATgPawn::EnableHangingCapable ( )
{
	static UFunction* pFnEnableHangingCapable = NULL;

	if ( ! pFnEnableHangingCapable )
		pFnEnableHangingCapable = (UFunction*) UObject::GObjObjects()->Data[ 42253 ];

	ATgPawn_execEnableHangingCapable_Parms EnableHangingCapable_Parms;

	this->ProcessEvent ( pFnEnableHangingCapable, &EnableHangingCapable_Parms, NULL );
};

// Function TgGame.TgPawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ATgPawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 42249 ];

	ATgPawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ServerCancelJump
// [0x002200C2] 
// Parameters infos:

void ATgPawn::ServerCancelJump ( )
{
	static UFunction* pFnServerCancelJump = NULL;

	if ( ! pFnServerCancelJump )
		pFnServerCancelJump = (UFunction*) UObject::GObjObjects()->Data[ 42248 ];

	ATgPawn_execServerCancelJump_Parms ServerCancelJump_Parms;

	this->ProcessEvent ( pFnServerCancelJump, &ServerCancelJump_Parms, NULL );
};

// Function TgGame.TgPawn.LoseAccuracyOnJump
// [0x00020002] 
// Parameters infos:

void ATgPawn::LoseAccuracyOnJump ( )
{
	static UFunction* pFnLoseAccuracyOnJump = NULL;

	if ( ! pFnLoseAccuracyOnJump )
		pFnLoseAccuracyOnJump = (UFunction*) UObject::GObjObjects()->Data[ 42246 ];

	ATgPawn_execLoseAccuracyOnJump_Parms LoseAccuracyOnJump_Parms;

	this->ProcessEvent ( pFnLoseAccuracyOnJump, &LoseAccuracyOnJump_Parms, NULL );
};

// Function TgGame.TgPawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ATgPawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 42244 ];

	ATgPawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function TgGame.TgPawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ATgPawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 42242 ];

	ATgPawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function TgGame.TgPawn.GetBaseAimRotation
// [0x00824122] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned long                  bIgnoreAutoLock                ( CPF_OptionalParm | CPF_Parm )

struct FRotator ATgPawn::GetBaseAimRotation ( class AWeapon* W, unsigned long bIgnoreAutoLock )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 42228 ];

	ATgPawn_execGetBaseAimRotation_Parms GetBaseAimRotation_Parms;
	GetBaseAimRotation_Parms.W = W;
	GetBaseAimRotation_Parms.bIgnoreAutoLock = bIgnoreAutoLock;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetBaseAimRotationNative
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned long                  bIgnoreAutoLock                ( CPF_Parm )
// struct FRotator                Rot                            ( CPF_Parm | CPF_OutParm )

void ATgPawn::eventGetBaseAimRotationNative ( class AWeapon* W, unsigned long bIgnoreAutoLock, struct FRotator* Rot )
{
	static UFunction* pFnGetBaseAimRotationNative = NULL;

	if ( ! pFnGetBaseAimRotationNative )
		pFnGetBaseAimRotationNative = (UFunction*) UObject::GObjObjects()->Data[ 42224 ];

	ATgPawn_eventGetBaseAimRotationNative_Parms GetBaseAimRotationNative_Parms;
	GetBaseAimRotationNative_Parms.W = W;
	GetBaseAimRotationNative_Parms.bIgnoreAutoLock = bIgnoreAutoLock;

	this->ProcessEvent ( pFnGetBaseAimRotationNative, &GetBaseAimRotationNative_Parms, NULL );

	if ( Rot )
		memcpy ( Rot, &GetBaseAimRotationNative_Parms.Rot, 0xC );
};

// Function TgGame.TgPawn.GetWeaponStartTraceLocation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn::eventGetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 42218 ];

	ATgPawn_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetOffhand
// [0x00820302] ( FUNC_Exec )
// Parameters infos:
// struct FName                   AnimType                       ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void ATgPawn::SetOffhand ( struct FName AnimType, float X, float Y, float Z )
{
	static UFunction* pFnSetOffhand = NULL;

	if ( ! pFnSetOffhand )
		pFnSetOffhand = (UFunction*) UObject::GObjObjects()->Data[ 42211 ];

	ATgPawn_execSetOffhand_Parms SetOffhand_Parms;
	memcpy ( &SetOffhand_Parms.AnimType, &AnimType, 0x8 );
	SetOffhand_Parms.X = X;
	SetOffhand_Parms.Y = Y;
	SetOffhand_Parms.Z = Z;

	this->ProcessEvent ( pFnSetOffhand, &SetOffhand_Parms, NULL );
};

// Function TgGame.TgPawn.SetOffhandAnimationTypeReleaseOffsets
// [0x00020102] 
// Parameters infos:

void ATgPawn::SetOffhandAnimationTypeReleaseOffsets ( )
{
	static UFunction* pFnSetOffhandAnimationTypeReleaseOffsets = NULL;

	if ( ! pFnSetOffhandAnimationTypeReleaseOffsets )
		pFnSetOffhandAnimationTypeReleaseOffsets = (UFunction*) UObject::GObjObjects()->Data[ 42210 ];

	ATgPawn_execSetOffhandAnimationTypeReleaseOffsets_Parms SetOffhandAnimationTypeReleaseOffsets_Parms;

	this->ProcessEvent ( pFnSetOffhandAnimationTypeReleaseOffsets, &SetOffhandAnimationTypeReleaseOffsets_Parms, NULL );
};

// Function TgGame.TgPawn.AddOffset
// [0x00820102] 
// Parameters infos:
// struct FName                   AnimationType                  ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void ATgPawn::AddOffset ( struct FName AnimationType, float X, float Y, float Z )
{
	static UFunction* pFnAddOffset = NULL;

	if ( ! pFnAddOffset )
		pFnAddOffset = (UFunction*) UObject::GObjObjects()->Data[ 42204 ];

	ATgPawn_execAddOffset_Parms AddOffset_Parms;
	memcpy ( &AddOffset_Parms.AnimationType, &AnimationType, 0x8 );
	AddOffset_Parms.X = X;
	AddOffset_Parms.Y = Y;
	AddOffset_Parms.Z = Z;

	this->ProcessEvent ( pFnAddOffset, &AddOffset_Parms, NULL );
};

// Function TgGame.TgPawn.GetOffhandAnimationTypeReleaseOffset
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimType                       ( CPF_Parm )

struct FVector ATgPawn::GetOffhandAnimationTypeReleaseOffset ( struct FName AnimType )
{
	static UFunction* pFnGetOffhandAnimationTypeReleaseOffset = NULL;

	if ( ! pFnGetOffhandAnimationTypeReleaseOffset )
		pFnGetOffhandAnimationTypeReleaseOffset = (UFunction*) UObject::GObjObjects()->Data[ 42199 ];

	ATgPawn_execGetOffhandAnimationTypeReleaseOffset_Parms GetOffhandAnimationTypeReleaseOffset_Parms;
	memcpy ( &GetOffhandAnimationTypeReleaseOffset_Parms.AnimType, &AnimType, 0x8 );

	this->ProcessEvent ( pFnGetOffhandAnimationTypeReleaseOffset, &GetOffhandAnimationTypeReleaseOffset_Parms, NULL );

	return GetOffhandAnimationTypeReleaseOffset_Parms.ReturnValue;
};

// Function TgGame.TgPawn.HideMessageBoard
// [0x00020002] 
// Parameters infos:

void ATgPawn::HideMessageBoard ( )
{
	static UFunction* pFnHideMessageBoard = NULL;

	if ( ! pFnHideMessageBoard )
		pFnHideMessageBoard = (UFunction*) UObject::GObjObjects()->Data[ 42197 ];

	ATgPawn_execHideMessageBoard_Parms HideMessageBoard_Parms;

	this->ProcessEvent ( pFnHideMessageBoard, &HideMessageBoard_Parms, NULL );
};

// Function TgGame.TgPawn.DisplayMessageBoard
// [0x00020002] 
// Parameters infos:
// struct FString                 sMsg                           ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::DisplayMessageBoard ( struct FString sMsg )
{
	static UFunction* pFnDisplayMessageBoard = NULL;

	if ( ! pFnDisplayMessageBoard )
		pFnDisplayMessageBoard = (UFunction*) UObject::GObjObjects()->Data[ 42194 ];

	ATgPawn_execDisplayMessageBoard_Parms DisplayMessageBoard_Parms;
	memcpy ( &DisplayMessageBoard_Parms.sMsg, &sMsg, 0xC );

	this->ProcessEvent ( pFnDisplayMessageBoard, &DisplayMessageBoard_Parms, NULL );
};

// Function TgGame.TgPawn.HideWeaponSwitchProgressBar
// [0x00020102] 
// Parameters infos:

void ATgPawn::HideWeaponSwitchProgressBar ( )
{
	static UFunction* pFnHideWeaponSwitchProgressBar = NULL;

	if ( ! pFnHideWeaponSwitchProgressBar )
		pFnHideWeaponSwitchProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42192 ];

	ATgPawn_execHideWeaponSwitchProgressBar_Parms HideWeaponSwitchProgressBar_Parms;

	this->ProcessEvent ( pFnHideWeaponSwitchProgressBar, &HideWeaponSwitchProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.DisplayWeaponSwitchProgressBar
// [0x00020102] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )

void ATgPawn::DisplayWeaponSwitchProgressBar ( float Duration )
{
	static UFunction* pFnDisplayWeaponSwitchProgressBar = NULL;

	if ( ! pFnDisplayWeaponSwitchProgressBar )
		pFnDisplayWeaponSwitchProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42189 ];

	ATgPawn_execDisplayWeaponSwitchProgressBar_Parms DisplayWeaponSwitchProgressBar_Parms;
	DisplayWeaponSwitchProgressBar_Parms.Duration = Duration;

	this->ProcessEvent ( pFnDisplayWeaponSwitchProgressBar, &DisplayWeaponSwitchProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.ClientHideProgressBar
// [0x01020142] 
// Parameters infos:
// unsigned long                  bWorldInteractionBar           ( CPF_Parm )

void ATgPawn::ClientHideProgressBar ( unsigned long bWorldInteractionBar )
{
	static UFunction* pFnClientHideProgressBar = NULL;

	if ( ! pFnClientHideProgressBar )
		pFnClientHideProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42186 ];

	ATgPawn_execClientHideProgressBar_Parms ClientHideProgressBar_Parms;
	ClientHideProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnClientHideProgressBar, &ClientHideProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.ClientDisplayProgressBar
// [0x01020142] 
// Parameters infos:
// int                            Duration                       ( CPF_Parm )
// unsigned long                  bWorldInteractionBar           ( CPF_Parm )

void ATgPawn::ClientDisplayProgressBar ( int Duration, unsigned long bWorldInteractionBar )
{
	static UFunction* pFnClientDisplayProgressBar = NULL;

	if ( ! pFnClientDisplayProgressBar )
		pFnClientDisplayProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42182 ];

	ATgPawn_execClientDisplayProgressBar_Parms ClientDisplayProgressBar_Parms;
	ClientDisplayProgressBar_Parms.Duration = Duration;
	ClientDisplayProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnClientDisplayProgressBar, &ClientDisplayProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.HideProgressBar
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bWorldInteractionBar           ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventHideProgressBar ( unsigned long bWorldInteractionBar )
{
	static UFunction* pFnHideProgressBar = NULL;

	if ( ! pFnHideProgressBar )
		pFnHideProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42180 ];

	ATgPawn_eventHideProgressBar_Parms HideProgressBar_Parms;
	HideProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnHideProgressBar, &HideProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.DisplayProgressBar
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            nDuration                      ( CPF_Parm )
// unsigned long                  bIgnoreKismetInterruption      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bWorldInteractionBar           ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventDisplayProgressBar ( int nDuration, unsigned long bIgnoreKismetInterruption, unsigned long bWorldInteractionBar )
{
	static UFunction* pFnDisplayProgressBar = NULL;

	if ( ! pFnDisplayProgressBar )
		pFnDisplayProgressBar = (UFunction*) UObject::GObjObjects()->Data[ 42176 ];

	ATgPawn_eventDisplayProgressBar_Parms DisplayProgressBar_Parms;
	DisplayProgressBar_Parms.nDuration = nDuration;
	DisplayProgressBar_Parms.bIgnoreKismetInterruption = bIgnoreKismetInterruption;
	DisplayProgressBar_Parms.bWorldInteractionBar = bWorldInteractionBar;

	this->ProcessEvent ( pFnDisplayProgressBar, &DisplayProgressBar_Parms, NULL );
};

// Function TgGame.TgPawn.CheckUseDuration
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// float                          fDuration                      ( CPF_Parm | CPF_OutParm )

void ATgPawn::eventCheckUseDuration ( float* fDuration )
{
	static UFunction* pFnCheckUseDuration = NULL;

	if ( ! pFnCheckUseDuration )
		pFnCheckUseDuration = (UFunction*) UObject::GObjObjects()->Data[ 42174 ];

	ATgPawn_eventCheckUseDuration_Parms CheckUseDuration_Parms;

	this->ProcessEvent ( pFnCheckUseDuration, &CheckUseDuration_Parms, NULL );

	if ( fDuration )
		*fDuration = CheckUseDuration_Parms.fDuration;
};

// Function TgGame.TgPawn.ClientSetTriggerMessage
// [0x00020100] 
// Parameters infos:
// class ATgTrigger_Use*          newTrigger                     ( CPF_Parm )
// int                            msgId                          ( CPF_Parm )

void ATgPawn::ClientSetTriggerMessage ( class ATgTrigger_Use* newTrigger, int msgId )
{
	static UFunction* pFnClientSetTriggerMessage = NULL;

	if ( ! pFnClientSetTriggerMessage )
		pFnClientSetTriggerMessage = (UFunction*) UObject::GObjObjects()->Data[ 42171 ];

	ATgPawn_execClientSetTriggerMessage_Parms ClientSetTriggerMessage_Parms;
	ClientSetTriggerMessage_Parms.newTrigger = newTrigger;
	ClientSetTriggerMessage_Parms.msgId = msgId;

	this->ProcessEvent ( pFnClientSetTriggerMessage, &ClientSetTriggerMessage_Parms, NULL );
};

// Function TgGame.TgPawn.SetTriggerToUse
// [0x00020102] 
// Parameters infos:
// class ATgTrigger_Use*          Trigger                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void ATgPawn::SetTriggerToUse ( class ATgTrigger_Use* Trigger, unsigned long bEnable )
{
	static UFunction* pFnSetTriggerToUse = NULL;

	if ( ! pFnSetTriggerToUse )
		pFnSetTriggerToUse = (UFunction*) UObject::GObjObjects()->Data[ 42168 ];

	ATgPawn_execSetTriggerToUse_Parms SetTriggerToUse_Parms;
	SetTriggerToUse_Parms.Trigger = Trigger;
	SetTriggerToUse_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetTriggerToUse, &SetTriggerToUse_Parms, NULL );
};

// Function TgGame.TgPawn.InterruptRestDevice
// [0x00020102] 
// Parameters infos:

void ATgPawn::InterruptRestDevice ( )
{
	static UFunction* pFnInterruptRestDevice = NULL;

	if ( ! pFnInterruptRestDevice )
		pFnInterruptRestDevice = (UFunction*) UObject::GObjObjects()->Data[ 42166 ];

	ATgPawn_execInterruptRestDevice_Parms InterruptRestDevice_Parms;

	this->ProcessEvent ( pFnInterruptRestDevice, &InterruptRestDevice_Parms, NULL );
};

// Function TgGame.TgPawn.IsUseInterrupted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsUseInterrupted ( )
{
	static UFunction* pFnIsUseInterrupted = NULL;

	if ( ! pFnIsUseInterrupted )
		pFnIsUseInterrupted = (UFunction*) UObject::GObjObjects()->Data[ 42164 ];

	ATgPawn_eventIsUseInterrupted_Parms IsUseInterrupted_Parms;

	this->ProcessEvent ( pFnIsUseInterrupted, &IsUseInterrupted_Parms, NULL );

	return IsUseInterrupted_Parms.ReturnValue;
};

// Function TgGame.TgPawn.InterruptUse
// [0x00020102] 
// Parameters infos:

void ATgPawn::InterruptUse ( )
{
	static UFunction* pFnInterruptUse = NULL;

	if ( ! pFnInterruptUse )
		pFnInterruptUse = (UFunction*) UObject::GObjObjects()->Data[ 42163 ];

	ATgPawn_execInterruptUse_Parms InterruptUse_Parms;

	this->ProcessEvent ( pFnInterruptUse, &InterruptUse_Parms, NULL );
};

// Function TgGame.TgPawn.ShouldAllowUse
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sMessage                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ATgPawn::ShouldAllowUse ( struct FString* sMessage )
{
	static UFunction* pFnShouldAllowUse = NULL;

	if ( ! pFnShouldAllowUse )
		pFnShouldAllowUse = (UFunction*) UObject::GObjObjects()->Data[ 42158 ];

	ATgPawn_execShouldAllowUse_Parms ShouldAllowUse_Parms;

	this->ProcessEvent ( pFnShouldAllowUse, &ShouldAllowUse_Parms, NULL );

	if ( sMessage )
		memcpy ( sMessage, &ShouldAllowUse_Parms.sMessage, 0xC );

	return ShouldAllowUse_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldInterrupt
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bMovementAllowed               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRestDeviceAllowed             ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::ShouldInterrupt ( unsigned long bMovementAllowed, unsigned long bRestDeviceAllowed )
{
	static UFunction* pFnShouldInterrupt = NULL;

	if ( ! pFnShouldInterrupt )
		pFnShouldInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 42151 ];

	ATgPawn_execShouldInterrupt_Parms ShouldInterrupt_Parms;
	ShouldInterrupt_Parms.bMovementAllowed = bMovementAllowed;
	ShouldInterrupt_Parms.bRestDeviceAllowed = bRestDeviceAllowed;

	this->ProcessEvent ( pFnShouldInterrupt, &ShouldInterrupt_Parms, NULL );

	return ShouldInterrupt_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CheckInterrupt
// [0x00020102] 
// Parameters infos:

void ATgPawn::CheckInterrupt ( )
{
	static UFunction* pFnCheckInterrupt = NULL;

	if ( ! pFnCheckInterrupt )
		pFnCheckInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 42149 ];

	ATgPawn_execCheckInterrupt_Parms CheckInterrupt_Parms;

	this->ProcessEvent ( pFnCheckInterrupt, &CheckInterrupt_Parms, NULL );
};

// Function TgGame.TgPawn.EnableFootControls
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// int                            foot                           ( CPF_Parm )
// unsigned long                  bDisable                       ( CPF_Parm )

void ATgPawn::eventEnableFootControls ( int foot, unsigned long bDisable )
{
	static UFunction* pFnEnableFootControls = NULL;

	if ( ! pFnEnableFootControls )
		pFnEnableFootControls = (UFunction*) UObject::GObjObjects()->Data[ 42146 ];

	ATgPawn_eventEnableFootControls_Parms EnableFootControls_Parms;
	EnableFootControls_Parms.foot = foot;
	EnableFootControls_Parms.bDisable = bDisable;

	this->ProcessEvent ( pFnEnableFootControls, &EnableFootControls_Parms, NULL );
};

// Function TgGame.TgPawn.PlayHitReaction
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ATgPawn::eventPlayHitReaction ( struct FVector Direction )
{
	static UFunction* pFnPlayHitReaction = NULL;

	if ( ! pFnPlayHitReaction )
		pFnPlayHitReaction = (UFunction*) UObject::GObjObjects()->Data[ 42144 ];

	ATgPawn_eventPlayHitReaction_Parms PlayHitReaction_Parms;
	memcpy ( &PlayHitReaction_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnPlayHitReaction, &PlayHitReaction_Parms, NULL );
};

// Function TgGame.TgPawn.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 42140 ];

	ATgPawn_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgPawn.IsPreyOfHunter
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 HunterPawn                     ( CPF_Parm )

bool ATgPawn::IsPreyOfHunter ( class ATgPawn* HunterPawn )
{
	static UFunction* pFnIsPreyOfHunter = NULL;

	if ( ! pFnIsPreyOfHunter )
		pFnIsPreyOfHunter = (UFunction*) UObject::GObjObjects()->Data[ 42137 ];

	ATgPawn_execIsPreyOfHunter_Parms IsPreyOfHunter_Parms;
	IsPreyOfHunter_Parms.HunterPawn = HunterPawn;

	this->ProcessEvent ( pFnIsPreyOfHunter, &IsPreyOfHunter_Parms, NULL );

	return IsPreyOfHunter_Parms.ReturnValue;
};

// Function TgGame.TgPawn.StealthedPlayerResistDeploySensorMinimap
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::StealthedPlayerResistDeploySensorMinimap ( )
{
	static UFunction* pFnStealthedPlayerResistDeploySensorMinimap = NULL;

	if ( ! pFnStealthedPlayerResistDeploySensorMinimap )
		pFnStealthedPlayerResistDeploySensorMinimap = (UFunction*) UObject::GObjObjects()->Data[ 42135 ];

	ATgPawn_execStealthedPlayerResistDeploySensorMinimap_Parms StealthedPlayerResistDeploySensorMinimap_Parms;

	this->ProcessEvent ( pFnStealthedPlayerResistDeploySensorMinimap, &StealthedPlayerResistDeploySensorMinimap_Parms, NULL );

	return StealthedPlayerResistDeploySensorMinimap_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyScannerSettingsToPawn
// [0x00024102] 
// Parameters infos:
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::ApplyScannerSettingsToPawn ( unsigned long bReset )
{
	static UFunction* pFnApplyScannerSettingsToPawn = NULL;

	if ( ! pFnApplyScannerSettingsToPawn )
		pFnApplyScannerSettingsToPawn = (UFunction*) UObject::GObjObjects()->Data[ 42129 ];

	ATgPawn_execApplyScannerSettingsToPawn_Parms ApplyScannerSettingsToPawn_Parms;
	ApplyScannerSettingsToPawn_Parms.bReset = bReset;

	this->ProcessEvent ( pFnApplyScannerSettingsToPawn, &ApplyScannerSettingsToPawn_Parms, NULL );
};

// Function TgGame.TgPawn.GetScannerSettingIndexFromEffectGroupId
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EffectGroupId                  ( CPF_Parm )

int ATgPawn::GetScannerSettingIndexFromEffectGroupId ( int EffectGroupId )
{
	static UFunction* pFnGetScannerSettingIndexFromEffectGroupId = NULL;

	if ( ! pFnGetScannerSettingIndexFromEffectGroupId )
		pFnGetScannerSettingIndexFromEffectGroupId = (UFunction*) UObject::GObjObjects()->Data[ 42124 ];

	ATgPawn_execGetScannerSettingIndexFromEffectGroupId_Parms GetScannerSettingIndexFromEffectGroupId_Parms;
	GetScannerSettingIndexFromEffectGroupId_Parms.EffectGroupId = EffectGroupId;

	this->ProcessEvent ( pFnGetScannerSettingIndexFromEffectGroupId, &GetScannerSettingIndexFromEffectGroupId_Parms, NULL );

	return GetScannerSettingIndexFromEffectGroupId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ClearScannerSettingByIndex
// [0x00020002] 
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void ATgPawn::ClearScannerSettingByIndex ( int nIndex )
{
	static UFunction* pFnClearScannerSettingByIndex = NULL;

	if ( ! pFnClearScannerSettingByIndex )
		pFnClearScannerSettingByIndex = (UFunction*) UObject::GObjObjects()->Data[ 42121 ];

	ATgPawn_execClearScannerSettingByIndex_Parms ClearScannerSettingByIndex_Parms;
	ClearScannerSettingByIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnClearScannerSettingByIndex, &ClearScannerSettingByIndex_Parms, NULL );
};

// Function TgGame.TgPawn.ApplyScannerSettings
// [0x00020002] 
// Parameters infos:

void ATgPawn::ApplyScannerSettings ( )
{
	static UFunction* pFnApplyScannerSettings = NULL;

	if ( ! pFnApplyScannerSettings )
		pFnApplyScannerSettings = (UFunction*) UObject::GObjObjects()->Data[ 42120 ];

	ATgPawn_execApplyScannerSettings_Parms ApplyScannerSettings_Parms;

	this->ProcessEvent ( pFnApplyScannerSettings, &ApplyScannerSettings_Parms, NULL );
};

// Function TgGame.TgPawn.ResetStunnedBehavior
// [0x00020002] 
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )
// class ATgAIController*         aic                            ( CPF_Parm )

void ATgPawn::ResetStunnedBehavior ( class ATgPlayerController* PC, class ATgAIController* aic )
{
	static UFunction* pFnResetStunnedBehavior = NULL;

	if ( ! pFnResetStunnedBehavior )
		pFnResetStunnedBehavior = (UFunction*) UObject::GObjObjects()->Data[ 42117 ];

	ATgPawn_execResetStunnedBehavior_Parms ResetStunnedBehavior_Parms;
	ResetStunnedBehavior_Parms.PC = PC;
	ResetStunnedBehavior_Parms.aic = aic;

	this->ProcessEvent ( pFnResetStunnedBehavior, &ResetStunnedBehavior_Parms, NULL );
};

// Function TgGame.TgPawn.ClientSetStun
// [0x00020102] 
// Parameters infos:

void ATgPawn::ClientSetStun ( )
{
	static UFunction* pFnClientSetStun = NULL;

	if ( ! pFnClientSetStun )
		pFnClientSetStun = (UFunction*) UObject::GObjObjects()->Data[ 42116 ];

	ATgPawn_execClientSetStun_Parms ClientSetStun_Parms;

	this->ProcessEvent ( pFnClientSetStun, &ClientSetStun_Parms, NULL );
};

// Function TgGame.TgPawn.Unhacked
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bPetDeathCam                   ( CPF_Parm )

void ATgPawn::eventUnhacked ( unsigned long bPetDeathCam )
{
	static UFunction* pFnUnhacked = NULL;

	if ( ! pFnUnhacked )
		pFnUnhacked = (UFunction*) UObject::GObjObjects()->Data[ 42113 ];

	ATgPawn_eventUnhacked_Parms Unhacked_Parms;
	Unhacked_Parms.bPetDeathCam = bPetDeathCam;

	this->ProcessEvent ( pFnUnhacked, &Unhacked_Parms, NULL );
};

// Function TgGame.TgPawn.IsHacked
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsHacked ( )
{
	static UFunction* pFnIsHacked = NULL;

	if ( ! pFnIsHacked )
		pFnIsHacked = (UFunction*) UObject::GObjObjects()->Data[ 42111 ];

	ATgPawn_eventIsHacked_Parms IsHacked_Parms;

	this->ProcessEvent ( pFnIsHacked, &IsHacked_Parms, NULL );

	return IsHacked_Parms.ReturnValue;
};

// Function TgGame.TgPawn.HackedBy
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 ControlPawn                    ( CPF_Parm )

void ATgPawn::eventHackedBy ( class ATgPawn* ControlPawn )
{
	static UFunction* pFnHackedBy = NULL;

	if ( ! pFnHackedBy )
		pFnHackedBy = (UFunction*) UObject::GObjObjects()->Data[ 42106 ];

	ATgPawn_eventHackedBy_Parms HackedBy_Parms;
	HackedBy_Parms.ControlPawn = ControlPawn;

	this->ProcessEvent ( pFnHackedBy, &HackedBy_Parms, NULL );
};

// Function TgGame.TgPawn.SwapRepInfoForHacking
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHacking                       ( CPF_Parm )

void ATgPawn::SwapRepInfoForHacking ( unsigned long bHacking )
{
	static UFunction* pFnSwapRepInfoForHacking = NULL;

	if ( ! pFnSwapRepInfoForHacking )
		pFnSwapRepInfoForHacking = (UFunction*) UObject::GObjObjects()->Data[ 42104 ];

	ATgPawn_execSwapRepInfoForHacking_Parms SwapRepInfoForHacking_Parms;
	SwapRepInfoForHacking_Parms.bHacking = bHacking;

	this->ProcessEvent ( pFnSwapRepInfoForHacking, &SwapRepInfoForHacking_Parms, NULL );
};

// Function TgGame.TgPawn.ClientResetMovement
// [0x010201C2] 
// Parameters infos:

void ATgPawn::ClientResetMovement ( )
{
	static UFunction* pFnClientResetMovement = NULL;

	if ( ! pFnClientResetMovement )
		pFnClientResetMovement = (UFunction*) UObject::GObjObjects()->Data[ 42103 ];

	ATgPawn_execClientResetMovement_Parms ClientResetMovement_Parms;

	this->ProcessEvent ( pFnClientResetMovement, &ClientResetMovement_Parms, NULL );
};

// Function TgGame.TgPawn.StopFullBodyAnimation
// [0x00024102] 
// Parameters infos:
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::StopFullBodyAnimation ( float BlendOutTime )
{
	static UFunction* pFnStopFullBodyAnimation = NULL;

	if ( ! pFnStopFullBodyAnimation )
		pFnStopFullBodyAnimation = (UFunction*) UObject::GObjObjects()->Data[ 42101 ];

	ATgPawn_execStopFullBodyAnimation_Parms StopFullBodyAnimation_Parms;
	StopFullBodyAnimation_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnStopFullBodyAnimation, &StopFullBodyAnimation_Parms, NULL );
};

// Function TgGame.TgPawn.PlayOffhandAnimation
// [0x00020102] 
// Parameters infos:
// struct FName                   OffhandAnimName                ( CPF_Parm )

void ATgPawn::PlayOffhandAnimation ( struct FName OffhandAnimName )
{
	static UFunction* pFnPlayOffhandAnimation = NULL;

	if ( ! pFnPlayOffhandAnimation )
		pFnPlayOffhandAnimation = (UFunction*) UObject::GObjObjects()->Data[ 42099 ];

	ATgPawn_execPlayOffhandAnimation_Parms PlayOffhandAnimation_Parms;
	memcpy ( &PlayOffhandAnimation_Parms.OffhandAnimName, &OffhandAnimName, 0x8 );

	this->ProcessEvent ( pFnPlayOffhandAnimation, &PlayOffhandAnimation_Parms, NULL );
};

// Function TgGame.TgPawn.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 42093 ];

	ATgPawn_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn.OnAnimPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void ATgPawn::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 42087 ];

	ATgPawn_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function TgGame.TgPawn.gibbedBy
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgPawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = (UFunction*) UObject::GObjObjects()->Data[ 42085 ];

	ATgPawn_execgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function TgGame.TgPawn.DetachConeComponent
// [0x00020102] 
// Parameters infos:
// class UDrawConeComponent*      ConeComponent                  ( CPF_Parm | CPF_EditInline )

void ATgPawn::DetachConeComponent ( class UDrawConeComponent* ConeComponent )
{
	static UFunction* pFnDetachConeComponent = NULL;

	if ( ! pFnDetachConeComponent )
		pFnDetachConeComponent = (UFunction*) UObject::GObjObjects()->Data[ 42083 ];

	ATgPawn_execDetachConeComponent_Parms DetachConeComponent_Parms;
	DetachConeComponent_Parms.ConeComponent = ConeComponent;

	this->ProcessEvent ( pFnDetachConeComponent, &DetachConeComponent_Parms, NULL );
};

// Function TgGame.TgPawn.AttachConeComponent
// [0x00020102] 
// Parameters infos:
// class UDrawConeComponent*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UDrawConeComponent*      ConeComponent                  ( CPF_Parm | CPF_EditInline )
// float                          fRadius                        ( CPF_Parm )
// float                          fAngle                         ( CPF_Parm )

class UDrawConeComponent* ATgPawn::AttachConeComponent ( class UDrawConeComponent* ConeComponent, float fRadius, float fAngle )
{
	static UFunction* pFnAttachConeComponent = NULL;

	if ( ! pFnAttachConeComponent )
		pFnAttachConeComponent = (UFunction*) UObject::GObjObjects()->Data[ 42078 ];

	ATgPawn_execAttachConeComponent_Parms AttachConeComponent_Parms;
	AttachConeComponent_Parms.ConeComponent = ConeComponent;
	AttachConeComponent_Parms.fRadius = fRadius;
	AttachConeComponent_Parms.fAngle = fAngle;

	this->ProcessEvent ( pFnAttachConeComponent, &AttachConeComponent_Parms, NULL );

	return AttachConeComponent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnPawnInitialized
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOnPawnInitialized ( )
{
	static UFunction* pFnOnPawnInitialized = NULL;

	if ( ! pFnOnPawnInitialized )
		pFnOnPawnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 42073 ];

	ATgPawn_eventOnPawnInitialized_Parms OnPawnInitialized_Parms;

	this->ProcessEvent ( pFnOnPawnInitialized, &OnPawnInitialized_Parms, NULL );
};

// Function TgGame.TgPawn.OnWaitingForPawnDone
// [0x00020102] 
// Parameters infos:

void ATgPawn::OnWaitingForPawnDone ( )
{
	static UFunction* pFnOnWaitingForPawnDone = NULL;

	if ( ! pFnOnWaitingForPawnDone )
		pFnOnWaitingForPawnDone = (UFunction*) UObject::GObjObjects()->Data[ 42072 ];

	ATgPawn_execOnWaitingForPawnDone_Parms OnWaitingForPawnDone_Parms;

	this->ProcessEvent ( pFnOnWaitingForPawnDone, &OnWaitingForPawnDone_Parms, NULL );
};

// Function TgGame.TgPawn.WaitForInventoryThenDoPostPawnSetup
// [0x00020102] 
// Parameters infos:

void ATgPawn::WaitForInventoryThenDoPostPawnSetup ( )
{
	static UFunction* pFnWaitForInventoryThenDoPostPawnSetup = NULL;

	if ( ! pFnWaitForInventoryThenDoPostPawnSetup )
		pFnWaitForInventoryThenDoPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 42071 ];

	ATgPawn_execWaitForInventoryThenDoPostPawnSetup_Parms WaitForInventoryThenDoPostPawnSetup_Parms;

	this->ProcessEvent ( pFnWaitForInventoryThenDoPostPawnSetup, &WaitForInventoryThenDoPostPawnSetup_Parms, NULL );
};

// Function TgGame.TgPawn.CheckTargetActor
// [0x00020002] 
// Parameters infos:

void ATgPawn::CheckTargetActor ( )
{
	static UFunction* pFnCheckTargetActor = NULL;

	if ( ! pFnCheckTargetActor )
		pFnCheckTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 42067 ];

	ATgPawn_execCheckTargetActor_Parms CheckTargetActor_Parms;

	this->ProcessEvent ( pFnCheckTargetActor, &CheckTargetActor_Parms, NULL );
};

// Function TgGame.TgPawn.IsTargetWithInAutoLockCone
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 Target                         ( CPF_Parm )

bool ATgPawn::IsTargetWithInAutoLockCone ( class ATgPawn* Target )
{
	static UFunction* pFnIsTargetWithInAutoLockCone = NULL;

	if ( ! pFnIsTargetWithInAutoLockCone )
		pFnIsTargetWithInAutoLockCone = (UFunction*) UObject::GObjObjects()->Data[ 42059 ];

	ATgPawn_execIsTargetWithInAutoLockCone_Parms IsTargetWithInAutoLockCone_Parms;
	IsTargetWithInAutoLockCone_Parms.Target = Target;

	this->ProcessEvent ( pFnIsTargetWithInAutoLockCone, &IsTargetWithInAutoLockCone_Parms, NULL );

	return IsTargetWithInAutoLockCone_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetTargetAutoLock
// [0x00820102] 
// Parameters infos:

void ATgPawn::SetTargetAutoLock ( )
{
	static UFunction* pFnSetTargetAutoLock = NULL;

	if ( ! pFnSetTargetAutoLock )
		pFnSetTargetAutoLock = (UFunction*) UObject::GObjObjects()->Data[ 42056 ];

	ATgPawn_execSetTargetAutoLock_Parms SetTargetAutoLock_Parms;

	this->ProcessEvent ( pFnSetTargetAutoLock, &SetTargetAutoLock_Parms, NULL );
};

// Function TgGame.TgPawn.OnDeviceBuffChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOnDeviceBuffChange ( )
{
	static UFunction* pFnOnDeviceBuffChange = NULL;

	if ( ! pFnOnDeviceBuffChange )
		pFnOnDeviceBuffChange = (UFunction*) UObject::GObjObjects()->Data[ 42055 ];

	ATgPawn_eventOnDeviceBuffChange_Parms OnDeviceBuffChange_Parms;

	this->ProcessEvent ( pFnOnDeviceBuffChange, &OnDeviceBuffChange_Parms, NULL );
};

// Function TgGame.TgPawn.IsTargetAutoLock
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsTargetAutoLock ( )
{
	static UFunction* pFnIsTargetAutoLock = NULL;

	if ( ! pFnIsTargetAutoLock )
		pFnIsTargetAutoLock = (UFunction*) UObject::GObjObjects()->Data[ 42053 ];

	ATgPawn_execIsTargetAutoLock_Parms IsTargetAutoLock_Parms;

	this->ProcessEvent ( pFnIsTargetAutoLock, &IsTargetAutoLock_Parms, NULL );

	return IsTargetAutoLock_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PropertySet
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// int                            nPropertyId                    ( CPF_Parm )
// float                          fPreviousValue                 ( CPF_Parm )
// float                          fNewValue                      ( CPF_Parm )

void ATgPawn::eventPropertySet ( int nPropertyId, float fPreviousValue, float fNewValue )
{
	static UFunction* pFnPropertySet = NULL;

	if ( ! pFnPropertySet )
		pFnPropertySet = (UFunction*) UObject::GObjObjects()->Data[ 42049 ];

	ATgPawn_eventPropertySet_Parms PropertySet_Parms;
	PropertySet_Parms.nPropertyId = nPropertyId;
	PropertySet_Parms.fPreviousValue = fPreviousValue;
	PropertySet_Parms.fNewValue = fNewValue;

	this->ProcessEvent ( pFnPropertySet, &PropertySet_Parms, NULL );
};

// Function TgGame.TgPawn.AttachDevice
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventAttachDevice ( )
{
	static UFunction* pFnAttachDevice = NULL;

	if ( ! pFnAttachDevice )
		pFnAttachDevice = (UFunction*) UObject::GObjObjects()->Data[ 42048 ];

	ATgPawn_eventAttachDevice_Parms AttachDevice_Parms;

	this->ProcessEvent ( pFnAttachDevice, &AttachDevice_Parms, NULL );
};

// Function TgGame.TgPawn.DetachDevice
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventDetachDevice ( )
{
	static UFunction* pFnDetachDevice = NULL;

	if ( ! pFnDetachDevice )
		pFnDetachDevice = (UFunction*) UObject::GObjObjects()->Data[ 42047 ];

	ATgPawn_eventDetachDevice_Parms DetachDevice_Parms;

	this->ProcessEvent ( pFnDetachDevice, &DetachDevice_Parms, NULL );
};

// Function TgGame.TgPawn.TurnOff
// [0x00020102] 
// Parameters infos:

void ATgPawn::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 42010 ];

	ATgPawn_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function TgGame.TgPawn.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 42009 ];

	ATgPawn_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function TgGame.TgPawn.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void ATgPawn::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 42007 ];

	ATgPawn_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function TgGame.TgPawn.FlushDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::FlushDebug ( )
{
	static UFunction* pFnFlushDebug = NULL;

	if ( ! pFnFlushDebug )
		pFnFlushDebug = (UFunction*) UObject::GObjObjects()->Data[ 42006 ];

	ATgPawn_execFlushDebug_Parms FlushDebug_Parms;

	this->ProcessEvent ( pFnFlushDebug, &FlushDebug_Parms, NULL );
};

// Function TgGame.TgPawn.IsFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsFirstPerson ( )
{
	static UFunction* pFnIsFirstPerson = NULL;

	if ( ! pFnIsFirstPerson )
		pFnIsFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 42004 ];

	ATgPawn_execIsFirstPerson_Parms IsFirstPerson_Parms;

	this->ProcessEvent ( pFnIsFirstPerson, &IsFirstPerson_Parms, NULL );

	return IsFirstPerson_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ATgPawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* dmgType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 41995 ];

	ATgPawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.dmgType = dmgType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function TgGame.TgPawn.ProcessEffect
// [0x00024102] 
// Parameters infos:
// class UTgEffectGroup*          EffectGrp                      ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// class AActor*                  aInstigator                    ( CPF_OptionalParm | CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::ProcessEffect ( class UTgEffectGroup* EffectGrp, unsigned long bRemove, class AActor* aInstigator, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessEffect = NULL;

	if ( ! pFnProcessEffect )
		pFnProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 41990 ];

	ATgPawn_execProcessEffect_Parms ProcessEffect_Parms;
	ProcessEffect_Parms.EffectGrp = EffectGrp;
	ProcessEffect_Parms.bRemove = bRemove;
	ProcessEffect_Parms.aInstigator = aInstigator;
	memcpy ( &ProcessEffect_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnProcessEffect, &ProcessEffect_Parms, NULL );
};

// Function TgGame.TgPawn.PlayLanded
// [0x00820102] 
// Parameters infos:
// float                          ImpactVel                      ( CPF_Parm )

void ATgPawn::PlayLanded ( float ImpactVel )
{
	static UFunction* pFnPlayLanded = NULL;

	if ( ! pFnPlayLanded )
		pFnPlayLanded = (UFunction*) UObject::GObjObjects()->Data[ 41979 ];

	ATgPawn_execPlayLanded_Parms PlayLanded_Parms;
	PlayLanded_Parms.ImpactVel = ImpactVel;

	this->ProcessEvent ( pFnPlayLanded, &PlayLanded_Parms, NULL );
};

// Function TgGame.TgPawn.PlayLandedAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ImpactVel                      ( CPF_Parm )

void ATgPawn::eventPlayLandedAnim ( float ImpactVel )
{
	static UFunction* pFnPlayLandedAnim = NULL;

	if ( ! pFnPlayLandedAnim )
		pFnPlayLandedAnim = (UFunction*) UObject::GObjObjects()->Data[ 41977 ];

	ATgPawn_eventPlayLandedAnim_Parms PlayLandedAnim_Parms;
	PlayLandedAnim_Parms.ImpactVel = ImpactVel;

	this->ProcessEvent ( pFnPlayLandedAnim, &PlayLandedAnim_Parms, NULL );
};

// Function TgGame.TgPawn.ResetLandDebuffCounter
// [0x00020002] 
// Parameters infos:

void ATgPawn::ResetLandDebuffCounter ( )
{
	static UFunction* pFnResetLandDebuffCounter = NULL;

	if ( ! pFnResetLandDebuffCounter )
		pFnResetLandDebuffCounter = (UFunction*) UObject::GObjObjects()->Data[ 41976 ];

	ATgPawn_execResetLandDebuffCounter_Parms ResetLandDebuffCounter_Parms;

	this->ProcessEvent ( pFnResetLandDebuffCounter, &ResetLandDebuffCounter_Parms, NULL );
};

// Function TgGame.TgPawn.DisableLandingDebuffTimer
// [0x00020002] 
// Parameters infos:

void ATgPawn::DisableLandingDebuffTimer ( )
{
	static UFunction* pFnDisableLandingDebuffTimer = NULL;

	if ( ! pFnDisableLandingDebuffTimer )
		pFnDisableLandingDebuffTimer = (UFunction*) UObject::GObjObjects()->Data[ 41975 ];

	ATgPawn_execDisableLandingDebuffTimer_Parms DisableLandingDebuffTimer_Parms;

	this->ProcessEvent ( pFnDisableLandingDebuffTimer, &DisableLandingDebuffTimer_Parms, NULL );
};

// Function TgGame.TgPawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgPawn::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 41971 ];

	ATgPawn_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgPawn.IsDying
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsDying ( )
{
	static UFunction* pFnIsDying = NULL;

	if ( ! pFnIsDying )
		pFnIsDying = (UFunction*) UObject::GObjObjects()->Data[ 41969 ];

	ATgPawn_eventIsDying_Parms IsDying_Parms;

	this->ProcessEvent ( pFnIsDying, &IsDying_Parms, NULL );

	return IsDying_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyPawnShadows
// [0x00020102] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ApplyPawnShadows ( unsigned long bOn )
{
	static UFunction* pFnApplyPawnShadows = NULL;

	if ( ! pFnApplyPawnShadows )
		pFnApplyPawnShadows = (UFunction*) UObject::GObjObjects()->Data[ 41967 ];

	ATgPawn_execApplyPawnShadows_Parms ApplyPawnShadows_Parms;
	ApplyPawnShadows_Parms.bOn = bOn;

	this->ProcessEvent ( pFnApplyPawnShadows, &ApplyPawnShadows_Parms, NULL );
};

// Function TgGame.TgPawn.GetCurrentControlRangePercent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::eventGetCurrentControlRangePercent ( )
{
	static UFunction* pFnGetCurrentControlRangePercent = NULL;

	if ( ! pFnGetCurrentControlRangePercent )
		pFnGetCurrentControlRangePercent = (UFunction*) UObject::GObjObjects()->Data[ 41965 ];

	ATgPawn_eventGetCurrentControlRangePercent_Parms GetCurrentControlRangePercent_Parms;

	this->ProcessEvent ( pFnGetCurrentControlRangePercent, &GetCurrentControlRangePercent_Parms, NULL );

	return GetCurrentControlRangePercent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetMoraleBoostPercent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::eventGetMoraleBoostPercent ( )
{
	static UFunction* pFnGetMoraleBoostPercent = NULL;

	if ( ! pFnGetMoraleBoostPercent )
		pFnGetMoraleBoostPercent = (UFunction*) UObject::GObjObjects()->Data[ 41963 ];

	ATgPawn_eventGetMoraleBoostPercent_Parms GetMoraleBoostPercent_Parms;

	this->ProcessEvent ( pFnGetMoraleBoostPercent, &GetMoraleBoostPercent_Parms, NULL );

	return GetMoraleBoostPercent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetPowerPoolPercent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::eventGetPowerPoolPercent ( )
{
	static UFunction* pFnGetPowerPoolPercent = NULL;

	if ( ! pFnGetPowerPoolPercent )
		pFnGetPowerPoolPercent = (UFunction*) UObject::GObjObjects()->Data[ 41961 ];

	ATgPawn_eventGetPowerPoolPercent_Parms GetPowerPoolPercent_Parms;

	this->ProcessEvent ( pFnGetPowerPoolPercent, &GetPowerPoolPercent_Parms, NULL );

	return GetPowerPoolPercent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.InCombat
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 41959 ];

	ATgPawn_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function TgGame.TgPawn.Combat
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInCombat                      ( CPF_Parm )

void ATgPawn::eventCombat ( unsigned long bInCombat )
{
	static UFunction* pFnCombat = NULL;

	if ( ! pFnCombat )
		pFnCombat = (UFunction*) UObject::GObjObjects()->Data[ 41956 ];

	ATgPawn_eventCombat_Parms Combat_Parms;
	Combat_Parms.bInCombat = bInCombat;

	this->ProcessEvent ( pFnCombat, &Combat_Parms, NULL );
};

// Function TgGame.TgPawn.InCombatTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::InCombatTimer ( )
{
	static UFunction* pFnInCombatTimer = NULL;

	if ( ! pFnInCombatTimer )
		pFnInCombatTimer = (UFunction*) UObject::GObjObjects()->Data[ 41955 ];

	ATgPawn_execInCombatTimer_Parms InCombatTimer_Parms;

	this->ProcessEvent ( pFnInCombatTimer, &InCombatTimer_Parms, NULL );
};

// Function TgGame.TgPawn.ExitCombat
// [0x00020102] 
// Parameters infos:

void ATgPawn::ExitCombat ( )
{
	static UFunction* pFnExitCombat = NULL;

	if ( ! pFnExitCombat )
		pFnExitCombat = (UFunction*) UObject::GObjObjects()->Data[ 41954 ];

	ATgPawn_execExitCombat_Parms ExitCombat_Parms;

	this->ProcessEvent ( pFnExitCombat, &ExitCombat_Parms, NULL );
};

// Function TgGame.TgPawn.EnterCombat
// [0x00024102] 
// Parameters infos:
// class AActor*                  aInstigator                    ( CPF_Parm )
// class AActor*                  ATarget                        ( CPF_Parm )
// float                          fLength                        ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::EnterCombat ( class AActor* aInstigator, class AActor* ATarget, float fLength )
{
	static UFunction* pFnEnterCombat = NULL;

	if ( ! pFnEnterCombat )
		pFnEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 41950 ];

	ATgPawn_execEnterCombat_Parms EnterCombat_Parms;
	EnterCombat_Parms.aInstigator = aInstigator;
	EnterCombat_Parms.ATarget = ATarget;
	EnterCombat_Parms.fLength = fLength;

	this->ProcessEvent ( pFnEnterCombat, &EnterCombat_Parms, NULL );
};

// Function TgGame.TgPawn.ToggleInHandDevicePS
// [0x00020102] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ToggleInHandDevicePS ( unsigned long bOn )
{
	static UFunction* pFnToggleInHandDevicePS = NULL;

	if ( ! pFnToggleInHandDevicePS )
		pFnToggleInHandDevicePS = (UFunction*) UObject::GObjObjects()->Data[ 41946 ];

	ATgPawn_execToggleInHandDevicePS_Parms ToggleInHandDevicePS_Parms;
	ToggleInHandDevicePS_Parms.bOn = bOn;

	this->ProcessEvent ( pFnToggleInHandDevicePS, &ToggleInHandDevicePS_Parms, NULL );
};

// Function TgGame.TgPawn.GetSensorRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::GetSensorRange ( )
{
	static UFunction* pFnGetSensorRange = NULL;

	if ( ! pFnGetSensorRange )
		pFnGetSensorRange = (UFunction*) UObject::GObjObjects()->Data[ 41944 ];

	ATgPawn_execGetSensorRange_Parms GetSensorRange_Parms;

	this->ProcessEvent ( pFnGetSensorRange, &GetSensorRange_Parms, NULL );

	return GetSensorRange_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CleanUpMakeVisibleParam
// [0x00020102] 
// Parameters infos:
// unsigned long                  bResetMeshParam                ( CPF_Parm )

void ATgPawn::CleanUpMakeVisibleParam ( unsigned long bResetMeshParam )
{
	static UFunction* pFnCleanUpMakeVisibleParam = NULL;

	if ( ! pFnCleanUpMakeVisibleParam )
		pFnCleanUpMakeVisibleParam = (UFunction*) UObject::GObjObjects()->Data[ 41942 ];

	ATgPawn_execCleanUpMakeVisibleParam_Parms CleanUpMakeVisibleParam_Parms;
	CleanUpMakeVisibleParam_Parms.bResetMeshParam = bResetMeshParam;

	this->ProcessEvent ( pFnCleanUpMakeVisibleParam, &CleanUpMakeVisibleParam_Parms, NULL );
};

// Function TgGame.TgPawn.ApplyStealth
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventApplyStealth ( )
{
	static UFunction* pFnApplyStealth = NULL;

	if ( ! pFnApplyStealth )
		pFnApplyStealth = (UFunction*) UObject::GObjObjects()->Data[ 41941 ];

	ATgPawn_eventApplyStealth_Parms ApplyStealth_Parms;

	this->ProcessEvent ( pFnApplyStealth, &ApplyStealth_Parms, NULL );
};

// Function TgGame.TgPawn.CanPawnBeStealthed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventCanPawnBeStealthed ( )
{
	static UFunction* pFnCanPawnBeStealthed = NULL;

	if ( ! pFnCanPawnBeStealthed )
		pFnCanPawnBeStealthed = (UFunction*) UObject::GObjObjects()->Data[ 41939 ];

	ATgPawn_eventCanPawnBeStealthed_Parms CanPawnBeStealthed_Parms;

	this->ProcessEvent ( pFnCanPawnBeStealthed, &CanPawnBeStealthed_Parms, NULL );

	return CanPawnBeStealthed_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyStealthClient
// [0x00020102] 
// Parameters infos:

void ATgPawn::ApplyStealthClient ( )
{
	static UFunction* pFnApplyStealthClient = NULL;

	if ( ! pFnApplyStealthClient )
		pFnApplyStealthClient = (UFunction*) UObject::GObjObjects()->Data[ 41938 ];

	ATgPawn_execApplyStealthClient_Parms ApplyStealthClient_Parms;

	this->ProcessEvent ( pFnApplyStealthClient, &ApplyStealthClient_Parms, NULL );
};

// Function TgGame.TgPawn.CheckMoraleDeviceReady
// [0x00020102] 
// Parameters infos:

void ATgPawn::CheckMoraleDeviceReady ( )
{
	static UFunction* pFnCheckMoraleDeviceReady = NULL;

	if ( ! pFnCheckMoraleDeviceReady )
		pFnCheckMoraleDeviceReady = (UFunction*) UObject::GObjObjects()->Data[ 41936 ];

	ATgPawn_execCheckMoraleDeviceReady_Parms CheckMoraleDeviceReady_Parms;

	this->ProcessEvent ( pFnCheckMoraleDeviceReady, &CheckMoraleDeviceReady_Parms, NULL );
};

// Function TgGame.TgPawn.CheckBeingTargeted
// [0x00020102] 
// Parameters infos:

void ATgPawn::CheckBeingTargeted ( )
{
	static UFunction* pFnCheckBeingTargeted = NULL;

	if ( ! pFnCheckBeingTargeted )
		pFnCheckBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 41933 ];

	ATgPawn_execCheckBeingTargeted_Parms CheckBeingTargeted_Parms;

	this->ProcessEvent ( pFnCheckBeingTargeted, &CheckBeingTargeted_Parms, NULL );
};

// Function TgGame.TgPawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 41931 ];

	ATgPawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDyingTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayDyingTimer ( )
{
	static UFunction* pFnPlayDyingTimer = NULL;

	if ( ! pFnPlayDyingTimer )
		pFnPlayDyingTimer = (UFunction*) UObject::GObjObjects()->Data[ 41930 ];

	ATgPawn_execPlayDyingTimer_Parms PlayDyingTimer_Parms;

	this->ProcessEvent ( pFnPlayDyingTimer, &PlayDyingTimer_Parms, NULL );
};

// Function TgGame.TgPawn.SetPlayDyingTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::SetPlayDyingTimer ( )
{
	static UFunction* pFnSetPlayDyingTimer = NULL;

	if ( ! pFnSetPlayDyingTimer )
		pFnSetPlayDyingTimer = (UFunction*) UObject::GObjObjects()->Data[ 41929 ];

	ATgPawn_execSetPlayDyingTimer_Parms SetPlayDyingTimer_Parms;

	this->ProcessEvent ( pFnSetPlayDyingTimer, &SetPlayDyingTimer_Parms, NULL );
};

// Function TgGame.TgPawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ATgPawn::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 41919 ];

	ATgPawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function TgGame.TgPawn.PlayDyingSound
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 41918 ];

	ATgPawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function TgGame.TgPawn.CalcCamera
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ATgPawn::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 41912 ];

	ATgPawn_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnUpdateHealthVar
// [0x00020102] 
// Parameters infos:

void ATgPawn::OnUpdateHealthVar ( )
{
	static UFunction* pFnOnUpdateHealthVar = NULL;

	if ( ! pFnOnUpdateHealthVar )
		pFnOnUpdateHealthVar = (UFunction*) UObject::GObjObjects()->Data[ 41910 ];

	ATgPawn_execOnUpdateHealthVar_Parms OnUpdateHealthVar_Parms;

	this->ProcessEvent ( pFnOnUpdateHealthVar, &OnUpdateHealthVar_Parms, NULL );
};

// Function TgGame.TgPawn.PostRenderFor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgPawn::eventPostRenderFor ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 41905 ];

	ATgPawn_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.thePlayerController = thePlayerController;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function TgGame.TgPawn.PostRenderDead
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgPawn::eventPostRenderDead ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderDead = NULL;

	if ( ! pFnPostRenderDead )
		pFnPostRenderDead = (UFunction*) UObject::GObjObjects()->Data[ 41898 ];

	ATgPawn_eventPostRenderDead_Parms PostRenderDead_Parms;
	PostRenderDead_Parms.thePlayerController = thePlayerController;
	PostRenderDead_Parms.Canvas = Canvas;
	memcpy ( &PostRenderDead_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderDead_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderDead, &PostRenderDead_Parms, NULL );
};

// Function TgGame.TgPawn.UpdatePitchRange
// [0x00020002] 
// Parameters infos:

void ATgPawn::UpdatePitchRange ( )
{
	static UFunction* pFnUpdatePitchRange = NULL;

	if ( ! pFnUpdatePitchRange )
		pFnUpdatePitchRange = (UFunction*) UObject::GObjObjects()->Data[ 41897 ];

	ATgPawn_execUpdatePitchRange_Parms UpdatePitchRange_Parms;

	this->ProcessEvent ( pFnUpdatePitchRange, &UpdatePitchRange_Parms, NULL );
};

// Function TgGame.TgPawn.ManageBlockingClientSide
// [0x00020002] 
// Parameters infos:

void ATgPawn::ManageBlockingClientSide ( )
{
	static UFunction* pFnManageBlockingClientSide = NULL;

	if ( ! pFnManageBlockingClientSide )
		pFnManageBlockingClientSide = (UFunction*) UObject::GObjObjects()->Data[ 41895 ];

	ATgPawn_execManageBlockingClientSide_Parms ManageBlockingClientSide_Parms;

	this->ProcessEvent ( pFnManageBlockingClientSide, &ManageBlockingClientSide_Parms, NULL );
};

// Function TgGame.TgPawn.ServerUpdateBlocking
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ServerUpdateBlocking ( unsigned long bOn )
{
	static UFunction* pFnServerUpdateBlocking = NULL;

	if ( ! pFnServerUpdateBlocking )
		pFnServerUpdateBlocking = (UFunction*) UObject::GObjObjects()->Data[ 41893 ];

	ATgPawn_execServerUpdateBlocking_Parms ServerUpdateBlocking_Parms;
	ServerUpdateBlocking_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerUpdateBlocking, &ServerUpdateBlocking_Parms, NULL );
};

// Function TgGame.TgPawn.ManageBlockingServerSide
// [0x00020002] 
// Parameters infos:

void ATgPawn::ManageBlockingServerSide ( )
{
	static UFunction* pFnManageBlockingServerSide = NULL;

	if ( ! pFnManageBlockingServerSide )
		pFnManageBlockingServerSide = (UFunction*) UObject::GObjObjects()->Data[ 41892 ];

	ATgPawn_execManageBlockingServerSide_Parms ManageBlockingServerSide_Parms;

	this->ProcessEvent ( pFnManageBlockingServerSide, &ManageBlockingServerSide_Parms, NULL );
};

// Function TgGame.TgPawn.CanBlock
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = (UFunction*) UObject::GObjObjects()->Data[ 41888 ];

	ATgPawn_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );

	return CanBlock_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CacheFiringOffhand
// [0x00020102] 
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDevice* ATgPawn::CacheFiringOffhand ( )
{
	static UFunction* pFnCacheFiringOffhand = NULL;

	if ( ! pFnCacheFiringOffhand )
		pFnCacheFiringOffhand = (UFunction*) UObject::GObjObjects()->Data[ 41884 ];

	ATgPawn_execCacheFiringOffhand_Parms CacheFiringOffhand_Parms;

	this->ProcessEvent ( pFnCacheFiringOffhand, &CacheFiringOffhand_Parms, NULL );

	return CacheFiringOffhand_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetFiringOffhandWeapon
// [0x00020102] 
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDevice* ATgPawn::GetFiringOffhandWeapon ( )
{
	static UFunction* pFnGetFiringOffhandWeapon = NULL;

	if ( ! pFnGetFiringOffhandWeapon )
		pFnGetFiringOffhandWeapon = (UFunction*) UObject::GObjObjects()->Data[ 41882 ];

	ATgPawn_execGetFiringOffhandWeapon_Parms GetFiringOffhandWeapon_Parms;

	this->ProcessEvent ( pFnGetFiringOffhandWeapon, &GetFiringOffhandWeapon_Parms, NULL );

	return GetFiringOffhandWeapon_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ServerUpdateAimingMode
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ServerUpdateAimingMode ( unsigned long bOn )
{
	static UFunction* pFnServerUpdateAimingMode = NULL;

	if ( ! pFnServerUpdateAimingMode )
		pFnServerUpdateAimingMode = (UFunction*) UObject::GObjObjects()->Data[ 41879 ];

	ATgPawn_execServerUpdateAimingMode_Parms ServerUpdateAimingMode_Parms;
	ServerUpdateAimingMode_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerUpdateAimingMode, &ServerUpdateAimingMode_Parms, NULL );
};

// Function TgGame.TgPawn.ServerUpdateSnipeScopeMode
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ServerUpdateSnipeScopeMode ( unsigned long bOn )
{
	static UFunction* pFnServerUpdateSnipeScopeMode = NULL;

	if ( ! pFnServerUpdateSnipeScopeMode )
		pFnServerUpdateSnipeScopeMode = (UFunction*) UObject::GObjObjects()->Data[ 41877 ];

	ATgPawn_execServerUpdateSnipeScopeMode_Parms ServerUpdateSnipeScopeMode_Parms;
	ServerUpdateSnipeScopeMode_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerUpdateSnipeScopeMode, &ServerUpdateSnipeScopeMode_Parms, NULL );
};

// Function TgGame.TgPawn.OnAimingModeChange
// [0x00020102] 
// Parameters infos:

void ATgPawn::OnAimingModeChange ( )
{
	static UFunction* pFnOnAimingModeChange = NULL;

	if ( ! pFnOnAimingModeChange )
		pFnOnAimingModeChange = (UFunction*) UObject::GObjObjects()->Data[ 41876 ];

	ATgPawn_execOnAimingModeChange_Parms OnAimingModeChange_Parms;

	this->ProcessEvent ( pFnOnAimingModeChange, &OnAimingModeChange_Parms, NULL );
};

// Function TgGame.TgPawn.ExitAimingMode
// [0x00020002] 
// Parameters infos:

void ATgPawn::ExitAimingMode ( )
{
	static UFunction* pFnExitAimingMode = NULL;

	if ( ! pFnExitAimingMode )
		pFnExitAimingMode = (UFunction*) UObject::GObjObjects()->Data[ 41874 ];

	ATgPawn_execExitAimingMode_Parms ExitAimingMode_Parms;

	this->ProcessEvent ( pFnExitAimingMode, &ExitAimingMode_Parms, NULL );
};

// Function TgGame.TgPawn.EnterAimingMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::EnterAimingMode ( )
{
	static UFunction* pFnEnterAimingMode = NULL;

	if ( ! pFnEnterAimingMode )
		pFnEnterAimingMode = (UFunction*) UObject::GObjObjects()->Data[ 41871 ];

	ATgPawn_execEnterAimingMode_Parms EnterAimingMode_Parms;

	this->ProcessEvent ( pFnEnterAimingMode, &EnterAimingMode_Parms, NULL );

	return EnterAimingMode_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ManageZoomingClientSide
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn::ManageZoomingClientSide ( float DeltaSeconds )
{
	static UFunction* pFnManageZoomingClientSide = NULL;

	if ( ! pFnManageZoomingClientSide )
		pFnManageZoomingClientSide = (UFunction*) UObject::GObjObjects()->Data[ 41867 ];

	ATgPawn_execManageZoomingClientSide_Parms ManageZoomingClientSide_Parms;
	ManageZoomingClientSide_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnManageZoomingClientSide, &ManageZoomingClientSide_Parms, NULL );
};

// Function TgGame.TgPawn.CanUseBinoculars
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanUseBinoculars ( )
{
	static UFunction* pFnCanUseBinoculars = NULL;

	if ( ! pFnCanUseBinoculars )
		pFnCanUseBinoculars = (UFunction*) UObject::GObjObjects()->Data[ 41865 ];

	ATgPawn_execCanUseBinoculars_Parms CanUseBinoculars_Parms;

	this->ProcessEvent ( pFnCanUseBinoculars, &CanUseBinoculars_Parms, NULL );

	return CanUseBinoculars_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ServerSetBinoculars
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPawn::ServerSetBinoculars ( unsigned long bOn )
{
	static UFunction* pFnServerSetBinoculars = NULL;

	if ( ! pFnServerSetBinoculars )
		pFnServerSetBinoculars = (UFunction*) UObject::GObjObjects()->Data[ 41863 ];

	ATgPawn_execServerSetBinoculars_Parms ServerSetBinoculars_Parms;
	ServerSetBinoculars_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerSetBinoculars, &ServerSetBinoculars_Parms, NULL );
};

// Function TgGame.TgPawn.ClientZoomIn
// [0x010201C2] 
// Parameters infos:
// float                          fFOVModifier                   ( CPF_Parm )
// unsigned long                  bBinoculars                    ( CPF_Parm )

void ATgPawn::ClientZoomIn ( float fFOVModifier, unsigned long bBinoculars )
{
	static UFunction* pFnClientZoomIn = NULL;

	if ( ! pFnClientZoomIn )
		pFnClientZoomIn = (UFunction*) UObject::GObjObjects()->Data[ 41859 ];

	ATgPawn_execClientZoomIn_Parms ClientZoomIn_Parms;
	ClientZoomIn_Parms.fFOVModifier = fFOVModifier;
	ClientZoomIn_Parms.bBinoculars = bBinoculars;

	this->ProcessEvent ( pFnClientZoomIn, &ClientZoomIn_Parms, NULL );
};

// Function TgGame.TgPawn.ClientZoomOut
// [0x010241C2] 
// Parameters infos:
// float                          fFOVModifier                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::ClientZoomOut ( float fFOVModifier )
{
	static UFunction* pFnClientZoomOut = NULL;

	if ( ! pFnClientZoomOut )
		pFnClientZoomOut = (UFunction*) UObject::GObjObjects()->Data[ 41857 ];

	ATgPawn_execClientZoomOut_Parms ClientZoomOut_Parms;
	ClientZoomOut_Parms.fFOVModifier = fFOVModifier;

	this->ProcessEvent ( pFnClientZoomOut, &ClientZoomOut_Parms, NULL );
};

// Function TgGame.TgPawn.TickZoom
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn::eventTickZoom ( float DeltaTime )
{
	static UFunction* pFnTickZoom = NULL;

	if ( ! pFnTickZoom )
		pFnTickZoom = (UFunction*) UObject::GObjObjects()->Data[ 41855 ];

	ATgPawn_eventTickZoom_Parms TickZoom_Parms;
	TickZoom_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickZoom, &TickZoom_Parms, NULL );
};

// Function TgGame.TgPawn.AdjustFOVAngle
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOVAngle                       ( CPF_Parm )

float ATgPawn::AdjustFOVAngle ( float FOVAngle )
{
	static UFunction* pFnAdjustFOVAngle = NULL;

	if ( ! pFnAdjustFOVAngle )
		pFnAdjustFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 41851 ];

	ATgPawn_execAdjustFOVAngle_Parms AdjustFOVAngle_Parms;
	AdjustFOVAngle_Parms.FOVAngle = FOVAngle;

	this->ProcessEvent ( pFnAdjustFOVAngle, &AdjustFOVAngle_Parms, NULL );

	return AdjustFOVAngle_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DrawZoomedOverlay
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void ATgPawn::DrawZoomedOverlay ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawZoomedOverlay = NULL;

	if ( ! pFnDrawZoomedOverlay )
		pFnDrawZoomedOverlay = (UFunction*) UObject::GObjObjects()->Data[ 41849 ];

	ATgPawn_execDrawZoomedOverlay_Parms DrawZoomedOverlay_Parms;
	DrawZoomedOverlay_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawZoomedOverlay, &DrawZoomedOverlay_Parms, NULL );
};

// Function TgGame.TgPawn.GetZoomOverlayToDraw
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgPawn::eventGetZoomOverlayToDraw ( )
{
	static UFunction* pFnGetZoomOverlayToDraw = NULL;

	if ( ! pFnGetZoomOverlayToDraw )
		pFnGetZoomOverlayToDraw = (UFunction*) UObject::GObjObjects()->Data[ 41845 ];

	ATgPawn_eventGetZoomOverlayToDraw_Parms GetZoomOverlayToDraw_Parms;

	this->ProcessEvent ( pFnGetZoomOverlayToDraw, &GetZoomOverlayToDraw_Parms, NULL );

	return GetZoomOverlayToDraw_Parms.ReturnValue;
};

// Function TgGame.TgPawn.InSensorDefaultMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::InSensorDefaultMode ( )
{
	static UFunction* pFnInSensorDefaultMode = NULL;

	if ( ! pFnInSensorDefaultMode )
		pFnInSensorDefaultMode = (UFunction*) UObject::GObjObjects()->Data[ 41843 ];

	ATgPawn_execInSensorDefaultMode_Parms InSensorDefaultMode_Parms;

	this->ProcessEvent ( pFnInSensorDefaultMode, &InSensorDefaultMode_Parms, NULL );

	return InSensorDefaultMode_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetActiveWeapon
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// unsigned long                  bForceFastClear                ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::eventSetActiveWeapon ( class AWeapon* NewWeapon, int nMode, unsigned long bForceFastClear )
{
	static UFunction* pFnSetActiveWeapon = NULL;

	if ( ! pFnSetActiveWeapon )
		pFnSetActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 41837 ];

	ATgPawn_eventSetActiveWeapon_Parms SetActiveWeapon_Parms;
	SetActiveWeapon_Parms.NewWeapon = NewWeapon;
	SetActiveWeapon_Parms.nMode = nMode;
	SetActiveWeapon_Parms.bForceFastClear = bForceFastClear;

	this->ProcessEvent ( pFnSetActiveWeapon, &SetActiveWeapon_Parms, NULL );

	return SetActiveWeapon_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetPawnState
// [0x00020102] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void ATgPawn::SetPawnState ( struct FName NewState )
{
	static UFunction* pFnSetPawnState = NULL;

	if ( ! pFnSetPawnState )
		pFnSetPawnState = (UFunction*) UObject::GObjObjects()->Data[ 41835 ];

	ATgPawn_execSetPawnState_Parms SetPawnState_Parms;
	memcpy ( &SetPawnState_Parms.NewState, &NewState, 0x8 );

	this->ProcessEvent ( pFnSetPawnState, &SetPawnState_Parms, NULL );
};

// Function TgGame.TgPawn.ShowVipFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void ATgPawn::ShowVipFx ( unsigned long bShow )
{
	static UFunction* pFnShowVipFx = NULL;

	if ( ! pFnShowVipFx )
		pFnShowVipFx = (UFunction*) UObject::GObjObjects()->Data[ 41833 ];

	ATgPawn_execShowVipFx_Parms ShowVipFx_Parms;
	ShowVipFx_Parms.bShow = bShow;

	pFnShowVipFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowVipFx, &ShowVipFx_Parms, NULL );

	pFnShowVipFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RemoveDeathEffects
// [0x00020102] 
// Parameters infos:

void ATgPawn::RemoveDeathEffects ( )
{
	static UFunction* pFnRemoveDeathEffects = NULL;

	if ( ! pFnRemoveDeathEffects )
		pFnRemoveDeathEffects = (UFunction*) UObject::GObjObjects()->Data[ 41832 ];

	ATgPawn_execRemoveDeathEffects_Parms RemoveDeathEffects_Parms;

	this->ProcessEvent ( pFnRemoveDeathEffects, &RemoveDeathEffects_Parms, NULL );
};

// Function TgGame.TgPawn.PlayRespawn
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayRespawn ( )
{
	static UFunction* pFnPlayRespawn = NULL;

	if ( ! pFnPlayRespawn )
		pFnPlayRespawn = (UFunction*) UObject::GObjObjects()->Data[ 41831 ];

	ATgPawn_execPlayRespawn_Parms PlayRespawn_Parms;

	this->ProcessEvent ( pFnPlayRespawn, &PlayRespawn_Parms, NULL );
};

// Function TgGame.TgPawn.TimerDestroy
// [0x00020100] 
// Parameters infos:

void ATgPawn::TimerDestroy ( )
{
	static UFunction* pFnTimerDestroy = NULL;

	if ( ! pFnTimerDestroy )
		pFnTimerDestroy = (UFunction*) UObject::GObjObjects()->Data[ 41830 ];

	ATgPawn_execTimerDestroy_Parms TimerDestroy_Parms;

	this->ProcessEvent ( pFnTimerDestroy, &TimerDestroy_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDeathFadeEffect
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayDeathFadeEffect ( )
{
	static UFunction* pFnPlayDeathFadeEffect = NULL;

	if ( ! pFnPlayDeathFadeEffect )
		pFnPlayDeathFadeEffect = (UFunction*) UObject::GObjObjects()->Data[ 41829 ];

	ATgPawn_execPlayDeathFadeEffect_Parms PlayDeathFadeEffect_Parms;

	this->ProcessEvent ( pFnPlayDeathFadeEffect, &PlayDeathFadeEffect_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDeathFadeEffectDelay
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayDeathFadeEffectDelay ( )
{
	static UFunction* pFnPlayDeathFadeEffectDelay = NULL;

	if ( ! pFnPlayDeathFadeEffectDelay )
		pFnPlayDeathFadeEffectDelay = (UFunction*) UObject::GObjObjects()->Data[ 41828 ];

	ATgPawn_execPlayDeathFadeEffectDelay_Parms PlayDeathFadeEffectDelay_Parms;

	this->ProcessEvent ( pFnPlayDeathFadeEffectDelay, &PlayDeathFadeEffectDelay_Parms, NULL );
};

// Function TgGame.TgPawn.CleanupParamsForDying
// [0x00020102] 
// Parameters infos:

void ATgPawn::CleanupParamsForDying ( )
{
	static UFunction* pFnCleanupParamsForDying = NULL;

	if ( ! pFnCleanupParamsForDying )
		pFnCleanupParamsForDying = (UFunction*) UObject::GObjObjects()->Data[ 41827 ];

	ATgPawn_execCleanupParamsForDying_Parms CleanupParamsForDying_Parms;

	this->ProcessEvent ( pFnCleanupParamsForDying, &CleanupParamsForDying_Parms, NULL );
};

// Function TgGame.TgPawn.StopAllAnimations
// [0x00020102] 
// Parameters infos:

void ATgPawn::StopAllAnimations ( )
{
	static UFunction* pFnStopAllAnimations = NULL;

	if ( ! pFnStopAllAnimations )
		pFnStopAllAnimations = (UFunction*) UObject::GObjObjects()->Data[ 41825 ];

	ATgPawn_execStopAllAnimations_Parms StopAllAnimations_Parms;

	this->ProcessEvent ( pFnStopAllAnimations, &StopAllAnimations_Parms, NULL );
};

// Function TgGame.TgPawn.RemoveAllEffects
// [0x002240C2] 
// Parameters infos:
// TArray< int >                  ExludeCategoryCodes            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::RemoveAllEffects ( TArray< int > ExludeCategoryCodes )
{
	static UFunction* pFnRemoveAllEffects = NULL;

	if ( ! pFnRemoveAllEffects )
		pFnRemoveAllEffects = (UFunction*) UObject::GObjObjects()->Data[ 41822 ];

	ATgPawn_execRemoveAllEffects_Parms RemoveAllEffects_Parms;
	memcpy ( &RemoveAllEffects_Parms.ExludeCategoryCodes, &ExludeCategoryCodes, 0xC );

	this->ProcessEvent ( pFnRemoveAllEffects, &RemoveAllEffects_Parms, NULL );
};

// Function TgGame.TgPawn.SetAnyBreakablePhysicsConstraints
// [0x00020102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPawn::SetAnyBreakablePhysicsConstraints ( unsigned long bEnabled )
{
	static UFunction* pFnSetAnyBreakablePhysicsConstraints = NULL;

	if ( ! pFnSetAnyBreakablePhysicsConstraints )
		pFnSetAnyBreakablePhysicsConstraints = (UFunction*) UObject::GObjObjects()->Data[ 41819 ];

	ATgPawn_execSetAnyBreakablePhysicsConstraints_Parms SetAnyBreakablePhysicsConstraints_Parms;
	SetAnyBreakablePhysicsConstraints_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetAnyBreakablePhysicsConstraints, &SetAnyBreakablePhysicsConstraints_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDyingEffects
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayDyingEffects ( )
{
	static UFunction* pFnPlayDyingEffects = NULL;

	if ( ! pFnPlayDyingEffects )
		pFnPlayDyingEffects = (UFunction*) UObject::GObjObjects()->Data[ 41818 ];

	ATgPawn_execPlayDyingEffects_Parms PlayDyingEffects_Parms;

	this->ProcessEvent ( pFnPlayDyingEffects, &PlayDyingEffects_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDyingPhysicsAndAnimation
// [0x00820102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 41803 ];

	ATgPawn_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn.Die
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::Die ( )
{
	static UFunction* pFnDie = NULL;

	if ( ! pFnDie )
		pFnDie = (UFunction*) UObject::GObjObjects()->Data[ 41801 ];

	ATgPawn_execDie_Parms Die_Parms;

	this->ProcessEvent ( pFnDie, &Die_Parms, NULL );
};

// Function TgGame.TgPawn.HideMeshAfterDeathTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::HideMeshAfterDeathTimer ( )
{
	static UFunction* pFnHideMeshAfterDeathTimer = NULL;

	if ( ! pFnHideMeshAfterDeathTimer )
		pFnHideMeshAfterDeathTimer = (UFunction*) UObject::GObjObjects()->Data[ 41800 ];

	ATgPawn_execHideMeshAfterDeathTimer_Parms HideMeshAfterDeathTimer_Parms;

	this->ProcessEvent ( pFnHideMeshAfterDeathTimer, &HideMeshAfterDeathTimer_Parms, NULL );
};

// Function TgGame.TgPawn.RemoveEffectsTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::RemoveEffectsTimer ( )
{
	static UFunction* pFnRemoveEffectsTimer = NULL;

	if ( ! pFnRemoveEffectsTimer )
		pFnRemoveEffectsTimer = (UFunction*) UObject::GObjObjects()->Data[ 41797 ];

	ATgPawn_execRemoveEffectsTimer_Parms RemoveEffectsTimer_Parms;

	this->ProcessEvent ( pFnRemoveEffectsTimer, &RemoveEffectsTimer_Parms, NULL );
};

// Function TgGame.TgPawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 41791 ];

	ATgPawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn.RemoveIfLocalTarget
// [0x00020102] 
// Parameters infos:

void ATgPawn::RemoveIfLocalTarget ( )
{
	static UFunction* pFnRemoveIfLocalTarget = NULL;

	if ( ! pFnRemoveIfLocalTarget )
		pFnRemoveIfLocalTarget = (UFunction*) UObject::GObjObjects()->Data[ 41788 ];

	ATgPawn_execRemoveIfLocalTarget_Parms RemoveIfLocalTarget_Parms;

	this->ProcessEvent ( pFnRemoveIfLocalTarget, &RemoveIfLocalTarget_Parms, NULL );
};

// Function TgGame.TgPawn.ShouldBeHeard
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ShouldBeHeard ( )
{
	static UFunction* pFnShouldBeHeard = NULL;

	if ( ! pFnShouldBeHeard )
		pFnShouldBeHeard = (UFunction*) UObject::GObjObjects()->Data[ 41786 ];

	ATgPawn_execShouldBeHeard_Parms ShouldBeHeard_Parms;

	this->ProcessEvent ( pFnShouldBeHeard, &ShouldBeHeard_Parms, NULL );

	return ShouldBeHeard_Parms.ReturnValue;
};

// Function TgGame.TgPawn.MakeRadarMapNoise
// [0x00020002] 
// Parameters infos:

void ATgPawn::MakeRadarMapNoise ( )
{
	static UFunction* pFnMakeRadarMapNoise = NULL;

	if ( ! pFnMakeRadarMapNoise )
		pFnMakeRadarMapNoise = (UFunction*) UObject::GObjObjects()->Data[ 41785 ];

	ATgPawn_execMakeRadarMapNoise_Parms MakeRadarMapNoise_Parms;

	this->ProcessEvent ( pFnMakeRadarMapNoise, &MakeRadarMapNoise_Parms, NULL );
};

// Function TgGame.TgPawn.PlayFootStepSound
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )
// unsigned char                  FootStepType                   ( CPF_Parm )

void ATgPawn::eventPlayFootStepSound ( int FootDown, unsigned char FootStepType )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 41773 ];

	ATgPawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;
	PlayFootStepSound_Parms.FootStepType = FootStepType;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function TgGame.TgPawn.GetDebugName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgPawn::GetDebugName ( )
{
	static UFunction* pFnGetDebugName = NULL;

	if ( ! pFnGetDebugName )
		pFnGetDebugName = (UFunction*) UObject::GObjObjects()->Data[ 41771 ];

	ATgPawn_execGetDebugName_Parms GetDebugName_Parms;

	this->ProcessEvent ( pFnGetDebugName, &GetDebugName_Parms, NULL );

	return GetDebugName_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ToggleWalkAnim
// [0x00020102] 
// Parameters infos:

void ATgPawn::ToggleWalkAnim ( )
{
	static UFunction* pFnToggleWalkAnim = NULL;

	if ( ! pFnToggleWalkAnim )
		pFnToggleWalkAnim = (UFunction*) UObject::GObjObjects()->Data[ 41770 ];

	ATgPawn_execToggleWalkAnim_Parms ToggleWalkAnim_Parms;

	this->ProcessEvent ( pFnToggleWalkAnim, &ToggleWalkAnim_Parms, NULL );
};

// Function TgGame.TgPawn.PlayEmote
// [0x00020102] 
// Parameters infos:

void ATgPawn::PlayEmote ( )
{
	static UFunction* pFnPlayEmote = NULL;

	if ( ! pFnPlayEmote )
		pFnPlayEmote = (UFunction*) UObject::GObjObjects()->Data[ 41769 ];

	ATgPawn_execPlayEmote_Parms PlayEmote_Parms;

	this->ProcessEvent ( pFnPlayEmote, &PlayEmote_Parms, NULL );
};

// Function TgGame.TgPawn.CallBotsForHelp
// [0x00020002] 
// Parameters infos:

void ATgPawn::CallBotsForHelp ( )
{
	static UFunction* pFnCallBotsForHelp = NULL;

	if ( ! pFnCallBotsForHelp )
		pFnCallBotsForHelp = (UFunction*) UObject::GObjObjects()->Data[ 41767 ];

	ATgPawn_execCallBotsForHelp_Parms CallBotsForHelp_Parms;

	this->ProcessEvent ( pFnCallBotsForHelp, &CallBotsForHelp_Parms, NULL );
};

// Function TgGame.TgPawn.HelpClearTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn::HelpClearTimer ( )
{
	static UFunction* pFnHelpClearTimer = NULL;

	if ( ! pFnHelpClearTimer )
		pFnHelpClearTimer = (UFunction*) UObject::GObjObjects()->Data[ 41766 ];

	ATgPawn_execHelpClearTimer_Parms HelpClearTimer_Parms;

	this->ProcessEvent ( pFnHelpClearTimer, &HelpClearTimer_Parms, NULL );
};

// Function TgGame.TgPawn.CallForHelp
// [0x00020102] 
// Parameters infos:

void ATgPawn::CallForHelp ( )
{
	static UFunction* pFnCallForHelp = NULL;

	if ( ! pFnCallForHelp )
		pFnCallForHelp = (UFunction*) UObject::GObjObjects()->Data[ 41765 ];

	ATgPawn_execCallForHelp_Parms CallForHelp_Parms;

	this->ProcessEvent ( pFnCallForHelp, &CallForHelp_Parms, NULL );
};

// Function TgGame.TgPawn.SetEmote
// [0x00024102] 
// Parameters infos:
// int                            emote                          ( CPF_Parm )
// int                            Length                         ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SetEmote ( int emote, int Length )
{
	static UFunction* pFnSetEmote = NULL;

	if ( ! pFnSetEmote )
		pFnSetEmote = (UFunction*) UObject::GObjObjects()->Data[ 41762 ];

	ATgPawn_execSetEmote_Parms SetEmote_Parms;
	SetEmote_Parms.emote = emote;
	SetEmote_Parms.Length = Length;

	this->ProcessEvent ( pFnSetEmote, &SetEmote_Parms, NULL );
};

// Function TgGame.TgPawn.PostureTransitionEnded
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// unsigned char                  PostureThatEnded               ( CPF_Parm )

void ATgPawn::eventPostureTransitionEnded ( unsigned char PostureThatEnded )
{
	static UFunction* pFnPostureTransitionEnded = NULL;

	if ( ! pFnPostureTransitionEnded )
		pFnPostureTransitionEnded = (UFunction*) UObject::GObjObjects()->Data[ 41760 ];

	ATgPawn_eventPostureTransitionEnded_Parms PostureTransitionEnded_Parms;
	PostureTransitionEnded_Parms.PostureThatEnded = PostureThatEnded;

	this->ProcessEvent ( pFnPostureTransitionEnded, &PostureTransitionEnded_Parms, NULL );
};

// Function TgGame.TgPawn.SetPosture
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            ePosture                       ( CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventSetPosture ( int ePosture, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnSetPosture = NULL;

	if ( ! pFnSetPosture )
		pFnSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 41756 ];

	ATgPawn_eventSetPosture_Parms SetPosture_Parms;
	SetPosture_Parms.ePosture = ePosture;
	SetPosture_Parms.fRateScale = fRateScale;
	SetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnSetPosture, &SetPosture_Parms, NULL );
};

// Function TgGame.TgPawn.FaceRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 41753 ];

	ATgPawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function TgGame.TgPawn.ClimbLadder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ALadderVolume*           L                              ( CPF_Parm )

void ATgPawn::eventClimbLadder ( class ALadderVolume* L )
{
	static UFunction* pFnClimbLadder = NULL;

	if ( ! pFnClimbLadder )
		pFnClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 41751 ];

	ATgPawn_eventClimbLadder_Parms ClimbLadder_Parms;
	ClimbLadder_Parms.L = L;

	this->ProcessEvent ( pFnClimbLadder, &ClimbLadder_Parms, NULL );
};

// Function TgGame.TgPawn.EndViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ATgPawn::eventEndViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnEndViewTarget = NULL;

	if ( ! pFnEndViewTarget )
		pFnEndViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 41749 ];

	ATgPawn_eventEndViewTarget_Parms EndViewTarget_Parms;
	EndViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnEndViewTarget, &EndViewTarget_Parms, NULL );
};

// Function TgGame.TgPawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ATgPawn::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 41747 ];

	ATgPawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function TgGame.TgPawn.GetPlayerHealthForRender
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::eventGetPlayerHealthForRender ( )
{
	static UFunction* pFnGetPlayerHealthForRender = NULL;

	if ( ! pFnGetPlayerHealthForRender )
		pFnGetPlayerHealthForRender = (UFunction*) UObject::GObjObjects()->Data[ 41745 ];

	ATgPawn_eventGetPlayerHealthForRender_Parms GetPlayerHealthForRender_Parms;

	this->ProcessEvent ( pFnGetPlayerHealthForRender, &GetPlayerHealthForRender_Parms, NULL );

	return GetPlayerHealthForRender_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetPlayerTagForRender
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgPawn::eventGetPlayerTagForRender ( )
{
	static UFunction* pFnGetPlayerTagForRender = NULL;

	if ( ! pFnGetPlayerTagForRender )
		pFnGetPlayerTagForRender = (UFunction*) UObject::GObjObjects()->Data[ 41739 ];

	ATgPawn_eventGetPlayerTagForRender_Parms GetPlayerTagForRender_Parms;

	this->ProcessEvent ( pFnGetPlayerTagForRender, &GetPlayerTagForRender_Parms, NULL );

	return GetPlayerTagForRender_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetPlayerNameForRender
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgPawn::eventGetPlayerNameForRender ( )
{
	static UFunction* pFnGetPlayerNameForRender = NULL;

	if ( ! pFnGetPlayerNameForRender )
		pFnGetPlayerNameForRender = (UFunction*) UObject::GObjObjects()->Data[ 41736 ];

	ATgPawn_eventGetPlayerNameForRender_Parms GetPlayerNameForRender_Parms;

	this->ProcessEvent ( pFnGetPlayerNameForRender, &GetPlayerNameForRender_Parms, NULL );

	return GetPlayerNameForRender_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetTargetBoxColor
// [0x00820102] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

struct FColor ATgPawn::GetTargetBoxColor ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnGetTargetBoxColor = NULL;

	if ( ! pFnGetTargetBoxColor )
		pFnGetTargetBoxColor = (UFunction*) UObject::GObjObjects()->Data[ 41732 ];

	ATgPawn_execGetTargetBoxColor_Parms GetTargetBoxColor_Parms;
	GetTargetBoxColor_Parms.LocalPlayerPawn = LocalPlayerPawn;

	this->ProcessEvent ( pFnGetTargetBoxColor, &GetTargetBoxColor_Parms, NULL );

	return GetTargetBoxColor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnGroupChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventOnGroupChange ( )
{
	static UFunction* pFnOnGroupChange = NULL;

	if ( ! pFnOnGroupChange )
		pFnOnGroupChange = (UFunction*) UObject::GObjObjects()->Data[ 41725 ];

	ATgPawn_eventOnGroupChange_Parms OnGroupChange_Parms;

	this->ProcessEvent ( pFnOnGroupChange, &OnGroupChange_Parms, NULL );
};

// Function TgGame.TgPawn.CheckObjectiveOnGroupChange
// [0x00020102] 
// Parameters infos:

void ATgPawn::CheckObjectiveOnGroupChange ( )
{
	static UFunction* pFnCheckObjectiveOnGroupChange = NULL;

	if ( ! pFnCheckObjectiveOnGroupChange )
		pFnCheckObjectiveOnGroupChange = (UFunction*) UObject::GObjObjects()->Data[ 41723 ];

	ATgPawn_execCheckObjectiveOnGroupChange_Parms CheckObjectiveOnGroupChange_Parms;

	this->ProcessEvent ( pFnCheckObjectiveOnGroupChange, &CheckObjectiveOnGroupChange_Parms, NULL );
};

// Function TgGame.TgPawn.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void ATgPawn::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = (UFunction*) UObject::GObjObjects()->Data[ 41722 ];

	ATgPawn_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function TgGame.TgPawn.GetColumnBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetColumnBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetColumnBasedOnIndex = NULL;

	if ( ! pFnGetColumnBasedOnIndex )
		pFnGetColumnBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41719 ];

	ATgPawn_execGetColumnBasedOnIndex_Parms GetColumnBasedOnIndex_Parms;
	GetColumnBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetColumnBasedOnIndex, &GetColumnBasedOnIndex_Parms, NULL );

	return GetColumnBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetRowBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetRowBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetRowBasedOnIndex = NULL;

	if ( ! pFnGetRowBasedOnIndex )
		pFnGetRowBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41716 ];

	ATgPawn_execGetRowBasedOnIndex_Parms GetRowBasedOnIndex_Parms;
	GetRowBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetRowBasedOnIndex, &GetRowBasedOnIndex_Parms, NULL );

	return GetRowBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetY2CoordBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetY2CoordBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetY2CoordBasedOnIndex = NULL;

	if ( ! pFnGetY2CoordBasedOnIndex )
		pFnGetY2CoordBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41713 ];

	ATgPawn_execGetY2CoordBasedOnIndex_Parms GetY2CoordBasedOnIndex_Parms;
	GetY2CoordBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetY2CoordBasedOnIndex, &GetY2CoordBasedOnIndex_Parms, NULL );

	return GetY2CoordBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetX2CoordBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetX2CoordBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetX2CoordBasedOnIndex = NULL;

	if ( ! pFnGetX2CoordBasedOnIndex )
		pFnGetX2CoordBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41710 ];

	ATgPawn_execGetX2CoordBasedOnIndex_Parms GetX2CoordBasedOnIndex_Parms;
	GetX2CoordBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetX2CoordBasedOnIndex, &GetX2CoordBasedOnIndex_Parms, NULL );

	return GetX2CoordBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetY1CoordBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetY1CoordBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetY1CoordBasedOnIndex = NULL;

	if ( ! pFnGetY1CoordBasedOnIndex )
		pFnGetY1CoordBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41707 ];

	ATgPawn_execGetY1CoordBasedOnIndex_Parms GetY1CoordBasedOnIndex_Parms;
	GetY1CoordBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetY1CoordBasedOnIndex, &GetY1CoordBasedOnIndex_Parms, NULL );

	return GetY1CoordBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetX1CoordBasedOnIndex
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int ATgPawn::GetX1CoordBasedOnIndex ( int nIndex )
{
	static UFunction* pFnGetX1CoordBasedOnIndex = NULL;

	if ( ! pFnGetX1CoordBasedOnIndex )
		pFnGetX1CoordBasedOnIndex = (UFunction*) UObject::GObjObjects()->Data[ 41704 ];

	ATgPawn_execGetX1CoordBasedOnIndex_Parms GetX1CoordBasedOnIndex_Parms;
	GetX1CoordBasedOnIndex_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnGetX1CoordBasedOnIndex, &GetX1CoordBasedOnIndex_Parms, NULL );

	return GetX1CoordBasedOnIndex_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetLocalPlayerPawn
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgPawn::GetLocalPlayerPawn ( )
{
	static UFunction* pFnGetLocalPlayerPawn = NULL;

	if ( ! pFnGetLocalPlayerPawn )
		pFnGetLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 41700 ];

	ATgPawn_execGetLocalPlayerPawn_Parms GetLocalPlayerPawn_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerPawn, &GetLocalPlayerPawn_Parms, NULL );

	return GetLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.LoadPlayerIcons
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::LoadPlayerIcons ( )
{
	static UFunction* pFnLoadPlayerIcons = NULL;

	if ( ! pFnLoadPlayerIcons )
		pFnLoadPlayerIcons = (UFunction*) UObject::GObjObjects()->Data[ 41697 ];

	ATgPawn_execLoadPlayerIcons_Parms LoadPlayerIcons_Parms;

	this->ProcessEvent ( pFnLoadPlayerIcons, &LoadPlayerIcons_Parms, NULL );

	return LoadPlayerIcons_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SeenByLocalPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::SeenByLocalPlayer ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnSeenByLocalPlayer = NULL;

	if ( ! pFnSeenByLocalPlayer )
		pFnSeenByLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 41691 ];

	ATgPawn_execSeenByLocalPlayer_Parms SeenByLocalPlayer_Parms;
	SeenByLocalPlayer_Parms.LocalPlayerPawn = LocalPlayerPawn;

	this->ProcessEvent ( pFnSeenByLocalPlayer, &SeenByLocalPlayer_Parms, NULL );

	return SeenByLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DrawMultiLineText
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// int                            LineHeight                     ( CPF_Parm )

void ATgPawn::eventDrawMultiLineText ( class UCanvas* Canvas, struct FString Text, int X, int Y, int LineHeight )
{
	static UFunction* pFnDrawMultiLineText = NULL;

	if ( ! pFnDrawMultiLineText )
		pFnDrawMultiLineText = (UFunction*) UObject::GObjObjects()->Data[ 41681 ];

	ATgPawn_eventDrawMultiLineText_Parms DrawMultiLineText_Parms;
	DrawMultiLineText_Parms.Canvas = Canvas;
	memcpy ( &DrawMultiLineText_Parms.Text, &Text, 0xC );
	DrawMultiLineText_Parms.X = X;
	DrawMultiLineText_Parms.Y = Y;
	DrawMultiLineText_Parms.LineHeight = LineHeight;

	this->ProcessEvent ( pFnDrawMultiLineText, &DrawMultiLineText_Parms, NULL );
};

// Function TgGame.TgPawn.GetLocalPlayerController
// [0x00020102] 
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* ATgPawn::GetLocalPlayerController ( )
{
	static UFunction* pFnGetLocalPlayerController = NULL;

	if ( ! pFnGetLocalPlayerController )
		pFnGetLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 41678 ];

	ATgPawn_execGetLocalPlayerController_Parms GetLocalPlayerController_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerController, &GetLocalPlayerController_Parms, NULL );

	return GetLocalPlayerController_Parms.ReturnValue;
};

// Function TgGame.TgPawn.AddDamageInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 SourcePawn                     ( CPF_Parm )
// struct FString                 DamageString                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )

void ATgPawn::AddDamageInfo ( class ATgPawn* SourcePawn, struct FString DamageString, unsigned char Type )
{
	static UFunction* pFnAddDamageInfo = NULL;

	if ( ! pFnAddDamageInfo )
		pFnAddDamageInfo = (UFunction*) UObject::GObjObjects()->Data[ 41674 ];

	ATgPawn_execAddDamageInfo_Parms AddDamageInfo_Parms;
	AddDamageInfo_Parms.SourcePawn = SourcePawn;
	memcpy ( &AddDamageInfo_Parms.DamageString, &DamageString, 0xC );
	AddDamageInfo_Parms.Type = Type;

	pFnAddDamageInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDamageInfo, &AddDamageInfo_Parms, NULL );

	pFnAddDamageInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ModifyHealthProp
// [0x00020002] 
// Parameters infos:
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::ModifyHealthProp ( int nDamage )
{
	static UFunction* pFnModifyHealthProp = NULL;

	if ( ! pFnModifyHealthProp )
		pFnModifyHealthProp = (UFunction*) UObject::GObjObjects()->Data[ 41670 ];

	ATgPawn_execModifyHealthProp_Parms ModifyHealthProp_Parms;
	ModifyHealthProp_Parms.nDamage = nDamage;

	this->ProcessEvent ( pFnModifyHealthProp, &ModifyHealthProp_Parms, NULL );
};

// Function TgGame.TgPawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 41661 ];

	ATgPawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgPawn.DrawAIDebug
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )

void ATgPawn::eventDrawAIDebug ( class UCanvas* Canvas, struct FVector ScreenLoc )
{
	static UFunction* pFnDrawAIDebug = NULL;

	if ( ! pFnDrawAIDebug )
		pFnDrawAIDebug = (UFunction*) UObject::GObjObjects()->Data[ 41655 ];

	ATgPawn_eventDrawAIDebug_Parms DrawAIDebug_Parms;
	DrawAIDebug_Parms.Canvas = Canvas;
	memcpy ( &DrawAIDebug_Parms.ScreenLoc, &ScreenLoc, 0xC );

	this->ProcessEvent ( pFnDrawAIDebug, &DrawAIDebug_Parms, NULL );
};

// Function TgGame.TgPawn.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ATgPawn::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 41649 ];

	ATgPawn_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function TgGame.TgPawn.SendNotifyTakeHit
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ATgPawn::eventSendNotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnSendNotifyTakeHit = NULL;

	if ( ! pFnSendNotifyTakeHit )
		pFnSendNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 41643 ];

	ATgPawn_eventSendNotifyTakeHit_Parms SendNotifyTakeHit_Parms;
	SendNotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &SendNotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	SendNotifyTakeHit_Parms.Damage = Damage;
	SendNotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &SendNotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnSendNotifyTakeHit, &SendNotifyTakeHit_Parms, NULL );
};

// Function TgGame.TgPawn.PlayTakeHit
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )

void ATgPawn::PlayTakeHit ( struct FVector HitLoc, int Damage, class UClass* dmgType )
{
	static UFunction* pFnPlayTakeHit = NULL;

	if ( ! pFnPlayTakeHit )
		pFnPlayTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 41638 ];

	ATgPawn_execPlayTakeHit_Parms PlayTakeHit_Parms;
	memcpy ( &PlayTakeHit_Parms.HitLoc, &HitLoc, 0xC );
	PlayTakeHit_Parms.Damage = Damage;
	PlayTakeHit_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnPlayTakeHit, &PlayTakeHit_Parms, NULL );
};

// Function TgGame.TgPawn.StopPlayFiring
// [0x00020100] 
// Parameters infos:

void ATgPawn::StopPlayFiring ( )
{
	static UFunction* pFnStopPlayFiring = NULL;

	if ( ! pFnStopPlayFiring )
		pFnStopPlayFiring = (UFunction*) UObject::GObjObjects()->Data[ 41637 ];

	ATgPawn_execStopPlayFiring_Parms StopPlayFiring_Parms;

	this->ProcessEvent ( pFnStopPlayFiring, &StopPlayFiring_Parms, NULL );
};

// Function TgGame.TgPawn.ClearFlashLocation
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )

void ATgPawn::ClearFlashLocation ( class AWeapon* Who )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 41635 ];

	ATgPawn_execClearFlashLocation_Parms ClearFlashLocation_Parms;
	ClearFlashLocation_Parms.Who = Who;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function TgGame.TgPawn.ClearFlashCount
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )

void ATgPawn::ClearFlashCount ( class AWeapon* Who )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 41633 ];

	ATgPawn_execClearFlashCount_Parms ClearFlashCount_Parms;
	ClearFlashCount_Parms.Who = Who;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function TgGame.TgPawn.IncrementFlashCount
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 Who                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ATgPawn::IncrementFlashCount ( class AWeapon* Who, unsigned char FireModeNum )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 41630 ];

	ATgPawn_execIncrementFlashCount_Parms IncrementFlashCount_Parms;
	IncrementFlashCount_Parms.Who = Who;
	IncrementFlashCount_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function TgGame.TgPawn.CanApplyEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanApplyEffects ( )
{
	static UFunction* pFnCanApplyEffects = NULL;

	if ( ! pFnCanApplyEffects )
		pFnCanApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 41628 ];

	ATgPawn_execCanApplyEffects_Parms CanApplyEffects_Parms;

	this->ProcessEvent ( pFnCanApplyEffects, &CanApplyEffects_Parms, NULL );

	return CanApplyEffects_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnDeviceFormStopFire
// [0x00020100] 
// Parameters infos:

void ATgPawn::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 41627 ];

	ATgPawn_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn.OnDeviceFormFire
// [0x00020100] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 41625 ];

	ATgPawn_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn.OnDeviceFormBuildup
// [0x00020100] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn::OnDeviceFormBuildup ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormBuildup = NULL;

	if ( ! pFnOnDeviceFormBuildup )
		pFnOnDeviceFormBuildup = (UFunction*) UObject::GObjObjects()->Data[ 41623 ];

	ATgPawn_execOnDeviceFormBuildup_Parms OnDeviceFormBuildup_Parms;
	OnDeviceFormBuildup_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormBuildup, &OnDeviceFormBuildup_Parms, NULL );
};

// Function TgGame.TgPawn.ForceRefreshUICooldowns
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventForceRefreshUICooldowns ( )
{
	static UFunction* pFnForceRefreshUICooldowns = NULL;

	if ( ! pFnForceRefreshUICooldowns )
		pFnForceRefreshUICooldowns = (UFunction*) UObject::GObjObjects()->Data[ 41620 ];

	ATgPawn_eventForceRefreshUICooldowns_Parms ForceRefreshUICooldowns_Parms;

	this->ProcessEvent ( pFnForceRefreshUICooldowns, &ForceRefreshUICooldowns_Parms, NULL );
};

// Function TgGame.TgPawn.UpdateUIDeviceCooldowns
// [0x01020942] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventUpdateUIDeviceCooldowns ( )
{
	static UFunction* pFnUpdateUIDeviceCooldowns = NULL;

	if ( ! pFnUpdateUIDeviceCooldowns )
		pFnUpdateUIDeviceCooldowns = (UFunction*) UObject::GObjObjects()->Data[ 41619 ];

	ATgPawn_eventUpdateUIDeviceCooldowns_Parms UpdateUIDeviceCooldowns_Parms;

	this->ProcessEvent ( pFnUpdateUIDeviceCooldowns, &UpdateUIDeviceCooldowns_Parms, NULL );
};

// Function TgGame.TgPawn.RestartAllDevices
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventRestartAllDevices ( )
{
	static UFunction* pFnRestartAllDevices = NULL;

	if ( ! pFnRestartAllDevices )
		pFnRestartAllDevices = (UFunction*) UObject::GObjObjects()->Data[ 41616 ];

	ATgPawn_eventRestartAllDevices_Parms RestartAllDevices_Parms;

	this->ProcessEvent ( pFnRestartAllDevices, &RestartAllDevices_Parms, NULL );
};

// Function TgGame.TgPawn.ClientStopFiringAllDevices
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bClearEquipEffectFlag          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bResetCooldowns                ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::ClientStopFiringAllDevices ( unsigned long bClearEquipEffectFlag, unsigned long bResetCooldowns )
{
	static UFunction* pFnClientStopFiringAllDevices = NULL;

	if ( ! pFnClientStopFiringAllDevices )
		pFnClientStopFiringAllDevices = (UFunction*) UObject::GObjObjects()->Data[ 41613 ];

	ATgPawn_execClientStopFiringAllDevices_Parms ClientStopFiringAllDevices_Parms;
	ClientStopFiringAllDevices_Parms.bClearEquipEffectFlag = bClearEquipEffectFlag;
	ClientStopFiringAllDevices_Parms.bResetCooldowns = bResetCooldowns;

	this->ProcessEvent ( pFnClientStopFiringAllDevices, &ClientStopFiringAllDevices_Parms, NULL );
};

// Function TgGame.TgPawn.StopFiringAllDevices
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bClearEquipEffectFlag          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bResetCooldowns                ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventStopFiringAllDevices ( unsigned long bClearEquipEffectFlag, unsigned long bResetCooldowns )
{
	static UFunction* pFnStopFiringAllDevices = NULL;

	if ( ! pFnStopFiringAllDevices )
		pFnStopFiringAllDevices = (UFunction*) UObject::GObjObjects()->Data[ 41608 ];

	ATgPawn_eventStopFiringAllDevices_Parms StopFiringAllDevices_Parms;
	StopFiringAllDevices_Parms.bClearEquipEffectFlag = bClearEquipEffectFlag;
	StopFiringAllDevices_Parms.bResetCooldowns = bResetCooldowns;

	this->ProcessEvent ( pFnStopFiringAllDevices, &StopFiringAllDevices_Parms, NULL );
};

// Function TgGame.TgPawn.IsAnyDeviceFiring
// [0x00020102] 
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDevice* ATgPawn::IsAnyDeviceFiring ( )
{
	static UFunction* pFnIsAnyDeviceFiring = NULL;

	if ( ! pFnIsAnyDeviceFiring )
		pFnIsAnyDeviceFiring = (UFunction*) UObject::GObjObjects()->Data[ 41604 ];

	ATgPawn_execIsAnyDeviceFiring_Parms IsAnyDeviceFiring_Parms;

	this->ProcessEvent ( pFnIsAnyDeviceFiring, &IsAnyDeviceFiring_Parms, NULL );

	return IsAnyDeviceFiring_Parms.ReturnValue;
};

// Function TgGame.TgPawn.StopAction
// [0x00024102] 
// Parameters infos:
// class ATgDevice*               Dev                            ( CPF_Parm )
// int                            nMode                          ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::StopAction ( class ATgDevice* Dev, int nMode )
{
	static UFunction* pFnStopAction = NULL;

	if ( ! pFnStopAction )
		pFnStopAction = (UFunction*) UObject::GObjObjects()->Data[ 41601 ];

	ATgPawn_execStopAction_Parms StopAction_Parms;
	StopAction_Parms.Dev = Dev;
	StopAction_Parms.nMode = nMode;

	this->ProcessEvent ( pFnStopAction, &StopAction_Parms, NULL );
};

// Function TgGame.TgPawn.StartAction
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )
// int                            nMode                          ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::StartAction ( class ATgDevice* Dev, int nMode )
{
	static UFunction* pFnStartAction = NULL;

	if ( ! pFnStartAction )
		pFnStartAction = (UFunction*) UObject::GObjObjects()->Data[ 41596 ];

	ATgPawn_execStartAction_Parms StartAction_Parms;
	StartAction_Parms.Dev = Dev;
	StartAction_Parms.nMode = nMode;

	this->ProcessEvent ( pFnStartAction, &StartAction_Parms, NULL );

	return StartAction_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetDisableAction
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDisable                       ( CPF_Parm )

void ATgPawn::eventSetDisableAction ( unsigned long bDisable )
{
	static UFunction* pFnSetDisableAction = NULL;

	if ( ! pFnSetDisableAction )
		pFnSetDisableAction = (UFunction*) UObject::GObjObjects()->Data[ 41594 ];

	ATgPawn_eventSetDisableAction_Parms SetDisableAction_Parms;
	SetDisableAction_Parms.bDisable = bDisable;

	this->ProcessEvent ( pFnSetDisableAction, &SetDisableAction_Parms, NULL );
};

// Function TgGame.TgPawn.AnimSwapDevice
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventAnimSwapDevice ( )
{
	static UFunction* pFnAnimSwapDevice = NULL;

	if ( ! pFnAnimSwapDevice )
		pFnAnimSwapDevice = (UFunction*) UObject::GObjObjects()->Data[ 41593 ];

	ATgPawn_eventAnimSwapDevice_Parms AnimSwapDevice_Parms;

	this->ProcessEvent ( pFnAnimSwapDevice, &AnimSwapDevice_Parms, NULL );
};

// Function TgGame.TgPawn.UIH
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::UIH ( )
{
	static UFunction* pFnUIH = NULL;

	if ( ! pFnUIH )
		pFnUIH = (UFunction*) UObject::GObjObjects()->Data[ 41592 ];

	ATgPawn_execUIH_Parms UIH_Parms;

	this->ProcessEvent ( pFnUIH, &UIH_Parms, NULL );
};

// Function TgGame.TgPawn.UpdateInHand
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bForceFastClear                ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::eventUpdateInHand ( unsigned long bForceFastClear )
{
	static UFunction* pFnUpdateInHand = NULL;

	if ( ! pFnUpdateInHand )
		pFnUpdateInHand = (UFunction*) UObject::GObjObjects()->Data[ 41589 ];

	ATgPawn_eventUpdateInHand_Parms UpdateInHand_Parms;
	UpdateInHand_Parms.bForceFastClear = bForceFastClear;

	this->ProcessEvent ( pFnUpdateInHand, &UpdateInHand_Parms, NULL );
};

// Function TgGame.TgPawn.EquipPendingDeviceTimer
// [0x00024102] 
// Parameters infos:
// unsigned long                  SkipPlayAnim                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::EquipPendingDeviceTimer ( unsigned long SkipPlayAnim )
{
	static UFunction* pFnEquipPendingDeviceTimer = NULL;

	if ( ! pFnEquipPendingDeviceTimer )
		pFnEquipPendingDeviceTimer = (UFunction*) UObject::GObjObjects()->Data[ 41586 ];

	ATgPawn_execEquipPendingDeviceTimer_Parms EquipPendingDeviceTimer_Parms;
	EquipPendingDeviceTimer_Parms.SkipPlayAnim = SkipPlayAnim;

	this->ProcessEvent ( pFnEquipPendingDeviceTimer, &EquipPendingDeviceTimer_Parms, NULL );
};

// Function TgGame.TgPawn.ShowAnimSets
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::ShowAnimSets ( )
{
	static UFunction* pFnShowAnimSets = NULL;

	if ( ! pFnShowAnimSets )
		pFnShowAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 41584 ];

	ATgPawn_execShowAnimSets_Parms ShowAnimSets_Parms;

	this->ProcessEvent ( pFnShowAnimSets, &ShowAnimSets_Parms, NULL );
};

// Function TgGame.TgPawn.PutInHandDeviceAwayFast
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UTgDeviceForm*           form                           ( CPF_Parm )

void ATgPawn::eventPutInHandDeviceAwayFast ( class UTgDeviceForm* form )
{
	static UFunction* pFnPutInHandDeviceAwayFast = NULL;

	if ( ! pFnPutInHandDeviceAwayFast )
		pFnPutInHandDeviceAwayFast = (UFunction*) UObject::GObjObjects()->Data[ 41582 ];

	ATgPawn_eventPutInHandDeviceAwayFast_Parms PutInHandDeviceAwayFast_Parms;
	PutInHandDeviceAwayFast_Parms.form = form;

	this->ProcessEvent ( pFnPutInHandDeviceAwayFast, &PutInHandDeviceAwayFast_Parms, NULL );
};

// Function TgGame.TgPawn.CanChangeInHandDeviceOrMode
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               instigatorDev                  ( CPF_Parm )

bool ATgPawn::CanChangeInHandDeviceOrMode ( class ATgDevice* instigatorDev )
{
	static UFunction* pFnCanChangeInHandDeviceOrMode = NULL;

	if ( ! pFnCanChangeInHandDeviceOrMode )
		pFnCanChangeInHandDeviceOrMode = (UFunction*) UObject::GObjObjects()->Data[ 41579 ];

	ATgPawn_execCanChangeInHandDeviceOrMode_Parms CanChangeInHandDeviceOrMode_Parms;
	CanChangeInHandDeviceOrMode_Parms.instigatorDev = instigatorDev;

	this->ProcessEvent ( pFnCanChangeInHandDeviceOrMode, &CanChangeInHandDeviceOrMode_Parms, NULL );

	return CanChangeInHandDeviceOrMode_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ResetUIDeviceTimers
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )

void ATgPawn::eventResetUIDeviceTimers ( int nDeviceInstanceId )
{
	static UFunction* pFnResetUIDeviceTimers = NULL;

	if ( ! pFnResetUIDeviceTimers )
		pFnResetUIDeviceTimers = (UFunction*) UObject::GObjObjects()->Data[ 41577 ];

	ATgPawn_eventResetUIDeviceTimers_Parms ResetUIDeviceTimers_Parms;
	ResetUIDeviceTimers_Parms.nDeviceInstanceId = nDeviceInstanceId;

	this->ProcessEvent ( pFnResetUIDeviceTimers, &ResetUIDeviceTimers_Parms, NULL );
};

// Function TgGame.TgPawn.KillAllOwnedPets
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventKillAllOwnedPets ( )
{
	static UFunction* pFnKillAllOwnedPets = NULL;

	if ( ! pFnKillAllOwnedPets )
		pFnKillAllOwnedPets = (UFunction*) UObject::GObjObjects()->Data[ 41576 ];

	ATgPawn_eventKillAllOwnedPets_Parms KillAllOwnedPets_Parms;

	this->ProcessEvent ( pFnKillAllOwnedPets, &KillAllOwnedPets_Parms, NULL );
};

// Function TgGame.TgPawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 41570 ];

	ATgPawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ATgPawn::eventDied ( class AController* Killer, class UClass* dmgType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 41555 ];

	ATgPawn_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.dmgType = dmgType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function TgGame.TgPawn.TakeFallingDamage
// [0x00020102] 
// Parameters infos:

void ATgPawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = (UFunction*) UObject::GObjObjects()->Data[ 41551 ];

	ATgPawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function TgGame.TgPawn.OnJoinTeam
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_JoinTeam*      Action                         ( CPF_Parm )

void ATgPawn::OnJoinTeam ( class UTgSeqAct_JoinTeam* Action )
{
	static UFunction* pFnOnJoinTeam = NULL;

	if ( ! pFnOnJoinTeam )
		pFnOnJoinTeam = (UFunction*) UObject::GObjObjects()->Data[ 41546 ];

	ATgPawn_execOnJoinTeam_Parms OnJoinTeam_Parms;
	OnJoinTeam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnJoinTeam, &OnJoinTeam_Parms, NULL );
};

// Function TgGame.TgPawn.Despawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventDespawn ( )
{
	static UFunction* pFnDespawn = NULL;

	if ( ! pFnDespawn )
		pFnDespawn = (UFunction*) UObject::GObjObjects()->Data[ 41545 ];

	ATgPawn_eventDespawn_Parms Despawn_Parms;

	this->ProcessEvent ( pFnDespawn, &Despawn_Parms, NULL );
};

// Function TgGame.TgPawn.Suicide
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventSuicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 41544 ];

	ATgPawn_eventSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function TgGame.TgPawn.SetDeathZoomInfo
// [0x00024002] 
// Parameters infos:
// class ATgPawn*                 theKiller                      ( CPF_Parm )
// class ATgRepInfo_Player*       theKillerPRI                   ( CPF_Parm )
// int                            nHealthPct                     ( CPF_Parm )
// int                            nDeviceId                      ( CPF_Parm )
// class ATgRepInfo_Player*       OwnerPRI                       ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SetDeathZoomInfo ( class ATgPawn* theKiller, class ATgRepInfo_Player* theKillerPRI, int nHealthPct, int nDeviceId, class ATgRepInfo_Player* OwnerPRI )
{
	static UFunction* pFnSetDeathZoomInfo = NULL;

	if ( ! pFnSetDeathZoomInfo )
		pFnSetDeathZoomInfo = (UFunction*) UObject::GObjObjects()->Data[ 41538 ];

	ATgPawn_execSetDeathZoomInfo_Parms SetDeathZoomInfo_Parms;
	SetDeathZoomInfo_Parms.theKiller = theKiller;
	SetDeathZoomInfo_Parms.theKillerPRI = theKillerPRI;
	SetDeathZoomInfo_Parms.nHealthPct = nHealthPct;
	SetDeathZoomInfo_Parms.nDeviceId = nDeviceId;
	SetDeathZoomInfo_Parms.OwnerPRI = OwnerPRI;

	this->ProcessEvent ( pFnSetDeathZoomInfo, &SetDeathZoomInfo_Parms, NULL );
};

// Function TgGame.TgPawn.PreRender
// [0x00020100] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void ATgPawn::PreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = (UFunction*) UObject::GObjObjects()->Data[ 41536 ];

	ATgPawn_execPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function TgGame.TgPawn.ResetStealthEffect
// [0x00020102] 
// Parameters infos:

void ATgPawn::ResetStealthEffect ( )
{
	static UFunction* pFnResetStealthEffect = NULL;

	if ( ! pFnResetStealthEffect )
		pFnResetStealthEffect = (UFunction*) UObject::GObjObjects()->Data[ 41534 ];

	ATgPawn_execResetStealthEffect_Parms ResetStealthEffect_Parms;

	this->ProcessEvent ( pFnResetStealthEffect, &ResetStealthEffect_Parms, NULL );
};

// Function TgGame.TgPawn.IsCustomCharacter
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventIsCustomCharacter ( )
{
	static UFunction* pFnIsCustomCharacter = NULL;

	if ( ! pFnIsCustomCharacter )
		pFnIsCustomCharacter = (UFunction*) UObject::GObjObjects()->Data[ 41532 ];

	ATgPawn_eventIsCustomCharacter_Parms IsCustomCharacter_Parms;

	this->ProcessEvent ( pFnIsCustomCharacter, &IsCustomCharacter_Parms, NULL );

	return IsCustomCharacter_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetBodyMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::eventGetBodyMeshId ( )
{
	static UFunction* pFnGetBodyMeshId = NULL;

	if ( ! pFnGetBodyMeshId )
		pFnGetBodyMeshId = (UFunction*) UObject::GObjObjects()->Data[ 41530 ];

	ATgPawn_eventGetBodyMeshId_Parms GetBodyMeshId_Parms;

	this->ProcessEvent ( pFnGetBodyMeshId, &GetBodyMeshId_Parms, NULL );

	return GetBodyMeshId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.MissionTimeUpdate
// [0x002200C2] 
// Parameters infos:

void ATgPawn::MissionTimeUpdate ( )
{
	static UFunction* pFnMissionTimeUpdate = NULL;

	if ( ! pFnMissionTimeUpdate )
		pFnMissionTimeUpdate = (UFunction*) UObject::GObjObjects()->Data[ 41529 ];

	ATgPawn_execMissionTimeUpdate_Parms MissionTimeUpdate_Parms;

	this->ProcessEvent ( pFnMissionTimeUpdate, &MissionTimeUpdate_Parms, NULL );
};

// Function TgGame.TgPawn.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 41527 ];

	ATgPawn_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void ATgPawn::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 41525 ];

	ATgPawn_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function TgGame.TgPawn.InitPhysAnim
// [0x00020102] 
// Parameters infos:

void ATgPawn::InitPhysAnim ( )
{
	static UFunction* pFnInitPhysAnim = NULL;

	if ( ! pFnInitPhysAnim )
		pFnInitPhysAnim = (UFunction*) UObject::GObjObjects()->Data[ 41524 ];

	ATgPawn_execInitPhysAnim_Parms InitPhysAnim_Parms;

	this->ProcessEvent ( pFnInitPhysAnim, &InitPhysAnim_Parms, NULL );
};

// Function TgGame.TgPawn.SetupPIEMesh
// [0x00020002] 
// Parameters infos:
// unsigned char                  PIEPawnType                    ( CPF_Parm )
// int                            MeshId                         ( CPF_Parm )

void ATgPawn::SetupPIEMesh ( unsigned char PIEPawnType, int MeshId )
{
	static UFunction* pFnSetupPIEMesh = NULL;

	if ( ! pFnSetupPIEMesh )
		pFnSetupPIEMesh = (UFunction*) UObject::GObjObjects()->Data[ 41521 ];

	ATgPawn_execSetupPIEMesh_Parms SetupPIEMesh_Parms;
	SetupPIEMesh_Parms.PIEPawnType = PIEPawnType;
	SetupPIEMesh_Parms.MeshId = MeshId;

	this->ProcessEvent ( pFnSetupPIEMesh, &SetupPIEMesh_Parms, NULL );
};

// Function TgGame.TgPawn.PostBeginPlay
// [0x00820102] 
// Parameters infos:

void ATgPawn::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 41519 ];

	ATgPawn_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn.SetLocalPlayer
// [0x00020102] 
// Parameters infos:

void ATgPawn::SetLocalPlayer ( )
{
	static UFunction* pFnSetLocalPlayer = NULL;

	if ( ! pFnSetLocalPlayer )
		pFnSetLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 41517 ];

	ATgPawn_execSetLocalPlayer_Parms SetLocalPlayer_Parms;

	this->ProcessEvent ( pFnSetLocalPlayer, &SetLocalPlayer_Parms, NULL );
};

// Function TgGame.TgPawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 41516 ];

	ATgPawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn.AllManifestsLoaded
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ATgPawn::AllManifestsLoaded ( )
{
	static UFunction* pFnAllManifestsLoaded = NULL;

	if ( ! pFnAllManifestsLoaded )
		pFnAllManifestsLoaded = (UFunction*) UObject::GObjObjects()->Data[ 41515 ];

	ATgPawn_execAllManifestsLoaded_Parms AllManifestsLoaded_Parms;

	pFnAllManifestsLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllManifestsLoaded, &AllManifestsLoaded_Parms, NULL );

	pFnAllManifestsLoaded->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 41512 ];

	ATgPawn_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn.ShowCompDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn::ShowCompDebug ( )
{
	static UFunction* pFnShowCompDebug = NULL;

	if ( ! pFnShowCompDebug )
		pFnShowCompDebug = (UFunction*) UObject::GObjObjects()->Data[ 41511 ];

	ATgPawn_execShowCompDebug_Parms ShowCompDebug_Parms;

	this->ProcessEvent ( pFnShowCompDebug, &ShowCompDebug_Parms, NULL );
};

// Function TgGame.TgPawn.OnAddAnimSets
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_AddAnimSets*   Action                         ( CPF_Parm )

void ATgPawn::OnAddAnimSets ( class UTgSeqAct_AddAnimSets* Action )
{
	static UFunction* pFnOnAddAnimSets = NULL;

	if ( ! pFnOnAddAnimSets )
		pFnOnAddAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 41505 ];

	ATgPawn_execOnAddAnimSets_Parms OnAddAnimSets_Parms;
	OnAddAnimSets_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAddAnimSets, &OnAddAnimSets_Parms, NULL );
};

// Function TgGame.TgPawn.OnKillpawns
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_Killpawns*     Action                         ( CPF_Parm )

void ATgPawn::OnKillpawns ( class UTgSeqAct_Killpawns* Action )
{
	static UFunction* pFnOnKillpawns = NULL;

	if ( ! pFnOnKillpawns )
		pFnOnKillpawns = (UFunction*) UObject::GObjObjects()->Data[ 41502 ];

	ATgPawn_execOnKillpawns_Parms OnKillpawns_Parms;
	OnKillpawns_Parms.Action = Action;

	this->ProcessEvent ( pFnOnKillpawns, &OnKillpawns_Parms, NULL );
};

// Function TgGame.TgPawn.OnQuestRequirementGetStatus
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_QuestRequirementGetStatus* Action                         ( CPF_Parm )

void ATgPawn::OnQuestRequirementGetStatus ( class UTgSeqAct_QuestRequirementGetStatus* Action )
{
	static UFunction* pFnOnQuestRequirementGetStatus = NULL;

	if ( ! pFnOnQuestRequirementGetStatus )
		pFnOnQuestRequirementGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 41500 ];

	ATgPawn_execOnQuestRequirementGetStatus_Parms OnQuestRequirementGetStatus_Parms;
	OnQuestRequirementGetStatus_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestRequirementGetStatus, &OnQuestRequirementGetStatus_Parms, NULL );
};

// Function TgGame.TgPawn.OnQuestGetStatus
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_QuestGetStatus* Action                         ( CPF_Parm )

void ATgPawn::OnQuestGetStatus ( class UTgSeqAct_QuestGetStatus* Action )
{
	static UFunction* pFnOnQuestGetStatus = NULL;

	if ( ! pFnOnQuestGetStatus )
		pFnOnQuestGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 41498 ];

	ATgPawn_execOnQuestGetStatus_Parms OnQuestGetStatus_Parms;
	OnQuestGetStatus_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestGetStatus, &OnQuestGetStatus_Parms, NULL );
};

// Function TgGame.TgPawn.OnQuestIncrementReqCount
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_QuestIncrementReqCount* Action                         ( CPF_Parm )

void ATgPawn::OnQuestIncrementReqCount ( class UTgSeqAct_QuestIncrementReqCount* Action )
{
	static UFunction* pFnOnQuestIncrementReqCount = NULL;

	if ( ! pFnOnQuestIncrementReqCount )
		pFnOnQuestIncrementReqCount = (UFunction*) UObject::GObjObjects()->Data[ 41496 ];

	ATgPawn_execOnQuestIncrementReqCount_Parms OnQuestIncrementReqCount_Parms;
	OnQuestIncrementReqCount_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestIncrementReqCount, &OnQuestIncrementReqCount_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetHomeInstance
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_SetHomeInstance* Action                         ( CPF_Parm )

void ATgPawn::OnSetHomeInstance ( class UTgSeqAct_SetHomeInstance* Action )
{
	static UFunction* pFnOnSetHomeInstance = NULL;

	if ( ! pFnOnSetHomeInstance )
		pFnOnSetHomeInstance = (UFunction*) UObject::GObjObjects()->Data[ 41494 ];

	ATgPawn_execOnSetHomeInstance_Parms OnSetHomeInstance_Parms;
	OnSetHomeInstance_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetHomeInstance, &OnSetHomeInstance_Parms, NULL );
};

// Function TgGame.TgPawn.OnLaunchHomeInstance
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_LaunchHomeInstance* Action                         ( CPF_Parm )

void ATgPawn::OnLaunchHomeInstance ( class UTgSeqAct_LaunchHomeInstance* Action )
{
	static UFunction* pFnOnLaunchHomeInstance = NULL;

	if ( ! pFnOnLaunchHomeInstance )
		pFnOnLaunchHomeInstance = (UFunction*) UObject::GObjObjects()->Data[ 41491 ];

	ATgPawn_execOnLaunchHomeInstance_Parms OnLaunchHomeInstance_Parms;
	OnLaunchHomeInstance_Parms.Action = Action;

	this->ProcessEvent ( pFnOnLaunchHomeInstance, &OnLaunchHomeInstance_Parms, NULL );
};

// Function TgGame.TgPawn.Falling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 41489 ];

	ATgPawn_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function TgGame.TgPawn.OnPhysChange
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewPhysState                   ( CPF_Parm )

void ATgPawn::eventOnPhysChange ( unsigned char NewPhysState )
{
	static UFunction* pFnOnPhysChange = NULL;

	if ( ! pFnOnPhysChange )
		pFnOnPhysChange = (UFunction*) UObject::GObjObjects()->Data[ 41487 ];

	ATgPawn_eventOnPhysChange_Parms OnPhysChange_Parms;
	OnPhysChange_Parms.NewPhysState = NewPhysState;

	this->ProcessEvent ( pFnOnPhysChange, &OnPhysChange_Parms, NULL );
};

// Function TgGame.TgPawn.CollisionChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 41486 ];

	ATgPawn_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function TgGame.TgPawn.OnMarkSpawnReturn
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_MarkSpawnReturn* Action                         ( CPF_Parm )

void ATgPawn::OnMarkSpawnReturn ( class UTgSeqAct_MarkSpawnReturn* Action )
{
	static UFunction* pFnOnMarkSpawnReturn = NULL;

	if ( ! pFnOnMarkSpawnReturn )
		pFnOnMarkSpawnReturn = (UFunction*) UObject::GObjObjects()->Data[ 41481 ];

	ATgPawn_execOnMarkSpawnReturn_Parms OnMarkSpawnReturn_Parms;
	OnMarkSpawnReturn_Parms.Action = Action;

	this->ProcessEvent ( pFnOnMarkSpawnReturn, &OnMarkSpawnReturn_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetTaskforce
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetTaskforce*  Action                         ( CPF_Parm )

void ATgPawn::OnSetTaskforce ( class UTgSeqAct_SetTaskforce* Action )
{
	static UFunction* pFnOnSetTaskforce = NULL;

	if ( ! pFnOnSetTaskforce )
		pFnOnSetTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 41479 ];

	ATgPawn_execOnSetTaskforce_Parms OnSetTaskforce_Parms;
	OnSetTaskforce_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetTaskforce, &OnSetTaskforce_Parms, NULL );
};

// Function TgGame.TgPawn.OnGetTaskForceNumber
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_GetTaskForceNumber* Action                         ( CPF_Parm )

void ATgPawn::OnGetTaskForceNumber ( class UTgSeqAct_GetTaskForceNumber* Action )
{
	static UFunction* pFnOnGetTaskForceNumber = NULL;

	if ( ! pFnOnGetTaskForceNumber )
		pFnOnGetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 41477 ];

	ATgPawn_execOnGetTaskForceNumber_Parms OnGetTaskForceNumber_Parms;
	OnGetTaskForceNumber_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTaskForceNumber, &OnGetTaskForceNumber_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetUITextBox
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetUITextBox*  Action                         ( CPF_Parm )

void ATgPawn::OnSetUITextBox ( class UTgSeqAct_SetUITextBox* Action )
{
	static UFunction* pFnOnSetUITextBox = NULL;

	if ( ! pFnOnSetUITextBox )
		pFnOnSetUITextBox = (UFunction*) UObject::GObjObjects()->Data[ 41467 ];

	ATgPawn_execOnSetUITextBox_Parms OnSetUITextBox_Parms;
	OnSetUITextBox_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetUITextBox, &OnSetUITextBox_Parms, NULL );
};

// Function TgGame.TgPawn.OnUpdateUITextBoxState
// [0x00020102] 
// Parameters infos:
// int                            which                          ( CPF_Parm )

void ATgPawn::OnUpdateUITextBoxState ( int which )
{
	static UFunction* pFnOnUpdateUITextBoxState = NULL;

	if ( ! pFnOnUpdateUITextBoxState )
		pFnOnUpdateUITextBoxState = (UFunction*) UObject::GObjObjects()->Data[ 41464 ];

	ATgPawn_execOnUpdateUITextBoxState_Parms OnUpdateUITextBoxState_Parms;
	OnUpdateUITextBoxState_Parms.which = which;

	this->ProcessEvent ( pFnOnUpdateUITextBoxState, &OnUpdateUITextBoxState_Parms, NULL );
};

// Function TgGame.TgPawn.OnUpdateUIClockState
// [0x00020102] 
// Parameters infos:

void ATgPawn::OnUpdateUIClockState ( )
{
	static UFunction* pFnOnUpdateUIClockState = NULL;

	if ( ! pFnOnUpdateUIClockState )
		pFnOnUpdateUIClockState = (UFunction*) UObject::GObjObjects()->Data[ 41457 ];

	ATgPawn_execOnUpdateUIClockState_Parms OnUpdateUIClockState_Parms;

	this->ProcessEvent ( pFnOnUpdateUIClockState, &OnUpdateUIClockState_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetUIClock
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetUIClock*    Action                         ( CPF_Parm )

void ATgPawn::OnSetUIClock ( class UTgSeqAct_SetUIClock* Action )
{
	static UFunction* pFnOnSetUIClock = NULL;

	if ( ! pFnOnSetUIClock )
		pFnOnSetUIClock = (UFunction*) UObject::GObjObjects()->Data[ 41452 ];

	ATgPawn_execOnSetUIClock_Parms OnSetUIClock_Parms;
	OnSetUIClock_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetUIClock, &OnSetUIClock_Parms, NULL );
};

// Function TgGame.TgPawn.OnGetCharClass
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_GetCharClass*  Action                         ( CPF_Parm )

void ATgPawn::OnGetCharClass ( class UTgSeqAct_GetCharClass* Action )
{
	static UFunction* pFnOnGetCharClass = NULL;

	if ( ! pFnOnGetCharClass )
		pFnOnGetCharClass = (UFunction*) UObject::GObjObjects()->Data[ 41443 ];

	ATgPawn_execOnGetCharClass_Parms OnGetCharClass_Parms;
	OnGetCharClass_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetCharClass, &OnGetCharClass_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetPlayerLevel
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetPlayerLevel* Action                         ( CPF_Parm )

void ATgPawn::OnSetPlayerLevel ( class UTgSeqAct_SetPlayerLevel* Action )
{
	static UFunction* pFnOnSetPlayerLevel = NULL;

	if ( ! pFnOnSetPlayerLevel )
		pFnOnSetPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 41438 ];

	ATgPawn_execOnSetPlayerLevel_Parms OnSetPlayerLevel_Parms;
	OnSetPlayerLevel_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPlayerLevel, &OnSetPlayerLevel_Parms, NULL );
};

// Function TgGame.TgPawn.OnSetPlayerMesh
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetPlayerMesh* Action                         ( CPF_Parm )

void ATgPawn::OnSetPlayerMesh ( class UTgSeqAct_SetPlayerMesh* Action )
{
	static UFunction* pFnOnSetPlayerMesh = NULL;

	if ( ! pFnOnSetPlayerMesh )
		pFnOnSetPlayerMesh = (UFunction*) UObject::GObjObjects()->Data[ 41435 ];

	ATgPawn_execOnSetPlayerMesh_Parms OnSetPlayerMesh_Parms;
	OnSetPlayerMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPlayerMesh, &OnSetPlayerMesh_Parms, NULL );
};

// Function TgGame.TgPawn.OnRequestMission
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_RequestMission* Action                         ( CPF_Parm )

void ATgPawn::OnRequestMission ( class UTgSeqAct_RequestMission* Action )
{
	static UFunction* pFnOnRequestMission = NULL;

	if ( ! pFnOnRequestMission )
		pFnOnRequestMission = (UFunction*) UObject::GObjObjects()->Data[ 41433 ];

	ATgPawn_execOnRequestMission_Parms OnRequestMission_Parms;
	OnRequestMission_Parms.Action = Action;

	this->ProcessEvent ( pFnOnRequestMission, &OnRequestMission_Parms, NULL );
};

// Function TgGame.TgPawn.OnEquipCharDevices
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_EquipCharDevices* Action                         ( CPF_Parm )

void ATgPawn::OnEquipCharDevices ( class UTgSeqAct_EquipCharDevices* Action )
{
	static UFunction* pFnOnEquipCharDevices = NULL;

	if ( ! pFnOnEquipCharDevices )
		pFnOnEquipCharDevices = (UFunction*) UObject::GObjObjects()->Data[ 41431 ];

	ATgPawn_execOnEquipCharDevices_Parms OnEquipCharDevices_Parms;
	OnEquipCharDevices_Parms.Action = Action;

	this->ProcessEvent ( pFnOnEquipCharDevices, &OnEquipCharDevices_Parms, NULL );
};

// Function TgGame.TgPawn.OnEquipCharDevice
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_EquipCharDevice* Action                         ( CPF_Parm )

void ATgPawn::OnEquipCharDevice ( class UTgSeqAct_EquipCharDevice* Action )
{
	static UFunction* pFnOnEquipCharDevice = NULL;

	if ( ! pFnOnEquipCharDevice )
		pFnOnEquipCharDevice = (UFunction*) UObject::GObjObjects()->Data[ 41429 ];

	ATgPawn_execOnEquipCharDevice_Parms OnEquipCharDevice_Parms;
	OnEquipCharDevice_Parms.Action = Action;

	this->ProcessEvent ( pFnOnEquipCharDevice, &OnEquipCharDevice_Parms, NULL );
};

// Function TgGame.TgPawn.OnGetTeamIndex
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_GetTeamIndex*  Action                         ( CPF_Parm )

void ATgPawn::OnGetTeamIndex ( class UTgSeqAct_GetTeamIndex* Action )
{
	static UFunction* pFnOnGetTeamIndex = NULL;

	if ( ! pFnOnGetTeamIndex )
		pFnOnGetTeamIndex = (UFunction*) UObject::GObjObjects()->Data[ 41425 ];

	ATgPawn_execOnGetTeamIndex_Parms OnGetTeamIndex_Parms;
	OnGetTeamIndex_Parms.Action = Action;

	this->ProcessEvent ( pFnOnGetTeamIndex, &OnGetTeamIndex_Parms, NULL );
};

// Function TgGame.TgPawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ATgPawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 41421 ];

	ATgPawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function TgGame.TgPawn.ServerSetIsCrafting
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsCrafting                    ( CPF_Parm )

void ATgPawn::eventServerSetIsCrafting ( unsigned long bIsCrafting )
{
	static UFunction* pFnServerSetIsCrafting = NULL;

	if ( ! pFnServerSetIsCrafting )
		pFnServerSetIsCrafting = (UFunction*) UObject::GObjObjects()->Data[ 41419 ];

	ATgPawn_eventServerSetIsCrafting_Parms ServerSetIsCrafting_Parms;
	ServerSetIsCrafting_Parms.bIsCrafting = bIsCrafting;

	this->ProcessEvent ( pFnServerSetIsCrafting, &ServerSetIsCrafting_Parms, NULL );
};

// Function TgGame.TgPawn.ServerTestPushBack
// [0x002200C2] 
// Parameters infos:
// float                          Distance                       ( CPF_Parm )

void ATgPawn::ServerTestPushBack ( float Distance )
{
	static UFunction* pFnServerTestPushBack = NULL;

	if ( ! pFnServerTestPushBack )
		pFnServerTestPushBack = (UFunction*) UObject::GObjObjects()->Data[ 41417 ];

	ATgPawn_execServerTestPushBack_Parms ServerTestPushBack_Parms;
	ServerTestPushBack_Parms.Distance = Distance;

	this->ProcessEvent ( pFnServerTestPushBack, &ServerTestPushBack_Parms, NULL );
};

// Function TgGame.TgPawn.TestPushBack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Distance                       ( CPF_Parm )

void ATgPawn::TestPushBack ( float Distance )
{
	static UFunction* pFnTestPushBack = NULL;

	if ( ! pFnTestPushBack )
		pFnTestPushBack = (UFunction*) UObject::GObjObjects()->Data[ 41415 ];

	ATgPawn_execTestPushBack_Parms TestPushBack_Parms;
	TestPushBack_Parms.Distance = Distance;

	this->ProcessEvent ( pFnTestPushBack, &TestPushBack_Parms, NULL );
};

// Function TgGame.TgPawn.UpdateControllerVisBasedProperties
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::UpdateControllerVisBasedProperties ( )
{
	static UFunction* pFnUpdateControllerVisBasedProperties = NULL;

	if ( ! pFnUpdateControllerVisBasedProperties )
		pFnUpdateControllerVisBasedProperties = (UFunction*) UObject::GObjObjects()->Data[ 41414 ];

	ATgPawn_execUpdateControllerVisBasedProperties_Parms UpdateControllerVisBasedProperties_Parms;

	pFnUpdateControllerVisBasedProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateControllerVisBasedProperties, &UpdateControllerVisBasedProperties_Parms, NULL );

	pFnUpdateControllerVisBasedProperties->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdatePRIAssetRefs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::UpdatePRIAssetRefs ( )
{
	static UFunction* pFnUpdatePRIAssetRefs = NULL;

	if ( ! pFnUpdatePRIAssetRefs )
		pFnUpdatePRIAssetRefs = (UFunction*) UObject::GObjObjects()->Data[ 41413 ];

	ATgPawn_execUpdatePRIAssetRefs_Parms UpdatePRIAssetRefs_Parms;

	pFnUpdatePRIAssetRefs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePRIAssetRefs, &UpdatePRIAssetRefs_Parms, NULL );

	pFnUpdatePRIAssetRefs->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ServerOnSetPlayerLevel
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nLevelId                       ( CPF_Parm )

void ATgPawn::ServerOnSetPlayerLevel ( int nLevelId )
{
	static UFunction* pFnServerOnSetPlayerLevel = NULL;

	if ( ! pFnServerOnSetPlayerLevel )
		pFnServerOnSetPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 41411 ];

	ATgPawn_execServerOnSetPlayerLevel_Parms ServerOnSetPlayerLevel_Parms;
	ServerOnSetPlayerLevel_Parms.nLevelId = nLevelId;

	pFnServerOnSetPlayerLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnSetPlayerLevel, &ServerOnSetPlayerLevel_Parms, NULL );

	pFnServerOnSetPlayerLevel->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ServerOnSetPlayerMesh
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            MeshAsmId                      ( CPF_Parm )

void ATgPawn::ServerOnSetPlayerMesh ( int MeshAsmId )
{
	static UFunction* pFnServerOnSetPlayerMesh = NULL;

	if ( ! pFnServerOnSetPlayerMesh )
		pFnServerOnSetPlayerMesh = (UFunction*) UObject::GObjObjects()->Data[ 41409 ];

	ATgPawn_execServerOnSetPlayerMesh_Parms ServerOnSetPlayerMesh_Parms;
	ServerOnSetPlayerMesh_Parms.MeshAsmId = MeshAsmId;

	pFnServerOnSetPlayerMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnSetPlayerMesh, &ServerOnSetPlayerMesh_Parms, NULL );

	pFnServerOnSetPlayerMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ServerOnRequestMission
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_RequestMission* Action                         ( CPF_Parm )

void ATgPawn::ServerOnRequestMission ( class UTgSeqAct_RequestMission* Action )
{
	static UFunction* pFnServerOnRequestMission = NULL;

	if ( ! pFnServerOnRequestMission )
		pFnServerOnRequestMission = (UFunction*) UObject::GObjObjects()->Data[ 41407 ];

	ATgPawn_execServerOnRequestMission_Parms ServerOnRequestMission_Parms;
	ServerOnRequestMission_Parms.Action = Action;

	pFnServerOnRequestMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnRequestMission, &ServerOnRequestMission_Parms, NULL );

	pFnServerOnRequestMission->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ServerOnEquipCharDevices
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_EquipCharDevices* Action                         ( CPF_Parm )

void ATgPawn::ServerOnEquipCharDevices ( class UTgSeqAct_EquipCharDevices* Action )
{
	static UFunction* pFnServerOnEquipCharDevices = NULL;

	if ( ! pFnServerOnEquipCharDevices )
		pFnServerOnEquipCharDevices = (UFunction*) UObject::GObjObjects()->Data[ 41405 ];

	ATgPawn_execServerOnEquipCharDevices_Parms ServerOnEquipCharDevices_Parms;
	ServerOnEquipCharDevices_Parms.Action = Action;

	pFnServerOnEquipCharDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnEquipCharDevices, &ServerOnEquipCharDevices_Parms, NULL );

	pFnServerOnEquipCharDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ServerOnEquipCharDevice
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_EquipCharDevice* Action                         ( CPF_Parm )

void ATgPawn::ServerOnEquipCharDevice ( class UTgSeqAct_EquipCharDevice* Action )
{
	static UFunction* pFnServerOnEquipCharDevice = NULL;

	if ( ! pFnServerOnEquipCharDevice )
		pFnServerOnEquipCharDevice = (UFunction*) UObject::GObjObjects()->Data[ 41403 ];

	ATgPawn_execServerOnEquipCharDevice_Parms ServerOnEquipCharDevice_Parms;
	ServerOnEquipCharDevice_Parms.Action = Action;

	pFnServerOnEquipCharDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnEquipCharDevice, &ServerOnEquipCharDevice_Parms, NULL );

	pFnServerOnEquipCharDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.NativeGetCollisionRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::NativeGetCollisionRadius ( )
{
	static UFunction* pFnNativeGetCollisionRadius = NULL;

	if ( ! pFnNativeGetCollisionRadius )
		pFnNativeGetCollisionRadius = (UFunction*) UObject::GObjObjects()->Data[ 41401 ];

	ATgPawn_execNativeGetCollisionRadius_Parms NativeGetCollisionRadius_Parms;

	pFnNativeGetCollisionRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeGetCollisionRadius, &NativeGetCollisionRadius_Parms, NULL );

	pFnNativeGetCollisionRadius->FunctionFlags |= 0x400;

	return NativeGetCollisionRadius_Parms.ReturnValue;
};

// Function TgGame.TgPawn.NativeGetCollisionHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::NativeGetCollisionHeight ( )
{
	static UFunction* pFnNativeGetCollisionHeight = NULL;

	if ( ! pFnNativeGetCollisionHeight )
		pFnNativeGetCollisionHeight = (UFunction*) UObject::GObjObjects()->Data[ 41399 ];

	ATgPawn_execNativeGetCollisionHeight_Parms NativeGetCollisionHeight_Parms;

	pFnNativeGetCollisionHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeGetCollisionHeight, &NativeGetCollisionHeight_Parms, NULL );

	pFnNativeGetCollisionHeight->FunctionFlags |= 0x400;

	return NativeGetCollisionHeight_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnPostureChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::OnPostureChange ( )
{
	static UFunction* pFnOnPostureChange = NULL;

	if ( ! pFnOnPostureChange )
		pFnOnPostureChange = (UFunction*) UObject::GObjObjects()->Data[ 41398 ];

	ATgPawn_execOnPostureChange_Parms OnPostureChange_Parms;

	pFnOnPostureChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPostureChange, &OnPostureChange_Parms, NULL );

	pFnOnPostureChange->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OnProjectileExploded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::OnProjectileExploded ( )
{
	static UFunction* pFnOnProjectileExploded = NULL;

	if ( ! pFnOnProjectileExploded )
		pFnOnProjectileExploded = (UFunction*) UObject::GObjObjects()->Data[ 41397 ];

	ATgPawn_execOnProjectileExploded_Parms OnProjectileExploded_Parms;

	pFnOnProjectileExploded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnProjectileExploded, &OnProjectileExploded_Parms, NULL );

	pFnOnProjectileExploded->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OnAnimNodeChildChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimNode*               Node                           ( CPF_Parm )
// int                            OldChild                       ( CPF_Parm )
// int                            NewChild                       ( CPF_Parm )

void ATgPawn::OnAnimNodeChildChanged ( class UAnimNode* Node, int OldChild, int NewChild )
{
	static UFunction* pFnOnAnimNodeChildChanged = NULL;

	if ( ! pFnOnAnimNodeChildChanged )
		pFnOnAnimNodeChildChanged = (UFunction*) UObject::GObjObjects()->Data[ 41393 ];

	ATgPawn_execOnAnimNodeChildChanged_Parms OnAnimNodeChildChanged_Parms;
	OnAnimNodeChildChanged_Parms.Node = Node;
	OnAnimNodeChildChanged_Parms.OldChild = OldChild;
	OnAnimNodeChildChanged_Parms.NewChild = NewChild;

	pFnOnAnimNodeChildChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimNodeChildChanged, &OnAnimNodeChildChanged_Parms, NULL );

	pFnOnAnimNodeChildChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RemoveSpawnFadeOutFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::RemoveSpawnFadeOutFx ( )
{
	static UFunction* pFnRemoveSpawnFadeOutFx = NULL;

	if ( ! pFnRemoveSpawnFadeOutFx )
		pFnRemoveSpawnFadeOutFx = (UFunction*) UObject::GObjObjects()->Data[ 41392 ];

	ATgPawn_execRemoveSpawnFadeOutFx_Parms RemoveSpawnFadeOutFx_Parms;

	pFnRemoveSpawnFadeOutFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSpawnFadeOutFx, &RemoveSpawnFadeOutFx_Parms, NULL );

	pFnRemoveSpawnFadeOutFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetDeploySensorDetectedStealthLightup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::SetDeploySensorDetectedStealthLightup ( )
{
	static UFunction* pFnSetDeploySensorDetectedStealthLightup = NULL;

	if ( ! pFnSetDeploySensorDetectedStealthLightup )
		pFnSetDeploySensorDetectedStealthLightup = (UFunction*) UObject::GObjObjects()->Data[ 41391 ];

	ATgPawn_execSetDeploySensorDetectedStealthLightup_Parms SetDeploySensorDetectedStealthLightup_Parms;

	pFnSetDeploySensorDetectedStealthLightup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDeploySensorDetectedStealthLightup, &SetDeploySensorDetectedStealthLightup_Parms, NULL );

	pFnSetDeploySensorDetectedStealthLightup->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.LocalProcessScanner
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::LocalProcessScanner ( )
{
	static UFunction* pFnLocalProcessScanner = NULL;

	if ( ! pFnLocalProcessScanner )
		pFnLocalProcessScanner = (UFunction*) UObject::GObjObjects()->Data[ 41390 ];

	ATgPawn_execLocalProcessScanner_Parms LocalProcessScanner_Parms;

	pFnLocalProcessScanner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalProcessScanner, &LocalProcessScanner_Parms, NULL );

	pFnLocalProcessScanner->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OnLevelUp
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::OnLevelUp ( )
{
	static UFunction* pFnOnLevelUp = NULL;

	if ( ! pFnOnLevelUp )
		pFnOnLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 41389 ];

	ATgPawn_execOnLevelUp_Parms OnLevelUp_Parms;

	pFnOnLevelUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnLevelUp, &OnLevelUp_Parms, NULL );

	pFnOnLevelUp->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayBotSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSoundCueId                    ( CPF_Parm )

void ATgPawn::PlayBotSound ( int nSoundCueId )
{
	static UFunction* pFnPlayBotSound = NULL;

	if ( ! pFnPlayBotSound )
		pFnPlayBotSound = (UFunction*) UObject::GObjObjects()->Data[ 41387 ];

	ATgPawn_execPlayBotSound_Parms PlayBotSound_Parms;
	PlayBotSound_Parms.nSoundCueId = nSoundCueId;

	pFnPlayBotSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayBotSound, &PlayBotSound_Parms, NULL );

	pFnPlayBotSound->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsPlayerTagged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPlayerController*     PC                             ( CPF_Parm )

bool ATgPawn::IsPlayerTagged ( class ATgPlayerController* PC )
{
	static UFunction* pFnIsPlayerTagged = NULL;

	if ( ! pFnIsPlayerTagged )
		pFnIsPlayerTagged = (UFunction*) UObject::GObjObjects()->Data[ 41384 ];

	ATgPawn_execIsPlayerTagged_Parms IsPlayerTagged_Parms;
	IsPlayerTagged_Parms.PC = PC;

	pFnIsPlayerTagged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerTagged, &IsPlayerTagged_Parms, NULL );

	pFnIsPlayerTagged->FunctionFlags |= 0x400;

	return IsPlayerTagged_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldSeeActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// int                            nScannerSettingIndex           ( CPF_Parm )

bool ATgPawn::ShouldSeeActor ( class AActor* A, int nScannerSettingIndex )
{
	static UFunction* pFnShouldSeeActor = NULL;

	if ( ! pFnShouldSeeActor )
		pFnShouldSeeActor = (UFunction*) UObject::GObjObjects()->Data[ 41380 ];

	ATgPawn_execShouldSeeActor_Parms ShouldSeeActor_Parms;
	ShouldSeeActor_Parms.A = A;
	ShouldSeeActor_Parms.nScannerSettingIndex = nScannerSettingIndex;

	pFnShouldSeeActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldSeeActor, &ShouldSeeActor_Parms, NULL );

	pFnShouldSeeActor->FunctionFlags |= 0x400;

	return ShouldSeeActor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ClearEquippedDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ClearEquippedDevice ( )
{
	static UFunction* pFnClearEquippedDevice = NULL;

	if ( ! pFnClearEquippedDevice )
		pFnClearEquippedDevice = (UFunction*) UObject::GObjObjects()->Data[ 41379 ];

	ATgPawn_execClearEquippedDevice_Parms ClearEquippedDevice_Parms;

	pFnClearEquippedDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearEquippedDevice, &ClearEquippedDevice_Parms, NULL );

	pFnClearEquippedDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.NativeReplicatedEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

bool ATgPawn::NativeReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnNativeReplicatedEvent = NULL;

	if ( ! pFnNativeReplicatedEvent )
		pFnNativeReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 41376 ];

	ATgPawn_execNativeReplicatedEvent_Parms NativeReplicatedEvent_Parms;
	memcpy ( &NativeReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	pFnNativeReplicatedEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeReplicatedEvent, &NativeReplicatedEvent_Parms, NULL );

	pFnNativeReplicatedEvent->FunctionFlags |= 0x400;

	return NativeReplicatedEvent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DoRappelEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::DoRappelEffects ( )
{
	static UFunction* pFnDoRappelEffects = NULL;

	if ( ! pFnDoRappelEffects )
		pFnDoRappelEffects = (UFunction*) UObject::GObjObjects()->Data[ 41375 ];

	ATgPawn_execDoRappelEffects_Parms DoRappelEffects_Parms;

	pFnDoRappelEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoRappelEffects, &DoRappelEffects_Parms, NULL );

	pFnDoRappelEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.InitSpawnPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SpawnTableID                   ( CPF_Parm )

void ATgPawn::InitSpawnPets ( int SpawnTableID )
{
	static UFunction* pFnInitSpawnPets = NULL;

	if ( ! pFnInitSpawnPets )
		pFnInitSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 41373 ];

	ATgPawn_execInitSpawnPets_Parms InitSpawnPets_Parms;
	InitSpawnPets_Parms.SpawnTableID = SpawnTableID;

	pFnInitSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSpawnPets, &InitSpawnPets_Parms, NULL );

	pFnInitSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OnPetSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pet                            ( CPF_Parm )

void ATgPawn::OnPetSpawned ( class ATgPawn* Pet )
{
	static UFunction* pFnOnPetSpawned = NULL;

	if ( ! pFnOnPetSpawned )
		pFnOnPetSpawned = (UFunction*) UObject::GObjObjects()->Data[ 41371 ];

	ATgPawn_execOnPetSpawned_Parms OnPetSpawned_Parms;
	OnPetSpawned_Parms.Pet = Pet;

	pFnOnPetSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPetSpawned, &OnPetSpawned_Parms, NULL );

	pFnOnPetSpawned->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetTargetCenter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgPawn::GetTargetCenter ( )
{
	static UFunction* pFnGetTargetCenter = NULL;

	if ( ! pFnGetTargetCenter )
		pFnGetTargetCenter = (UFunction*) UObject::GObjObjects()->Data[ 41369 ];

	ATgPawn_execGetTargetCenter_Parms GetTargetCenter_Parms;

	pFnGetTargetCenter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetCenter, &GetTargetCenter_Parms, NULL );

	pFnGetTargetCenter->FunctionFlags |= 0x400;

	return GetTargetCenter_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetScannerFOV
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetScannerFOV ( )
{
	static UFunction* pFnGetScannerFOV = NULL;

	if ( ! pFnGetScannerFOV )
		pFnGetScannerFOV = (UFunction*) UObject::GObjObjects()->Data[ 41367 ];

	ATgPawn_execGetScannerFOV_Parms GetScannerFOV_Parms;

	pFnGetScannerFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScannerFOV, &GetScannerFOV_Parms, NULL );

	pFnGetScannerFOV->FunctionFlags |= 0x400;

	return GetScannerFOV_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetScannerRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetScannerRange ( )
{
	static UFunction* pFnGetScannerRange = NULL;

	if ( ! pFnGetScannerRange )
		pFnGetScannerRange = (UFunction*) UObject::GObjObjects()->Data[ 41365 ];

	ATgPawn_execGetScannerRange_Parms GetScannerRange_Parms;

	pFnGetScannerRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScannerRange, &GetScannerRange_Parms, NULL );

	pFnGetScannerRange->FunctionFlags |= 0x400;

	return GetScannerRange_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerSeeStealthedTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )
// class ATgPawn*                 P                              ( CPF_Parm )

bool ATgPawn::ScannerSeeStealthedTarget ( int nIndex, class ATgPawn* P )
{
	static UFunction* pFnScannerSeeStealthedTarget = NULL;

	if ( ! pFnScannerSeeStealthedTarget )
		pFnScannerSeeStealthedTarget = (UFunction*) UObject::GObjObjects()->Data[ 41361 ];

	ATgPawn_execScannerSeeStealthedTarget_Parms ScannerSeeStealthedTarget_Parms;
	ScannerSeeStealthedTarget_Parms.nIndex = nIndex;
	ScannerSeeStealthedTarget_Parms.P = P;

	pFnScannerSeeStealthedTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerSeeStealthedTarget, &ScannerSeeStealthedTarget_Parms, NULL );

	pFnScannerSeeStealthedTarget->FunctionFlags |= 0x400;

	return ScannerSeeStealthedTarget_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerSeeStealthedPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )

bool ATgPawn::ScannerSeeStealthedPlayer ( class ATgPawn* P )
{
	static UFunction* pFnScannerSeeStealthedPlayer = NULL;

	if ( ! pFnScannerSeeStealthedPlayer )
		pFnScannerSeeStealthedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 41358 ];

	ATgPawn_execScannerSeeStealthedPlayer_Parms ScannerSeeStealthedPlayer_Parms;
	ScannerSeeStealthedPlayer_Parms.P = P;

	pFnScannerSeeStealthedPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerSeeStealthedPlayer, &ScannerSeeStealthedPlayer_Parms, NULL );

	pFnScannerSeeStealthedPlayer->FunctionFlags |= 0x400;

	return ScannerSeeStealthedPlayer_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerSeeBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerSeeBeacon ( int nIndex )
{
	static UFunction* pFnScannerSeeBeacon = NULL;

	if ( ! pFnScannerSeeBeacon )
		pFnScannerSeeBeacon = (UFunction*) UObject::GObjObjects()->Data[ 41355 ];

	ATgPawn_execScannerSeeBeacon_Parms ScannerSeeBeacon_Parms;
	ScannerSeeBeacon_Parms.nIndex = nIndex;

	pFnScannerSeeBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerSeeBeacon, &ScannerSeeBeacon_Parms, NULL );

	pFnScannerSeeBeacon->FunctionFlags |= 0x400;

	return ScannerSeeBeacon_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerSeeDeployable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerSeeDeployable ( int nIndex )
{
	static UFunction* pFnScannerSeeDeployable = NULL;

	if ( ! pFnScannerSeeDeployable )
		pFnScannerSeeDeployable = (UFunction*) UObject::GObjObjects()->Data[ 41352 ];

	ATgPawn_execScannerSeeDeployable_Parms ScannerSeeDeployable_Parms;
	ScannerSeeDeployable_Parms.nIndex = nIndex;

	pFnScannerSeeDeployable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerSeeDeployable, &ScannerSeeDeployable_Parms, NULL );

	pFnScannerSeeDeployable->FunctionFlags |= 0x400;

	return ScannerSeeDeployable_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerDisplayTargetWithBracket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerDisplayTargetWithBracket ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnScannerDisplayTargetWithBracket = NULL;

	if ( ! pFnScannerDisplayTargetWithBracket )
		pFnScannerDisplayTargetWithBracket = (UFunction*) UObject::GObjObjects()->Data[ 41348 ];

	ATgPawn_execScannerDisplayTargetWithBracket_Parms ScannerDisplayTargetWithBracket_Parms;
	ScannerDisplayTargetWithBracket_Parms.P = P;
	ScannerDisplayTargetWithBracket_Parms.nIndex = nIndex;

	pFnScannerDisplayTargetWithBracket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerDisplayTargetWithBracket, &ScannerDisplayTargetWithBracket_Parms, NULL );

	pFnScannerDisplayTargetWithBracket->FunctionFlags |= 0x400;

	return ScannerDisplayTargetWithBracket_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerDisplayTargetWithLowHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerDisplayTargetWithLowHealth ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnScannerDisplayTargetWithLowHealth = NULL;

	if ( ! pFnScannerDisplayTargetWithLowHealth )
		pFnScannerDisplayTargetWithLowHealth = (UFunction*) UObject::GObjObjects()->Data[ 41344 ];

	ATgPawn_execScannerDisplayTargetWithLowHealth_Parms ScannerDisplayTargetWithLowHealth_Parms;
	ScannerDisplayTargetWithLowHealth_Parms.P = P;
	ScannerDisplayTargetWithLowHealth_Parms.nIndex = nIndex;

	pFnScannerDisplayTargetWithLowHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerDisplayTargetWithLowHealth, &ScannerDisplayTargetWithLowHealth_Parms, NULL );

	pFnScannerDisplayTargetWithLowHealth->FunctionFlags |= 0x400;

	return ScannerDisplayTargetWithLowHealth_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerDisplayTargetTagged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerDisplayTargetTagged ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnScannerDisplayTargetTagged = NULL;

	if ( ! pFnScannerDisplayTargetTagged )
		pFnScannerDisplayTargetTagged = (UFunction*) UObject::GObjObjects()->Data[ 41340 ];

	ATgPawn_execScannerDisplayTargetTagged_Parms ScannerDisplayTargetTagged_Parms;
	ScannerDisplayTargetTagged_Parms.P = P;
	ScannerDisplayTargetTagged_Parms.nIndex = nIndex;

	pFnScannerDisplayTargetTagged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerDisplayTargetTagged, &ScannerDisplayTargetTagged_Parms, NULL );

	pFnScannerDisplayTargetTagged->FunctionFlags |= 0x400;

	return ScannerDisplayTargetTagged_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerDisplayTargetInGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerDisplayTargetInGame ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnScannerDisplayTargetInGame = NULL;

	if ( ! pFnScannerDisplayTargetInGame )
		pFnScannerDisplayTargetInGame = (UFunction*) UObject::GObjObjects()->Data[ 41336 ];

	ATgPawn_execScannerDisplayTargetInGame_Parms ScannerDisplayTargetInGame_Parms;
	ScannerDisplayTargetInGame_Parms.P = P;
	ScannerDisplayTargetInGame_Parms.nIndex = nIndex;

	pFnScannerDisplayTargetInGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerDisplayTargetInGame, &ScannerDisplayTargetInGame_Parms, NULL );

	pFnScannerDisplayTargetInGame->FunctionFlags |= 0x400;

	return ScannerDisplayTargetInGame_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ScannerDisplayTargetInMinimap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ScannerDisplayTargetInMinimap ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnScannerDisplayTargetInMinimap = NULL;

	if ( ! pFnScannerDisplayTargetInMinimap )
		pFnScannerDisplayTargetInMinimap = (UFunction*) UObject::GObjObjects()->Data[ 41332 ];

	ATgPawn_execScannerDisplayTargetInMinimap_Parms ScannerDisplayTargetInMinimap_Parms;
	ScannerDisplayTargetInMinimap_Parms.P = P;
	ScannerDisplayTargetInMinimap_Parms.nIndex = nIndex;

	pFnScannerDisplayTargetInMinimap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScannerDisplayTargetInMinimap, &ScannerDisplayTargetInMinimap_Parms, NULL );

	pFnScannerDisplayTargetInMinimap->FunctionFlags |= 0x400;

	return ScannerDisplayTargetInMinimap_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsStealthedPlayerDisplayInGameBySensor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::IsStealthedPlayerDisplayInGameBySensor ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnIsStealthedPlayerDisplayInGameBySensor = NULL;

	if ( ! pFnIsStealthedPlayerDisplayInGameBySensor )
		pFnIsStealthedPlayerDisplayInGameBySensor = (UFunction*) UObject::GObjObjects()->Data[ 41329 ];

	ATgPawn_execIsStealthedPlayerDisplayInGameBySensor_Parms IsStealthedPlayerDisplayInGameBySensor_Parms;
	IsStealthedPlayerDisplayInGameBySensor_Parms.LocalPlayerPawn = LocalPlayerPawn;

	pFnIsStealthedPlayerDisplayInGameBySensor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStealthedPlayerDisplayInGameBySensor, &IsStealthedPlayerDisplayInGameBySensor_Parms, NULL );

	pFnIsStealthedPlayerDisplayInGameBySensor->FunctionFlags |= 0x400;

	return IsStealthedPlayerDisplayInGameBySensor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SensorDisplayMeWithBracket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::SensorDisplayMeWithBracket ( )
{
	static UFunction* pFnSensorDisplayMeWithBracket = NULL;

	if ( ! pFnSensorDisplayMeWithBracket )
		pFnSensorDisplayMeWithBracket = (UFunction*) UObject::GObjObjects()->Data[ 41327 ];

	ATgPawn_execSensorDisplayMeWithBracket_Parms SensorDisplayMeWithBracket_Parms;

	pFnSensorDisplayMeWithBracket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorDisplayMeWithBracket, &SensorDisplayMeWithBracket_Parms, NULL );

	pFnSensorDisplayMeWithBracket->FunctionFlags |= 0x400;

	return SensorDisplayMeWithBracket_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SensorDisplayMeWithLowHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::SensorDisplayMeWithLowHealth ( )
{
	static UFunction* pFnSensorDisplayMeWithLowHealth = NULL;

	if ( ! pFnSensorDisplayMeWithLowHealth )
		pFnSensorDisplayMeWithLowHealth = (UFunction*) UObject::GObjObjects()->Data[ 41325 ];

	ATgPawn_execSensorDisplayMeWithLowHealth_Parms SensorDisplayMeWithLowHealth_Parms;

	pFnSensorDisplayMeWithLowHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorDisplayMeWithLowHealth, &SensorDisplayMeWithLowHealth_Parms, NULL );

	pFnSensorDisplayMeWithLowHealth->FunctionFlags |= 0x400;

	return SensorDisplayMeWithLowHealth_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SensorDisplayMeTagged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::SensorDisplayMeTagged ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnSensorDisplayMeTagged = NULL;

	if ( ! pFnSensorDisplayMeTagged )
		pFnSensorDisplayMeTagged = (UFunction*) UObject::GObjObjects()->Data[ 41322 ];

	ATgPawn_execSensorDisplayMeTagged_Parms SensorDisplayMeTagged_Parms;
	SensorDisplayMeTagged_Parms.LocalPlayerPawn = LocalPlayerPawn;

	pFnSensorDisplayMeTagged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorDisplayMeTagged, &SensorDisplayMeTagged_Parms, NULL );

	pFnSensorDisplayMeTagged->FunctionFlags |= 0x400;

	return SensorDisplayMeTagged_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SensorDisplayMeInGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::SensorDisplayMeInGame ( )
{
	static UFunction* pFnSensorDisplayMeInGame = NULL;

	if ( ! pFnSensorDisplayMeInGame )
		pFnSensorDisplayMeInGame = (UFunction*) UObject::GObjObjects()->Data[ 41320 ];

	ATgPawn_execSensorDisplayMeInGame_Parms SensorDisplayMeInGame_Parms;

	pFnSensorDisplayMeInGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorDisplayMeInGame, &SensorDisplayMeInGame_Parms, NULL );

	pFnSensorDisplayMeInGame->FunctionFlags |= 0x400;

	return SensorDisplayMeInGame_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SensorDisplayMeInMinimap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::SensorDisplayMeInMinimap ( )
{
	static UFunction* pFnSensorDisplayMeInMinimap = NULL;

	if ( ! pFnSensorDisplayMeInMinimap )
		pFnSensorDisplayMeInMinimap = (UFunction*) UObject::GObjObjects()->Data[ 41318 ];

	ATgPawn_execSensorDisplayMeInMinimap_Parms SensorDisplayMeInMinimap_Parms;

	pFnSensorDisplayMeInMinimap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorDisplayMeInMinimap, &SensorDisplayMeInMinimap_Parms, NULL );

	pFnSensorDisplayMeInMinimap->FunctionFlags |= 0x400;

	return SensorDisplayMeInMinimap_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldDisplayWithBracket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::ShouldDisplayWithBracket ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnShouldDisplayWithBracket = NULL;

	if ( ! pFnShouldDisplayWithBracket )
		pFnShouldDisplayWithBracket = (UFunction*) UObject::GObjObjects()->Data[ 41315 ];

	ATgPawn_execShouldDisplayWithBracket_Parms ShouldDisplayWithBracket_Parms;
	ShouldDisplayWithBracket_Parms.LocalPlayerPawn = LocalPlayerPawn;

	pFnShouldDisplayWithBracket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDisplayWithBracket, &ShouldDisplayWithBracket_Parms, NULL );

	pFnShouldDisplayWithBracket->FunctionFlags |= 0x400;

	return ShouldDisplayWithBracket_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldDisplayWithLowHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::ShouldDisplayWithLowHealth ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnShouldDisplayWithLowHealth = NULL;

	if ( ! pFnShouldDisplayWithLowHealth )
		pFnShouldDisplayWithLowHealth = (UFunction*) UObject::GObjObjects()->Data[ 41312 ];

	ATgPawn_execShouldDisplayWithLowHealth_Parms ShouldDisplayWithLowHealth_Parms;
	ShouldDisplayWithLowHealth_Parms.LocalPlayerPawn = LocalPlayerPawn;

	pFnShouldDisplayWithLowHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDisplayWithLowHealth, &ShouldDisplayWithLowHealth_Parms, NULL );

	pFnShouldDisplayWithLowHealth->FunctionFlags |= 0x400;

	return ShouldDisplayWithLowHealth_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldDisplayInMinimap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 LocalPlayerPawn                ( CPF_Parm )

bool ATgPawn::ShouldDisplayInMinimap ( class ATgPawn* LocalPlayerPawn )
{
	static UFunction* pFnShouldDisplayInMinimap = NULL;

	if ( ! pFnShouldDisplayInMinimap )
		pFnShouldDisplayInMinimap = (UFunction*) UObject::GObjObjects()->Data[ 41309 ];

	ATgPawn_execShouldDisplayInMinimap_Parms ShouldDisplayInMinimap_Parms;
	ShouldDisplayInMinimap_Parms.LocalPlayerPawn = LocalPlayerPawn;

	pFnShouldDisplayInMinimap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDisplayInMinimap, &ShouldDisplayInMinimap_Parms, NULL );

	pFnShouldDisplayInMinimap->FunctionFlags |= 0x400;

	return ShouldDisplayInMinimap_Parms.ReturnValue;
};

// Function TgGame.TgPawn.StealthedPlayerResistVisualScanner
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::StealthedPlayerResistVisualScanner ( )
{
	static UFunction* pFnStealthedPlayerResistVisualScanner = NULL;

	if ( ! pFnStealthedPlayerResistVisualScanner )
		pFnStealthedPlayerResistVisualScanner = (UFunction*) UObject::GObjObjects()->Data[ 41307 ];

	ATgPawn_execStealthedPlayerResistVisualScanner_Parms StealthedPlayerResistVisualScanner_Parms;

	pFnStealthedPlayerResistVisualScanner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStealthedPlayerResistVisualScanner, &StealthedPlayerResistVisualScanner_Parms, NULL );

	pFnStealthedPlayerResistVisualScanner->FunctionFlags |= 0x400;

	return StealthedPlayerResistVisualScanner_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ValidBotOnlyCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::ValidBotOnlyCheck ( class ATgPawn* P, int nIndex )
{
	static UFunction* pFnValidBotOnlyCheck = NULL;

	if ( ! pFnValidBotOnlyCheck )
		pFnValidBotOnlyCheck = (UFunction*) UObject::GObjObjects()->Data[ 41303 ];

	ATgPawn_execValidBotOnlyCheck_Parms ValidBotOnlyCheck_Parms;
	ValidBotOnlyCheck_Parms.P = P;
	ValidBotOnlyCheck_Parms.nIndex = nIndex;

	pFnValidBotOnlyCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidBotOnlyCheck, &ValidBotOnlyCheck_Parms, NULL );

	pFnValidBotOnlyCheck->FunctionFlags |= 0x400;

	return ValidBotOnlyCheck_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsScannerOn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsScannerOn ( )
{
	static UFunction* pFnIsScannerOn = NULL;

	if ( ! pFnIsScannerOn )
		pFnIsScannerOn = (UFunction*) UObject::GObjObjects()->Data[ 41301 ];

	ATgPawn_execIsScannerOn_Parms IsScannerOn_Parms;

	pFnIsScannerOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsScannerOn, &IsScannerOn_Parms, NULL );

	pFnIsScannerOn->FunctionFlags |= 0x400;

	return IsScannerOn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CheckIndexedFlag
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nFlag                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

bool ATgPawn::CheckIndexedFlag ( int nFlag, int nIndex )
{
	static UFunction* pFnCheckIndexedFlag = NULL;

	if ( ! pFnCheckIndexedFlag )
		pFnCheckIndexedFlag = (UFunction*) UObject::GObjObjects()->Data[ 41297 ];

	ATgPawn_execCheckIndexedFlag_Parms CheckIndexedFlag_Parms;
	CheckIndexedFlag_Parms.nFlag = nFlag;
	CheckIndexedFlag_Parms.nIndex = nIndex;

	pFnCheckIndexedFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckIndexedFlag, &CheckIndexedFlag_Parms, NULL );

	pFnCheckIndexedFlag->FunctionFlags |= 0x400;

	return CheckIndexedFlag_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CheckUiVolumeTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::CheckUiVolumeTriggers ( )
{
	static UFunction* pFnCheckUiVolumeTriggers = NULL;

	if ( ! pFnCheckUiVolumeTriggers )
		pFnCheckUiVolumeTriggers = (UFunction*) UObject::GObjObjects()->Data[ 41296 ];

	ATgPawn_execCheckUiVolumeTriggers_Parms CheckUiVolumeTriggers_Parms;

	pFnCheckUiVolumeTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUiVolumeTriggers, &CheckUiVolumeTriggers_Parms, NULL );

	pFnCheckUiVolumeTriggers->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DisplayDamageInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLocation                 ( CPF_Parm )

void ATgPawn::DisplayDamageInfo ( class UCanvas* Canvas, struct FVector ScreenLocation )
{
	static UFunction* pFnDisplayDamageInfo = NULL;

	if ( ! pFnDisplayDamageInfo )
		pFnDisplayDamageInfo = (UFunction*) UObject::GObjObjects()->Data[ 41293 ];

	ATgPawn_execDisplayDamageInfo_Parms DisplayDamageInfo_Parms;
	DisplayDamageInfo_Parms.Canvas = Canvas;
	memcpy ( &DisplayDamageInfo_Parms.ScreenLocation, &ScreenLocation, 0xC );

	pFnDisplayDamageInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayDamageInfo, &DisplayDamageInfo_Parms, NULL );

	pFnDisplayDamageInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayCustomAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAnimResId                     ( CPF_Parm )
// unsigned long                  bFullBody                      ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )

void ATgPawn::PlayCustomAnimation ( int nAnimResId, unsigned long bFullBody, float fTime )
{
	static UFunction* pFnPlayCustomAnimation = NULL;

	if ( ! pFnPlayCustomAnimation )
		pFnPlayCustomAnimation = (UFunction*) UObject::GObjObjects()->Data[ 41289 ];

	ATgPawn_execPlayCustomAnimation_Parms PlayCustomAnimation_Parms;
	PlayCustomAnimation_Parms.nAnimResId = nAnimResId;
	PlayCustomAnimation_Parms.bFullBody = bFullBody;
	PlayCustomAnimation_Parms.fTime = fTime;

	pFnPlayCustomAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimation, &PlayCustomAnimation_Parms, NULL );

	pFnPlayCustomAnimation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetHUDColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 PlayerPawn                     ( CPF_Parm )

struct FLinearColor ATgPawn::GetHUDColor ( class ATgPawn* PlayerPawn )
{
	static UFunction* pFnGetHUDColor = NULL;

	if ( ! pFnGetHUDColor )
		pFnGetHUDColor = (UFunction*) UObject::GObjObjects()->Data[ 41286 ];

	ATgPawn_execGetHUDColor_Parms GetHUDColor_Parms;
	GetHUDColor_Parms.PlayerPawn = PlayerPawn;

	pFnGetHUDColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHUDColor, &GetHUDColor_Parms, NULL );

	pFnGetHUDColor->FunctionFlags |= 0x400;

	return GetHUDColor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetJetpackTrailId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nId                            ( CPF_Parm )

void ATgPawn::SetJetpackTrailId ( int nId )
{
	static UFunction* pFnSetJetpackTrailId = NULL;

	if ( ! pFnSetJetpackTrailId )
		pFnSetJetpackTrailId = (UFunction*) UObject::GObjObjects()->Data[ 41284 ];

	ATgPawn_execSetJetpackTrailId_Parms SetJetpackTrailId_Parms;
	SetJetpackTrailId_Parms.nId = nId;

	pFnSetJetpackTrailId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetJetpackTrailId, &SetJetpackTrailId_Parms, NULL );

	pFnSetJetpackTrailId->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetDyeItemId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nId                            ( CPF_Parm )
// unsigned char                  eSlot                          ( CPF_Parm )

void ATgPawn::SetDyeItemId ( int nId, unsigned char eSlot )
{
	static UFunction* pFnSetDyeItemId = NULL;

	if ( ! pFnSetDyeItemId )
		pFnSetDyeItemId = (UFunction*) UObject::GObjObjects()->Data[ 41281 ];

	ATgPawn_execSetDyeItemId_Parms SetDyeItemId_Parms;
	SetDyeItemId_Parms.nId = nId;
	SetDyeItemId_Parms.eSlot = eSlot;

	pFnSetDyeItemId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDyeItemId, &SetDyeItemId_Parms, NULL );

	pFnSetDyeItemId->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetDyeItemId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eSlot                          ( CPF_Parm )

int ATgPawn::GetDyeItemId ( unsigned char eSlot )
{
	static UFunction* pFnGetDyeItemId = NULL;

	if ( ! pFnGetDyeItemId )
		pFnGetDyeItemId = (UFunction*) UObject::GObjObjects()->Data[ 41278 ];

	ATgPawn_execGetDyeItemId_Parms GetDyeItemId_Parms;
	GetDyeItemId_Parms.eSlot = eSlot;

	pFnGetDyeItemId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDyeItemId, &GetDyeItemId_Parms, NULL );

	pFnGetDyeItemId->FunctionFlags |= 0x400;

	return GetDyeItemId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetJetpackTrailId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetJetpackTrailId ( )
{
	static UFunction* pFnGetJetpackTrailId = NULL;

	if ( ! pFnGetJetpackTrailId )
		pFnGetJetpackTrailId = (UFunction*) UObject::GObjObjects()->Data[ 41276 ];

	ATgPawn_execGetJetpackTrailId_Parms GetJetpackTrailId_Parms;

	pFnGetJetpackTrailId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetJetpackTrailId, &GetJetpackTrailId_Parms, NULL );

	pFnGetJetpackTrailId->FunctionFlags |= 0x400;

	return GetJetpackTrailId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetCurrentUsedResourceList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       List                           ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::GetCurrentUsedResourceList ( TArray< struct FString > List )
{
	static UFunction* pFnGetCurrentUsedResourceList = NULL;

	if ( ! pFnGetCurrentUsedResourceList )
		pFnGetCurrentUsedResourceList = (UFunction*) UObject::GObjObjects()->Data[ 41273 ];

	ATgPawn_execGetCurrentUsedResourceList_Parms GetCurrentUsedResourceList_Parms;
	memcpy ( &GetCurrentUsedResourceList_Parms.List, &List, 0xC );

	pFnGetCurrentUsedResourceList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUsedResourceList, &GetCurrentUsedResourceList_Parms, NULL );

	pFnGetCurrentUsedResourceList->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsNonCombat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsNonCombat ( )
{
	static UFunction* pFnIsNonCombat = NULL;

	if ( ! pFnIsNonCombat )
		pFnIsNonCombat = (UFunction*) UObject::GObjObjects()->Data[ 41271 ];

	ATgPawn_execIsNonCombat_Parms IsNonCombat_Parms;

	pFnIsNonCombat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNonCombat, &IsNonCombat_Parms, NULL );

	pFnIsNonCombat->FunctionFlags |= 0x400;

	return IsNonCombat_Parms.ReturnValue;
};

// Function TgGame.TgPawn.MatchJoin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_MatchJoin*     Action                         ( CPF_Parm )

void ATgPawn::MatchJoin ( class UTgSeqAct_MatchJoin* Action )
{
	static UFunction* pFnMatchJoin = NULL;

	if ( ! pFnMatchJoin )
		pFnMatchJoin = (UFunction*) UObject::GObjObjects()->Data[ 41269 ];

	ATgPawn_execMatchJoin_Parms MatchJoin_Parms;
	MatchJoin_Parms.Action = Action;

	pFnMatchJoin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchJoin, &MatchJoin_Parms, NULL );

	pFnMatchJoin->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsCrewable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsCrewable ( )
{
	static UFunction* pFnIsCrewable = NULL;

	if ( ! pFnIsCrewable )
		pFnIsCrewable = (UFunction*) UObject::GObjObjects()->Data[ 41267 ];

	ATgPawn_execIsCrewable_Parms IsCrewable_Parms;

	pFnIsCrewable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCrewable, &IsCrewable_Parms, NULL );

	pFnIsCrewable->FunctionFlags |= 0x400;

	return IsCrewable_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CanMove
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanMove ( )
{
	static UFunction* pFnCanMove = NULL;

	if ( ! pFnCanMove )
		pFnCanMove = (UFunction*) UObject::GObjObjects()->Data[ 41265 ];

	ATgPawn_execCanMove_Parms CanMove_Parms;

	pFnCanMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanMove, &CanMove_Parms, NULL );

	pFnCanMove->FunctionFlags |= 0x400;

	return CanMove_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetAim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D ATgPawn::GetAim ( )
{
	static UFunction* pFnGetAim = NULL;

	if ( ! pFnGetAim )
		pFnGetAim = (UFunction*) UObject::GObjObjects()->Data[ 41263 ];

	ATgPawn_execGetAim_Parms GetAim_Parms;

	pFnGetAim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAim, &GetAim_Parms, NULL );

	pFnGetAim->FunctionFlags |= 0x400;

	return GetAim_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetWeaponStartTraceLocationFromSocketOffsetInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn::GetWeaponStartTraceLocationFromSocketOffsetInfo ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocationFromSocketOffsetInfo = NULL;

	if ( ! pFnGetWeaponStartTraceLocationFromSocketOffsetInfo )
		pFnGetWeaponStartTraceLocationFromSocketOffsetInfo = (UFunction*) UObject::GObjObjects()->Data[ 41260 ];

	ATgPawn_execGetWeaponStartTraceLocationFromSocketOffsetInfo_Parms GetWeaponStartTraceLocationFromSocketOffsetInfo_Parms;
	GetWeaponStartTraceLocationFromSocketOffsetInfo_Parms.Dev = Dev;

	pFnGetWeaponStartTraceLocationFromSocketOffsetInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocationFromSocketOffsetInfo, &GetWeaponStartTraceLocationFromSocketOffsetInfo_Parms, NULL );

	pFnGetWeaponStartTraceLocationFromSocketOffsetInfo->FunctionFlags |= 0x400;

	return GetWeaponStartTraceLocationFromSocketOffsetInfo_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CalculateYawPitchOffset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )
// float                          TurnTime                       ( CPF_Parm )

void ATgPawn::CalculateYawPitchOffset ( float DeltaSeconds, float TurnTime )
{
	static UFunction* pFnCalculateYawPitchOffset = NULL;

	if ( ! pFnCalculateYawPitchOffset )
		pFnCalculateYawPitchOffset = (UFunction*) UObject::GObjObjects()->Data[ 41257 ];

	ATgPawn_execCalculateYawPitchOffset_Parms CalculateYawPitchOffset_Parms;
	CalculateYawPitchOffset_Parms.DeltaSeconds = DeltaSeconds;
	CalculateYawPitchOffset_Parms.TurnTime = TurnTime;

	pFnCalculateYawPitchOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateYawPitchOffset, &CalculateYawPitchOffset_Parms, NULL );

	pFnCalculateYawPitchOffset->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TriggerSubzoneBilboardChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TriggerSubzoneBilboardChange ( )
{
	static UFunction* pFnTriggerSubzoneBilboardChange = NULL;

	if ( ! pFnTriggerSubzoneBilboardChange )
		pFnTriggerSubzoneBilboardChange = (UFunction*) UObject::GObjObjects()->Data[ 41256 ];

	ATgPawn_execTriggerSubzoneBilboardChange_Parms TriggerSubzoneBilboardChange_Parms;

	pFnTriggerSubzoneBilboardChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerSubzoneBilboardChange, &TriggerSubzoneBilboardChange_Parms, NULL );

	pFnTriggerSubzoneBilboardChange->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TriggerSubzoneChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TriggerSubzoneChange ( )
{
	static UFunction* pFnTriggerSubzoneChange = NULL;

	if ( ! pFnTriggerSubzoneChange )
		pFnTriggerSubzoneChange = (UFunction*) UObject::GObjObjects()->Data[ 41255 ];

	ATgPawn_execTriggerSubzoneChange_Parms TriggerSubzoneChange_Parms;

	pFnTriggerSubzoneChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerSubzoneChange, &TriggerSubzoneChange_Parms, NULL );

	pFnTriggerSubzoneChange->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TriggerOmegaAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TriggerOmegaAlert ( )
{
	static UFunction* pFnTriggerOmegaAlert = NULL;

	if ( ! pFnTriggerOmegaAlert )
		pFnTriggerOmegaAlert = (UFunction*) UObject::GObjObjects()->Data[ 41254 ];

	ATgPawn_execTriggerOmegaAlert_Parms TriggerOmegaAlert_Parms;

	pFnTriggerOmegaAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerOmegaAlert, &TriggerOmegaAlert_Parms, NULL );

	pFnTriggerOmegaAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayUpperBodyAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ATgPawn::PlayUpperBodyAnim ( struct FName AnimName, float Rate, float BlendInTime, unsigned long bLooping )
{
	static UFunction* pFnPlayUpperBodyAnim = NULL;

	if ( ! pFnPlayUpperBodyAnim )
		pFnPlayUpperBodyAnim = (UFunction*) UObject::GObjObjects()->Data[ 41249 ];

	ATgPawn_execPlayUpperBodyAnim_Parms PlayUpperBodyAnim_Parms;
	memcpy ( &PlayUpperBodyAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayUpperBodyAnim_Parms.Rate = Rate;
	PlayUpperBodyAnim_Parms.BlendInTime = BlendInTime;
	PlayUpperBodyAnim_Parms.bLooping = bLooping;

	pFnPlayUpperBodyAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayUpperBodyAnim, &PlayUpperBodyAnim_Parms, NULL );

	pFnPlayUpperBodyAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayFullBodyLoopingAnimWithTransition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TransitionAnimName             ( CPF_Parm )
// struct FName                   LoopingAnimName                ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_Parm )
// float                          BlendOutTime                   ( CPF_Parm )

float ATgPawn::PlayFullBodyLoopingAnimWithTransition ( struct FName TransitionAnimName, struct FName LoopingAnimName, float Rate, float BlendInTime, float BlendOutTime )
{
	static UFunction* pFnPlayFullBodyLoopingAnimWithTransition = NULL;

	if ( ! pFnPlayFullBodyLoopingAnimWithTransition )
		pFnPlayFullBodyLoopingAnimWithTransition = (UFunction*) UObject::GObjObjects()->Data[ 41242 ];

	ATgPawn_execPlayFullBodyLoopingAnimWithTransition_Parms PlayFullBodyLoopingAnimWithTransition_Parms;
	memcpy ( &PlayFullBodyLoopingAnimWithTransition_Parms.TransitionAnimName, &TransitionAnimName, 0x8 );
	memcpy ( &PlayFullBodyLoopingAnimWithTransition_Parms.LoopingAnimName, &LoopingAnimName, 0x8 );
	PlayFullBodyLoopingAnimWithTransition_Parms.Rate = Rate;
	PlayFullBodyLoopingAnimWithTransition_Parms.BlendInTime = BlendInTime;
	PlayFullBodyLoopingAnimWithTransition_Parms.BlendOutTime = BlendOutTime;

	pFnPlayFullBodyLoopingAnimWithTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFullBodyLoopingAnimWithTransition, &PlayFullBodyLoopingAnimWithTransition_Parms, NULL );

	pFnPlayFullBodyLoopingAnimWithTransition->FunctionFlags |= 0x400;

	return PlayFullBodyLoopingAnimWithTransition_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PlayFullBodyAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_Parm )
// float                          BlendOutTime                   ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bOverride                      ( CPF_Parm )
// unsigned long                  bDisablePlayerControls         ( CPF_Parm )
// unsigned long                  bBlendOutIfVelocityIsGreaterThanZero ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bHideInHandDevice              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::PlayFullBodyAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bDisablePlayerControls, unsigned long bBlendOutIfVelocityIsGreaterThanZero, unsigned long bHideInHandDevice )
{
	static UFunction* pFnPlayFullBodyAnim = NULL;

	if ( ! pFnPlayFullBodyAnim )
		pFnPlayFullBodyAnim = (UFunction*) UObject::GObjObjects()->Data[ 41232 ];

	ATgPawn_execPlayFullBodyAnim_Parms PlayFullBodyAnim_Parms;
	memcpy ( &PlayFullBodyAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayFullBodyAnim_Parms.Rate = Rate;
	PlayFullBodyAnim_Parms.BlendInTime = BlendInTime;
	PlayFullBodyAnim_Parms.BlendOutTime = BlendOutTime;
	PlayFullBodyAnim_Parms.bLooping = bLooping;
	PlayFullBodyAnim_Parms.bOverride = bOverride;
	PlayFullBodyAnim_Parms.bDisablePlayerControls = bDisablePlayerControls;
	PlayFullBodyAnim_Parms.bBlendOutIfVelocityIsGreaterThanZero = bBlendOutIfVelocityIsGreaterThanZero;
	PlayFullBodyAnim_Parms.bHideInHandDevice = bHideInHandDevice;

	pFnPlayFullBodyAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFullBodyAnim, &PlayFullBodyAnim_Parms, NULL );

	pFnPlayFullBodyAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsFriendlyWithLocalPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsFriendlyWithLocalPawn ( )
{
	static UFunction* pFnIsFriendlyWithLocalPawn = NULL;

	if ( ! pFnIsFriendlyWithLocalPawn )
		pFnIsFriendlyWithLocalPawn = (UFunction*) UObject::GObjObjects()->Data[ 41230 ];

	ATgPawn_execIsFriendlyWithLocalPawn_Parms IsFriendlyWithLocalPawn_Parms;

	pFnIsFriendlyWithLocalPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPawn, &IsFriendlyWithLocalPawn_Parms, NULL );

	pFnIsFriendlyWithLocalPawn->FunctionFlags |= 0x400;

	return IsFriendlyWithLocalPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetCurrentDeviceAccuracyInfo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          fAccuracy                      ( CPF_Parm | CPF_OutParm )
// float                          fAmountCurrentlyOffOfTargetAccuray ( CPF_Parm | CPF_OutParm )

void ATgPawn::GetCurrentDeviceAccuracyInfo ( float* fAccuracy, float* fAmountCurrentlyOffOfTargetAccuray )
{
	static UFunction* pFnGetCurrentDeviceAccuracyInfo = NULL;

	if ( ! pFnGetCurrentDeviceAccuracyInfo )
		pFnGetCurrentDeviceAccuracyInfo = (UFunction*) UObject::GObjObjects()->Data[ 41227 ];

	ATgPawn_execGetCurrentDeviceAccuracyInfo_Parms GetCurrentDeviceAccuracyInfo_Parms;

	pFnGetCurrentDeviceAccuracyInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentDeviceAccuracyInfo, &GetCurrentDeviceAccuracyInfo_Parms, NULL );

	pFnGetCurrentDeviceAccuracyInfo->FunctionFlags |= 0x400;

	if ( fAccuracy )
		*fAccuracy = GetCurrentDeviceAccuracyInfo_Parms.fAccuracy;

	if ( fAmountCurrentlyOffOfTargetAccuray )
		*fAmountCurrentlyOffOfTargetAccuray = GetCurrentDeviceAccuracyInfo_Parms.fAmountCurrentlyOffOfTargetAccuray;
};

// Function TgGame.TgPawn.SetDisintegrateData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::SetDisintegrateData ( )
{
	static UFunction* pFnSetDisintegrateData = NULL;

	if ( ! pFnSetDisintegrateData )
		pFnSetDisintegrateData = (UFunction*) UObject::GObjObjects()->Data[ 41226 ];

	ATgPawn_execSetDisintegrateData_Parms SetDisintegrateData_Parms;

	pFnSetDisintegrateData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisintegrateData, &SetDisintegrateData_Parms, NULL );

	pFnSetDisintegrateData->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ForceUpdateEquippedDevices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ForceUpdateEquippedDevices ( )
{
	static UFunction* pFnForceUpdateEquippedDevices = NULL;

	if ( ! pFnForceUpdateEquippedDevices )
		pFnForceUpdateEquippedDevices = (UFunction*) UObject::GObjObjects()->Data[ 41225 ];

	ATgPawn_execForceUpdateEquippedDevices_Parms ForceUpdateEquippedDevices_Parms;

	pFnForceUpdateEquippedDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateEquippedDevices, &ForceUpdateEquippedDevices_Parms, NULL );

	pFnForceUpdateEquippedDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RegainMoraleBoost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDelta                         ( CPF_Parm )

void ATgPawn::RegainMoraleBoost ( float fDelta )
{
	static UFunction* pFnRegainMoraleBoost = NULL;

	if ( ! pFnRegainMoraleBoost )
		pFnRegainMoraleBoost = (UFunction*) UObject::GObjObjects()->Data[ 41223 ];

	ATgPawn_execRegainMoraleBoost_Parms RegainMoraleBoost_Parms;
	RegainMoraleBoost_Parms.fDelta = fDelta;

	pFnRegainMoraleBoost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegainMoraleBoost, &RegainMoraleBoost_Parms, NULL );

	pFnRegainMoraleBoost->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RegainPowerPool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDelta                         ( CPF_Parm )

void ATgPawn::RegainPowerPool ( float fDelta )
{
	static UFunction* pFnRegainPowerPool = NULL;

	if ( ! pFnRegainPowerPool )
		pFnRegainPowerPool = (UFunction*) UObject::GObjObjects()->Data[ 41221 ];

	ATgPawn_execRegainPowerPool_Parms RegainPowerPool_Parms;
	RegainPowerPool_Parms.fDelta = fDelta;

	pFnRegainPowerPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegainPowerPool, &RegainPowerPool_Parms, NULL );

	pFnRegainPowerPool->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetSeekingTargetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgPawn::GetSeekingTargetLocation ( )
{
	static UFunction* pFnGetSeekingTargetLocation = NULL;

	if ( ! pFnGetSeekingTargetLocation )
		pFnGetSeekingTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 41219 ];

	ATgPawn_execGetSeekingTargetLocation_Parms GetSeekingTargetLocation_Parms;

	pFnGetSeekingTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSeekingTargetLocation, &GetSeekingTargetLocation_Parms, NULL );

	pFnGetSeekingTargetLocation->FunctionFlags |= 0x400;

	return GetSeekingTargetLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CheckWeakSpotPassThrough
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bAllowZImpactOutsideOfCylidnerHeightRange ( CPF_Parm )

bool ATgPawn::CheckWeakSpotPassThrough ( struct FVector HitLocation, struct FVector HitNormal, unsigned long bAllowZImpactOutsideOfCylidnerHeightRange )
{
	static UFunction* pFnCheckWeakSpotPassThrough = NULL;

	if ( ! pFnCheckWeakSpotPassThrough )
		pFnCheckWeakSpotPassThrough = (UFunction*) UObject::GObjObjects()->Data[ 41214 ];

	ATgPawn_execCheckWeakSpotPassThrough_Parms CheckWeakSpotPassThrough_Parms;
	memcpy ( &CheckWeakSpotPassThrough_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CheckWeakSpotPassThrough_Parms.HitNormal, &HitNormal, 0xC );
	CheckWeakSpotPassThrough_Parms.bAllowZImpactOutsideOfCylidnerHeightRange = bAllowZImpactOutsideOfCylidnerHeightRange;

	pFnCheckWeakSpotPassThrough->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckWeakSpotPassThrough, &CheckWeakSpotPassThrough_Parms, NULL );

	pFnCheckWeakSpotPassThrough->FunctionFlags |= 0x400;

	return CheckWeakSpotPassThrough_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetScannerDetectedStealthLightup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::SetScannerDetectedStealthLightup ( )
{
	static UFunction* pFnSetScannerDetectedStealthLightup = NULL;

	if ( ! pFnSetScannerDetectedStealthLightup )
		pFnSetScannerDetectedStealthLightup = (UFunction*) UObject::GObjObjects()->Data[ 41213 ];

	ATgPawn_execSetScannerDetectedStealthLightup_Parms SetScannerDetectedStealthLightup_Parms;

	pFnSetScannerDetectedStealthLightup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScannerDetectedStealthLightup, &SetScannerDetectedStealthLightup_Parms, NULL );

	pFnSetScannerDetectedStealthLightup->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsVisibilityFadeDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsVisibilityFadeDone ( )
{
	static UFunction* pFnIsVisibilityFadeDone = NULL;

	if ( ! pFnIsVisibilityFadeDone )
		pFnIsVisibilityFadeDone = (UFunction*) UObject::GObjObjects()->Data[ 41211 ];

	ATgPawn_execIsVisibilityFadeDone_Parms IsVisibilityFadeDone_Parms;

	pFnIsVisibilityFadeDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisibilityFadeDone, &IsVisibilityFadeDone_Parms, NULL );

	pFnIsVisibilityFadeDone->FunctionFlags |= 0x400;

	return IsVisibilityFadeDone_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsFadeInEffectDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsFadeInEffectDone ( )
{
	static UFunction* pFnIsFadeInEffectDone = NULL;

	if ( ! pFnIsFadeInEffectDone )
		pFnIsFadeInEffectDone = (UFunction*) UObject::GObjObjects()->Data[ 41209 ];

	ATgPawn_execIsFadeInEffectDone_Parms IsFadeInEffectDone_Parms;

	pFnIsFadeInEffectDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFadeInEffectDone, &IsFadeInEffectDone_Parms, NULL );

	pFnIsFadeInEffectDone->FunctionFlags |= 0x400;

	return IsFadeInEffectDone_Parms.ReturnValue;
};

// Function TgGame.TgPawn.NeedFadeInEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::NeedFadeInEffect ( )
{
	static UFunction* pFnNeedFadeInEffect = NULL;

	if ( ! pFnNeedFadeInEffect )
		pFnNeedFadeInEffect = (UFunction*) UObject::GObjObjects()->Data[ 41207 ];

	ATgPawn_execNeedFadeInEffect_Parms NeedFadeInEffect_Parms;

	pFnNeedFadeInEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedFadeInEffect, &NeedFadeInEffect_Parms, NULL );

	pFnNeedFadeInEffect->FunctionFlags |= 0x400;

	return NeedFadeInEffect_Parms.ReturnValue;
};

// Function TgGame.TgPawn.NeedPlayDeathFadeEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::NeedPlayDeathFadeEffect ( )
{
	static UFunction* pFnNeedPlayDeathFadeEffect = NULL;

	if ( ! pFnNeedPlayDeathFadeEffect )
		pFnNeedPlayDeathFadeEffect = (UFunction*) UObject::GObjObjects()->Data[ 41205 ];

	ATgPawn_execNeedPlayDeathFadeEffect_Parms NeedPlayDeathFadeEffect_Parms;

	pFnNeedPlayDeathFadeEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedPlayDeathFadeEffect, &NeedPlayDeathFadeEffect_Parms, NULL );

	pFnNeedPlayDeathFadeEffect->FunctionFlags |= 0x400;

	return NeedPlayDeathFadeEffect_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 41203 ];

	ATgPawn_execGetHealthPercent_Parms GetHealthPercent_Parms;

	pFnGetHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );

	pFnGetHealthPercent->FunctionFlags |= 0x400;

	return GetHealthPercent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.UpdateTitle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::UpdateTitle ( )
{
	static UFunction* pFnUpdateTitle = NULL;

	if ( ! pFnUpdateTitle )
		pFnUpdateTitle = (UFunction*) UObject::GObjObjects()->Data[ 41202 ];

	ATgPawn_execUpdateTitle_Parms UpdateTitle_Parms;

	pFnUpdateTitle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTitle, &UpdateTitle_Parms, NULL );

	pFnUpdateTitle->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.MakeInvulnerable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fLength                        ( CPF_Parm )

void ATgPawn::MakeInvulnerable ( float fLength )
{
	static UFunction* pFnMakeInvulnerable = NULL;

	if ( ! pFnMakeInvulnerable )
		pFnMakeInvulnerable = (UFunction*) UObject::GObjObjects()->Data[ 41200 ];

	ATgPawn_execMakeInvulnerable_Parms MakeInvulnerable_Parms;
	MakeInvulnerable_Parms.fLength = fLength;

	pFnMakeInvulnerable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeInvulnerable, &MakeInvulnerable_Parms, NULL );

	pFnMakeInvulnerable->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetMeshScalarValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ScalarParam                    ( CPF_Parm )
// float                          ScalarValue                    ( CPF_Parm )

void ATgPawn::SetMeshScalarValue ( struct FName ScalarParam, float ScalarValue )
{
	static UFunction* pFnSetMeshScalarValue = NULL;

	if ( ! pFnSetMeshScalarValue )
		pFnSetMeshScalarValue = (UFunction*) UObject::GObjObjects()->Data[ 41197 ];

	ATgPawn_execSetMeshScalarValue_Parms SetMeshScalarValue_Parms;
	memcpy ( &SetMeshScalarValue_Parms.ScalarParam, &ScalarParam, 0x8 );
	SetMeshScalarValue_Parms.ScalarValue = ScalarValue;

	pFnSetMeshScalarValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeshScalarValue, &SetMeshScalarValue_Parms, NULL );

	pFnSetMeshScalarValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ForceResetTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 PawnInstigator                 ( CPF_Parm )
// unsigned long                  bResetTaskforce                ( CPF_Parm )

void ATgPawn::ForceResetTaskForce ( class ATgPawn* PawnInstigator, unsigned long bResetTaskforce )
{
	static UFunction* pFnForceResetTaskForce = NULL;

	if ( ! pFnForceResetTaskForce )
		pFnForceResetTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 41194 ];

	ATgPawn_execForceResetTaskForce_Parms ForceResetTaskForce_Parms;
	ForceResetTaskForce_Parms.PawnInstigator = PawnInstigator;
	ForceResetTaskForce_Parms.bResetTaskforce = bResetTaskforce;

	pFnForceResetTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceResetTaskForce, &ForceResetTaskForce_Parms, NULL );

	pFnForceResetTaskForce->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.MoveCloseTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDesiredLocation               ( CPF_Parm )

bool ATgPawn::MoveCloseTo ( struct FVector vDesiredLocation )
{
	static UFunction* pFnMoveCloseTo = NULL;

	if ( ! pFnMoveCloseTo )
		pFnMoveCloseTo = (UFunction*) UObject::GObjObjects()->Data[ 41191 ];

	ATgPawn_execMoveCloseTo_Parms MoveCloseTo_Parms;
	memcpy ( &MoveCloseTo_Parms.vDesiredLocation, &vDesiredLocation, 0xC );

	pFnMoveCloseTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveCloseTo, &MoveCloseTo_Parms, NULL );

	pFnMoveCloseTo->FunctionFlags |= 0x400;

	return MoveCloseTo_Parms.ReturnValue;
};

// Function TgGame.TgPawn.HideCrewMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::HideCrewMessage ( )
{
	static UFunction* pFnHideCrewMessage = NULL;

	if ( ! pFnHideCrewMessage )
		pFnHideCrewMessage = (UFunction*) UObject::GObjObjects()->Data[ 41190 ];

	ATgPawn_execHideCrewMessage_Parms HideCrewMessage_Parms;

	pFnHideCrewMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideCrewMessage, &HideCrewMessage_Parms, NULL );

	pFnHideCrewMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DisplayCrewMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::DisplayCrewMessage ( )
{
	static UFunction* pFnDisplayCrewMessage = NULL;

	if ( ! pFnDisplayCrewMessage )
		pFnDisplayCrewMessage = (UFunction*) UObject::GObjObjects()->Data[ 41189 ];

	ATgPawn_execDisplayCrewMessage_Parms DisplayCrewMessage_Parms;

	pFnDisplayCrewMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayCrewMessage, &DisplayCrewMessage_Parms, NULL );

	pFnDisplayCrewMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UnCrewed
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bKillControlPawn               ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::UnCrewed ( unsigned long bKillControlPawn )
{
	static UFunction* pFnUnCrewed = NULL;

	if ( ! pFnUnCrewed )
		pFnUnCrewed = (UFunction*) UObject::GObjObjects()->Data[ 41187 ];

	ATgPawn_execUnCrewed_Parms UnCrewed_Parms;
	UnCrewed_Parms.bKillControlPawn = bKillControlPawn;

	pFnUnCrewed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnCrewed, &UnCrewed_Parms, NULL );

	pFnUnCrewed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CrewBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 bot                            ( CPF_Parm )

void ATgPawn::CrewBot ( class ATgPawn* bot )
{
	static UFunction* pFnCrewBot = NULL;

	if ( ! pFnCrewBot )
		pFnCrewBot = (UFunction*) UObject::GObjObjects()->Data[ 41185 ];

	ATgPawn_execCrewBot_Parms CrewBot_Parms;
	CrewBot_Parms.bot = bot;

	pFnCrewBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCrewBot, &CrewBot_Parms, NULL );

	pFnCrewBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgPawn::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 41183 ];

	ATgPawn_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.KillDeployables
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAll                           ( CPF_Parm )

void ATgPawn::KillDeployables ( unsigned long bAll )
{
	static UFunction* pFnKillDeployables = NULL;

	if ( ! pFnKillDeployables )
		pFnKillDeployables = (UFunction*) UObject::GObjObjects()->Data[ 41181 ];

	ATgPawn_execKillDeployables_Parms KillDeployables_Parms;
	KillDeployables_Parms.bAll = bAll;

	pFnKillDeployables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillDeployables, &KillDeployables_Parms, NULL );

	pFnKillDeployables->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawMatString
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCanvas*                 CanvasToUse                    ( CPF_Parm )
// float                          StartX                         ( CPF_Parm )
// float                          StartY                         ( CPF_Parm )
// float                          XScale                         ( CPF_Parm )
// float                          YScale                         ( CPF_Parm )
// struct FString                 NameString                     ( CPF_Parm | CPF_NeedCtorLink )
// class UFont*                   NameFont                       ( CPF_Parm )
// class UMaterialInstanceConstant* FontMIC                        ( CPF_Parm )

int ATgPawn::DrawMatString ( class UCanvas* CanvasToUse, float StartX, float StartY, float XScale, float YScale, struct FString NameString, class UFont* NameFont, class UMaterialInstanceConstant* FontMIC )
{
	static UFunction* pFnDrawMatString = NULL;

	if ( ! pFnDrawMatString )
		pFnDrawMatString = (UFunction*) UObject::GObjObjects()->Data[ 41171 ];

	ATgPawn_execDrawMatString_Parms DrawMatString_Parms;
	DrawMatString_Parms.CanvasToUse = CanvasToUse;
	DrawMatString_Parms.StartX = StartX;
	DrawMatString_Parms.StartY = StartY;
	DrawMatString_Parms.XScale = XScale;
	DrawMatString_Parms.YScale = YScale;
	memcpy ( &DrawMatString_Parms.NameString, &NameString, 0xC );
	DrawMatString_Parms.NameFont = NameFont;
	DrawMatString_Parms.FontMIC = FontMIC;

	pFnDrawMatString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMatString, &DrawMatString_Parms, NULL );

	pFnDrawMatString->FunctionFlags |= 0x400;

	return DrawMatString_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsCarryingPickupFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsCarryingPickupFlag ( )
{
	static UFunction* pFnIsCarryingPickupFlag = NULL;

	if ( ! pFnIsCarryingPickupFlag )
		pFnIsCarryingPickupFlag = (UFunction*) UObject::GObjObjects()->Data[ 41169 ];

	ATgPawn_execIsCarryingPickupFlag_Parms IsCarryingPickupFlag_Parms;

	pFnIsCarryingPickupFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCarryingPickupFlag, &IsCarryingPickupFlag_Parms, NULL );

	pFnIsCarryingPickupFlag->FunctionFlags |= 0x400;

	return IsCarryingPickupFlag_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsCarryingBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsCarryingBeacon ( )
{
	static UFunction* pFnIsCarryingBeacon = NULL;

	if ( ! pFnIsCarryingBeacon )
		pFnIsCarryingBeacon = (UFunction*) UObject::GObjObjects()->Data[ 41167 ];

	ATgPawn_execIsCarryingBeacon_Parms IsCarryingBeacon_Parms;

	pFnIsCarryingBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCarryingBeacon, &IsCarryingBeacon_Parms, NULL );

	pFnIsCarryingBeacon->FunctionFlags |= 0x400;

	return IsCarryingBeacon_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetMoraleDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice_Morale*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDevice_Morale* ATgPawn::GetMoraleDevice ( )
{
	static UFunction* pFnGetMoraleDevice = NULL;

	if ( ! pFnGetMoraleDevice )
		pFnGetMoraleDevice = (UFunction*) UObject::GObjObjects()->Data[ 41165 ];

	ATgPawn_execGetMoraleDevice_Parms GetMoraleDevice_Parms;

	pFnGetMoraleDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMoraleDevice, &GetMoraleDevice_Parms, NULL );

	pFnGetMoraleDevice->FunctionFlags |= 0x400;

	return GetMoraleDevice_Parms.ReturnValue;
};

// Function TgGame.TgPawn.AddMoralePoints
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          fPoints                        ( CPF_Parm )
// int                            nDeviceModeID                  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::AddMoralePoints ( float fPoints, int nDeviceModeID )
{
	static UFunction* pFnAddMoralePoints = NULL;

	if ( ! pFnAddMoralePoints )
		pFnAddMoralePoints = (UFunction*) UObject::GObjObjects()->Data[ 41162 ];

	ATgPawn_execAddMoralePoints_Parms AddMoralePoints_Parms;
	AddMoralePoints_Parms.fPoints = fPoints;
	AddMoralePoints_Parms.nDeviceModeID = nDeviceModeID;

	pFnAddMoralePoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMoralePoints, &AddMoralePoints_Parms, NULL );

	pFnAddMoralePoints->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawLineToOwner
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::DrawLineToOwner ( )
{
	static UFunction* pFnDrawLineToOwner = NULL;

	if ( ! pFnDrawLineToOwner )
		pFnDrawLineToOwner = (UFunction*) UObject::GObjObjects()->Data[ 41161 ];

	ATgPawn_execDrawLineToOwner_Parms DrawLineToOwner_Parms;

	pFnDrawLineToOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawLineToOwner, &DrawLineToOwner_Parms, NULL );

	pFnDrawLineToOwner->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ShouldApplyJetpackTrail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ShouldApplyJetpackTrail ( )
{
	static UFunction* pFnShouldApplyJetpackTrail = NULL;

	if ( ! pFnShouldApplyJetpackTrail )
		pFnShouldApplyJetpackTrail = (UFunction*) UObject::GObjObjects()->Data[ 41159 ];

	ATgPawn_execShouldApplyJetpackTrail_Parms ShouldApplyJetpackTrail_Parms;

	pFnShouldApplyJetpackTrail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldApplyJetpackTrail, &ShouldApplyJetpackTrail_Parms, NULL );

	pFnShouldApplyJetpackTrail->FunctionFlags |= 0x400;

	return ShouldApplyJetpackTrail_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyJetpackTrail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bReset                         ( CPF_Parm )

void ATgPawn::ApplyJetpackTrail ( unsigned long bReset )
{
	static UFunction* pFnApplyJetpackTrail = NULL;

	if ( ! pFnApplyJetpackTrail )
		pFnApplyJetpackTrail = (UFunction*) UObject::GObjObjects()->Data[ 41157 ];

	ATgPawn_execApplyJetpackTrail_Parms ApplyJetpackTrail_Parms;
	ApplyJetpackTrail_Parms.bReset = bReset;

	pFnApplyJetpackTrail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyJetpackTrail, &ApplyJetpackTrail_Parms, NULL );

	pFnApplyJetpackTrail->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ShouldApplyDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ShouldApplyDye ( )
{
	static UFunction* pFnShouldApplyDye = NULL;

	if ( ! pFnShouldApplyDye )
		pFnShouldApplyDye = (UFunction*) UObject::GObjObjects()->Data[ 41155 ];

	ATgPawn_execShouldApplyDye_Parms ShouldApplyDye_Parms;

	pFnShouldApplyDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldApplyDye, &ShouldApplyDye_Parms, NULL );

	pFnShouldApplyDye->FunctionFlags |= 0x400;

	return ShouldApplyDye_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bResetDyeMIC                   ( CPF_Parm )

void ATgPawn::ApplyDye ( unsigned long bResetDyeMIC )
{
	static UFunction* pFnApplyDye = NULL;

	if ( ! pFnApplyDye )
		pFnApplyDye = (UFunction*) UObject::GObjObjects()->Data[ 41153 ];

	ATgPawn_execApplyDye_Parms ApplyDye_Parms;
	ApplyDye_Parms.bResetDyeMIC = bResetDyeMIC;

	pFnApplyDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDye, &ApplyDye_Parms, NULL );

	pFnApplyDye->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SwapAttachedDeviceMaterials
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* NewMaterial                    ( CPF_Parm )
// unsigned long                  bIgnoreParams                  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SwapAttachedDeviceMaterials ( class UMaterialInstanceConstant* NewMaterial, unsigned long bIgnoreParams )
{
	static UFunction* pFnSwapAttachedDeviceMaterials = NULL;

	if ( ! pFnSwapAttachedDeviceMaterials )
		pFnSwapAttachedDeviceMaterials = (UFunction*) UObject::GObjObjects()->Data[ 41150 ];

	ATgPawn_execSwapAttachedDeviceMaterials_Parms SwapAttachedDeviceMaterials_Parms;
	SwapAttachedDeviceMaterials_Parms.NewMaterial = NewMaterial;
	SwapAttachedDeviceMaterials_Parms.bIgnoreParams = bIgnoreParams;

	pFnSwapAttachedDeviceMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapAttachedDeviceMaterials, &SwapAttachedDeviceMaterials_Parms, NULL );

	pFnSwapAttachedDeviceMaterials->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SwapSkinMaterials
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FFx_Material >  MaterialList                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreParams                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsFriendly                    ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SwapSkinMaterials ( TArray< struct FFx_Material > MaterialList, unsigned long bIgnoreParams, unsigned long bIsFriendly )
{
	static UFunction* pFnSwapSkinMaterials = NULL;

	if ( ! pFnSwapSkinMaterials )
		pFnSwapSkinMaterials = (UFunction*) UObject::GObjObjects()->Data[ 41145 ];

	ATgPawn_execSwapSkinMaterials_Parms SwapSkinMaterials_Parms;
	memcpy ( &SwapSkinMaterials_Parms.MaterialList, &MaterialList, 0xC );
	SwapSkinMaterials_Parms.bIgnoreParams = bIgnoreParams;
	SwapSkinMaterials_Parms.bIsFriendly = bIsFriendly;

	pFnSwapSkinMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapSkinMaterials, &SwapSkinMaterials_Parms, NULL );

	pFnSwapSkinMaterials->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetSkin
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgSpecialFx*            NewSpecialFx                   ( CPF_Parm )
// unsigned long                  bIgnoreParams                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSetSkin                  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SetSkin ( class UTgSpecialFx* NewSpecialFx, unsigned long bIgnoreParams, unsigned long bForceSetSkin )
{
	static UFunction* pFnSetSkin = NULL;

	if ( ! pFnSetSkin )
		pFnSetSkin = (UFunction*) UObject::GObjObjects()->Data[ 41082 ];

	ATgPawn_execSetSkin_Parms SetSkin_Parms;
	SetSkin_Parms.NewSpecialFx = NewSpecialFx;
	SetSkin_Parms.bIgnoreParams = bIgnoreParams;
	SetSkin_Parms.bForceSetSkin = bForceSetSkin;

	pFnSetSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkin, &SetSkin_Parms, NULL );

	pFnSetSkin->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsHenchman
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsHenchman ( )
{
	static UFunction* pFnIsHenchman = NULL;

	if ( ! pFnIsHenchman )
		pFnIsHenchman = (UFunction*) UObject::GObjObjects()->Data[ 41080 ];

	ATgPawn_execIsHenchman_Parms IsHenchman_Parms;

	pFnIsHenchman->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHenchman, &IsHenchman_Parms, NULL );

	pFnIsHenchman->FunctionFlags |= 0x400;

	return IsHenchman_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsStealthActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsStealthActive ( )
{
	static UFunction* pFnIsStealthActive = NULL;

	if ( ! pFnIsStealthActive )
		pFnIsStealthActive = (UFunction*) UObject::GObjObjects()->Data[ 41078 ];

	ATgPawn_execIsStealthActive_Parms IsStealthActive_Parms;

	pFnIsStealthActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStealthActive, &IsStealthActive_Parms, NULL );

	pFnIsStealthActive->FunctionFlags |= 0x400;

	return IsStealthActive_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsStealthed ( )
{
	static UFunction* pFnIsStealthed = NULL;

	if ( ! pFnIsStealthed )
		pFnIsStealthed = (UFunction*) UObject::GObjObjects()->Data[ 41076 ];

	ATgPawn_execIsStealthed_Parms IsStealthed_Parms;

	pFnIsStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStealthed, &IsStealthed_Parms, NULL );

	pFnIsStealthed->FunctionFlags |= 0x400;

	return IsStealthed_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetDeviceByInstanceId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDeviceInstanceId              ( CPF_Parm )

class ATgDevice* ATgPawn::GetDeviceByInstanceId ( int nDeviceInstanceId )
{
	static UFunction* pFnGetDeviceByInstanceId = NULL;

	if ( ! pFnGetDeviceByInstanceId )
		pFnGetDeviceByInstanceId = (UFunction*) UObject::GObjObjects()->Data[ 41073 ];

	ATgPawn_execGetDeviceByInstanceId_Parms GetDeviceByInstanceId_Parms;
	GetDeviceByInstanceId_Parms.nDeviceInstanceId = nDeviceInstanceId;

	pFnGetDeviceByInstanceId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceByInstanceId, &GetDeviceByInstanceId_Parms, NULL );

	pFnGetDeviceByInstanceId->FunctionFlags |= 0x400;

	return GetDeviceByInstanceId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetDeviceNameByID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            DeviceID                       ( CPF_Parm )

struct FString ATgPawn::GetDeviceNameByID ( int DeviceID )
{
	static UFunction* pFnGetDeviceNameByID = NULL;

	if ( ! pFnGetDeviceNameByID )
		pFnGetDeviceNameByID = (UFunction*) UObject::GObjObjects()->Data[ 41070 ];

	ATgPawn_execGetDeviceNameByID_Parms GetDeviceNameByID_Parms;
	GetDeviceNameByID_Parms.DeviceID = DeviceID;

	pFnGetDeviceNameByID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceNameByID, &GetDeviceNameByID_Parms, NULL );

	pFnGetDeviceNameByID->FunctionFlags |= 0x400;

	return GetDeviceNameByID_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ManageFirstPerson
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ManageFirstPerson ( )
{
	static UFunction* pFnManageFirstPerson = NULL;

	if ( ! pFnManageFirstPerson )
		pFnManageFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 41069 ];

	ATgPawn_execManageFirstPerson_Parms ManageFirstPerson_Parms;

	pFnManageFirstPerson->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnManageFirstPerson, &ManageFirstPerson_Parms, NULL );

	pFnManageFirstPerson->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.OnPawnDied
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::OnPawnDied ( )
{
	static UFunction* pFnOnPawnDied = NULL;

	if ( ! pFnOnPawnDied )
		pFnOnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 41067 ];

	ATgPawn_execOnPawnDied_Parms OnPawnDied_Parms;

	pFnOnPawnDied->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPawnDied, &OnPawnDied_Parms, NULL );

	pFnOnPawnDied->FunctionFlags |= 0x400;

	return OnPawnDied_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyAnyPushback
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn::ApplyAnyPushback ( float DeltaTime )
{
	static UFunction* pFnApplyAnyPushback = NULL;

	if ( ! pFnApplyAnyPushback )
		pFnApplyAnyPushback = (UFunction*) UObject::GObjObjects()->Data[ 41065 ];

	ATgPawn_execApplyAnyPushback_Parms ApplyAnyPushback_Parms;
	ApplyAnyPushback_Parms.DeltaTime = DeltaTime;

	pFnApplyAnyPushback->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyAnyPushback, &ApplyAnyPushback_Parms, NULL );

	pFnApplyAnyPushback->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.Pushback
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Distance                       ( CPF_Parm )

bool ATgPawn::Pushback ( struct FVector Distance )
{
	static UFunction* pFnPushback = NULL;

	if ( ! pFnPushback )
		pFnPushback = (UFunction*) UObject::GObjObjects()->Data[ 41062 ];

	ATgPawn_execPushback_Parms Pushback_Parms;
	memcpy ( &Pushback_Parms.Distance, &Distance, 0xC );

	pFnPushback->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushback, &Pushback_Parms, NULL );

	pFnPushback->FunctionFlags |= 0x400;

	return Pushback_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PlaySpawnFadeOutFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::PlaySpawnFadeOutFx ( )
{
	static UFunction* pFnPlaySpawnFadeOutFx = NULL;

	if ( ! pFnPlaySpawnFadeOutFx )
		pFnPlaySpawnFadeOutFx = (UFunction*) UObject::GObjObjects()->Data[ 41061 ];

	ATgPawn_execPlaySpawnFadeOutFx_Parms PlaySpawnFadeOutFx_Parms;

	pFnPlaySpawnFadeOutFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySpawnFadeOutFx, &PlaySpawnFadeOutFx_Parms, NULL );

	pFnPlaySpawnFadeOutFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayTeleportFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTeleportState                 ( CPF_Parm )
// struct FVector                 vLoc                           ( CPF_Parm )

void ATgPawn::PlayTeleportFx ( int nTeleportState, struct FVector vLoc )
{
	static UFunction* pFnPlayTeleportFx = NULL;

	if ( ! pFnPlayTeleportFx )
		pFnPlayTeleportFx = (UFunction*) UObject::GObjObjects()->Data[ 41058 ];

	ATgPawn_execPlayTeleportFx_Parms PlayTeleportFx_Parms;
	PlayTeleportFx_Parms.nTeleportState = nTeleportState;
	memcpy ( &PlayTeleportFx_Parms.vLoc, &vLoc, 0xC );

	pFnPlayTeleportFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayTeleportFx, &PlayTeleportFx_Parms, NULL );

	pFnPlayTeleportFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetImpactFxGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgImpactFx*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ImpactGroupID                  ( CPF_Parm )

class UTgImpactFx* ATgPawn::GetImpactFxGroup ( int ImpactGroupID )
{
	static UFunction* pFnGetImpactFxGroup = NULL;

	if ( ! pFnGetImpactFxGroup )
		pFnGetImpactFxGroup = (UFunction*) UObject::GObjObjects()->Data[ 41055 ];

	ATgPawn_execGetImpactFxGroup_Parms GetImpactFxGroup_Parms;
	GetImpactFxGroup_Parms.ImpactGroupID = ImpactGroupID;

	pFnGetImpactFxGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactFxGroup, &GetImpactFxGroup_Parms, NULL );

	pFnGetImpactFxGroup->FunctionFlags |= 0x400;

	return GetImpactFxGroup_Parms.ReturnValue;
};

// Function TgGame.TgPawn.TickMakeVisibleCalculation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn::TickMakeVisibleCalculation ( float DeltaSeconds )
{
	static UFunction* pFnTickMakeVisibleCalculation = NULL;

	if ( ! pFnTickMakeVisibleCalculation )
		pFnTickMakeVisibleCalculation = (UFunction*) UObject::GObjObjects()->Data[ 41053 ];

	ATgPawn_execTickMakeVisibleCalculation_Parms TickMakeVisibleCalculation_Parms;
	TickMakeVisibleCalculation_Parms.DeltaSeconds = DeltaSeconds;

	pFnTickMakeVisibleCalculation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickMakeVisibleCalculation, &TickMakeVisibleCalculation_Parms, NULL );

	pFnTickMakeVisibleCalculation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ShouldUpdateStealthedFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 ViewerPawn                     ( CPF_Parm )

bool ATgPawn::ShouldUpdateStealthedFor ( class ATgPawn* ViewerPawn )
{
	static UFunction* pFnShouldUpdateStealthedFor = NULL;

	if ( ! pFnShouldUpdateStealthedFor )
		pFnShouldUpdateStealthedFor = (UFunction*) UObject::GObjObjects()->Data[ 41050 ];

	ATgPawn_execShouldUpdateStealthedFor_Parms ShouldUpdateStealthedFor_Parms;
	ShouldUpdateStealthedFor_Parms.ViewerPawn = ViewerPawn;

	pFnShouldUpdateStealthedFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldUpdateStealthedFor, &ShouldUpdateStealthedFor_Parms, NULL );

	pFnShouldUpdateStealthedFor->FunctionFlags |= 0x400;

	return ShouldUpdateStealthedFor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = (UFunction*) UObject::GObjObjects()->Data[ 41048 ];

	ATgPawn_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;

	return GetTerminalVelocity_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetMeshIdFromFlairId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nItemId                        ( CPF_Parm )

int ATgPawn::GetMeshIdFromFlairId ( int nItemId )
{
	static UFunction* pFnGetMeshIdFromFlairId = NULL;

	if ( ! pFnGetMeshIdFromFlairId )
		pFnGetMeshIdFromFlairId = (UFunction*) UObject::GObjObjects()->Data[ 41045 ];

	ATgPawn_execGetMeshIdFromFlairId_Parms GetMeshIdFromFlairId_Parms;
	GetMeshIdFromFlairId_Parms.nItemId = nItemId;

	pFnGetMeshIdFromFlairId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMeshIdFromFlairId, &GetMeshIdFromFlairId_Parms, NULL );

	pFnGetMeshIdFromFlairId->FunctionFlags |= 0x400;

	return GetMeshIdFromFlairId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyFlair
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sFlairName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::ApplyFlair ( struct FString sFlairName )
{
	static UFunction* pFnApplyFlair = NULL;

	if ( ! pFnApplyFlair )
		pFnApplyFlair = (UFunction*) UObject::GObjObjects()->Data[ 41043 ];

	ATgPawn_execApplyFlair_Parms ApplyFlair_Parms;
	memcpy ( &ApplyFlair_Parms.sFlairName, &sFlairName, 0xC );

	pFnApplyFlair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyFlair, &ApplyFlair_Parms, NULL );

	pFnApplyFlair->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 41041 ];

	ATgPawn_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CanBeAffectedByVortices
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::CanBeAffectedByVortices ( )
{
	static UFunction* pFnCanBeAffectedByVortices = NULL;

	if ( ! pFnCanBeAffectedByVortices )
		pFnCanBeAffectedByVortices = (UFunction*) UObject::GObjObjects()->Data[ 41039 ];

	ATgPawn_execCanBeAffectedByVortices_Parms CanBeAffectedByVortices_Parms;

	pFnCanBeAffectedByVortices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBeAffectedByVortices, &CanBeAffectedByVortices_Parms, NULL );

	pFnCanBeAffectedByVortices->FunctionFlags |= 0x400;

	return CanBeAffectedByVortices_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 41037 ];

	ATgPawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldInHandDeviceBeHiddenThisTick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ShouldInHandDeviceBeHiddenThisTick ( )
{
	static UFunction* pFnShouldInHandDeviceBeHiddenThisTick = NULL;

	if ( ! pFnShouldInHandDeviceBeHiddenThisTick )
		pFnShouldInHandDeviceBeHiddenThisTick = (UFunction*) UObject::GObjObjects()->Data[ 41035 ];

	ATgPawn_execShouldInHandDeviceBeHiddenThisTick_Parms ShouldInHandDeviceBeHiddenThisTick_Parms;

	pFnShouldInHandDeviceBeHiddenThisTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldInHandDeviceBeHiddenThisTick, &ShouldInHandDeviceBeHiddenThisTick_Parms, NULL );

	pFnShouldInHandDeviceBeHiddenThisTick->FunctionFlags |= 0x400;

	return ShouldInHandDeviceBeHiddenThisTick_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ShouldPawnMeshBeHiddenThisTick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ShouldPawnMeshBeHiddenThisTick ( )
{
	static UFunction* pFnShouldPawnMeshBeHiddenThisTick = NULL;

	if ( ! pFnShouldPawnMeshBeHiddenThisTick )
		pFnShouldPawnMeshBeHiddenThisTick = (UFunction*) UObject::GObjObjects()->Data[ 41033 ];

	ATgPawn_execShouldPawnMeshBeHiddenThisTick_Parms ShouldPawnMeshBeHiddenThisTick_Parms;

	pFnShouldPawnMeshBeHiddenThisTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldPawnMeshBeHiddenThisTick, &ShouldPawnMeshBeHiddenThisTick_Parms, NULL );

	pFnShouldPawnMeshBeHiddenThisTick->FunctionFlags |= 0x400;

	return ShouldPawnMeshBeHiddenThisTick_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetFont
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nResId                         ( CPF_Parm )

class UFont* ATgPawn::GetFont ( int nResId )
{
	static UFunction* pFnGetFont = NULL;

	if ( ! pFnGetFont )
		pFnGetFont = (UFunction*) UObject::GObjObjects()->Data[ 41030 ];

	ATgPawn_execGetFont_Parms GetFont_Parms;
	GetFont_Parms.nResId = nResId;

	pFnGetFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFont, &GetFont_Parms, NULL );

	pFnGetFont->FunctionFlags |= 0x400;

	return GetFont_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetMIC
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nResId                         ( CPF_Parm )

class UMaterialInstanceConstant* ATgPawn::GetMIC ( int nResId )
{
	static UFunction* pFnGetMIC = NULL;

	if ( ! pFnGetMIC )
		pFnGetMIC = (UFunction*) UObject::GObjObjects()->Data[ 41027 ];

	ATgPawn_execGetMIC_Parms GetMIC_Parms;
	GetMIC_Parms.nResId = nResId;

	pFnGetMIC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMIC, &GetMIC_Parms, NULL );

	pFnGetMIC->FunctionFlags |= 0x400;

	return GetMIC_Parms.ReturnValue;
};

// Function TgGame.TgPawn.PlaySoundCue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSoundCueId                    ( CPF_Parm )

void ATgPawn::PlaySoundCue ( int nSoundCueId )
{
	static UFunction* pFnPlaySoundCue = NULL;

	if ( ! pFnPlaySoundCue )
		pFnPlaySoundCue = (UFunction*) UObject::GObjObjects()->Data[ 41025 ];

	ATgPawn_execPlaySoundCue_Parms PlaySoundCue_Parms;
	PlaySoundCue_Parms.nSoundCueId = nSoundCueId;

	pFnPlaySoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundCue, &PlaySoundCue_Parms, NULL );

	pFnPlaySoundCue->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SensorAlertSound
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bPlay                          ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::SensorAlertSound ( unsigned long bPlay )
{
	static UFunction* pFnSensorAlertSound = NULL;

	if ( ! pFnSensorAlertSound )
		pFnSensorAlertSound = (UFunction*) UObject::GObjObjects()->Data[ 41023 ];

	ATgPawn_execSensorAlertSound_Parms SensorAlertSound_Parms;
	SensorAlertSound_Parms.bPlay = bPlay;

	pFnSensorAlertSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSensorAlertSound, &SensorAlertSound_Parms, NULL );

	pFnSensorAlertSound->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.NativeSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sCommand                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn::NativeSet ( struct FString sCommand )
{
	static UFunction* pFnNativeSet = NULL;

	if ( ! pFnNativeSet )
		pFnNativeSet = (UFunction*) UObject::GObjObjects()->Data[ 41021 ];

	ATgPawn_execNativeSet_Parms NativeSet_Parms;
	memcpy ( &NativeSet_Parms.sCommand, &sCommand, 0xC );

	pFnNativeSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeSet, &NativeSet_Parms, NULL );

	pFnNativeSet->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CheckUseQuestCredit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::CheckUseQuestCredit ( )
{
	static UFunction* pFnCheckUseQuestCredit = NULL;

	if ( ! pFnCheckUseQuestCredit )
		pFnCheckUseQuestCredit = (UFunction*) UObject::GObjObjects()->Data[ 41020 ];

	ATgPawn_execCheckUseQuestCredit_Parms CheckUseQuestCredit_Parms;

	pFnCheckUseQuestCredit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUseQuestCredit, &CheckUseQuestCredit_Parms, NULL );

	pFnCheckUseQuestCredit->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CheckKillQuestCredit
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void ATgPawn::CheckKillQuestCredit ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnCheckKillQuestCredit = NULL;

	if ( ! pFnCheckKillQuestCredit )
		pFnCheckKillQuestCredit = (UFunction*) UObject::GObjObjects()->Data[ 41018 ];

	ATgPawn_execCheckKillQuestCredit_Parms CheckKillQuestCredit_Parms;
	CheckKillQuestCredit_Parms.tf = tf;

	pFnCheckKillQuestCredit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckKillQuestCredit, &CheckKillQuestCredit_Parms, NULL );

	pFnCheckKillQuestCredit->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SpawnLoot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void ATgPawn::SpawnLoot ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnSpawnLoot = NULL;

	if ( ! pFnSpawnLoot )
		pFnSpawnLoot = (UFunction*) UObject::GObjObjects()->Data[ 41016 ];

	ATgPawn_execSpawnLoot_Parms SpawnLoot_Parms;
	SpawnLoot_Parms.tf = tf;

	pFnSpawnLoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnLoot, &SpawnLoot_Parms, NULL );

	pFnSpawnLoot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GiveKillXp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void ATgPawn::GiveKillXp ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnGiveKillXp = NULL;

	if ( ! pFnGiveKillXp )
		pFnGiveKillXp = (UFunction*) UObject::GObjObjects()->Data[ 41014 ];

	ATgPawn_execGiveKillXp_Parms GiveKillXp_Parms;
	GiveKillXp_Parms.tf = tf;

	pFnGiveKillXp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGiveKillXp, &GiveKillXp_Parms, NULL );

	pFnGiveKillXp->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DoGenericAIEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            NewActionIndex                 ( CPF_Parm )

void ATgPawn::DoGenericAIEvent ( int NewActionIndex )
{
	static UFunction* pFnDoGenericAIEvent = NULL;

	if ( ! pFnDoGenericAIEvent )
		pFnDoGenericAIEvent = (UFunction*) UObject::GObjObjects()->Data[ 41012 ];

	ATgPawn_execDoGenericAIEvent_Parms DoGenericAIEvent_Parms;
	DoGenericAIEvent_Parms.NewActionIndex = NewActionIndex;

	pFnDoGenericAIEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoGenericAIEvent, &DoGenericAIEvent_Parms, NULL );

	pFnDoGenericAIEvent->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetPhase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nNewPhase                      ( CPF_Parm )

void ATgPawn::SetPhase ( int nNewPhase )
{
	static UFunction* pFnSetPhase = NULL;

	if ( ! pFnSetPhase )
		pFnSetPhase = (UFunction*) UObject::GObjObjects()->Data[ 41010 ];

	ATgPawn_execSetPhase_Parms SetPhase_Parms;
	SetPhase_Parms.nNewPhase = nNewPhase;

	pFnSetPhase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhase, &SetPhase_Parms, NULL );

	pFnSetPhase->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateHUDScores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::UpdateHUDScores ( )
{
	static UFunction* pFnUpdateHUDScores = NULL;

	if ( ! pFnUpdateHUDScores )
		pFnUpdateHUDScores = (UFunction*) UObject::GObjObjects()->Data[ 41009 ];

	ATgPawn_execUpdateHUDScores_Parms UpdateHUDScores_Parms;

	pFnUpdateHUDScores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHUDScores, &UpdateHUDScores_Parms, NULL );

	pFnUpdateHUDScores->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TrackDeath ( )
{
	static UFunction* pFnTrackDeath = NULL;

	if ( ! pFnTrackDeath )
		pFnTrackDeath = (UFunction*) UObject::GObjObjects()->Data[ 41008 ];

	ATgPawn_execTrackDeath_Parms TrackDeath_Parms;

	pFnTrackDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackDeath, &TrackDeath_Parms, NULL );

	pFnTrackDeath->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackKill
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Killer                         ( CPF_Parm )

void ATgPawn::TrackKill ( class ATgPawn* Killer )
{
	static UFunction* pFnTrackKill = NULL;

	if ( ! pFnTrackKill )
		pFnTrackKill = (UFunction*) UObject::GObjObjects()->Data[ 41006 ];

	ATgPawn_execTrackKill_Parms TrackKill_Parms;
	TrackKill_Parms.Killer = Killer;

	pFnTrackKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackKill, &TrackKill_Parms, NULL );

	pFnTrackKill->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateDebuffer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Debuffer                       ( CPF_Parm )

void ATgPawn::UpdateDebuffer ( class ATgPawn* Debuffer )
{
	static UFunction* pFnUpdateDebuffer = NULL;

	if ( ! pFnUpdateDebuffer )
		pFnUpdateDebuffer = (UFunction*) UObject::GObjObjects()->Data[ 41004 ];

	ATgPawn_execUpdateDebuffer_Parms UpdateDebuffer_Parms;
	UpdateDebuffer_Parms.Debuffer = Debuffer;

	pFnUpdateDebuffer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDebuffer, &UpdateDebuffer_Parms, NULL );

	pFnUpdateDebuffer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateBuffer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Buffer                         ( CPF_Parm )

void ATgPawn::UpdateBuffer ( class ATgPawn* Buffer )
{
	static UFunction* pFnUpdateBuffer = NULL;

	if ( ! pFnUpdateBuffer )
		pFnUpdateBuffer = (UFunction*) UObject::GObjObjects()->Data[ 41002 ];

	ATgPawn_execUpdateBuffer_Parms UpdateBuffer_Parms;
	UpdateBuffer_Parms.Buffer = Buffer;

	pFnUpdateBuffer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBuffer, &UpdateBuffer_Parms, NULL );

	pFnUpdateBuffer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateHealer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Healer                         ( CPF_Parm )

void ATgPawn::UpdateHealer ( class ATgPawn* Healer )
{
	static UFunction* pFnUpdateHealer = NULL;

	if ( ! pFnUpdateHealer )
		pFnUpdateHealer = (UFunction*) UObject::GObjObjects()->Data[ 41000 ];

	ATgPawn_execUpdateHealer_Parms UpdateHealer_Parms;
	UpdateHealer_Parms.Healer = Healer;

	pFnUpdateHealer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHealer, &UpdateHealer_Parms, NULL );

	pFnUpdateHealer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateDamagers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Damager                        ( CPF_Parm )

void ATgPawn::UpdateDamagers ( class ATgPawn* Damager )
{
	static UFunction* pFnUpdateDamagers = NULL;

	if ( ! pFnUpdateDamagers )
		pFnUpdateDamagers = (UFunction*) UObject::GObjObjects()->Data[ 40998 ];

	ATgPawn_execUpdateDamagers_Parms UpdateDamagers_Parms;
	UpdateDamagers_Parms.Damager = Damager;

	pFnUpdateDamagers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDamagers, &UpdateDamagers_Parms, NULL );

	pFnUpdateDamagers->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackBoost
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TrackBoost ( )
{
	static UFunction* pFnTrackBoost = NULL;

	if ( ! pFnTrackBoost )
		pFnTrackBoost = (UFunction*) UObject::GObjObjects()->Data[ 40997 ];

	ATgPawn_execTrackBoost_Parms TrackBoost_Parms;

	pFnTrackBoost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackBoost, &TrackBoost_Parms, NULL );

	pFnTrackBoost->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackMyBeaconUsed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::TrackMyBeaconUsed ( )
{
	static UFunction* pFnTrackMyBeaconUsed = NULL;

	if ( ! pFnTrackMyBeaconUsed )
		pFnTrackMyBeaconUsed = (UFunction*) UObject::GObjObjects()->Data[ 40996 ];

	ATgPawn_execTrackMyBeaconUsed_Parms TrackMyBeaconUsed_Parms;

	pFnTrackMyBeaconUsed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackMyBeaconUsed, &TrackMyBeaconUsed_Parms, NULL );

	pFnTrackMyBeaconUsed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackDamageTaken
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackDamageTaken ( int nDamage )
{
	static UFunction* pFnTrackDamageTaken = NULL;

	if ( ! pFnTrackDamageTaken )
		pFnTrackDamageTaken = (UFunction*) UObject::GObjObjects()->Data[ 40994 ];

	ATgPawn_execTrackDamageTaken_Parms TrackDamageTaken_Parms;
	TrackDamageTaken_Parms.nDamage = nDamage;

	pFnTrackDamageTaken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackDamageTaken, &TrackDamageTaken_Parms, NULL );

	pFnTrackDamageTaken->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackSelfKill
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackSelfKill ( int nDeviceModeID )
{
	static UFunction* pFnTrackSelfKill = NULL;

	if ( ! pFnTrackSelfKill )
		pFnTrackSelfKill = (UFunction*) UObject::GObjObjects()->Data[ 40992 ];

	ATgPawn_execTrackSelfKill_Parms TrackSelfKill_Parms;
	TrackSelfKill_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackSelfKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackSelfKill, &TrackSelfKill_Parms, NULL );

	pFnTrackSelfKill->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackTeamKill
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackTeamKill ( int nDeviceModeID )
{
	static UFunction* pFnTrackTeamKill = NULL;

	if ( ! pFnTrackTeamKill )
		pFnTrackTeamKill = (UFunction*) UObject::GObjObjects()->Data[ 40990 ];

	ATgPawn_execTrackTeamKill_Parms TrackTeamKill_Parms;
	TrackTeamKill_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackTeamKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackTeamKill, &TrackTeamKill_Parms, NULL );

	pFnTrackTeamKill->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackSelfDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackSelfDamage ( int nDeviceModeID, int nDamage )
{
	static UFunction* pFnTrackSelfDamage = NULL;

	if ( ! pFnTrackSelfDamage )
		pFnTrackSelfDamage = (UFunction*) UObject::GObjObjects()->Data[ 40987 ];

	ATgPawn_execTrackSelfDamage_Parms TrackSelfDamage_Parms;
	TrackSelfDamage_Parms.nDeviceModeID = nDeviceModeID;
	TrackSelfDamage_Parms.nDamage = nDamage;

	pFnTrackSelfDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackSelfDamage, &TrackSelfDamage_Parms, NULL );

	pFnTrackSelfDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackTeamDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackTeamDamage ( int nDeviceModeID, int nDamage )
{
	static UFunction* pFnTrackTeamDamage = NULL;

	if ( ! pFnTrackTeamDamage )
		pFnTrackTeamDamage = (UFunction*) UObject::GObjObjects()->Data[ 40984 ];

	ATgPawn_execTrackTeamDamage_Parms TrackTeamDamage_Parms;
	TrackTeamDamage_Parms.nDeviceModeID = nDeviceModeID;
	TrackTeamDamage_Parms.nDamage = nDamage;

	pFnTrackTeamDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackTeamDamage, &TrackTeamDamage_Parms, NULL );

	pFnTrackTeamDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackReleaseTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// float                          fReleaseTime                   ( CPF_Parm )

void ATgPawn::TrackReleaseTime ( int nDeviceModeID, float fReleaseTime )
{
	static UFunction* pFnTrackReleaseTime = NULL;

	if ( ! pFnTrackReleaseTime )
		pFnTrackReleaseTime = (UFunction*) UObject::GObjObjects()->Data[ 40981 ];

	ATgPawn_execTrackReleaseTime_Parms TrackReleaseTime_Parms;
	TrackReleaseTime_Parms.nDeviceModeID = nDeviceModeID;
	TrackReleaseTime_Parms.fReleaseTime = fReleaseTime;

	pFnTrackReleaseTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackReleaseTime, &TrackReleaseTime_Parms, NULL );

	pFnTrackReleaseTime->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackBuff
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void ATgPawn::TrackBuff ( int nDeviceModeID, float fValue )
{
	static UFunction* pFnTrackBuff = NULL;

	if ( ! pFnTrackBuff )
		pFnTrackBuff = (UFunction*) UObject::GObjObjects()->Data[ 40978 ];

	ATgPawn_execTrackBuff_Parms TrackBuff_Parms;
	TrackBuff_Parms.nDeviceModeID = nDeviceModeID;
	TrackBuff_Parms.fValue = fValue;

	pFnTrackBuff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackBuff, &TrackBuff_Parms, NULL );

	pFnTrackBuff->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackHit
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// float                          fDistance                      ( CPF_Parm )
// unsigned long                  bHitPlayer                     ( CPF_Parm )

void ATgPawn::TrackHit ( int nDeviceModeID, float fDistance, unsigned long bHitPlayer )
{
	static UFunction* pFnTrackHit = NULL;

	if ( ! pFnTrackHit )
		pFnTrackHit = (UFunction*) UObject::GObjObjects()->Data[ 40974 ];

	ATgPawn_execTrackHit_Parms TrackHit_Parms;
	TrackHit_Parms.nDeviceModeID = nDeviceModeID;
	TrackHit_Parms.fDistance = fDistance;
	TrackHit_Parms.bHitPlayer = bHitPlayer;

	pFnTrackHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackHit, &TrackHit_Parms, NULL );

	pFnTrackHit->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RemoveTrackFired
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::RemoveTrackFired ( int nDeviceModeID )
{
	static UFunction* pFnRemoveTrackFired = NULL;

	if ( ! pFnRemoveTrackFired )
		pFnRemoveTrackFired = (UFunction*) UObject::GObjObjects()->Data[ 40972 ];

	ATgPawn_execRemoveTrackFired_Parms RemoveTrackFired_Parms;
	RemoveTrackFired_Parms.nDeviceModeID = nDeviceModeID;

	pFnRemoveTrackFired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTrackFired, &RemoveTrackFired_Parms, NULL );

	pFnRemoveTrackFired->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackCompleteKillInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nKillerCharacterID             ( CPF_Parm )
// int                            nKillerDeviceModeID            ( CPF_Parm )
// int                            nVictimCharacterID             ( CPF_Parm )
// int                            nVictimDeviceModeID            ( CPF_Parm )
// struct FVector                 KillerLocation                 ( CPF_Parm )
// struct FVector                 VictimLocation                 ( CPF_Parm )
// struct FVector                 PetLocation                    ( CPF_Parm )
// unsigned long                  bPetKill                       ( CPF_Parm )

void ATgPawn::TrackCompleteKillInfo ( int nKillerCharacterID, int nKillerDeviceModeID, int nVictimCharacterID, int nVictimDeviceModeID, struct FVector KillerLocation, struct FVector VictimLocation, struct FVector PetLocation, unsigned long bPetKill )
{
	static UFunction* pFnTrackCompleteKillInfo = NULL;

	if ( ! pFnTrackCompleteKillInfo )
		pFnTrackCompleteKillInfo = (UFunction*) UObject::GObjObjects()->Data[ 40963 ];

	ATgPawn_execTrackCompleteKillInfo_Parms TrackCompleteKillInfo_Parms;
	TrackCompleteKillInfo_Parms.nKillerCharacterID = nKillerCharacterID;
	TrackCompleteKillInfo_Parms.nKillerDeviceModeID = nKillerDeviceModeID;
	TrackCompleteKillInfo_Parms.nVictimCharacterID = nVictimCharacterID;
	TrackCompleteKillInfo_Parms.nVictimDeviceModeID = nVictimDeviceModeID;
	memcpy ( &TrackCompleteKillInfo_Parms.KillerLocation, &KillerLocation, 0xC );
	memcpy ( &TrackCompleteKillInfo_Parms.VictimLocation, &VictimLocation, 0xC );
	memcpy ( &TrackCompleteKillInfo_Parms.PetLocation, &PetLocation, 0xC );
	TrackCompleteKillInfo_Parms.bPetKill = bPetKill;

	pFnTrackCompleteKillInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackCompleteKillInfo, &TrackCompleteKillInfo_Parms, NULL );

	pFnTrackCompleteKillInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackFired
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackFired ( int nDeviceModeID )
{
	static UFunction* pFnTrackFired = NULL;

	if ( ! pFnTrackFired )
		pFnTrackFired = (UFunction*) UObject::GObjObjects()->Data[ 40961 ];

	ATgPawn_execTrackFired_Parms TrackFired_Parms;
	TrackFired_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackFired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackFired, &TrackFired_Parms, NULL );

	pFnTrackFired->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackObjectivePointsByProgress
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ATgPawn::TrackObjectivePointsByProgress ( int nPoints )
{
	static UFunction* pFnTrackObjectivePointsByProgress = NULL;

	if ( ! pFnTrackObjectivePointsByProgress )
		pFnTrackObjectivePointsByProgress = (UFunction*) UObject::GObjObjects()->Data[ 40959 ];

	ATgPawn_execTrackObjectivePointsByProgress_Parms TrackObjectivePointsByProgress_Parms;
	TrackObjectivePointsByProgress_Parms.nPoints = nPoints;

	pFnTrackObjectivePointsByProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackObjectivePointsByProgress, &TrackObjectivePointsByProgress_Parms, NULL );

	pFnTrackObjectivePointsByProgress->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackObjectivePoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ATgPawn::TrackObjectivePoints ( int nPoints )
{
	static UFunction* pFnTrackObjectivePoints = NULL;

	if ( ! pFnTrackObjectivePoints )
		pFnTrackObjectivePoints = (UFunction*) UObject::GObjObjects()->Data[ 40957 ];

	ATgPawn_execTrackObjectivePoints_Parms TrackObjectivePoints_Parms;
	TrackObjectivePoints_Parms.nPoints = nPoints;

	pFnTrackObjectivePoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackObjectivePoints, &TrackObjectivePoints_Parms, NULL );

	pFnTrackObjectivePoints->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackEscortObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgPawn::TrackEscortObjective ( float fDeltaTime )
{
	static UFunction* pFnTrackEscortObjective = NULL;

	if ( ! pFnTrackEscortObjective )
		pFnTrackEscortObjective = (UFunction*) UObject::GObjObjects()->Data[ 40955 ];

	ATgPawn_execTrackEscortObjective_Parms TrackEscortObjective_Parms;
	TrackEscortObjective_Parms.fDeltaTime = fDeltaTime;

	pFnTrackEscortObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackEscortObjective, &TrackEscortObjective_Parms, NULL );

	pFnTrackEscortObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void ATgPawn::TrackObjective ( float fDeltaTime )
{
	static UFunction* pFnTrackObjective = NULL;

	if ( ! pFnTrackObjective )
		pFnTrackObjective = (UFunction*) UObject::GObjObjects()->Data[ 40953 ];

	ATgPawn_execTrackObjective_Parms TrackObjective_Parms;
	TrackObjective_Parms.fDeltaTime = fDeltaTime;

	pFnTrackObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackObjective, &TrackObjective_Parms, NULL );

	pFnTrackObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackDefense
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackDefense ( int nDeviceModeID, int nDamage )
{
	static UFunction* pFnTrackDefense = NULL;

	if ( ! pFnTrackDefense )
		pFnTrackDefense = (UFunction*) UObject::GObjObjects()->Data[ 40950 ];

	ATgPawn_execTrackDefense_Parms TrackDefense_Parms;
	TrackDefense_Parms.nDeviceModeID = nDeviceModeID;
	TrackDefense_Parms.nDamage = nDamage;

	pFnTrackDefense->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackDefense, &TrackDefense_Parms, NULL );

	pFnTrackDefense->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackBotHealing
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// float                          fMissingHealth                 ( CPF_Parm )
// int                            nMaxHealth                     ( CPF_Parm )

void ATgPawn::TrackBotHealing ( int nDeviceModeID, float fDamage, float fMissingHealth, int nMaxHealth )
{
	static UFunction* pFnTrackBotHealing = NULL;

	if ( ! pFnTrackBotHealing )
		pFnTrackBotHealing = (UFunction*) UObject::GObjObjects()->Data[ 40945 ];

	ATgPawn_execTrackBotHealing_Parms TrackBotHealing_Parms;
	TrackBotHealing_Parms.nDeviceModeID = nDeviceModeID;
	TrackBotHealing_Parms.fDamage = fDamage;
	TrackBotHealing_Parms.fMissingHealth = fMissingHealth;
	TrackBotHealing_Parms.nMaxHealth = nMaxHealth;

	pFnTrackBotHealing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackBotHealing, &TrackBotHealing_Parms, NULL );

	pFnTrackBotHealing->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackHealing
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// float                          fMissingHealth                 ( CPF_Parm )
// int                            nMaxHealth                     ( CPF_Parm )

void ATgPawn::TrackHealing ( int nDeviceModeID, float fDamage, float fMissingHealth, int nMaxHealth )
{
	static UFunction* pFnTrackHealing = NULL;

	if ( ! pFnTrackHealing )
		pFnTrackHealing = (UFunction*) UObject::GObjObjects()->Data[ 40940 ];

	ATgPawn_execTrackHealing_Parms TrackHealing_Parms;
	TrackHealing_Parms.nDeviceModeID = nDeviceModeID;
	TrackHealing_Parms.fDamage = fDamage;
	TrackHealing_Parms.fMissingHealth = fMissingHealth;
	TrackHealing_Parms.nMaxHealth = nMaxHealth;

	pFnTrackHealing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackHealing, &TrackHealing_Parms, NULL );

	pFnTrackHealing->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackKilledBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackKilledBot ( int nDeviceModeID )
{
	static UFunction* pFnTrackKilledBot = NULL;

	if ( ! pFnTrackKilledBot )
		pFnTrackKilledBot = (UFunction*) UObject::GObjObjects()->Data[ 40938 ];

	ATgPawn_execTrackKilledBot_Parms TrackKilledBot_Parms;
	TrackKilledBot_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackKilledBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackKilledBot, &TrackKilledBot_Parms, NULL );

	pFnTrackKilledBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackFromPlayerDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackFromPlayerDeath ( int nDeviceModeID )
{
	static UFunction* pFnTrackFromPlayerDeath = NULL;

	if ( ! pFnTrackFromPlayerDeath )
		pFnTrackFromPlayerDeath = (UFunction*) UObject::GObjObjects()->Data[ 40936 ];

	ATgPawn_execTrackFromPlayerDeath_Parms TrackFromPlayerDeath_Parms;
	TrackFromPlayerDeath_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackFromPlayerDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackFromPlayerDeath, &TrackFromPlayerDeath_Parms, NULL );

	pFnTrackFromPlayerDeath->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackKilledPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceModeID                  ( CPF_Parm )

void ATgPawn::TrackKilledPlayer ( int nDeviceModeID )
{
	static UFunction* pFnTrackKilledPlayer = NULL;

	if ( ! pFnTrackKilledPlayer )
		pFnTrackKilledPlayer = (UFunction*) UObject::GObjObjects()->Data[ 40934 ];

	ATgPawn_execTrackKilledPlayer_Parms TrackKilledPlayer_Parms;
	TrackKilledPlayer_Parms.nDeviceModeID = nDeviceModeID;

	pFnTrackKilledPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackKilledPlayer, &TrackKilledPlayer_Parms, NULL );

	pFnTrackKilledPlayer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackDamagedBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )
// int                            nDeviceModeID                  ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackDamagedBot ( class ATgPawn* TargetPawn, int nDeviceModeID, int nDamage )
{
	static UFunction* pFnTrackDamagedBot = NULL;

	if ( ! pFnTrackDamagedBot )
		pFnTrackDamagedBot = (UFunction*) UObject::GObjObjects()->Data[ 40930 ];

	ATgPawn_execTrackDamagedBot_Parms TrackDamagedBot_Parms;
	TrackDamagedBot_Parms.TargetPawn = TargetPawn;
	TrackDamagedBot_Parms.nDeviceModeID = nDeviceModeID;
	TrackDamagedBot_Parms.nDamage = nDamage;

	pFnTrackDamagedBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackDamagedBot, &TrackDamagedBot_Parms, NULL );

	pFnTrackDamagedBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TrackDamagedPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )
// int                            nDeviceModeID                  ( CPF_Parm )
// int                            nDamage                        ( CPF_Parm )

void ATgPawn::TrackDamagedPlayer ( class ATgPawn* TargetPawn, int nDeviceModeID, int nDamage )
{
	static UFunction* pFnTrackDamagedPlayer = NULL;

	if ( ! pFnTrackDamagedPlayer )
		pFnTrackDamagedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 40926 ];

	ATgPawn_execTrackDamagedPlayer_Parms TrackDamagedPlayer_Parms;
	TrackDamagedPlayer_Parms.TargetPawn = TargetPawn;
	TrackDamagedPlayer_Parms.nDeviceModeID = nDeviceModeID;
	TrackDamagedPlayer_Parms.nDamage = nDamage;

	pFnTrackDamagedPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrackDamagedPlayer, &TrackDamagedPlayer_Parms, NULL );

	pFnTrackDamagedPlayer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.EndStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::EndStats ( )
{
	static UFunction* pFnEndStats = NULL;

	if ( ! pFnEndStats )
		pFnEndStats = (UFunction*) UObject::GObjObjects()->Data[ 40925 ];

	ATgPawn_execEndStats_Parms EndStats_Parms;

	pFnEndStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStats, &EndStats_Parms, NULL );

	pFnEndStats->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.BeginStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::BeginStats ( )
{
	static UFunction* pFnBeginStats = NULL;

	if ( ! pFnBeginStats )
		pFnBeginStats = (UFunction*) UObject::GObjObjects()->Data[ 40924 ];

	ATgPawn_execBeginStats_Parms BeginStats_Parms;

	pFnBeginStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginStats, &BeginStats_Parms, NULL );

	pFnBeginStats->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.StatsCleanup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::StatsCleanup ( )
{
	static UFunction* pFnStatsCleanup = NULL;

	if ( ! pFnStatsCleanup )
		pFnStatsCleanup = (UFunction*) UObject::GObjObjects()->Data[ 40923 ];

	ATgPawn_execStatsCleanup_Parms StatsCleanup_Parms;

	pFnStatsCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStatsCleanup, &StatsCleanup_Parms, NULL );

	pFnStatsCleanup->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ValidateStatsTracker
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ValidateStatsTracker ( )
{
	static UFunction* pFnValidateStatsTracker = NULL;

	if ( ! pFnValidateStatsTracker )
		pFnValidateStatsTracker = (UFunction*) UObject::GObjObjects()->Data[ 40922 ];

	ATgPawn_execValidateStatsTracker_Parms ValidateStatsTracker_Parms;

	pFnValidateStatsTracker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidateStatsTracker, &ValidateStatsTracker_Parms, NULL );

	pFnValidateStatsTracker->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsProfileNonStandard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsProfileNonStandard ( )
{
	static UFunction* pFnIsProfileNonStandard = NULL;

	if ( ! pFnIsProfileNonStandard )
		pFnIsProfileNonStandard = (UFunction*) UObject::GObjObjects()->Data[ 40920 ];

	ATgPawn_execIsProfileNonStandard_Parms IsProfileNonStandard_Parms;

	pFnIsProfileNonStandard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsProfileNonStandard, &IsProfileNonStandard_Parms, NULL );

	pFnIsProfileNonStandard->FunctionFlags |= 0x400;

	return IsProfileNonStandard_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetDebugParticleMaskNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            MaskValue                      ( CPF_Parm )

void ATgPawn::SetDebugParticleMaskNative ( int MaskValue )
{
	static UFunction* pFnSetDebugParticleMaskNative = NULL;

	if ( ! pFnSetDebugParticleMaskNative )
		pFnSetDebugParticleMaskNative = (UFunction*) UObject::GObjObjects()->Data[ 40918 ];

	ATgPawn_execSetDebugParticleMaskNative_Parms SetDebugParticleMaskNative_Parms;
	SetDebugParticleMaskNative_Parms.MaskValue = MaskValue;

	pFnSetDebugParticleMaskNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDebugParticleMaskNative, &SetDebugParticleMaskNative_Parms, NULL );

	pFnSetDebugParticleMaskNative->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CreateUITextBoxBitfield
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgSeqAct_SetUITextBox*  Action                         ( CPF_Parm )

unsigned char ATgPawn::CreateUITextBoxBitfield ( class UTgSeqAct_SetUITextBox* Action )
{
	static UFunction* pFnCreateUITextBoxBitfield = NULL;

	if ( ! pFnCreateUITextBoxBitfield )
		pFnCreateUITextBoxBitfield = (UFunction*) UObject::GObjObjects()->Data[ 40915 ];

	ATgPawn_execCreateUITextBoxBitfield_Parms CreateUITextBoxBitfield_Parms;
	CreateUITextBoxBitfield_Parms.Action = Action;

	pFnCreateUITextBoxBitfield->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateUITextBoxBitfield, &CreateUITextBoxBitfield_Parms, NULL );

	pFnCreateUITextBoxBitfield->FunctionFlags |= 0x400;

	return CreateUITextBoxBitfield_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CreateUIClockBitfield
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  Alarm                          ( CPF_Parm )
// unsigned long                  Bar                            ( CPF_Parm )
// unsigned long                  Down                           ( CPF_Parm )

unsigned char ATgPawn::CreateUIClockBitfield ( unsigned long Alarm, unsigned long Bar, unsigned long Down )
{
	static UFunction* pFnCreateUIClockBitfield = NULL;

	if ( ! pFnCreateUIClockBitfield )
		pFnCreateUIClockBitfield = (UFunction*) UObject::GObjObjects()->Data[ 40910 ];

	ATgPawn_execCreateUIClockBitfield_Parms CreateUIClockBitfield_Parms;
	CreateUIClockBitfield_Parms.Alarm = Alarm;
	CreateUIClockBitfield_Parms.Bar = Bar;
	CreateUIClockBitfield_Parms.Down = Down;

	pFnCreateUIClockBitfield->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateUIClockBitfield, &CreateUIClockBitfield_Parms, NULL );

	pFnCreateUIClockBitfield->FunctionFlags |= 0x400;

	return CreateUIClockBitfield_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CheckRootBoneCorrection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn::CheckRootBoneCorrection ( float DeltaSeconds )
{
	static UFunction* pFnCheckRootBoneCorrection = NULL;

	if ( ! pFnCheckRootBoneCorrection )
		pFnCheckRootBoneCorrection = (UFunction*) UObject::GObjObjects()->Data[ 40908 ];

	ATgPawn_execCheckRootBoneCorrection_Parms CheckRootBoneCorrection_Parms;
	CheckRootBoneCorrection_Parms.DeltaSeconds = DeltaSeconds;

	pFnCheckRootBoneCorrection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckRootBoneCorrection, &CheckRootBoneCorrection_Parms, NULL );

	pFnCheckRootBoneCorrection->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FindPlayerPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

class ATgPawn* ATgPawn::FindPlayerPawn ( struct FString fsName )
{
	static UFunction* pFnFindPlayerPawn = NULL;

	if ( ! pFnFindPlayerPawn )
		pFnFindPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 40905 ];

	ATgPawn_execFindPlayerPawn_Parms FindPlayerPawn_Parms;
	memcpy ( &FindPlayerPawn_Parms.fsName, &fsName, 0xC );

	pFnFindPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerPawn, &FindPlayerPawn_Parms, NULL );

	pFnFindPlayerPawn->FunctionFlags |= 0x400;

	return FindPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetPRI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_Player*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgRepInfo_Player* ATgPawn::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 40903 ];

	ATgPawn_execGetPRI_Parms GetPRI_Parms;

	pFnGetPRI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );

	pFnGetPRI->FunctionFlags |= 0x400;

	return GetPRI_Parms.ReturnValue;
};

// Function TgGame.TgPawn.RemoveAllAnimationSets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::RemoveAllAnimationSets ( )
{
	static UFunction* pFnRemoveAllAnimationSets = NULL;

	if ( ! pFnRemoveAllAnimationSets )
		pFnRemoveAllAnimationSets = (UFunction*) UObject::GObjObjects()->Data[ 40902 ];

	ATgPawn_execRemoveAllAnimationSets_Parms RemoveAllAnimationSets_Parms;

	pFnRemoveAllAnimationSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllAnimationSets, &RemoveAllAnimationSets_Parms, NULL );

	pFnRemoveAllAnimationSets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetEquipPointByType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nDeviceType                    ( CPF_Parm )

unsigned char ATgPawn::GetEquipPointByType ( int nDeviceType )
{
	static UFunction* pFnGetEquipPointByType = NULL;

	if ( ! pFnGetEquipPointByType )
		pFnGetEquipPointByType = (UFunction*) UObject::GObjObjects()->Data[ 40899 ];

	ATgPawn_execGetEquipPointByType_Parms GetEquipPointByType_Parms;
	GetEquipPointByType_Parms.nDeviceType = nDeviceType;

	pFnGetEquipPointByType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEquipPointByType, &GetEquipPointByType_Parms, NULL );

	pFnGetEquipPointByType->FunctionFlags |= 0x400;

	return GetEquipPointByType_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ReapplyCurrentMICFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ReapplyCurrentMICFx ( )
{
	static UFunction* pFnReapplyCurrentMICFx = NULL;

	if ( ! pFnReapplyCurrentMICFx )
		pFnReapplyCurrentMICFx = (UFunction*) UObject::GObjObjects()->Data[ 40898 ];

	ATgPawn_execReapplyCurrentMICFx_Parms ReapplyCurrentMICFx_Parms;

	pFnReapplyCurrentMICFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyCurrentMICFx, &ReapplyCurrentMICFx_Parms, NULL );

	pFnReapplyCurrentMICFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RemoveMICFx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgSpecialFx*            SpecialFx                      ( CPF_Parm )
// unsigned long                  bForceRemove                   ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::RemoveMICFx ( class UTgSpecialFx* SpecialFx, unsigned long bForceRemove )
{
	static UFunction* pFnRemoveMICFx = NULL;

	if ( ! pFnRemoveMICFx )
		pFnRemoveMICFx = (UFunction*) UObject::GObjObjects()->Data[ 40894 ];

	ATgPawn_execRemoveMICFx_Parms RemoveMICFx_Parms;
	RemoveMICFx_Parms.SpecialFx = SpecialFx;
	RemoveMICFx_Parms.bForceRemove = bForceRemove;

	pFnRemoveMICFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMICFx, &RemoveMICFx_Parms, NULL );

	pFnRemoveMICFx->FunctionFlags |= 0x400;

	return RemoveMICFx_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyMICFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgSpecialFx*            SpecialFx                      ( CPF_Parm )
// int                            Priority                       ( CPF_Parm )

bool ATgPawn::ApplyMICFx ( class UTgSpecialFx* SpecialFx, int Priority )
{
	static UFunction* pFnApplyMICFx = NULL;

	if ( ! pFnApplyMICFx )
		pFnApplyMICFx = (UFunction*) UObject::GObjObjects()->Data[ 40890 ];

	ATgPawn_execApplyMICFx_Parms ApplyMICFx_Parms;
	ApplyMICFx_Parms.SpecialFx = SpecialFx;
	ApplyMICFx_Parms.Priority = Priority;

	pFnApplyMICFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMICFx, &ApplyMICFx_Parms, NULL );

	pFnApplyMICFx->FunctionFlags |= 0x400;

	return ApplyMICFx_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SwapMeshToStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bStealthed                     ( CPF_Parm )

class UMaterialInstanceConstant* ATgPawn::SwapMeshToStealthed ( unsigned long bStealthed )
{
	static UFunction* pFnSwapMeshToStealthed = NULL;

	if ( ! pFnSwapMeshToStealthed )
		pFnSwapMeshToStealthed = (UFunction*) UObject::GObjObjects()->Data[ 40887 ];

	ATgPawn_execSwapMeshToStealthed_Parms SwapMeshToStealthed_Parms;
	SwapMeshToStealthed_Parms.bStealthed = bStealthed;

	pFnSwapMeshToStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMeshToStealthed, &SwapMeshToStealthed_Parms, NULL );

	pFnSwapMeshToStealthed->FunctionFlags |= 0x400;

	return SwapMeshToStealthed_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SwapMeshToDestroyed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::SwapMeshToDestroyed ( )
{
	static UFunction* pFnSwapMeshToDestroyed = NULL;

	if ( ! pFnSwapMeshToDestroyed )
		pFnSwapMeshToDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 40886 ];

	ATgPawn_execSwapMeshToDestroyed_Parms SwapMeshToDestroyed_Parms;

	pFnSwapMeshToDestroyed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMeshToDestroyed, &SwapMeshToDestroyed_Parms, NULL );

	pFnSwapMeshToDestroyed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetAllianceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetAllianceNumber ( )
{
	static UFunction* pFnGetAllianceNumber = NULL;

	if ( ! pFnGetAllianceNumber )
		pFnGetAllianceNumber = (UFunction*) UObject::GObjObjects()->Data[ 40884 ];

	ATgPawn_execGetAllianceNumber_Parms GetAllianceNumber_Parms;

	pFnGetAllianceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllianceNumber, &GetAllianceNumber_Parms, NULL );

	pFnGetAllianceNumber->FunctionFlags |= 0x400;

	return GetAllianceNumber_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgPawn::GetTaskForceNumber ( )
{
	static UFunction* pFnGetTaskForceNumber = NULL;

	if ( ! pFnGetTaskForceNumber )
		pFnGetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 40882 ];

	ATgPawn_execGetTaskForceNumber_Parms GetTaskForceNumber_Parms;

	pFnGetTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTaskForceNumber, &GetTaskForceNumber_Parms, NULL );

	pFnGetTaskForceNumber->FunctionFlags |= 0x400;

	return GetTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetTaskForceNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTaskForce                     ( CPF_Parm )

void ATgPawn::SetTaskForceNumber ( int nTaskForce )
{
	static UFunction* pFnSetTaskForceNumber = NULL;

	if ( ! pFnSetTaskForceNumber )
		pFnSetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 40880 ];

	ATgPawn_execSetTaskForceNumber_Parms SetTaskForceNumber_Parms;
	SetTaskForceNumber_Parms.nTaskForce = nTaskForce;

	pFnSetTaskForceNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTaskForceNumber, &SetTaskForceNumber_Parms, NULL );

	pFnSetTaskForceNumber->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CheckTargetDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TargetActor                    ( CPF_Parm )

float ATgPawn::CheckTargetDistance ( class AActor* TargetActor )
{
	static UFunction* pFnCheckTargetDistance = NULL;

	if ( ! pFnCheckTargetDistance )
		pFnCheckTargetDistance = (UFunction*) UObject::GObjObjects()->Data[ 40877 ];

	ATgPawn_execCheckTargetDistance_Parms CheckTargetDistance_Parms;
	CheckTargetDistance_Parms.TargetActor = TargetActor;

	pFnCheckTargetDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTargetDistance, &CheckTargetDistance_Parms, NULL );

	pFnCheckTargetDistance->FunctionFlags |= 0x400;

	return CheckTargetDistance_Parms.ReturnValue;
};

// Function TgGame.TgPawn.UpdateTargetCylinderLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn::UpdateTargetCylinderLocation ( float DeltaSeconds )
{
	static UFunction* pFnUpdateTargetCylinderLocation = NULL;

	if ( ! pFnUpdateTargetCylinderLocation )
		pFnUpdateTargetCylinderLocation = (UFunction*) UObject::GObjObjects()->Data[ 40875 ];

	ATgPawn_execUpdateTargetCylinderLocation_Parms UpdateTargetCylinderLocation_Parms;
	UpdateTargetCylinderLocation_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateTargetCylinderLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetCylinderLocation, &UpdateTargetCylinderLocation_Parms, NULL );

	pFnUpdateTargetCylinderLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.UpdateTargetCylinderSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::UpdateTargetCylinderSize ( )
{
	static UFunction* pFnUpdateTargetCylinderSize = NULL;

	if ( ! pFnUpdateTargetCylinderSize )
		pFnUpdateTargetCylinderSize = (UFunction*) UObject::GObjObjects()->Data[ 40874 ];

	ATgPawn_execUpdateTargetCylinderSize_Parms UpdateTargetCylinderSize_Parms;

	pFnUpdateTargetCylinderSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetCylinderSize, &UpdateTargetCylinderSize_Parms, NULL );

	pFnUpdateTargetCylinderSize->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.AdjustMeshTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::AdjustMeshTranslation ( )
{
	static UFunction* pFnAdjustMeshTranslation = NULL;

	if ( ! pFnAdjustMeshTranslation )
		pFnAdjustMeshTranslation = (UFunction*) UObject::GObjObjects()->Data[ 40873 ];

	ATgPawn_execAdjustMeshTranslation_Parms AdjustMeshTranslation_Parms;

	pFnAdjustMeshTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustMeshTranslation, &AdjustMeshTranslation_Parms, NULL );

	pFnAdjustMeshTranslation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetCollisionFromMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nMeshAsmId                     ( CPF_Parm )

void ATgPawn::SetCollisionFromMesh ( int nMeshAsmId )
{
	static UFunction* pFnSetCollisionFromMesh = NULL;

	if ( ! pFnSetCollisionFromMesh )
		pFnSetCollisionFromMesh = (UFunction*) UObject::GObjObjects()->Data[ 40871 ];

	ATgPawn_execSetCollisionFromMesh_Parms SetCollisionFromMesh_Parms;
	SetCollisionFromMesh_Parms.nMeshAsmId = nMeshAsmId;

	pFnSetCollisionFromMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionFromMesh, &SetCollisionFromMesh_Parms, NULL );

	pFnSetCollisionFromMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.KillOwnedBots
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::KillOwnedBots ( )
{
	static UFunction* pFnKillOwnedBots = NULL;

	if ( ! pFnKillOwnedBots )
		pFnKillOwnedBots = (UFunction*) UObject::GObjObjects()->Data[ 40870 ];

	ATgPawn_execKillOwnedBots_Parms KillOwnedBots_Parms;

	pFnKillOwnedBots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillOwnedBots, &KillOwnedBots_Parms, NULL );

	pFnKillOwnedBots->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.KillPet
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::KillPet ( )
{
	static UFunction* pFnKillPet = NULL;

	if ( ! pFnKillPet )
		pFnKillPet = (UFunction*) UObject::GObjObjects()->Data[ 40869 ];

	ATgPawn_execKillPet_Parms KillPet_Parms;

	pFnKillPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillPet, &KillPet_Parms, NULL );

	pFnKillPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetPet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 PetPawn                        ( CPF_Parm )

void ATgPawn::SetPet ( class ATgPawn* PetPawn )
{
	static UFunction* pFnSetPet = NULL;

	if ( ! pFnSetPet )
		pFnSetPet = (UFunction*) UObject::GObjObjects()->Data[ 40867 ];

	ATgPawn_execSetPet_Parms SetPet_Parms;
	SetPet_Parms.PetPawn = PetPawn;

	pFnSetPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPet, &SetPet_Parms, NULL );

	pFnSetPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetResourceFromGAssembly
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ResId                          ( CPF_Parm )

struct FString ATgPawn::GetResourceFromGAssembly ( int ResId )
{
	static UFunction* pFnGetResourceFromGAssembly = NULL;

	if ( ! pFnGetResourceFromGAssembly )
		pFnGetResourceFromGAssembly = (UFunction*) UObject::GObjObjects()->Data[ 40864 ];

	ATgPawn_execGetResourceFromGAssembly_Parms GetResourceFromGAssembly_Parms;
	GetResourceFromGAssembly_Parms.ResId = ResId;

	pFnGetResourceFromGAssembly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceFromGAssembly, &GetResourceFromGAssembly_Parms, NULL );

	pFnGetResourceFromGAssembly->FunctionFlags |= 0x400;

	return GetResourceFromGAssembly_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ReplaceMeshComponent
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            nNewMeshId                     ( CPF_Parm )
// class UMeshComponent*          DestComponent                  ( CPF_Parm | CPF_EditInline )

void ATgPawn::ReplaceMeshComponent ( int nNewMeshId, class UMeshComponent* DestComponent )
{
	static UFunction* pFnReplaceMeshComponent = NULL;

	if ( ! pFnReplaceMeshComponent )
		pFnReplaceMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 40861 ];

	ATgPawn_execReplaceMeshComponent_Parms ReplaceMeshComponent_Parms;
	ReplaceMeshComponent_Parms.nNewMeshId = nNewMeshId;
	ReplaceMeshComponent_Parms.DestComponent = DestComponent;

	pFnReplaceMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplaceMeshComponent, &ReplaceMeshComponent_Parms, NULL );

	pFnReplaceMeshComponent->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CreateMeshComponent
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UMeshComponent*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// int                            nMeshId                        ( CPF_Parm )

class UMeshComponent* ATgPawn::CreateMeshComponent ( int nMeshId )
{
	static UFunction* pFnCreateMeshComponent = NULL;

	if ( ! pFnCreateMeshComponent )
		pFnCreateMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 40858 ];

	ATgPawn_execCreateMeshComponent_Parms CreateMeshComponent_Parms;
	CreateMeshComponent_Parms.nMeshId = nMeshId;

	pFnCreateMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateMeshComponent, &CreateMeshComponent_Parms, NULL );

	pFnCreateMeshComponent->FunctionFlags |= 0x400;

	return CreateMeshComponent_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetSpecialFx
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UTgSpecialFx*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSpecialFxId                   ( CPF_Parm )

class UTgSpecialFx* ATgPawn::GetSpecialFx ( int nSpecialFxId )
{
	static UFunction* pFnGetSpecialFx = NULL;

	if ( ! pFnGetSpecialFx )
		pFnGetSpecialFx = (UFunction*) UObject::GObjObjects()->Data[ 40855 ];

	ATgPawn_execGetSpecialFx_Parms GetSpecialFx_Parms;
	GetSpecialFx_Parms.nSpecialFxId = nSpecialFxId;

	pFnGetSpecialFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpecialFx, &GetSpecialFx_Parms, NULL );

	pFnGetSpecialFx->FunctionFlags |= 0x400;

	return GetSpecialFx_Parms.ReturnValue;
};

// Function TgGame.TgPawn.SetDeviceVisibility
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void ATgPawn::SetDeviceVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetDeviceVisibility = NULL;

	if ( ! pFnSetDeviceVisibility )
		pFnSetDeviceVisibility = (UFunction*) UObject::GObjObjects()->Data[ 40853 ];

	ATgPawn_execSetDeviceVisibility_Parms SetDeviceVisibility_Parms;
	SetDeviceVisibility_Parms.bVisible = bVisible;

	pFnSetDeviceVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDeviceVisibility, &SetDeviceVisibility_Parms, NULL );

	pFnSetDeviceVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetMeshVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void ATgPawn::SetMeshVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetMeshVisibility = NULL;

	if ( ! pFnSetMeshVisibility )
		pFnSetMeshVisibility = (UFunction*) UObject::GObjObjects()->Data[ 40851 ];

	ATgPawn_execSetMeshVisibility_Parms SetMeshVisibility_Parms;
	SetMeshVisibility_Parms.bVisible = bVisible;

	pFnSetMeshVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeshVisibility, &SetMeshVisibility_Parms, NULL );

	pFnSetMeshVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CanSeeActor
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  aActor                         ( CPF_Parm )
// unsigned long                  bRequiresLOS                   ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::CanSeeActor ( class AActor* aActor, unsigned long bRequiresLOS )
{
	static UFunction* pFnCanSeeActor = NULL;

	if ( ! pFnCanSeeActor )
		pFnCanSeeActor = (UFunction*) UObject::GObjObjects()->Data[ 40847 ];

	ATgPawn_execCanSeeActor_Parms CanSeeActor_Parms;
	CanSeeActor_Parms.aActor = aActor;
	CanSeeActor_Parms.bRequiresLOS = bRequiresLOS;

	pFnCanSeeActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeActor, &CanSeeActor_Parms, NULL );

	pFnCanSeeActor->FunctionFlags |= 0x400;

	return CanSeeActor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.IsPhysicalLadderInFrontOfPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bTraceFromTopOfCylinder        ( CPF_Parm )

bool ATgPawn::IsPhysicalLadderInFrontOfPawn ( unsigned long bTraceFromTopOfCylinder )
{
	static UFunction* pFnIsPhysicalLadderInFrontOfPawn = NULL;

	if ( ! pFnIsPhysicalLadderInFrontOfPawn )
		pFnIsPhysicalLadderInFrontOfPawn = (UFunction*) UObject::GObjObjects()->Data[ 40844 ];

	ATgPawn_execIsPhysicalLadderInFrontOfPawn_Parms IsPhysicalLadderInFrontOfPawn_Parms;
	IsPhysicalLadderInFrontOfPawn_Parms.bTraceFromTopOfCylinder = bTraceFromTopOfCylinder;

	pFnIsPhysicalLadderInFrontOfPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPhysicalLadderInFrontOfPawn, &IsPhysicalLadderInFrontOfPawn_Parms, NULL );

	pFnIsPhysicalLadderInFrontOfPawn->FunctionFlags |= 0x400;

	return IsPhysicalLadderInFrontOfPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 40842 ];

	ATgPawn_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetIconResource
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIconId                        ( CPF_Parm )
// struct FIcon_Info              iconInfo                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ATgPawn::GetIconResource ( int nIconId, struct FIcon_Info* iconInfo )
{
	static UFunction* pFnGetIconResource = NULL;

	if ( ! pFnGetIconResource )
		pFnGetIconResource = (UFunction*) UObject::GObjObjects()->Data[ 40838 ];

	ATgPawn_execGetIconResource_Parms GetIconResource_Parms;
	GetIconResource_Parms.nIconId = nIconId;

	pFnGetIconResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIconResource, &GetIconResource_Parms, NULL );

	pFnGetIconResource->FunctionFlags |= 0x400;

	if ( iconInfo )
		memcpy ( iconInfo, &GetIconResource_Parms.iconInfo, 0x10 );

	return GetIconResource_Parms.ReturnValue;
};

// Function TgGame.TgPawn.AddRemoveAnimSetList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class UAnimSet* >      AnimSetList                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAdd                           ( CPF_Parm )

void ATgPawn::AddRemoveAnimSetList ( TArray< class UAnimSet* > AnimSetList, unsigned long bAdd )
{
	static UFunction* pFnAddRemoveAnimSetList = NULL;

	if ( ! pFnAddRemoveAnimSetList )
		pFnAddRemoveAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 40834 ];

	ATgPawn_execAddRemoveAnimSetList_Parms AddRemoveAnimSetList_Parms;
	memcpy ( &AddRemoveAnimSetList_Parms.AnimSetList, &AnimSetList, 0xC );
	AddRemoveAnimSetList_Parms.bAdd = bAdd;

	pFnAddRemoveAnimSetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRemoveAnimSetList, &AddRemoveAnimSetList_Parms, NULL );

	pFnAddRemoveAnimSetList->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlaySoundEmote
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::PlaySoundEmote ( )
{
	static UFunction* pFnPlaySoundEmote = NULL;

	if ( ! pFnPlaySoundEmote )
		pFnPlaySoundEmote = (UFunction*) UObject::GObjObjects()->Data[ 40833 ];

	ATgPawn_execPlaySoundEmote_Parms PlaySoundEmote_Parms;

	pFnPlaySoundEmote->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundEmote, &PlaySoundEmote_Parms, NULL );

	pFnPlaySoundEmote->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.PlayAnimEmote
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::PlayAnimEmote ( )
{
	static UFunction* pFnPlayAnimEmote = NULL;

	if ( ! pFnPlayAnimEmote )
		pFnPlayAnimEmote = (UFunction*) UObject::GObjObjects()->Data[ 40832 ];

	ATgPawn_execPlayAnimEmote_Parms PlayAnimEmote_Parms;

	pFnPlayAnimEmote->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnimEmote, &PlayAnimEmote_Parms, NULL );

	pFnPlayAnimEmote->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40830 ];

	ATgPawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function TgGame.TgPawn.LogPawnAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::LogPawnAnim ( )
{
	static UFunction* pFnLogPawnAnim = NULL;

	if ( ! pFnLogPawnAnim )
		pFnLogPawnAnim = (UFunction*) UObject::GObjObjects()->Data[ 40829 ];

	ATgPawn_execLogPawnAnim_Parms LogPawnAnim_Parms;

	pFnLogPawnAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPawnAnim, &LogPawnAnim_Parms, NULL );

	pFnLogPawnAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsPointInsideCollisionCylinder
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          AddHeight                      ( CPF_OptionalParm | CPF_Parm )
// float                          AddRadius                      ( CPF_OptionalParm | CPF_Parm )

bool ATgPawn::IsPointInsideCollisionCylinder ( struct FVector Point, float AddHeight, float AddRadius )
{
	static UFunction* pFnIsPointInsideCollisionCylinder = NULL;

	if ( ! pFnIsPointInsideCollisionCylinder )
		pFnIsPointInsideCollisionCylinder = (UFunction*) UObject::GObjObjects()->Data[ 40824 ];

	ATgPawn_execIsPointInsideCollisionCylinder_Parms IsPointInsideCollisionCylinder_Parms;
	memcpy ( &IsPointInsideCollisionCylinder_Parms.Point, &Point, 0xC );
	IsPointInsideCollisionCylinder_Parms.AddHeight = AddHeight;
	IsPointInsideCollisionCylinder_Parms.AddRadius = AddRadius;

	pFnIsPointInsideCollisionCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPointInsideCollisionCylinder, &IsPointInsideCollisionCylinder_Parms, NULL );

	pFnIsPointInsideCollisionCylinder->FunctionFlags |= 0x400;

	return IsPointInsideCollisionCylinder_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DetermineMeshVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::DetermineMeshVisibility ( )
{
	static UFunction* pFnDetermineMeshVisibility = NULL;

	if ( ! pFnDetermineMeshVisibility )
		pFnDetermineMeshVisibility = (UFunction*) UObject::GObjObjects()->Data[ 40822 ];

	ATgPawn_execDetermineMeshVisibility_Parms DetermineMeshVisibility_Parms;

	pFnDetermineMeshVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineMeshVisibility, &DetermineMeshVisibility_Parms, NULL );

	pFnDetermineMeshVisibility->FunctionFlags |= 0x400;

	return DetermineMeshVisibility_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DrawClientDebug
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::DrawClientDebug ( )
{
	static UFunction* pFnDrawClientDebug = NULL;

	if ( ! pFnDrawClientDebug )
		pFnDrawClientDebug = (UFunction*) UObject::GObjObjects()->Data[ 40821 ];

	ATgPawn_execDrawClientDebug_Parms DrawClientDebug_Parms;

	pFnDrawClientDebug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawClientDebug, &DrawClientDebug_Parms, NULL );

	pFnDrawClientDebug->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.bIsEditor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::bIsEditor ( )
{
	static UFunction* pFnbIsEditor = NULL;

	if ( ! pFnbIsEditor )
		pFnbIsEditor = (UFunction*) UObject::GObjObjects()->Data[ 40819 ];

	ATgPawn_execbIsEditor_Parms bIsEditor_Parms;

	pFnbIsEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnbIsEditor, &bIsEditor_Parms, NULL );

	pFnbIsEditor->FunctionFlags |= 0x400;

	return bIsEditor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.OnCrafting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStart                         ( CPF_Parm )

void ATgPawn::OnCrafting ( unsigned long bStart )
{
	static UFunction* pFnOnCrafting = NULL;

	if ( ! pFnOnCrafting )
		pFnOnCrafting = (UFunction*) UObject::GObjObjects()->Data[ 40817 ];

	ATgPawn_execOnCrafting_Parms OnCrafting_Parms;
	OnCrafting_Parms.bStart = bStart;

	pFnOnCrafting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCrafting, &OnCrafting_Parms, NULL );

	pFnOnCrafting->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ReapplyLoadoutEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ReapplyLoadoutEffects ( )
{
	static UFunction* pFnReapplyLoadoutEffects = NULL;

	if ( ! pFnReapplyLoadoutEffects )
		pFnReapplyLoadoutEffects = (UFunction*) UObject::GObjObjects()->Data[ 40816 ];

	ATgPawn_execReapplyLoadoutEffects_Parms ReapplyLoadoutEffects_Parms;

	pFnReapplyLoadoutEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyLoadoutEffects, &ReapplyLoadoutEffects_Parms, NULL );

	pFnReapplyLoadoutEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ReapplyCharacterSkillTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ReapplyCharacterSkillTree ( )
{
	static UFunction* pFnReapplyCharacterSkillTree = NULL;

	if ( ! pFnReapplyCharacterSkillTree )
		pFnReapplyCharacterSkillTree = (UFunction*) UObject::GObjObjects()->Data[ 40815 ];

	ATgPawn_execReapplyCharacterSkillTree_Parms ReapplyCharacterSkillTree_Parms;

	pFnReapplyCharacterSkillTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyCharacterSkillTree, &ReapplyCharacterSkillTree_Parms, NULL );

	pFnReapplyCharacterSkillTree->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SendAllDeviceSkillBuffs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::SendAllDeviceSkillBuffs ( )
{
	static UFunction* pFnSendAllDeviceSkillBuffs = NULL;

	if ( ! pFnSendAllDeviceSkillBuffs )
		pFnSendAllDeviceSkillBuffs = (UFunction*) UObject::GObjObjects()->Data[ 40814 ];

	ATgPawn_execSendAllDeviceSkillBuffs_Parms SendAllDeviceSkillBuffs_Parms;

	pFnSendAllDeviceSkillBuffs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendAllDeviceSkillBuffs, &SendAllDeviceSkillBuffs_Parms, NULL );

	pFnSendAllDeviceSkillBuffs->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetSpawnerDeviceInstanceId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetSpawnerDeviceInstanceId ( )
{
	static UFunction* pFnGetSpawnerDeviceInstanceId = NULL;

	if ( ! pFnGetSpawnerDeviceInstanceId )
		pFnGetSpawnerDeviceInstanceId = (UFunction*) UObject::GObjObjects()->Data[ 40812 ];

	ATgPawn_execGetSpawnerDeviceInstanceId_Parms GetSpawnerDeviceInstanceId_Parms;

	pFnGetSpawnerDeviceInstanceId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpawnerDeviceInstanceId, &GetSpawnerDeviceInstanceId_Parms, NULL );

	pFnGetSpawnerDeviceInstanceId->FunctionFlags |= 0x400;

	return GetSpawnerDeviceInstanceId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetSpawnerDeviceSkillId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetSpawnerDeviceSkillId ( )
{
	static UFunction* pFnGetSpawnerDeviceSkillId = NULL;

	if ( ! pFnGetSpawnerDeviceSkillId )
		pFnGetSpawnerDeviceSkillId = (UFunction*) UObject::GObjObjects()->Data[ 40810 ];

	ATgPawn_execGetSpawnerDeviceSkillId_Parms GetSpawnerDeviceSkillId_Parms;

	pFnGetSpawnerDeviceSkillId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpawnerDeviceSkillId, &GetSpawnerDeviceSkillId_Parms, NULL );

	pFnGetSpawnerDeviceSkillId->FunctionFlags |= 0x400;

	return GetSpawnerDeviceSkillId_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ConvertPropToPropList
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// struct FBuffRequest            request                        ( CPF_Parm )
// class UTgEffect*               Effect                         ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  PropList                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ATgPawn::ConvertPropToPropList ( struct FBuffRequest request, class UTgEffect* Effect, TArray< int >* PropList )
{
	static UFunction* pFnConvertPropToPropList = NULL;

	if ( ! pFnConvertPropToPropList )
		pFnConvertPropToPropList = (UFunction*) UObject::GObjObjects()->Data[ 40805 ];

	ATgPawn_execConvertPropToPropList_Parms ConvertPropToPropList_Parms;
	memcpy ( &ConvertPropToPropList_Parms.request, &request, 0x18 );
	ConvertPropToPropList_Parms.Effect = Effect;

	pFnConvertPropToPropList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConvertPropToPropList, &ConvertPropToPropList_Parms, NULL );

	pFnConvertPropToPropList->FunctionFlags |= 0x400;

	if ( PropList )
		memcpy ( PropList, &ConvertPropToPropList_Parms.PropList, 0xC );
};

// Function TgGame.TgPawn.CheckBuffInfoList
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBuffRequest            request                        ( CPF_Parm )
// TArray< int >                  nBuffPropertyList              ( CPF_Parm | CPF_NeedCtorLink )
// float                          fBaseValue                     ( CPF_Parm )
// float                          fBuffedValue                   ( CPF_Parm | CPF_OutParm )

void ATgPawn::CheckBuffInfoList ( struct FBuffRequest request, TArray< int > nBuffPropertyList, float fBaseValue, float* fBuffedValue )
{
	static UFunction* pFnCheckBuffInfoList = NULL;

	if ( ! pFnCheckBuffInfoList )
		pFnCheckBuffInfoList = (UFunction*) UObject::GObjObjects()->Data[ 40799 ];

	ATgPawn_execCheckBuffInfoList_Parms CheckBuffInfoList_Parms;
	memcpy ( &CheckBuffInfoList_Parms.request, &request, 0x18 );
	memcpy ( &CheckBuffInfoList_Parms.nBuffPropertyList, &nBuffPropertyList, 0xC );
	CheckBuffInfoList_Parms.fBaseValue = fBaseValue;

	pFnCheckBuffInfoList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckBuffInfoList, &CheckBuffInfoList_Parms, NULL );

	pFnCheckBuffInfoList->FunctionFlags |= 0x400;

	if ( fBuffedValue )
		*fBuffedValue = CheckBuffInfoList_Parms.fBuffedValue;
};

// Function TgGame.TgPawn.GetBuffInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FBuffInfo               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBuffHeader             BuffFilter                     ( CPF_Parm )

struct FBuffInfo ATgPawn::GetBuffInfo ( struct FBuffHeader BuffFilter )
{
	static UFunction* pFnGetBuffInfo = NULL;

	if ( ! pFnGetBuffInfo )
		pFnGetBuffInfo = (UFunction*) UObject::GObjObjects()->Data[ 40796 ];

	ATgPawn_execGetBuffInfo_Parms GetBuffInfo_Parms;
	memcpy ( &GetBuffInfo_Parms.BuffFilter, &BuffFilter, 0x10 );

	pFnGetBuffInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuffInfo, &GetBuffInfo_Parms, NULL );

	pFnGetBuffInfo->FunctionFlags |= 0x400;

	return GetBuffInfo_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ApplyBuff
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FBuffHeader             BuffFilter                     ( CPF_Parm )
// int                            nCalcMethodCode                ( CPF_Parm )
// float                          fAmount                        ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// unsigned char                  buffSourceType                 ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::ApplyBuff ( struct FBuffHeader BuffFilter, int nCalcMethodCode, float fAmount, unsigned long bRemove, unsigned char buffSourceType )
{
	static UFunction* pFnApplyBuff = NULL;

	if ( ! pFnApplyBuff )
		pFnApplyBuff = (UFunction*) UObject::GObjObjects()->Data[ 40790 ];

	ATgPawn_execApplyBuff_Parms ApplyBuff_Parms;
	memcpy ( &ApplyBuff_Parms.BuffFilter, &BuffFilter, 0x10 );
	ApplyBuff_Parms.nCalcMethodCode = nCalcMethodCode;
	ApplyBuff_Parms.fAmount = fAmount;
	ApplyBuff_Parms.bRemove = bRemove;
	ApplyBuff_Parms.buffSourceType = buffSourceType;

	pFnApplyBuff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyBuff, &ApplyBuff_Parms, NULL );

	pFnApplyBuff->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetBuffIndex
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FBuffHeader             BuffFilter                     ( CPF_Parm )
// unsigned long                  bAddIfNotExists                ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm | CPF_OutParm )

void ATgPawn::GetBuffIndex ( struct FBuffHeader BuffFilter, unsigned long bAddIfNotExists, int* nIndex )
{
	static UFunction* pFnGetBuffIndex = NULL;

	if ( ! pFnGetBuffIndex )
		pFnGetBuffIndex = (UFunction*) UObject::GObjObjects()->Data[ 40786 ];

	ATgPawn_execGetBuffIndex_Parms GetBuffIndex_Parms;
	memcpy ( &GetBuffIndex_Parms.BuffFilter, &BuffFilter, 0x10 );
	GetBuffIndex_Parms.bAddIfNotExists = bAddIfNotExists;

	pFnGetBuffIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuffIndex, &GetBuffIndex_Parms, NULL );

	pFnGetBuffIndex->FunctionFlags |= 0x400;

	if ( nIndex )
		*nIndex = GetBuffIndex_Parms.nIndex;
};

// Function TgGame.TgPawn.GetBuffedProperty
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// struct FBuffRequest            request                        ( CPF_Parm )
// float                          fBaseValue                     ( CPF_Parm )
// class UTgEffect*               Effect                         ( CPF_OptionalParm | CPF_Parm )
// float                          fBuffedValue                   ( CPF_Parm | CPF_OutParm )

void ATgPawn::GetBuffedProperty ( struct FBuffRequest request, float fBaseValue, class UTgEffect* Effect, float* fBuffedValue )
{
	static UFunction* pFnGetBuffedProperty = NULL;

	if ( ! pFnGetBuffedProperty )
		pFnGetBuffedProperty = (UFunction*) UObject::GObjObjects()->Data[ 40781 ];

	ATgPawn_execGetBuffedProperty_Parms GetBuffedProperty_Parms;
	memcpy ( &GetBuffedProperty_Parms.request, &request, 0x18 );
	GetBuffedProperty_Parms.fBaseValue = fBaseValue;
	GetBuffedProperty_Parms.Effect = Effect;

	pFnGetBuffedProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuffedProperty, &GetBuffedProperty_Parms, NULL );

	pFnGetBuffedProperty->FunctionFlags |= 0x400;

	if ( fBuffedValue )
		*fBuffedValue = GetBuffedProperty_Parms.fBuffedValue;
};

// Function TgGame.TgPawn.FlashLevelupFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::FlashLevelupFx ( )
{
	static UFunction* pFnFlashLevelupFx = NULL;

	if ( ! pFnFlashLevelupFx )
		pFnFlashLevelupFx = (UFunction*) UObject::GObjObjects()->Data[ 40780 ];

	ATgPawn_execFlashLevelupFx_Parms FlashLevelupFx_Parms;

	pFnFlashLevelupFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashLevelupFx, &FlashLevelupFx_Parms, NULL );

	pFnFlashLevelupFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashTeleportFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTeleportState                 ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

void ATgPawn::FlashTeleportFx ( int nTeleportState, struct FVector vLocation )
{
	static UFunction* pFnFlashTeleportFx = NULL;

	if ( ! pFnFlashTeleportFx )
		pFnFlashTeleportFx = (UFunction*) UObject::GObjObjects()->Data[ 40777 ];

	ATgPawn_execFlashTeleportFx_Parms FlashTeleportFx_Parms;
	FlashTeleportFx_Parms.nTeleportState = nTeleportState;
	memcpy ( &FlashTeleportFx_Parms.vLocation, &vLocation, 0xC );

	pFnFlashTeleportFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashTeleportFx, &FlashTeleportFx_Parms, NULL );

	pFnFlashTeleportFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashChangeMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::FlashChangeMesh ( )
{
	static UFunction* pFnFlashChangeMesh = NULL;

	if ( ! pFnFlashChangeMesh )
		pFnFlashChangeMesh = (UFunction*) UObject::GObjObjects()->Data[ 40776 ];

	ATgPawn_execFlashChangeMesh_Parms FlashChangeMesh_Parms;

	pFnFlashChangeMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashChangeMesh, &FlashChangeMesh_Parms, NULL );

	pFnFlashChangeMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashHitWall
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgPawn::FlashHitWall ( struct FVector HitNormal )
{
	static UFunction* pFnFlashHitWall = NULL;

	if ( ! pFnFlashHitWall )
		pFnFlashHitWall = (UFunction*) UObject::GObjObjects()->Data[ 40774 ];

	ATgPawn_execFlashHitWall_Parms FlashHitWall_Parms;
	memcpy ( &FlashHitWall_Parms.HitNormal, &HitNormal, 0xC );

	pFnFlashHitWall->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashHitWall, &FlashHitWall_Parms, NULL );

	pFnFlashHitWall->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashDestruct
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

void ATgPawn::FlashDestruct ( int nDeviceInstanceId, struct FVector vLocation )
{
	static UFunction* pFnFlashDestruct = NULL;

	if ( ! pFnFlashDestruct )
		pFnFlashDestruct = (UFunction*) UObject::GObjObjects()->Data[ 40771 ];

	ATgPawn_execFlashDestruct_Parms FlashDestruct_Parms;
	FlashDestruct_Parms.nDeviceInstanceId = nDeviceInstanceId;
	memcpy ( &FlashDestruct_Parms.vLocation, &vLocation, 0xC );

	pFnFlashDestruct->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashDestruct, &FlashDestruct_Parms, NULL );

	pFnFlashDestruct->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashShowDamage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )

void ATgPawn::FlashShowDamage ( int nDeviceInstanceId )
{
	static UFunction* pFnFlashShowDamage = NULL;

	if ( ! pFnFlashShowDamage )
		pFnFlashShowDamage = (UFunction*) UObject::GObjObjects()->Data[ 40769 ];

	ATgPawn_execFlashShowDamage_Parms FlashShowDamage_Parms;
	FlashShowDamage_Parms.nDeviceInstanceId = nDeviceInstanceId;

	pFnFlashShowDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashShowDamage, &FlashShowDamage_Parms, NULL );

	pFnFlashShowDamage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashResyncClient
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::FlashResyncClient ( )
{
	static UFunction* pFnFlashResyncClient = NULL;

	if ( ! pFnFlashResyncClient )
		pFnFlashResyncClient = (UFunction*) UObject::GObjObjects()->Data[ 40768 ];

	ATgPawn_execFlashResyncClient_Parms FlashResyncClient_Parms;

	pFnFlashResyncClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashResyncClient, &FlashResyncClient_Parms, NULL );

	pFnFlashResyncClient->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashModeEquipDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashModeEquipDone ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashModeEquipDone = NULL;

	if ( ! pFnFlashModeEquipDone )
		pFnFlashModeEquipDone = (UFunction*) UObject::GObjObjects()->Data[ 40765 ];

	ATgPawn_execFlashModeEquipDone_Parms FlashModeEquipDone_Parms;
	FlashModeEquipDone_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashModeEquipDone_Parms.nFireModeNum = nFireModeNum;

	pFnFlashModeEquipDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashModeEquipDone, &FlashModeEquipDone_Parms, NULL );

	pFnFlashModeEquipDone->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashEventUpdate
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::FlashEventUpdate ( )
{
	static UFunction* pFnFlashEventUpdate = NULL;

	if ( ! pFnFlashEventUpdate )
		pFnFlashEventUpdate = (UFunction*) UObject::GObjObjects()->Data[ 40764 ];

	ATgPawn_execFlashEventUpdate_Parms FlashEventUpdate_Parms;

	pFnFlashEventUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashEventUpdate, &FlashEventUpdate_Parms, NULL );

	pFnFlashEventUpdate->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashHit
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  byHitType                      ( CPF_Parm )
// unsigned char                  byHitMagnitude                 ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FVector                 vRayDir                        ( CPF_Parm )

void ATgPawn::FlashHit ( unsigned char byHitType, unsigned char byHitMagnitude, struct FVector vLocation, struct FVector vRayDir )
{
	static UFunction* pFnFlashHit = NULL;

	if ( ! pFnFlashHit )
		pFnFlashHit = (UFunction*) UObject::GObjObjects()->Data[ 40759 ];

	ATgPawn_execFlashHit_Parms FlashHit_Parms;
	FlashHit_Parms.byHitType = byHitType;
	FlashHit_Parms.byHitMagnitude = byHitMagnitude;
	memcpy ( &FlashHit_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &FlashHit_Parms.vRayDir, &vRayDir, 0xC );

	pFnFlashHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashHit, &FlashHit_Parms, NULL );

	pFnFlashHit->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashInterrupt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )

void ATgPawn::FlashInterrupt ( int nDeviceInstanceId )
{
	static UFunction* pFnFlashInterrupt = NULL;

	if ( ! pFnFlashInterrupt )
		pFnFlashInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 40757 ];

	ATgPawn_execFlashInterrupt_Parms FlashInterrupt_Parms;
	FlashInterrupt_Parms.nDeviceInstanceId = nDeviceInstanceId;

	pFnFlashInterrupt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashInterrupt, &FlashInterrupt_Parms, NULL );

	pFnFlashInterrupt->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashBlockDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashBlockDone ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashBlockDone = NULL;

	if ( ! pFnFlashBlockDone )
		pFnFlashBlockDone = (UFunction*) UObject::GObjObjects()->Data[ 40754 ];

	ATgPawn_execFlashBlockDone_Parms FlashBlockDone_Parms;
	FlashBlockDone_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashBlockDone_Parms.nFireModeNum = nFireModeNum;

	pFnFlashBlockDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashBlockDone, &FlashBlockDone_Parms, NULL );

	pFnFlashBlockDone->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashBlockFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashBlockFx ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashBlockFx = NULL;

	if ( ! pFnFlashBlockFx )
		pFnFlashBlockFx = (UFunction*) UObject::GObjObjects()->Data[ 40751 ];

	ATgPawn_execFlashBlockFx_Parms FlashBlockFx_Parms;
	FlashBlockFx_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashBlockFx_Parms.nFireModeNum = nFireModeNum;

	pFnFlashBlockFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashBlockFx, &FlashBlockFx_Parms, NULL );

	pFnFlashBlockFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashBlock
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashBlock ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashBlock = NULL;

	if ( ! pFnFlashBlock )
		pFnFlashBlock = (UFunction*) UObject::GObjObjects()->Data[ 40748 ];

	ATgPawn_execFlashBlock_Parms FlashBlock_Parms;
	FlashBlock_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashBlock_Parms.nFireModeNum = nFireModeNum;

	pFnFlashBlock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashBlock, &FlashBlock_Parms, NULL );

	pFnFlashBlock->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashCooldownDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashCooldownDone ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashCooldownDone = NULL;

	if ( ! pFnFlashCooldownDone )
		pFnFlashCooldownDone = (UFunction*) UObject::GObjObjects()->Data[ 40745 ];

	ATgPawn_execFlashCooldownDone_Parms FlashCooldownDone_Parms;
	FlashCooldownDone_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashCooldownDone_Parms.nFireModeNum = nFireModeNum;

	pFnFlashCooldownDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashCooldownDone, &FlashCooldownDone_Parms, NULL );

	pFnFlashCooldownDone->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashCooldown ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashCooldown = NULL;

	if ( ! pFnFlashCooldown )
		pFnFlashCooldown = (UFunction*) UObject::GObjObjects()->Data[ 40742 ];

	ATgPawn_execFlashCooldown_Parms FlashCooldown_Parms;
	FlashCooldown_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashCooldown_Parms.nFireModeNum = nFireModeNum;

	pFnFlashCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashCooldown, &FlashCooldown_Parms, NULL );

	pFnFlashCooldown->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashStartFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashStartFire ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashStartFire = NULL;

	if ( ! pFnFlashStartFire )
		pFnFlashStartFire = (UFunction*) UObject::GObjObjects()->Data[ 40739 ];

	ATgPawn_execFlashStartFire_Parms FlashStartFire_Parms;
	FlashStartFire_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashStartFire_Parms.nFireModeNum = nFireModeNum;

	pFnFlashStartFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashStartFire, &FlashStartFire_Parms, NULL );

	pFnFlashStartFire->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashStopFire
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashStopFire ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashStopFire = NULL;

	if ( ! pFnFlashStopFire )
		pFnFlashStopFire = (UFunction*) UObject::GObjObjects()->Data[ 40736 ];

	ATgPawn_execFlashStopFire_Parms FlashStopFire_Parms;
	FlashStopFire_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashStopFire_Parms.nFireModeNum = nFireModeNum;

	pFnFlashStopFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashStopFire, &FlashStopFire_Parms, NULL );

	pFnFlashStopFire->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashArcing
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// struct FVector                 vNewLoc                        ( CPF_Parm )
// struct FVector                 vOldLoc                        ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bsuccesfulhit                  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::FlashArcing ( int nDeviceInstanceId, int nFireModeNum, struct FVector vNewLoc, struct FVector vOldLoc, int nEquipSlot, int nSocketIndex, unsigned long bsuccesfulhit )
{
	static UFunction* pFnFlashArcing = NULL;

	if ( ! pFnFlashArcing )
		pFnFlashArcing = (UFunction*) UObject::GObjObjects()->Data[ 40728 ];

	ATgPawn_execFlashArcing_Parms FlashArcing_Parms;
	FlashArcing_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashArcing_Parms.nFireModeNum = nFireModeNum;
	memcpy ( &FlashArcing_Parms.vNewLoc, &vNewLoc, 0xC );
	memcpy ( &FlashArcing_Parms.vOldLoc, &vOldLoc, 0xC );
	FlashArcing_Parms.nEquipSlot = nEquipSlot;
	FlashArcing_Parms.nSocketIndex = nSocketIndex;
	FlashArcing_Parms.bsuccesfulhit = bsuccesfulhit;

	pFnFlashArcing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashArcing, &FlashArcing_Parms, NULL );

	pFnFlashArcing->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashFireNoSim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// struct FVector                 vNewLoc                        ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bsuccesfulhit                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShot                 ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          RefireTime                     ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::FlashFireNoSim ( int nDeviceInstanceId, int nFireModeNum, struct FVector vNewLoc, int nEquipSlot, int nSocketIndex, unsigned long bsuccesfulhit, unsigned long bSecondaryShot, int SituationalAttackType, float RefireTime )
{
	static UFunction* pFnFlashFireNoSim = NULL;

	if ( ! pFnFlashFireNoSim )
		pFnFlashFireNoSim = (UFunction*) UObject::GObjObjects()->Data[ 40718 ];

	ATgPawn_execFlashFireNoSim_Parms FlashFireNoSim_Parms;
	FlashFireNoSim_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashFireNoSim_Parms.nFireModeNum = nFireModeNum;
	memcpy ( &FlashFireNoSim_Parms.vNewLoc, &vNewLoc, 0xC );
	FlashFireNoSim_Parms.nEquipSlot = nEquipSlot;
	FlashFireNoSim_Parms.nSocketIndex = nSocketIndex;
	FlashFireNoSim_Parms.bsuccesfulhit = bsuccesfulhit;
	FlashFireNoSim_Parms.bSecondaryShot = bSecondaryShot;
	FlashFireNoSim_Parms.SituationalAttackType = SituationalAttackType;
	FlashFireNoSim_Parms.RefireTime = RefireTime;

	pFnFlashFireNoSim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashFireNoSim, &FlashFireNoSim_Parms, NULL );

	pFnFlashFireNoSim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashFire
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// struct FVector                 vNewLoc                        ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bsuccesfulhit                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSecondaryShot                 ( CPF_OptionalParm | CPF_Parm )
// int                            SituationalAttackType          ( CPF_OptionalParm | CPF_Parm )
// float                          RefireTime                     ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::FlashFire ( int nDeviceInstanceId, int nFireModeNum, struct FVector vNewLoc, int nEquipSlot, int nSocketIndex, unsigned long bsuccesfulhit, unsigned long bSecondaryShot, int SituationalAttackType, float RefireTime )
{
	static UFunction* pFnFlashFire = NULL;

	if ( ! pFnFlashFire )
		pFnFlashFire = (UFunction*) UObject::GObjObjects()->Data[ 40708 ];

	ATgPawn_execFlashFire_Parms FlashFire_Parms;
	FlashFire_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashFire_Parms.nFireModeNum = nFireModeNum;
	memcpy ( &FlashFire_Parms.vNewLoc, &vNewLoc, 0xC );
	FlashFire_Parms.nEquipSlot = nEquipSlot;
	FlashFire_Parms.nSocketIndex = nSocketIndex;
	FlashFire_Parms.bsuccesfulhit = bsuccesfulhit;
	FlashFire_Parms.bSecondaryShot = bSecondaryShot;
	FlashFire_Parms.SituationalAttackType = SituationalAttackType;
	FlashFire_Parms.RefireTime = RefireTime;

	pFnFlashFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashFire, &FlashFire_Parms, NULL );

	pFnFlashFire->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashBuildUp
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::FlashBuildUp ( int nDeviceInstanceId, int nFireModeNum, int nEquipSlot, int nSocketIndex )
{
	static UFunction* pFnFlashBuildUp = NULL;

	if ( ! pFnFlashBuildUp )
		pFnFlashBuildUp = (UFunction*) UObject::GObjObjects()->Data[ 40703 ];

	ATgPawn_execFlashBuildUp_Parms FlashBuildUp_Parms;
	FlashBuildUp_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashBuildUp_Parms.nFireModeNum = nFireModeNum;
	FlashBuildUp_Parms.nEquipSlot = nEquipSlot;
	FlashBuildUp_Parms.nSocketIndex = nSocketIndex;

	pFnFlashBuildUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashBuildUp, &FlashBuildUp_Parms, NULL );

	pFnFlashBuildUp->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashFireMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nDeviceInstanceId              ( CPF_Parm )
// int                            nFireModeNum                   ( CPF_Parm )

void ATgPawn::FlashFireMode ( int nDeviceInstanceId, int nFireModeNum )
{
	static UFunction* pFnFlashFireMode = NULL;

	if ( ! pFnFlashFireMode )
		pFnFlashFireMode = (UFunction*) UObject::GObjObjects()->Data[ 40700 ];

	ATgPawn_execFlashFireMode_Parms FlashFireMode_Parms;
	FlashFireMode_Parms.nDeviceInstanceId = nDeviceInstanceId;
	FlashFireMode_Parms.nFireModeNum = nFireModeNum;

	pFnFlashFireMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashFireMode, &FlashFireMode_Parms, NULL );

	pFnFlashFireMode->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.FlashResetReplication
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::FlashResetReplication ( )
{
	static UFunction* pFnFlashResetReplication = NULL;

	if ( ! pFnFlashResetReplication )
		pFnFlashResetReplication = (UFunction*) UObject::GObjObjects()->Data[ 40699 ];

	ATgPawn_execFlashResetReplication_Parms FlashResetReplication_Parms;

	pFnFlashResetReplication->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlashResetReplication, &FlashResetReplication_Parms, NULL );

	pFnFlashResetReplication->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.NativeCanvasProject
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCanvas*                 CanvasToUse                    ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

struct FVector ATgPawn::NativeCanvasProject ( class UCanvas* CanvasToUse, struct FVector vLocation )
{
	static UFunction* pFnNativeCanvasProject = NULL;

	if ( ! pFnNativeCanvasProject )
		pFnNativeCanvasProject = (UFunction*) UObject::GObjObjects()->Data[ 40695 ];

	ATgPawn_execNativeCanvasProject_Parms NativeCanvasProject_Parms;
	NativeCanvasProject_Parms.CanvasToUse = CanvasToUse;
	memcpy ( &NativeCanvasProject_Parms.vLocation, &vLocation, 0xC );

	pFnNativeCanvasProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeCanvasProject, &NativeCanvasProject_Parms, NULL );

	pFnNativeCanvasProject->FunctionFlags |= 0x400;

	return NativeCanvasProject_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DrawNameText
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCanvas*                 CanvasToUse                    ( CPF_Parm )
// float                          StartX                         ( CPF_Parm )
// float                          StartY                         ( CPF_Parm )
// struct FString                 NameString                     ( CPF_Parm | CPF_NeedCtorLink )
// class UFont*                   NameFont                       ( CPF_Parm )
// struct FColor                  NameColor                      ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

int ATgPawn::DrawNameText ( class UCanvas* CanvasToUse, float StartX, float StartY, struct FString NameString, class UFont* NameFont, struct FColor NameColor, float Scale )
{
	static UFunction* pFnDrawNameText = NULL;

	if ( ! pFnDrawNameText )
		pFnDrawNameText = (UFunction*) UObject::GObjObjects()->Data[ 40686 ];

	ATgPawn_execDrawNameText_Parms DrawNameText_Parms;
	DrawNameText_Parms.CanvasToUse = CanvasToUse;
	DrawNameText_Parms.StartX = StartX;
	DrawNameText_Parms.StartY = StartY;
	memcpy ( &DrawNameText_Parms.NameString, &NameString, 0xC );
	DrawNameText_Parms.NameFont = NameFont;
	memcpy ( &DrawNameText_Parms.NameColor, &NameColor, 0x4 );
	DrawNameText_Parms.Scale = Scale;

	pFnDrawNameText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawNameText, &DrawNameText_Parms, NULL );

	pFnDrawNameText->FunctionFlags |= 0x400;

	return DrawNameText_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DrawScaledString
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCanvas*                 CanvasToUse                    ( CPF_Parm )
// float                          StartX                         ( CPF_Parm )
// float                          StartY                         ( CPF_Parm )
// struct FString                 NameString                     ( CPF_Parm | CPF_NeedCtorLink )
// class UFont*                   NameFont                       ( CPF_Parm )
// struct FColor                  NameColor                      ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

int ATgPawn::DrawScaledString ( class UCanvas* CanvasToUse, float StartX, float StartY, struct FString NameString, class UFont* NameFont, struct FColor NameColor, float Scale )
{
	static UFunction* pFnDrawScaledString = NULL;

	if ( ! pFnDrawScaledString )
		pFnDrawScaledString = (UFunction*) UObject::GObjObjects()->Data[ 35325 ];

	ATgPawn_execDrawScaledString_Parms DrawScaledString_Parms;
	DrawScaledString_Parms.CanvasToUse = CanvasToUse;
	DrawScaledString_Parms.StartX = StartX;
	DrawScaledString_Parms.StartY = StartY;
	memcpy ( &DrawScaledString_Parms.NameString, &NameString, 0xC );
	DrawScaledString_Parms.NameFont = NameFont;
	memcpy ( &DrawScaledString_Parms.NameColor, &NameColor, 0x4 );
	DrawScaledString_Parms.Scale = Scale;

	pFnDrawScaledString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawScaledString, &DrawScaledString_Parms, NULL );

	pFnDrawScaledString->FunctionFlags |= 0x400;

	return DrawScaledString_Parms.ReturnValue;
};

// Function TgGame.TgPawn.ResetProperties
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::ResetProperties ( )
{
	static UFunction* pFnResetProperties = NULL;

	if ( ! pFnResetProperties )
		pFnResetProperties = (UFunction*) UObject::GObjObjects()->Data[ 40677 ];

	ATgPawn_execResetProperties_Parms ResetProperties_Parms;

	pFnResetProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetProperties, &ResetProperties_Parms, NULL );

	pFnResetProperties->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPropertyId                    ( CPF_Parm )
// float                          fNewValue                      ( CPF_Parm )

void ATgPawn::SetProperty ( int nPropertyId, float fNewValue )
{
	static UFunction* pFnSetProperty = NULL;

	if ( ! pFnSetProperty )
		pFnSetProperty = (UFunction*) UObject::GObjObjects()->Data[ 40674 ];

	ATgPawn_execSetProperty_Parms SetProperty_Parms;
	SetProperty_Parms.nPropertyId = nPropertyId;
	SetProperty_Parms.fNewValue = fNewValue;

	pFnSetProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProperty, &SetProperty_Parms, NULL );

	pFnSetProperty->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgProperty*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPropertyId                    ( CPF_Parm )

class UTgProperty* ATgPawn::GetProperty ( int nPropertyId )
{
	static UFunction* pFnGetProperty = NULL;

	if ( ! pFnGetProperty )
		pFnGetProperty = (UFunction*) UObject::GObjObjects()->Data[ 40671 ];

	ATgPawn_execGetProperty_Parms GetProperty_Parms;
	GetProperty_Parms.nPropertyId = nPropertyId;

	pFnGetProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProperty, &GetProperty_Parms, NULL );

	pFnGetProperty->FunctionFlags |= 0x400;

	return GetProperty_Parms.ReturnValue;
};

// Function TgGame.TgPawn.AddProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPropId                        ( CPF_Parm )
// float                          fBase                          ( CPF_Parm )
// float                          fRaw                           ( CPF_Parm )
// float                          FMin                           ( CPF_Parm )
// float                          FMax                           ( CPF_Parm )

void ATgPawn::AddProperty ( int nPropId, float fBase, float fRaw, float FMin, float FMax )
{
	static UFunction* pFnAddProperty = NULL;

	if ( ! pFnAddProperty )
		pFnAddProperty = (UFunction*) UObject::GObjObjects()->Data[ 40665 ];

	ATgPawn_execAddProperty_Parms AddProperty_Parms;
	AddProperty_Parms.nPropId = nPropId;
	AddProperty_Parms.fBase = fBase;
	AddProperty_Parms.fRaw = fRaw;
	AddProperty_Parms.FMin = FMin;
	AddProperty_Parms.FMax = FMax;

	pFnAddProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddProperty, &AddProperty_Parms, NULL );

	pFnAddProperty->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.InitializeDefaultProps
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::InitializeDefaultProps ( )
{
	static UFunction* pFnInitializeDefaultProps = NULL;

	if ( ! pFnInitializeDefaultProps )
		pFnInitializeDefaultProps = (UFunction*) UObject::GObjObjects()->Data[ 40664 ];

	ATgPawn_execInitializeDefaultProps_Parms InitializeDefaultProps_Parms;

	pFnInitializeDefaultProps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeDefaultProps, &InitializeDefaultProps_Parms, NULL );

	pFnInitializeDefaultProps->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.ApplyPawnSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::ApplyPawnSetup ( )
{
	static UFunction* pFnApplyPawnSetup = NULL;

	if ( ! pFnApplyPawnSetup )
		pFnApplyPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 40662 ];

	ATgPawn_execApplyPawnSetup_Parms ApplyPawnSetup_Parms;

	pFnApplyPawnSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyPawnSetup, &ApplyPawnSetup_Parms, NULL );

	pFnApplyPawnSetup->FunctionFlags |= 0x400;

	return ApplyPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn.DoBlend
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   BlendName                      ( CPF_Parm )
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void ATgPawn::DoBlend ( struct FName BlendName, float BlendTarget, float BlendTime, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnDoBlend = NULL;

	if ( ! pFnDoBlend )
		pFnDoBlend = (UFunction*) UObject::GObjObjects()->Data[ 40657 ];

	ATgPawn_execDoBlend_Parms DoBlend_Parms;
	memcpy ( &DoBlend_Parms.BlendName, &BlendName, 0x8 );
	DoBlend_Parms.BlendTarget = BlendTarget;
	DoBlend_Parms.BlendTime = BlendTime;
	DoBlend_Parms.SkelMesh = SkelMesh;

	pFnDoBlend->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoBlend, &DoBlend_Parms, NULL );

	pFnDoBlend->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DeviceFormChanged
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForceReload                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::DeviceFormChanged ( unsigned long bForceReload )
{
	static UFunction* pFnDeviceFormChanged = NULL;

	if ( ! pFnDeviceFormChanged )
		pFnDeviceFormChanged = (UFunction*) UObject::GObjObjects()->Data[ 40655 ];

	ATgPawn_execDeviceFormChanged_Parms DeviceFormChanged_Parms;
	DeviceFormChanged_Parms.bForceReload = bForceReload;

	pFnDeviceFormChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeviceFormChanged, &DeviceFormChanged_Parms, NULL );

	pFnDeviceFormChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.CreateDeviceForm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgDeviceForm*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FEquipDeviceInfo        Info                           ( CPF_Parm )

class UTgDeviceForm* ATgPawn::CreateDeviceForm ( struct FEquipDeviceInfo Info )
{
	static UFunction* pFnCreateDeviceForm = NULL;

	if ( ! pFnCreateDeviceForm )
		pFnCreateDeviceForm = (UFunction*) UObject::GObjObjects()->Data[ 40652 ];

	ATgPawn_execCreateDeviceForm_Parms CreateDeviceForm_Parms;
	memcpy ( &CreateDeviceForm_Parms.Info, &Info, 0xC );

	pFnCreateDeviceForm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDeviceForm, &CreateDeviceForm_Parms, NULL );

	pFnCreateDeviceForm->FunctionFlags |= 0x400;

	return CreateDeviceForm_Parms.ReturnValue;
};

// Function TgGame.TgPawn.CreateEquipDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nInventoryId                   ( CPF_Parm )
// int                            nDeviceId                      ( CPF_Parm )
// unsigned char                  ePoint                         ( CPF_Parm )

class ATgDevice* ATgPawn::CreateEquipDevice ( int nInventoryId, int nDeviceId, unsigned char ePoint )
{
	static UFunction* pFnCreateEquipDevice = NULL;

	if ( ! pFnCreateEquipDevice )
		pFnCreateEquipDevice = (UFunction*) UObject::GObjObjects()->Data[ 40647 ];

	ATgPawn_execCreateEquipDevice_Parms CreateEquipDevice_Parms;
	CreateEquipDevice_Parms.nInventoryId = nInventoryId;
	CreateEquipDevice_Parms.nDeviceId = nDeviceId;
	CreateEquipDevice_Parms.ePoint = ePoint;

	pFnCreateEquipDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateEquipDevice, &CreateEquipDevice_Parms, NULL );

	pFnCreateEquipDevice->FunctionFlags |= 0x400;

	return CreateEquipDevice_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetDeviceByEqPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            eEqPoint                       ( CPF_Parm )

class ATgDevice* ATgPawn::GetDeviceByEqPoint ( int eEqPoint )
{
	static UFunction* pFnGetDeviceByEqPoint = NULL;

	if ( ! pFnGetDeviceByEqPoint )
		pFnGetDeviceByEqPoint = (UFunction*) UObject::GObjObjects()->Data[ 40644 ];

	ATgPawn_execGetDeviceByEqPoint_Parms GetDeviceByEqPoint_Parms;
	GetDeviceByEqPoint_Parms.eEqPoint = eEqPoint;

	pFnGetDeviceByEqPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceByEqPoint, &GetDeviceByEqPoint_Parms, NULL );

	pFnGetDeviceByEqPoint->FunctionFlags |= 0x400;

	return GetDeviceByEqPoint_Parms.ReturnValue;
};

// Function TgGame.TgPawn.UpdateClientDevices
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceDeviceFormArg            ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::UpdateClientDevices ( unsigned long bForce, unsigned long bForceDeviceFormArg )
{
	static UFunction* pFnUpdateClientDevices = NULL;

	if ( ! pFnUpdateClientDevices )
		pFnUpdateClientDevices = (UFunction*) UObject::GObjObjects()->Data[ 40641 ];

	ATgPawn_execUpdateClientDevices_Parms UpdateClientDevices_Parms;
	UpdateClientDevices_Parms.bForce = bForce;
	UpdateClientDevices_Parms.bForceDeviceFormArg = bForceDeviceFormArg;

	pFnUpdateClientDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClientDevices, &UpdateClientDevices_Parms, NULL );

	pFnUpdateClientDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.IsBlocking
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn::IsBlocking ( )
{
	static UFunction* pFnIsBlocking = NULL;

	if ( ! pFnIsBlocking )
		pFnIsBlocking = (UFunction*) UObject::GObjObjects()->Data[ 40639 ];

	ATgPawn_execIsBlocking_Parms IsBlocking_Parms;

	pFnIsBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBlocking, &IsBlocking_Parms, NULL );

	pFnIsBlocking->FunctionFlags |= 0x400;

	return IsBlocking_Parms.ReturnValue;
};

// Function TgGame.TgPawn.BeginEquipOffhandCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn::BeginEquipOffhandCooldown ( )
{
	static UFunction* pFnBeginEquipOffhandCooldown = NULL;

	if ( ! pFnBeginEquipOffhandCooldown )
		pFnBeginEquipOffhandCooldown = (UFunction*) UObject::GObjObjects()->Data[ 40638 ];

	ATgPawn_execBeginEquipOffhandCooldown_Parms BeginEquipOffhandCooldown_Parms;

	pFnBeginEquipOffhandCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginEquipOffhandCooldown, &BeginEquipOffhandCooldown_Parms, NULL );

	pFnBeginEquipOffhandCooldown->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.RealSetDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            DeviceID                       ( CPF_Parm )

void ATgPawn::RealSetDevice ( int DeviceID )
{
	static UFunction* pFnRealSetDevice = NULL;

	if ( ! pFnRealSetDevice )
		pFnRealSetDevice = (UFunction*) UObject::GObjObjects()->Data[ 40636 ];

	ATgPawn_execRealSetDevice_Parms RealSetDevice_Parms;
	RealSetDevice_Parms.DeviceID = DeviceID;

	pFnRealSetDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRealSetDevice, &RealSetDevice_Parms, NULL );

	pFnRealSetDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.SetTargetActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void ATgPawn::SetTargetActor ( class AActor* Target )
{
	static UFunction* pFnSetTargetActor = NULL;

	if ( ! pFnSetTargetActor )
		pFnSetTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 40634 ];

	ATgPawn_execSetTargetActor_Parms SetTargetActor_Parms;
	SetTargetActor_Parms.Target = Target;

	pFnSetTargetActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetActor, &SetTargetActor_Parms, NULL );

	pFnSetTargetActor->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.GetTargetPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgPawn::GetTargetPawn ( )
{
	static UFunction* pFnGetTargetPawn = NULL;

	if ( ! pFnGetTargetPawn )
		pFnGetTargetPawn = (UFunction*) UObject::GObjObjects()->Data[ 40632 ];

	ATgPawn_execGetTargetPawn_Parms GetTargetPawn_Parms;

	pFnGetTargetPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetPawn, &GetTargetPawn_Parms, NULL );

	pFnGetTargetPawn->FunctionFlags |= 0x400;

	return GetTargetPawn_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetTargetActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgPawn::GetTargetActor ( )
{
	static UFunction* pFnGetTargetActor = NULL;

	if ( ! pFnGetTargetActor )
		pFnGetTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 40630 ];

	ATgPawn_execGetTargetActor_Parms GetTargetActor_Parms;

	pFnGetTargetActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetActor, &GetTargetActor_Parms, NULL );

	pFnGetTargetActor->FunctionFlags |= 0x400;

	return GetTargetActor_Parms.ReturnValue;
};

// Function TgGame.TgPawn.GetTestGlobalVar
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn::GetTestGlobalVar ( )
{
	static UFunction* pFnGetTestGlobalVar = NULL;

	if ( ! pFnGetTestGlobalVar )
		pFnGetTestGlobalVar = (UFunction*) UObject::GObjObjects()->Data[ 40628 ];

	ATgPawn_execGetTestGlobalVar_Parms GetTestGlobalVar_Parms;

	pFnGetTestGlobalVar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTestGlobalVar, &GetTestGlobalVar_Parms, NULL );

	pFnGetTestGlobalVar->FunctionFlags |= 0x400;

	return GetTestGlobalVar_Parms.ReturnValue;
};

// Function TgGame.TgPawn.NativeSetTestGlobalVar
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            aVar                           ( CPF_Parm )

void ATgPawn::NativeSetTestGlobalVar ( int aVar )
{
	static UFunction* pFnNativeSetTestGlobalVar = NULL;

	if ( ! pFnNativeSetTestGlobalVar )
		pFnNativeSetTestGlobalVar = (UFunction*) UObject::GObjObjects()->Data[ 40626 ];

	ATgPawn_execNativeSetTestGlobalVar_Parms NativeSetTestGlobalVar_Parms;
	NativeSetTestGlobalVar_Parms.aVar = aVar;

	pFnNativeSetTestGlobalVar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeSetTestGlobalVar, &NativeSetTestGlobalVar_Parms, NULL );

	pFnNativeSetTestGlobalVar->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawLowHealthEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgPawn::DrawLowHealthEffects ( class ATgPlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnDrawLowHealthEffects = NULL;

	if ( ! pFnDrawLowHealthEffects )
		pFnDrawLowHealthEffects = (UFunction*) UObject::GObjObjects()->Data[ 40621 ];

	ATgPawn_execDrawLowHealthEffects_Parms DrawLowHealthEffects_Parms;
	DrawLowHealthEffects_Parms.PC = PC;
	DrawLowHealthEffects_Parms.Canvas = Canvas;
	memcpy ( &DrawLowHealthEffects_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawLowHealthEffects_Parms.CameraDir, &CameraDir, 0xC );

	pFnDrawLowHealthEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawLowHealthEffects, &DrawLowHealthEffects_Parms, NULL );

	pFnDrawLowHealthEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawTargetBox
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )
// unsigned long                  bAnimated                      ( CPF_OptionalParm | CPF_Parm )

void ATgPawn::DrawTargetBox ( class ATgPlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir, unsigned long bAnimated )
{
	static UFunction* pFnDrawTargetBox = NULL;

	if ( ! pFnDrawTargetBox )
		pFnDrawTargetBox = (UFunction*) UObject::GObjObjects()->Data[ 40615 ];

	ATgPawn_execDrawTargetBox_Parms DrawTargetBox_Parms;
	DrawTargetBox_Parms.PC = PC;
	DrawTargetBox_Parms.Canvas = Canvas;
	memcpy ( &DrawTargetBox_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &DrawTargetBox_Parms.CameraDir, &CameraDir, 0xC );
	DrawTargetBox_Parms.bAnimated = bAnimated;

	pFnDrawTargetBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTargetBox, &DrawTargetBox_Parms, NULL );

	pFnDrawTargetBox->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawPlayerStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 ScreenLoc                      ( CPF_Parm )
// unsigned long                  bIsFriendly                    ( CPF_Parm )
// unsigned long                  bIsSameTeam                    ( CPF_Parm )
// float                          fScaleFactor                   ( CPF_Parm )
// float                          fAlphaLevel                    ( CPF_Parm )
// unsigned long                  bIsTarget                      ( CPF_Parm )

void ATgPawn::DrawPlayerStat ( class ATgPlayerController* PC, class UCanvas* Canvas, struct FVector ScreenLoc, unsigned long bIsFriendly, unsigned long bIsSameTeam, float fScaleFactor, float fAlphaLevel, unsigned long bIsTarget )
{
	static UFunction* pFnDrawPlayerStat = NULL;

	if ( ! pFnDrawPlayerStat )
		pFnDrawPlayerStat = (UFunction*) UObject::GObjObjects()->Data[ 40606 ];

	ATgPawn_execDrawPlayerStat_Parms DrawPlayerStat_Parms;
	DrawPlayerStat_Parms.PC = PC;
	DrawPlayerStat_Parms.Canvas = Canvas;
	memcpy ( &DrawPlayerStat_Parms.ScreenLoc, &ScreenLoc, 0xC );
	DrawPlayerStat_Parms.bIsFriendly = bIsFriendly;
	DrawPlayerStat_Parms.bIsSameTeam = bIsSameTeam;
	DrawPlayerStat_Parms.fScaleFactor = fScaleFactor;
	DrawPlayerStat_Parms.fAlphaLevel = fAlphaLevel;
	DrawPlayerStat_Parms.bIsTarget = bIsTarget;

	pFnDrawPlayerStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPlayerStat, &DrawPlayerStat_Parms, NULL );

	pFnDrawPlayerStat->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.DrawPlayerIcon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 vScreenLoc                     ( CPF_Parm )
// float                          fTagScaleFactor                ( CPF_Parm )
// unsigned long                  bIsFriendly                    ( CPF_Parm )
// unsigned long                  bIsSameTeam                    ( CPF_Parm )

void ATgPawn::DrawPlayerIcon ( class ATgPlayerController* PC, class UCanvas* Canvas, struct FVector vScreenLoc, float fTagScaleFactor, unsigned long bIsFriendly, unsigned long bIsSameTeam )
{
	static UFunction* pFnDrawPlayerIcon = NULL;

	if ( ! pFnDrawPlayerIcon )
		pFnDrawPlayerIcon = (UFunction*) UObject::GObjObjects()->Data[ 40599 ];

	ATgPawn_execDrawPlayerIcon_Parms DrawPlayerIcon_Parms;
	DrawPlayerIcon_Parms.PC = PC;
	DrawPlayerIcon_Parms.Canvas = Canvas;
	memcpy ( &DrawPlayerIcon_Parms.vScreenLoc, &vScreenLoc, 0xC );
	DrawPlayerIcon_Parms.fTagScaleFactor = fTagScaleFactor;
	DrawPlayerIcon_Parms.bIsFriendly = bIsFriendly;
	DrawPlayerIcon_Parms.bIsSameTeam = bIsSameTeam;

	pFnDrawPlayerIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPlayerIcon, &DrawPlayerIcon_Parms, NULL );

	pFnDrawPlayerIcon->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn.TGPostRenderFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       thePlayerController            ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgPawn::TGPostRenderFor ( class APlayerController* thePlayerController, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnTGPostRenderFor = NULL;

	if ( ! pFnTGPostRenderFor )
		pFnTGPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 40594 ];

	ATgPawn_execTGPostRenderFor_Parms TGPostRenderFor_Parms;
	TGPostRenderFor_Parms.thePlayerController = thePlayerController;
	TGPostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &TGPostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &TGPostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnTGPostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTGPostRenderFor, &TGPostRenderFor_Parms, NULL );

	pFnTGPostRenderFor->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer6
// [0x00820102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer6 ( )
{
	static UFunction* pFnExplodeHoveringTimer6 = NULL;

	if ( ! pFnExplodeHoveringTimer6 )
		pFnExplodeHoveringTimer6 = (UFunction*) UObject::GObjObjects()->Data[ 43059 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer6_Parms ExplodeHoveringTimer6_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer6, &ExplodeHoveringTimer6_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer5
// [0x00020102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer5 ( )
{
	static UFunction* pFnExplodeHoveringTimer5 = NULL;

	if ( ! pFnExplodeHoveringTimer5 )
		pFnExplodeHoveringTimer5 = (UFunction*) UObject::GObjObjects()->Data[ 43058 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer5_Parms ExplodeHoveringTimer5_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer5, &ExplodeHoveringTimer5_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer4
// [0x00020102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer4 ( )
{
	static UFunction* pFnExplodeHoveringTimer4 = NULL;

	if ( ! pFnExplodeHoveringTimer4 )
		pFnExplodeHoveringTimer4 = (UFunction*) UObject::GObjObjects()->Data[ 43057 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer4_Parms ExplodeHoveringTimer4_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer4, &ExplodeHoveringTimer4_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer3
// [0x00020102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer3 ( )
{
	static UFunction* pFnExplodeHoveringTimer3 = NULL;

	if ( ! pFnExplodeHoveringTimer3 )
		pFnExplodeHoveringTimer3 = (UFunction*) UObject::GObjObjects()->Data[ 43056 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer3_Parms ExplodeHoveringTimer3_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer3, &ExplodeHoveringTimer3_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer2
// [0x00020102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer2 ( )
{
	static UFunction* pFnExplodeHoveringTimer2 = NULL;

	if ( ! pFnExplodeHoveringTimer2 )
		pFnExplodeHoveringTimer2 = (UFunction*) UObject::GObjObjects()->Data[ 43055 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer2_Parms ExplodeHoveringTimer2_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer2, &ExplodeHoveringTimer2_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ExplodeHoveringTimer1
// [0x00020102] 
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeHoveringTimer1 ( )
{
	static UFunction* pFnExplodeHoveringTimer1 = NULL;

	if ( ! pFnExplodeHoveringTimer1 )
		pFnExplodeHoveringTimer1 = (UFunction*) UObject::GObjObjects()->Data[ 43054 ];

	ATgPawn_AttackTransport_execExplodeHoveringTimer1_Parms ExplodeHoveringTimer1_Parms;

	this->ProcessEvent ( pFnExplodeHoveringTimer1, &ExplodeHoveringTimer1_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.PlayDeathBasedOnDeathType
// [0x00820102] 
// Parameters infos:

void ATgPawn_AttackTransport::PlayDeathBasedOnDeathType ( )
{
	static UFunction* pFnPlayDeathBasedOnDeathType = NULL;

	if ( ! pFnPlayDeathBasedOnDeathType )
		pFnPlayDeathBasedOnDeathType = (UFunction*) UObject::GObjObjects()->Data[ 43047 ];

	ATgPawn_AttackTransport_execPlayDeathBasedOnDeathType_Parms PlayDeathBasedOnDeathType_Parms;

	this->ProcessEvent ( pFnPlayDeathBasedOnDeathType, &PlayDeathBasedOnDeathType_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.PlayDyingPhysicsAndAnimation
// [0x00020100] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_AttackTransport::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 43044 ];

	ATgPawn_AttackTransport_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_AttackTransport::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 43040 ];

	ATgPawn_AttackTransport_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_AttackTransport::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43039 ];

	ATgPawn_AttackTransport_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.OnDeviceFormFire
// [0x00020100] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_AttackTransport::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43037 ];

	ATgPawn_AttackTransport_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.OnDeviceFormBuildup
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_AttackTransport::OnDeviceFormBuildup ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormBuildup = NULL;

	if ( ! pFnOnDeviceFormBuildup )
		pFnOnDeviceFormBuildup = (UFunction*) UObject::GObjObjects()->Data[ 43034 ];

	ATgPawn_AttackTransport_execOnDeviceFormBuildup_Parms OnDeviceFormBuildup_Parms;
	OnDeviceFormBuildup_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormBuildup, &OnDeviceFormBuildup_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_AttackTransport::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43032 ];

	ATgPawn_AttackTransport_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_AttackTransport.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void ATgPawn_AttackTransport::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 43031 ];

	ATgPawn_AttackTransport_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_AttackTransport::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43029 ];

	ATgPawn_AttackTransport_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_AttackTransport::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43027 ];

	ATgPawn_AttackTransport_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_AttackTransport.OnProjectileExploded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_AttackTransport::OnProjectileExploded ( )
{
	static UFunction* pFnOnProjectileExploded = NULL;

	if ( ! pFnOnProjectileExploded )
		pFnOnProjectileExploded = (UFunction*) UObject::GObjObjects()->Data[ 43026 ];

	ATgPawn_AttackTransport_execOnProjectileExploded_Parms OnProjectileExploded_Parms;

	pFnOnProjectileExploded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnProjectileExploded, &OnProjectileExploded_Parms, NULL );

	pFnOnProjectileExploded->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_AttackTransport.ProcessAim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_AttackTransport::ProcessAim ( )
{
	static UFunction* pFnProcessAim = NULL;

	if ( ! pFnProcessAim )
		pFnProcessAim = (UFunction*) UObject::GObjObjects()->Data[ 43025 ];

	ATgPawn_AttackTransport_execProcessAim_Parms ProcessAim_Parms;

	pFnProcessAim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessAim, &ProcessAim_Parms, NULL );

	pFnProcessAim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_AttackTransport.ExplodeMeshOnRigidBodyCollision
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_AttackTransport::ExplodeMeshOnRigidBodyCollision ( )
{
	static UFunction* pFnExplodeMeshOnRigidBodyCollision = NULL;

	if ( ! pFnExplodeMeshOnRigidBodyCollision )
		pFnExplodeMeshOnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 43024 ];

	ATgPawn_AttackTransport_execExplodeMeshOnRigidBodyCollision_Parms ExplodeMeshOnRigidBodyCollision_Parms;

	pFnExplodeMeshOnRigidBodyCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExplodeMeshOnRigidBodyCollision, &ExplodeMeshOnRigidBodyCollision_Parms, NULL );

	pFnExplodeMeshOnRigidBodyCollision->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_AttackTransport.OnPetSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pet                            ( CPF_Parm )

void ATgPawn_AttackTransport::OnPetSpawned ( class ATgPawn* Pet )
{
	static UFunction* pFnOnPetSpawned = NULL;

	if ( ! pFnOnPetSpawned )
		pFnOnPetSpawned = (UFunction*) UObject::GObjObjects()->Data[ 43022 ];

	ATgPawn_AttackTransport_execOnPetSpawned_Parms OnPetSpawned_Parms;
	OnPetSpawned_Parms.Pet = Pet;

	pFnOnPetSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPetSpawned, &OnPetSpawned_Parms, NULL );

	pFnOnPetSpawned->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_AttackTransport.InitSpawnPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SpawnTableID                   ( CPF_Parm )

void ATgPawn_AttackTransport::InitSpawnPets ( int SpawnTableID )
{
	static UFunction* pFnInitSpawnPets = NULL;

	if ( ! pFnInitSpawnPets )
		pFnInitSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 43020 ];

	ATgPawn_AttackTransport_execInitSpawnPets_Parms InitSpawnPets_Parms;
	InitSpawnPets_Parms.SpawnTableID = SpawnTableID;

	pFnInitSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSpawnPets, &InitSpawnPets_Parms, NULL );

	pFnInitSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.OnSetPlayerMesh
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_SetPlayerMesh* Action                         ( CPF_Parm )

void ATgPawn_Character::OnSetPlayerMesh ( class UTgSeqAct_SetPlayerMesh* Action )
{
	static UFunction* pFnOnSetPlayerMesh = NULL;

	if ( ! pFnOnSetPlayerMesh )
		pFnOnSetPlayerMesh = (UFunction*) UObject::GObjObjects()->Data[ 42990 ];

	ATgPawn_Character_execOnSetPlayerMesh_Parms OnSetPlayerMesh_Parms;
	OnSetPlayerMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPlayerMesh, &OnSetPlayerMesh_Parms, NULL );
};

// Function TgGame.TgPawn_Character.SetupPIEMesh
// [0x00020002] 
// Parameters infos:
// unsigned char                  PIEPawnType                    ( CPF_Parm )
// int                            MeshId                         ( CPF_Parm )

void ATgPawn_Character::SetupPIEMesh ( unsigned char PIEPawnType, int MeshId )
{
	static UFunction* pFnSetupPIEMesh = NULL;

	if ( ! pFnSetupPIEMesh )
		pFnSetupPIEMesh = (UFunction*) UObject::GObjObjects()->Data[ 42986 ];

	ATgPawn_Character_execSetupPIEMesh_Parms SetupPIEMesh_Parms;
	SetupPIEMesh_Parms.PIEPawnType = PIEPawnType;
	SetupPIEMesh_Parms.MeshId = MeshId;

	this->ProcessEvent ( pFnSetupPIEMesh, &SetupPIEMesh_Parms, NULL );
};

// Function TgGame.TgPawn_Character.SetHeadMICVectorValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          valueX                         ( CPF_Parm )
// float                          valueY                         ( CPF_Parm )
// float                          valueZ                         ( CPF_Parm )

void ATgPawn_Character::SetHeadMICVectorValue ( struct FName ParameterName, float valueX, float valueY, float valueZ )
{
	static UFunction* pFnSetHeadMICVectorValue = NULL;

	if ( ! pFnSetHeadMICVectorValue )
		pFnSetHeadMICVectorValue = (UFunction*) UObject::GObjObjects()->Data[ 42980 ];

	ATgPawn_Character_execSetHeadMICVectorValue_Parms SetHeadMICVectorValue_Parms;
	memcpy ( &SetHeadMICVectorValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetHeadMICVectorValue_Parms.valueX = valueX;
	SetHeadMICVectorValue_Parms.valueY = valueY;
	SetHeadMICVectorValue_Parms.valueZ = valueZ;

	this->ProcessEvent ( pFnSetHeadMICVectorValue, &SetHeadMICVectorValue_Parms, NULL );
};

// Function TgGame.TgPawn_Character.SetHeadMICFloatValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void ATgPawn_Character::SetHeadMICFloatValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetHeadMICFloatValue = NULL;

	if ( ! pFnSetHeadMICFloatValue )
		pFnSetHeadMICFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 42976 ];

	ATgPawn_Character_execSetHeadMICFloatValue_Parms SetHeadMICFloatValue_Parms;
	memcpy ( &SetHeadMICFloatValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetHeadMICFloatValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHeadMICFloatValue, &SetHeadMICFloatValue_Parms, NULL );
};

// Function TgGame.TgPawn_Character.ShowHeadMICValues
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn_Character::ShowHeadMICValues ( )
{
	static UFunction* pFnShowHeadMICValues = NULL;

	if ( ! pFnShowHeadMICValues )
		pFnShowHeadMICValues = (UFunction*) UObject::GObjObjects()->Data[ 42973 ];

	ATgPawn_Character_execShowHeadMICValues_Parms ShowHeadMICValues_Parms;

	this->ProcessEvent ( pFnShowHeadMICValues, &ShowHeadMICValues_Parms, NULL );
};

// Function TgGame.TgPawn_Character.PlayFootStepSound
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )
// unsigned char                  FootStepType                   ( CPF_Parm )

void ATgPawn_Character::eventPlayFootStepSound ( int FootDown, unsigned char FootStepType )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 42970 ];

	ATgPawn_Character_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;
	PlayFootStepSound_Parms.FootStepType = FootStepType;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function TgGame.TgPawn_Character.GetDefaultAssembly
// [0x00826102] 
// Parameters infos:
// struct FCustomCharacterAssembly ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  IsFemale                       ( CPF_OptionalParm | CPF_Parm )

struct FCustomCharacterAssembly ATgPawn_Character::GetDefaultAssembly ( unsigned long IsFemale )
{
	static UFunction* pFnGetDefaultAssembly = NULL;

	if ( ! pFnGetDefaultAssembly )
		pFnGetDefaultAssembly = (UFunction*) UObject::GObjObjects()->Data[ 42966 ];

	ATgPawn_Character_execGetDefaultAssembly_Parms GetDefaultAssembly_Parms;
	GetDefaultAssembly_Parms.IsFemale = IsFemale;

	this->ProcessEvent ( pFnGetDefaultAssembly, &GetDefaultAssembly_Parms, NULL );

	return GetDefaultAssembly_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.GetGenderTypeCode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_Character::eventGetGenderTypeCode ( )
{
	static UFunction* pFnGetGenderTypeCode = NULL;

	if ( ! pFnGetGenderTypeCode )
		pFnGetGenderTypeCode = (UFunction*) UObject::GObjObjects()->Data[ 42963 ];

	ATgPawn_Character_eventGetGenderTypeCode_Parms GetGenderTypeCode_Parms;

	this->ProcessEvent ( pFnGetGenderTypeCode, &GetGenderTypeCode_Parms, NULL );

	return GetGenderTypeCode_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgPawn_Character::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 42962 ];

	ATgPawn_Character_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn_Character.KillPets
// [0x00020002] 
// Parameters infos:

void ATgPawn_Character::KillPets ( )
{
	static UFunction* pFnKillPets = NULL;

	if ( ! pFnKillPets )
		pFnKillPets = (UFunction*) UObject::GObjObjects()->Data[ 42960 ];

	ATgPawn_Character_execKillPets_Parms KillPets_Parms;

	this->ProcessEvent ( pFnKillPets, &KillPets_Parms, NULL );
};

// Function TgGame.TgPawn_Character.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgPawn_Character::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 42957 ];

	ATgPawn_Character_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgPawn_Character.ShouldDoWallJump
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Character::ShouldDoWallJump ( )
{
	static UFunction* pFnShouldDoWallJump = NULL;

	if ( ! pFnShouldDoWallJump )
		pFnShouldDoWallJump = (UFunction*) UObject::GObjObjects()->Data[ 42945 ];

	ATgPawn_Character_execShouldDoWallJump_Parms ShouldDoWallJump_Parms;

	this->ProcessEvent ( pFnShouldDoWallJump, &ShouldDoWallJump_Parms, NULL );

	return ShouldDoWallJump_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ATgPawn_Character::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 42942 ];

	ATgPawn_Character_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.ClientPurchaseItem
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )
// int                            nLootTableItemId               ( CPF_Parm )
// int                            nItemCount                     ( CPF_Parm )
// int                            nAttemptedCurrencyType         ( CPF_Parm )
// int                            nAttemptedCostPerItem          ( CPF_Parm )

void ATgPawn_Character::eventClientPurchaseItem ( int nLootTableId, int nLootTableItemId, int nItemCount, int nAttemptedCurrencyType, int nAttemptedCostPerItem )
{
	static UFunction* pFnClientPurchaseItem = NULL;

	if ( ! pFnClientPurchaseItem )
		pFnClientPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 42935 ];

	ATgPawn_Character_eventClientPurchaseItem_Parms ClientPurchaseItem_Parms;
	ClientPurchaseItem_Parms.nLootTableId = nLootTableId;
	ClientPurchaseItem_Parms.nLootTableItemId = nLootTableItemId;
	ClientPurchaseItem_Parms.nItemCount = nItemCount;
	ClientPurchaseItem_Parms.nAttemptedCurrencyType = nAttemptedCurrencyType;
	ClientPurchaseItem_Parms.nAttemptedCostPerItem = nAttemptedCostPerItem;

	this->ProcessEvent ( pFnClientPurchaseItem, &ClientPurchaseItem_Parms, NULL );
};

// Function TgGame.TgPawn_Character.CanTrackATarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Character::CanTrackATarget ( )
{
	static UFunction* pFnCanTrackATarget = NULL;

	if ( ! pFnCanTrackATarget )
		pFnCanTrackATarget = (UFunction*) UObject::GObjObjects()->Data[ 42933 ];

	ATgPawn_Character_execCanTrackATarget_Parms CanTrackATarget_Parms;

	this->ProcessEvent ( pFnCanTrackATarget, &CanTrackATarget_Parms, NULL );

	return CanTrackATarget_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.SetAimTarget
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void ATgPawn_Character::SetAimTarget ( float X, float Y, float Z )
{
	static UFunction* pFnSetAimTarget = NULL;

	if ( ! pFnSetAimTarget )
		pFnSetAimTarget = (UFunction*) UObject::GObjObjects()->Data[ 42928 ];

	ATgPawn_Character_execSetAimTarget_Parms SetAimTarget_Parms;
	SetAimTarget_Parms.X = X;
	SetAimTarget_Parms.Y = Y;
	SetAimTarget_Parms.Z = Z;

	this->ProcessEvent ( pFnSetAimTarget, &SetAimTarget_Parms, NULL );
};

// Function TgGame.TgPawn_Character.UpdateMeshBoneControllers
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_Character::eventUpdateMeshBoneControllers ( float DeltaTime )
{
	static UFunction* pFnUpdateMeshBoneControllers = NULL;

	if ( ! pFnUpdateMeshBoneControllers )
		pFnUpdateMeshBoneControllers = (UFunction*) UObject::GObjObjects()->Data[ 42924 ];

	ATgPawn_Character_eventUpdateMeshBoneControllers_Parms UpdateMeshBoneControllers_Parms;
	UpdateMeshBoneControllers_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateMeshBoneControllers, &UpdateMeshBoneControllers_Parms, NULL );
};

// Function TgGame.TgPawn_Character.EnableFootControls
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            foot                           ( CPF_Parm )
// unsigned long                  bDisable                       ( CPF_Parm )

void ATgPawn_Character::eventEnableFootControls ( int foot, unsigned long bDisable )
{
	static UFunction* pFnEnableFootControls = NULL;

	if ( ! pFnEnableFootControls )
		pFnEnableFootControls = (UFunction*) UObject::GObjObjects()->Data[ 42921 ];

	ATgPawn_Character_eventEnableFootControls_Parms EnableFootControls_Parms;
	EnableFootControls_Parms.foot = foot;
	EnableFootControls_Parms.bDisable = bDisable;

	this->ProcessEvent ( pFnEnableFootControls, &EnableFootControls_Parms, NULL );
};

// Function TgGame.TgPawn_Character.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ATgPawn_Character::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 42918 ];

	ATgPawn_Character_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function TgGame.TgPawn_Character.zpivot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void ATgPawn_Character::zpivot ( float F )
{
	static UFunction* pFnzpivot = NULL;

	if ( ! pFnzpivot )
		pFnzpivot = (UFunction*) UObject::GObjObjects()->Data[ 42916 ];

	ATgPawn_Character_execzpivot_Parms zpivot_Parms;
	zpivot_Parms.F = F;

	this->ProcessEvent ( pFnzpivot, &zpivot_Parms, NULL );
};

// Function TgGame.TgPawn_Character.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Character::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 42913 ];

	ATgPawn_Character_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Character.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Character::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 42911 ];

	ATgPawn_Character_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Character.CanPawnBeStealthed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Character::eventCanPawnBeStealthed ( )
{
	static UFunction* pFnCanPawnBeStealthed = NULL;

	if ( ! pFnCanPawnBeStealthed )
		pFnCanPawnBeStealthed = (UFunction*) UObject::GObjObjects()->Data[ 42909 ];

	ATgPawn_Character_eventCanPawnBeStealthed_Parms CanPawnBeStealthed_Parms;

	this->ProcessEvent ( pFnCanPawnBeStealthed, &CanPawnBeStealthed_Parms, NULL );

	return CanPawnBeStealthed_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.IsCustomCharacter
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Character::eventIsCustomCharacter ( )
{
	static UFunction* pFnIsCustomCharacter = NULL;

	if ( ! pFnIsCustomCharacter )
		pFnIsCustomCharacter = (UFunction*) UObject::GObjObjects()->Data[ 42906 ];

	ATgPawn_Character_eventIsCustomCharacter_Parms IsCustomCharacter_Parms;

	this->ProcessEvent ( pFnIsCustomCharacter, &IsCustomCharacter_Parms, NULL );

	return IsCustomCharacter_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.InitializeDefaultProps
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Character::eventInitializeDefaultProps ( )
{
	static UFunction* pFnInitializeDefaultProps = NULL;

	if ( ! pFnInitializeDefaultProps )
		pFnInitializeDefaultProps = (UFunction*) UObject::GObjObjects()->Data[ 42905 ];

	ATgPawn_Character_eventInitializeDefaultProps_Parms InitializeDefaultProps_Parms;

	this->ProcessEvent ( pFnInitializeDefaultProps, &InitializeDefaultProps_Parms, NULL );
};

// Function TgGame.TgPawn_Character.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_Character::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 42904 ];

	ATgPawn_Character_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_Character.OnGroupChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Character::eventOnGroupChange ( )
{
	static UFunction* pFnOnGroupChange = NULL;

	if ( ! pFnOnGroupChange )
		pFnOnGroupChange = (UFunction*) UObject::GObjObjects()->Data[ 42902 ];

	ATgPawn_Character_eventOnGroupChange_Parms OnGroupChange_Parms;

	this->ProcessEvent ( pFnOnGroupChange, &OnGroupChange_Parms, NULL );
};

// Function TgGame.TgPawn_Character.OnCustomAssemblyChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Character::eventOnCustomAssemblyChanged ( )
{
	static UFunction* pFnOnCustomAssemblyChanged = NULL;

	if ( ! pFnOnCustomAssemblyChanged )
		pFnOnCustomAssemblyChanged = (UFunction*) UObject::GObjObjects()->Data[ 42899 ];

	ATgPawn_Character_eventOnCustomAssemblyChanged_Parms OnCustomAssemblyChanged_Parms;

	this->ProcessEvent ( pFnOnCustomAssemblyChanged, &OnCustomAssemblyChanged_Parms, NULL );
};

// Function TgGame.TgPawn_Character.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Character::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 42897 ];

	ATgPawn_Character_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Character.AllManifestsLoaded
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::AllManifestsLoaded ( )
{
	static UFunction* pFnAllManifestsLoaded = NULL;

	if ( ! pFnAllManifestsLoaded )
		pFnAllManifestsLoaded = (UFunction*) UObject::GObjObjects()->Data[ 42896 ];

	ATgPawn_Character_execAllManifestsLoaded_Parms AllManifestsLoaded_Parms;

	pFnAllManifestsLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllManifestsLoaded, &AllManifestsLoaded_Parms, NULL );

	pFnAllManifestsLoaded->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.GetBodyMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_Character::eventGetBodyMeshId ( )
{
	static UFunction* pFnGetBodyMeshId = NULL;

	if ( ! pFnGetBodyMeshId )
		pFnGetBodyMeshId = (UFunction*) UObject::GObjObjects()->Data[ 42894 ];

	ATgPawn_Character_eventGetBodyMeshId_Parms GetBodyMeshId_Parms;

	this->ProcessEvent ( pFnGetBodyMeshId, &GetBodyMeshId_Parms, NULL );

	return GetBodyMeshId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.PlayDying
// [0x00820102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Character::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 42884 ];

	ATgPawn_Character_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_Character.UpdatePRIAssetRefs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::UpdatePRIAssetRefs ( )
{
	static UFunction* pFnUpdatePRIAssetRefs = NULL;

	if ( ! pFnUpdatePRIAssetRefs )
		pFnUpdatePRIAssetRefs = (UFunction*) UObject::GObjObjects()->Data[ 42883 ];

	ATgPawn_Character_execUpdatePRIAssetRefs_Parms UpdatePRIAssetRefs_Parms;

	pFnUpdatePRIAssetRefs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePRIAssetRefs, &UpdatePRIAssetRefs_Parms, NULL );

	pFnUpdatePRIAssetRefs->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.VanityPetDestroyed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn_VanityPet*       Pet                            ( CPF_Parm )

void ATgPawn_Character::VanityPetDestroyed ( class ATgPawn_VanityPet* Pet )
{
	static UFunction* pFnVanityPetDestroyed = NULL;

	if ( ! pFnVanityPetDestroyed )
		pFnVanityPetDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 42881 ];

	ATgPawn_Character_execVanityPetDestroyed_Parms VanityPetDestroyed_Parms;
	VanityPetDestroyed_Parms.Pet = Pet;

	pFnVanityPetDestroyed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVanityPetDestroyed, &VanityPetDestroyed_Parms, NULL );

	pFnVanityPetDestroyed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.DismissVanityPet
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::DismissVanityPet ( )
{
	static UFunction* pFnDismissVanityPet = NULL;

	if ( ! pFnDismissVanityPet )
		pFnDismissVanityPet = (UFunction*) UObject::GObjObjects()->Data[ 42880 ];

	ATgPawn_Character_execDismissVanityPet_Parms DismissVanityPet_Parms;

	pFnDismissVanityPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDismissVanityPet, &DismissVanityPet_Parms, NULL );

	pFnDismissVanityPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SpawnVanityPet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )

void ATgPawn_Character::SpawnVanityPet ( int nInvId )
{
	static UFunction* pFnSpawnVanityPet = NULL;

	if ( ! pFnSpawnVanityPet )
		pFnSpawnVanityPet = (UFunction*) UObject::GObjObjects()->Data[ 42878 ];

	ATgPawn_Character_execSpawnVanityPet_Parms SpawnVanityPet_Parms;
	SpawnVanityPet_Parms.nInvId = nInvId;

	pFnSpawnVanityPet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnVanityPet, &SpawnVanityPet_Parms, NULL );

	pFnSpawnVanityPet->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.CanItemBePurchased
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nLootTableId                   ( CPF_Parm )
// int                            nLootTableItemId               ( CPF_Parm )

bool ATgPawn_Character::CanItemBePurchased ( int nLootTableId, int nLootTableItemId )
{
	static UFunction* pFnCanItemBePurchased = NULL;

	if ( ! pFnCanItemBePurchased )
		pFnCanItemBePurchased = (UFunction*) UObject::GObjObjects()->Data[ 42874 ];

	ATgPawn_Character_execCanItemBePurchased_Parms CanItemBePurchased_Parms;
	CanItemBePurchased_Parms.nLootTableId = nLootTableId;
	CanItemBePurchased_Parms.nLootTableItemId = nLootTableItemId;

	pFnCanItemBePurchased->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanItemBePurchased, &CanItemBePurchased_Parms, NULL );

	pFnCanItemBePurchased->FunctionFlags |= 0x400;

	return CanItemBePurchased_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.SendCombatMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FCombatMessageInfo      msgInfo                        ( CPF_Parm )

void ATgPawn_Character::SendCombatMessage ( struct FCombatMessageInfo msgInfo )
{
	static UFunction* pFnSendCombatMessage = NULL;

	if ( ! pFnSendCombatMessage )
		pFnSendCombatMessage = (UFunction*) UObject::GObjObjects()->Data[ 42872 ];

	ATgPawn_Character_execSendCombatMessage_Parms SendCombatMessage_Parms;
	memcpy ( &SendCombatMessage_Parms.msgInfo, &msgInfo, 0x18 );

	pFnSendCombatMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCombatMessage, &SendCombatMessage_Parms, NULL );

	pFnSendCombatMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ServerOnSetPlayerMesh
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            MeshAsmId                      ( CPF_Parm )

void ATgPawn_Character::ServerOnSetPlayerMesh ( int MeshAsmId )
{
	static UFunction* pFnServerOnSetPlayerMesh = NULL;

	if ( ! pFnServerOnSetPlayerMesh )
		pFnServerOnSetPlayerMesh = (UFunction*) UObject::GObjObjects()->Data[ 42870 ];

	ATgPawn_Character_execServerOnSetPlayerMesh_Parms ServerOnSetPlayerMesh_Parms;
	ServerOnSetPlayerMesh_Parms.MeshAsmId = MeshAsmId;

	pFnServerOnSetPlayerMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerOnSetPlayerMesh, &ServerOnSetPlayerMesh_Parms, NULL );

	pFnServerOnSetPlayerMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ServerRemoveAllCharSkills
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::ServerRemoveAllCharSkills ( )
{
	static UFunction* pFnServerRemoveAllCharSkills = NULL;

	if ( ! pFnServerRemoveAllCharSkills )
		pFnServerRemoveAllCharSkills = (UFunction*) UObject::GObjObjects()->Data[ 42869 ];

	ATgPawn_Character_execServerRemoveAllCharSkills_Parms ServerRemoveAllCharSkills_Parms;

	pFnServerRemoveAllCharSkills->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRemoveAllCharSkills, &ServerRemoveAllCharSkills_Parms, NULL );

	pFnServerRemoveAllCharSkills->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ServerPurchaseItem
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )
// int                            nLootTableItemId               ( CPF_Parm )
// int                            nItemCount                     ( CPF_Parm )
// int                            nAttemptedCurrencyType         ( CPF_Parm )
// int                            nAttemptedCostPerItem          ( CPF_Parm )

void ATgPawn_Character::ServerPurchaseItem ( int nLootTableId, int nLootTableItemId, int nItemCount, int nAttemptedCurrencyType, int nAttemptedCostPerItem )
{
	static UFunction* pFnServerPurchaseItem = NULL;

	if ( ! pFnServerPurchaseItem )
		pFnServerPurchaseItem = (UFunction*) UObject::GObjObjects()->Data[ 42863 ];

	ATgPawn_Character_execServerPurchaseItem_Parms ServerPurchaseItem_Parms;
	ServerPurchaseItem_Parms.nLootTableId = nLootTableId;
	ServerPurchaseItem_Parms.nLootTableItemId = nLootTableItemId;
	ServerPurchaseItem_Parms.nItemCount = nItemCount;
	ServerPurchaseItem_Parms.nAttemptedCurrencyType = nAttemptedCurrencyType;
	ServerPurchaseItem_Parms.nAttemptedCostPerItem = nAttemptedCostPerItem;

	pFnServerPurchaseItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerPurchaseItem, &ServerPurchaseItem_Parms, NULL );

	pFnServerPurchaseItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.UpdateDurability
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::UpdateDurability ( )
{
	static UFunction* pFnUpdateDurability = NULL;

	if ( ! pFnUpdateDurability )
		pFnUpdateDurability = (UFunction*) UObject::GObjObjects()->Data[ 42862 ];

	ATgPawn_Character_execUpdateDurability_Parms UpdateDurability_Parms;

	pFnUpdateDurability->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDurability, &UpdateDurability_Parms, NULL );

	pFnUpdateDurability->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.CrewBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 bot                            ( CPF_Parm )

void ATgPawn_Character::CrewBot ( class ATgPawn* bot )
{
	static UFunction* pFnCrewBot = NULL;

	if ( ! pFnCrewBot )
		pFnCrewBot = (UFunction*) UObject::GObjObjects()->Data[ 42860 ];

	ATgPawn_Character_execCrewBot_Parms CrewBot_Parms;
	CrewBot_Parms.bot = bot;

	pFnCrewBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCrewBot, &CrewBot_Parms, NULL );

	pFnCrewBot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.CraftItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nBlueprintId                   ( CPF_Parm )
// unsigned long                  bSystemCraft                   ( CPF_Parm )
// unsigned long                  bUseComponents                 ( CPF_Parm )
// int                            nSystemCraftLevel              ( CPF_Parm )

void ATgPawn_Character::CraftItem ( int nBlueprintId, unsigned long bSystemCraft, unsigned long bUseComponents, int nSystemCraftLevel )
{
	static UFunction* pFnCraftItem = NULL;

	if ( ! pFnCraftItem )
		pFnCraftItem = (UFunction*) UObject::GObjObjects()->Data[ 42855 ];

	ATgPawn_Character_execCraftItem_Parms CraftItem_Parms;
	CraftItem_Parms.nBlueprintId = nBlueprintId;
	CraftItem_Parms.bSystemCraft = bSystemCraft;
	CraftItem_Parms.bUseComponents = bUseComponents;
	CraftItem_Parms.nSystemCraftLevel = nSystemCraftLevel;

	pFnCraftItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCraftItem, &CraftItem_Parms, NULL );

	pFnCraftItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ApplyJetpackTrail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bReset                         ( CPF_Parm )

void ATgPawn_Character::ApplyJetpackTrail ( unsigned long bReset )
{
	static UFunction* pFnApplyJetpackTrail = NULL;

	if ( ! pFnApplyJetpackTrail )
		pFnApplyJetpackTrail = (UFunction*) UObject::GObjObjects()->Data[ 42853 ];

	ATgPawn_Character_execApplyJetpackTrail_Parms ApplyJetpackTrail_Parms;
	ApplyJetpackTrail_Parms.bReset = bReset;

	pFnApplyJetpackTrail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyJetpackTrail, &ApplyJetpackTrail_Parms, NULL );

	pFnApplyJetpackTrail->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SetJetpackTrailId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nId                            ( CPF_Parm )

void ATgPawn_Character::SetJetpackTrailId ( int nId )
{
	static UFunction* pFnSetJetpackTrailId = NULL;

	if ( ! pFnSetJetpackTrailId )
		pFnSetJetpackTrailId = (UFunction*) UObject::GObjObjects()->Data[ 42851 ];

	ATgPawn_Character_execSetJetpackTrailId_Parms SetJetpackTrailId_Parms;
	SetJetpackTrailId_Parms.nId = nId;

	pFnSetJetpackTrailId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetJetpackTrailId, &SetJetpackTrailId_Parms, NULL );

	pFnSetJetpackTrailId->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SetDyeItemId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nId                            ( CPF_Parm )
// unsigned char                  eSlot                          ( CPF_Parm )

void ATgPawn_Character::SetDyeItemId ( int nId, unsigned char eSlot )
{
	static UFunction* pFnSetDyeItemId = NULL;

	if ( ! pFnSetDyeItemId )
		pFnSetDyeItemId = (UFunction*) UObject::GObjObjects()->Data[ 42848 ];

	ATgPawn_Character_execSetDyeItemId_Parms SetDyeItemId_Parms;
	SetDyeItemId_Parms.nId = nId;
	SetDyeItemId_Parms.eSlot = eSlot;

	pFnSetDyeItemId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDyeItemId, &SetDyeItemId_Parms, NULL );

	pFnSetDyeItemId->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.GetDyeItemId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eSlot                          ( CPF_Parm )

int ATgPawn_Character::GetDyeItemId ( unsigned char eSlot )
{
	static UFunction* pFnGetDyeItemId = NULL;

	if ( ! pFnGetDyeItemId )
		pFnGetDyeItemId = (UFunction*) UObject::GObjObjects()->Data[ 42845 ];

	ATgPawn_Character_execGetDyeItemId_Parms GetDyeItemId_Parms;
	GetDyeItemId_Parms.eSlot = eSlot;

	pFnGetDyeItemId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDyeItemId, &GetDyeItemId_Parms, NULL );

	pFnGetDyeItemId->FunctionFlags |= 0x400;

	return GetDyeItemId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.GetJetpackTrailId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_Character::GetJetpackTrailId ( )
{
	static UFunction* pFnGetJetpackTrailId = NULL;

	if ( ! pFnGetJetpackTrailId )
		pFnGetJetpackTrailId = (UFunction*) UObject::GObjObjects()->Data[ 42843 ];

	ATgPawn_Character_execGetJetpackTrailId_Parms GetJetpackTrailId_Parms;

	pFnGetJetpackTrailId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetJetpackTrailId, &GetJetpackTrailId_Parms, NULL );

	pFnGetJetpackTrailId->FunctionFlags |= 0x400;

	return GetJetpackTrailId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.GetHairColorsFromHeadMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FHairColorParams        OutHairColors                  ( CPF_Parm | CPF_OutParm )

void ATgPawn_Character::GetHairColorsFromHeadMorphData ( struct FHairColorParams* OutHairColors )
{
	static UFunction* pFnGetHairColorsFromHeadMorphData = NULL;

	if ( ! pFnGetHairColorsFromHeadMorphData )
		pFnGetHairColorsFromHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 42841 ];

	ATgPawn_Character_execGetHairColorsFromHeadMorphData_Parms GetHairColorsFromHeadMorphData_Parms;

	pFnGetHairColorsFromHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHairColorsFromHeadMorphData, &GetHairColorsFromHeadMorphData_Parms, NULL );

	pFnGetHairColorsFromHeadMorphData->FunctionFlags |= 0x400;

	if ( OutHairColors )
		memcpy ( OutHairColors, &GetHairColorsFromHeadMorphData_Parms.OutHairColors, 0xF8 );
};

// Function TgGame.TgPawn_Character.GetSkinColorsFromHeadMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            OutSkinColor                   ( CPF_Parm | CPF_OutParm )
// struct FLinearColor            OutBaseSkinColor               ( CPF_Parm | CPF_OutParm )
// float                          OutSkinTone                    ( CPF_Parm | CPF_OutParm )

void ATgPawn_Character::GetSkinColorsFromHeadMorphData ( struct FLinearColor* OutSkinColor, struct FLinearColor* OutBaseSkinColor, float* OutSkinTone )
{
	static UFunction* pFnGetSkinColorsFromHeadMorphData = NULL;

	if ( ! pFnGetSkinColorsFromHeadMorphData )
		pFnGetSkinColorsFromHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 42837 ];

	ATgPawn_Character_execGetSkinColorsFromHeadMorphData_Parms GetSkinColorsFromHeadMorphData_Parms;

	pFnGetSkinColorsFromHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinColorsFromHeadMorphData, &GetSkinColorsFromHeadMorphData_Parms, NULL );

	pFnGetSkinColorsFromHeadMorphData->FunctionFlags |= 0x400;

	if ( OutSkinColor )
		memcpy ( OutSkinColor, &GetSkinColorsFromHeadMorphData_Parms.OutSkinColor, 0x10 );

	if ( OutBaseSkinColor )
		memcpy ( OutBaseSkinColor, &GetSkinColorsFromHeadMorphData_Parms.OutBaseSkinColor, 0x10 );

	if ( OutSkinTone )
		*OutSkinTone = GetSkinColorsFromHeadMorphData_Parms.OutSkinTone;
};

// Function TgGame.TgPawn_Character.GetHeadAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimTree*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimTree* ATgPawn_Character::GetHeadAnimTree ( )
{
	static UFunction* pFnGetHeadAnimTree = NULL;

	if ( ! pFnGetHeadAnimTree )
		pFnGetHeadAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 42835 ];

	ATgPawn_Character_execGetHeadAnimTree_Parms GetHeadAnimTree_Parms;

	pFnGetHeadAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadAnimTree, &GetHeadAnimTree_Parms, NULL );

	pFnGetHeadAnimTree->FunctionFlags |= 0x400;

	return GetHeadAnimTree_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.ApplyMorphSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::ApplyMorphSettings ( )
{
	static UFunction* pFnApplyMorphSettings = NULL;

	if ( ! pFnApplyMorphSettings )
		pFnApplyMorphSettings = (UFunction*) UObject::GObjObjects()->Data[ 42834 ];

	ATgPawn_Character_execApplyMorphSettings_Parms ApplyMorphSettings_Parms;

	pFnApplyMorphSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMorphSettings, &ApplyMorphSettings_Parms, NULL );

	pFnApplyMorphSettings->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ApplyDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bResetDyeMIC                   ( CPF_Parm )

void ATgPawn_Character::ApplyDye ( unsigned long bResetDyeMIC )
{
	static UFunction* pFnApplyDye = NULL;

	if ( ! pFnApplyDye )
		pFnApplyDye = (UFunction*) UObject::GObjObjects()->Data[ 42832 ];

	ATgPawn_Character_execApplyDye_Parms ApplyDye_Parms;
	ApplyDye_Parms.bResetDyeMIC = bResetDyeMIC;

	pFnApplyDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDye, &ApplyDye_Parms, NULL );

	pFnApplyDye->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.GetHelmMeshIdToUse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_Character::GetHelmMeshIdToUse ( )
{
	static UFunction* pFnGetHelmMeshIdToUse = NULL;

	if ( ! pFnGetHelmMeshIdToUse )
		pFnGetHelmMeshIdToUse = (UFunction*) UObject::GObjObjects()->Data[ 42830 ];

	ATgPawn_Character_execGetHelmMeshIdToUse_Parms GetHelmMeshIdToUse_Parms;

	pFnGetHelmMeshIdToUse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHelmMeshIdToUse, &GetHelmMeshIdToUse_Parms, NULL );

	pFnGetHelmMeshIdToUse->FunctionFlags |= 0x400;

	return GetHelmMeshIdToUse_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.GetSuitMeshIdToUse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_Character::GetSuitMeshIdToUse ( )
{
	static UFunction* pFnGetSuitMeshIdToUse = NULL;

	if ( ! pFnGetSuitMeshIdToUse )
		pFnGetSuitMeshIdToUse = (UFunction*) UObject::GObjObjects()->Data[ 42828 ];

	ATgPawn_Character_execGetSuitMeshIdToUse_Parms GetSuitMeshIdToUse_Parms;

	pFnGetSuitMeshIdToUse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSuitMeshIdToUse, &GetSuitMeshIdToUse_Parms, NULL );

	pFnGetSuitMeshIdToUse->FunctionFlags |= 0x400;

	return GetSuitMeshIdToUse_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.SetCurrentItemProfile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nItemProfileId                 ( CPF_Parm )

void ATgPawn_Character::SetCurrentItemProfile ( int nItemProfileId )
{
	static UFunction* pFnSetCurrentItemProfile = NULL;

	if ( ! pFnSetCurrentItemProfile )
		pFnSetCurrentItemProfile = (UFunction*) UObject::GObjObjects()->Data[ 42826 ];

	ATgPawn_Character_execSetCurrentItemProfile_Parms SetCurrentItemProfile_Parms;
	SetCurrentItemProfile_Parms.nItemProfileId = nItemProfileId;

	pFnSetCurrentItemProfile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentItemProfile, &SetCurrentItemProfile_Parms, NULL );

	pFnSetCurrentItemProfile->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.GetDefaultHelmMeshId
// [0x00026400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFemale                        ( CPF_OptionalParm | CPF_Parm )
// int                            nProfileId                     ( CPF_OptionalParm | CPF_Parm )

int ATgPawn_Character::GetDefaultHelmMeshId ( unsigned long bFemale, int nProfileId )
{
	static UFunction* pFnGetDefaultHelmMeshId = NULL;

	if ( ! pFnGetDefaultHelmMeshId )
		pFnGetDefaultHelmMeshId = (UFunction*) UObject::GObjObjects()->Data[ 42822 ];

	ATgPawn_Character_execGetDefaultHelmMeshId_Parms GetDefaultHelmMeshId_Parms;
	GetDefaultHelmMeshId_Parms.bFemale = bFemale;
	GetDefaultHelmMeshId_Parms.nProfileId = nProfileId;

	pFnGetDefaultHelmMeshId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultHelmMeshId, &GetDefaultHelmMeshId_Parms, NULL );

	pFnGetDefaultHelmMeshId->FunctionFlags |= 0x400;

	return GetDefaultHelmMeshId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.GetDefaultSuitMeshId
// [0x00026400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFemale                        ( CPF_OptionalParm | CPF_Parm )
// int                            nProfileId                     ( CPF_OptionalParm | CPF_Parm )

int ATgPawn_Character::GetDefaultSuitMeshId ( unsigned long bFemale, int nProfileId )
{
	static UFunction* pFnGetDefaultSuitMeshId = NULL;

	if ( ! pFnGetDefaultSuitMeshId )
		pFnGetDefaultSuitMeshId = (UFunction*) UObject::GObjObjects()->Data[ 42818 ];

	ATgPawn_Character_execGetDefaultSuitMeshId_Parms GetDefaultSuitMeshId_Parms;
	GetDefaultSuitMeshId_Parms.bFemale = bFemale;
	GetDefaultSuitMeshId_Parms.nProfileId = nProfileId;

	pFnGetDefaultSuitMeshId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultSuitMeshId, &GetDefaultSuitMeshId_Parms, NULL );

	pFnGetDefaultSuitMeshId->FunctionFlags |= 0x400;

	return GetDefaultSuitMeshId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.SetTeamColorForDeathSpawnedAsset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMeshComponent*          MeshComp                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bNeedApplySuitDye              ( CPF_Parm )

void ATgPawn_Character::SetTeamColorForDeathSpawnedAsset ( class UMeshComponent* MeshComp, unsigned long bNeedApplySuitDye )
{
	static UFunction* pFnSetTeamColorForDeathSpawnedAsset = NULL;

	if ( ! pFnSetTeamColorForDeathSpawnedAsset )
		pFnSetTeamColorForDeathSpawnedAsset = (UFunction*) UObject::GObjObjects()->Data[ 42815 ];

	ATgPawn_Character_execSetTeamColorForDeathSpawnedAsset_Parms SetTeamColorForDeathSpawnedAsset_Parms;
	SetTeamColorForDeathSpawnedAsset_Parms.MeshComp = MeshComp;
	SetTeamColorForDeathSpawnedAsset_Parms.bNeedApplySuitDye = bNeedApplySuitDye;

	pFnSetTeamColorForDeathSpawnedAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTeamColorForDeathSpawnedAsset, &SetTeamColorForDeathSpawnedAsset_Parms, NULL );

	pFnSetTeamColorForDeathSpawnedAsset->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SwapSkinMaterials
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FFx_Material >  MaterialList                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreParams                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsFriendly                    ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Character::SwapSkinMaterials ( TArray< struct FFx_Material > MaterialList, unsigned long bIgnoreParams, unsigned long bIsFriendly )
{
	static UFunction* pFnSwapSkinMaterials = NULL;

	if ( ! pFnSwapSkinMaterials )
		pFnSwapSkinMaterials = (UFunction*) UObject::GObjObjects()->Data[ 42810 ];

	ATgPawn_Character_execSwapSkinMaterials_Parms SwapSkinMaterials_Parms;
	memcpy ( &SwapSkinMaterials_Parms.MaterialList, &MaterialList, 0xC );
	SwapSkinMaterials_Parms.bIgnoreParams = bIgnoreParams;
	SwapSkinMaterials_Parms.bIsFriendly = bIsFriendly;

	pFnSwapSkinMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapSkinMaterials, &SwapSkinMaterials_Parms, NULL );

	pFnSwapSkinMaterials->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SetSkin
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UTgSpecialFx*            NewSpecialFx                   ( CPF_Parm )
// unsigned long                  bIgnoreParams                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSetSkin                  ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Character::SetSkin ( class UTgSpecialFx* NewSpecialFx, unsigned long bIgnoreParams, unsigned long bForceSetSkin )
{
	static UFunction* pFnSetSkin = NULL;

	if ( ! pFnSetSkin )
		pFnSetSkin = (UFunction*) UObject::GObjObjects()->Data[ 42806 ];

	ATgPawn_Character_execSetSkin_Parms SetSkin_Parms;
	SetSkin_Parms.NewSpecialFx = NewSpecialFx;
	SetSkin_Parms.bIgnoreParams = bIgnoreParams;
	SetSkin_Parms.bForceSetSkin = bForceSetSkin;

	pFnSetSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkin, &SetSkin_Parms, NULL );

	pFnSetSkin->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.CreateDeviceForm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgDeviceForm*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FEquipDeviceInfo        Info                           ( CPF_Parm )

class UTgDeviceForm* ATgPawn_Character::CreateDeviceForm ( struct FEquipDeviceInfo Info )
{
	static UFunction* pFnCreateDeviceForm = NULL;

	if ( ! pFnCreateDeviceForm )
		pFnCreateDeviceForm = (UFunction*) UObject::GObjObjects()->Data[ 42803 ];

	ATgPawn_Character_execCreateDeviceForm_Parms CreateDeviceForm_Parms;
	memcpy ( &CreateDeviceForm_Parms.Info, &Info, 0xC );

	pFnCreateDeviceForm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDeviceForm, &CreateDeviceForm_Parms, NULL );

	pFnCreateDeviceForm->FunctionFlags |= 0x400;

	return CreateDeviceForm_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.ApplyFlair
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sFlairName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPawn_Character::ApplyFlair ( struct FString sFlairName )
{
	static UFunction* pFnApplyFlair = NULL;

	if ( ! pFnApplyFlair )
		pFnApplyFlair = (UFunction*) UObject::GObjObjects()->Data[ 42801 ];

	ATgPawn_Character_execApplyFlair_Parms ApplyFlair_Parms;
	memcpy ( &ApplyFlair_Parms.sFlairName, &sFlairName, 0xC );

	pFnApplyFlair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyFlair, &ApplyFlair_Parms, NULL );

	pFnApplyFlair->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_Character::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 42799 ];

	ATgPawn_Character_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ApplyItemEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTgInventoryObject*      pItem                          ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )

bool ATgPawn_Character::ApplyItemEffects ( class UTgInventoryObject* pItem, unsigned long bRemove )
{
	static UFunction* pFnApplyItemEffects = NULL;

	if ( ! pFnApplyItemEffects )
		pFnApplyItemEffects = (UFunction*) UObject::GObjObjects()->Data[ 42795 ];

	ATgPawn_Character_execApplyItemEffects_Parms ApplyItemEffects_Parms;
	ApplyItemEffects_Parms.pItem = pItem;
	ApplyItemEffects_Parms.bRemove = bRemove;

	pFnApplyItemEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyItemEffects, &ApplyItemEffects_Parms, NULL );

	pFnApplyItemEffects->FunctionFlags |= 0x400;

	return ApplyItemEffects_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.SetMeshVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void ATgPawn_Character::SetMeshVisibility ( unsigned long bVisible )
{
	static UFunction* pFnSetMeshVisibility = NULL;

	if ( ! pFnSetMeshVisibility )
		pFnSetMeshVisibility = (UFunction*) UObject::GObjObjects()->Data[ 42793 ];

	ATgPawn_Character_execSetMeshVisibility_Parms SetMeshVisibility_Parms;
	SetMeshVisibility_Parms.bVisible = bVisible;

	pFnSetMeshVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeshVisibility, &SetMeshVisibility_Parms, NULL );

	pFnSetMeshVisibility->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.RemoveCharacterSkillTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::RemoveCharacterSkillTree ( )
{
	static UFunction* pFnRemoveCharacterSkillTree = NULL;

	if ( ! pFnRemoveCharacterSkillTree )
		pFnRemoveCharacterSkillTree = (UFunction*) UObject::GObjObjects()->Data[ 42792 ];

	ATgPawn_Character_execRemoveCharacterSkillTree_Parms RemoveCharacterSkillTree_Parms;

	pFnRemoveCharacterSkillTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCharacterSkillTree, &RemoveCharacterSkillTree_Parms, NULL );

	pFnRemoveCharacterSkillTree->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ReapplyCharacterSkillTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::ReapplyCharacterSkillTree ( )
{
	static UFunction* pFnReapplyCharacterSkillTree = NULL;

	if ( ! pFnReapplyCharacterSkillTree )
		pFnReapplyCharacterSkillTree = (UFunction*) UObject::GObjObjects()->Data[ 42791 ];

	ATgPawn_Character_execReapplyCharacterSkillTree_Parms ReapplyCharacterSkillTree_Parms;

	pFnReapplyCharacterSkillTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyCharacterSkillTree, &ReapplyCharacterSkillTree_Parms, NULL );

	pFnReapplyCharacterSkillTree->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.ReapplyLoadoutEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::ReapplyLoadoutEffects ( )
{
	static UFunction* pFnReapplyLoadoutEffects = NULL;

	if ( ! pFnReapplyLoadoutEffects )
		pFnReapplyLoadoutEffects = (UFunction*) UObject::GObjObjects()->Data[ 42790 ];

	ATgPawn_Character_execReapplyLoadoutEffects_Parms ReapplyLoadoutEffects_Parms;

	pFnReapplyLoadoutEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReapplyLoadoutEffects, &ReapplyLoadoutEffects_Parms, NULL );

	pFnReapplyLoadoutEffects->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SendCharacterSkillMarshal
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::SendCharacterSkillMarshal ( )
{
	static UFunction* pFnSendCharacterSkillMarshal = NULL;

	if ( ! pFnSendCharacterSkillMarshal )
		pFnSendCharacterSkillMarshal = (UFunction*) UObject::GObjObjects()->Data[ 42789 ];

	ATgPawn_Character_execSendCharacterSkillMarshal_Parms SendCharacterSkillMarshal_Parms;

	pFnSendCharacterSkillMarshal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCharacterSkillMarshal, &SendCharacterSkillMarshal_Parms, NULL );

	pFnSendCharacterSkillMarshal->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.SwapMeshToStealthed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bStealthed                     ( CPF_Parm )

class UMaterialInstanceConstant* ATgPawn_Character::SwapMeshToStealthed ( unsigned long bStealthed )
{
	static UFunction* pFnSwapMeshToStealthed = NULL;

	if ( ! pFnSwapMeshToStealthed )
		pFnSwapMeshToStealthed = (UFunction*) UObject::GObjObjects()->Data[ 42786 ];

	ATgPawn_Character_execSwapMeshToStealthed_Parms SwapMeshToStealthed_Parms;
	SwapMeshToStealthed_Parms.bStealthed = bStealthed;

	pFnSwapMeshToStealthed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMeshToStealthed, &SwapMeshToStealthed_Parms, NULL );

	pFnSwapMeshToStealthed->FunctionFlags |= 0x400;

	return SwapMeshToStealthed_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.UpdateCustomCharacterMaterialParameters
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bUpdateOnlyHairMeshMaterial    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateOnlySuitMeshMaterial    ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Character::UpdateCustomCharacterMaterialParameters ( unsigned long bUpdateOnlyHairMeshMaterial, unsigned long bUpdateOnlySuitMeshMaterial )
{
	static UFunction* pFnUpdateCustomCharacterMaterialParameters = NULL;

	if ( ! pFnUpdateCustomCharacterMaterialParameters )
		pFnUpdateCustomCharacterMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 42783 ];

	ATgPawn_Character_execUpdateCustomCharacterMaterialParameters_Parms UpdateCustomCharacterMaterialParameters_Parms;
	UpdateCustomCharacterMaterialParameters_Parms.bUpdateOnlyHairMeshMaterial = bUpdateOnlyHairMeshMaterial;
	UpdateCustomCharacterMaterialParameters_Parms.bUpdateOnlySuitMeshMaterial = bUpdateOnlySuitMeshMaterial;

	pFnUpdateCustomCharacterMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCustomCharacterMaterialParameters, &UpdateCustomCharacterMaterialParameters_Parms, NULL );

	pFnUpdateCustomCharacterMaterialParameters->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.UpdateBoost
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::UpdateBoost ( )
{
	static UFunction* pFnUpdateBoost = NULL;

	if ( ! pFnUpdateBoost )
		pFnUpdateBoost = (UFunction*) UObject::GObjObjects()->Data[ 42782 ];

	ATgPawn_Character_execUpdateBoost_Parms UpdateBoost_Parms;

	pFnUpdateBoost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBoost, &UpdateBoost_Parms, NULL );

	pFnUpdateBoost->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.UpdateElfGoggles
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Character::UpdateElfGoggles ( )
{
	static UFunction* pFnUpdateElfGoggles = NULL;

	if ( ! pFnUpdateElfGoggles )
		pFnUpdateElfGoggles = (UFunction*) UObject::GObjObjects()->Data[ 42781 ];

	ATgPawn_Character_execUpdateElfGoggles_Parms UpdateElfGoggles_Parms;

	pFnUpdateElfGoggles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateElfGoggles, &UpdateElfGoggles_Parms, NULL );

	pFnUpdateElfGoggles->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Character.InitializeFootIKZeroStrengthAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

bool ATgPawn_Character::InitializeFootIKZeroStrengthAnimNodes ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnInitializeFootIKZeroStrengthAnimNodes = NULL;

	if ( ! pFnInitializeFootIKZeroStrengthAnimNodes )
		pFnInitializeFootIKZeroStrengthAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 42778 ];

	ATgPawn_Character_execInitializeFootIKZeroStrengthAnimNodes_Parms InitializeFootIKZeroStrengthAnimNodes_Parms;
	InitializeFootIKZeroStrengthAnimNodes_Parms.SkelComp = SkelComp;

	pFnInitializeFootIKZeroStrengthAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeFootIKZeroStrengthAnimNodes, &InitializeFootIKZeroStrengthAnimNodes_Parms, NULL );

	pFnInitializeFootIKZeroStrengthAnimNodes->FunctionFlags |= 0x400;

	return InitializeFootIKZeroStrengthAnimNodes_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.InitializeLeftHandIKAnimNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

bool ATgPawn_Character::InitializeLeftHandIKAnimNodes ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnInitializeLeftHandIKAnimNodes = NULL;

	if ( ! pFnInitializeLeftHandIKAnimNodes )
		pFnInitializeLeftHandIKAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 42775 ];

	ATgPawn_Character_execInitializeLeftHandIKAnimNodes_Parms InitializeLeftHandIKAnimNodes_Parms;
	InitializeLeftHandIKAnimNodes_Parms.SkelComp = SkelComp;

	pFnInitializeLeftHandIKAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeLeftHandIKAnimNodes, &InitializeLeftHandIKAnimNodes_Parms, NULL );

	pFnInitializeLeftHandIKAnimNodes->FunctionFlags |= 0x400;

	return InitializeLeftHandIKAnimNodes_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Character.ApplyPawnSetup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Character::ApplyPawnSetup ( )
{
	static UFunction* pFnApplyPawnSetup = NULL;

	if ( ! pFnApplyPawnSetup )
		pFnApplyPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 42773 ];

	ATgPawn_Character_execApplyPawnSetup_Parms ApplyPawnSetup_Parms;

	pFnApplyPawnSetup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyPawnSetup, &ApplyPawnSetup_Parms, NULL );

	pFnApplyPawnSetup->FunctionFlags |= 0x400;

	return ApplyPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Boss.DoRagdoll
// [0x00020102] 
// Parameters infos:

void ATgPawn_Boss::DoRagdoll ( )
{
	static UFunction* pFnDoRagdoll = NULL;

	if ( ! pFnDoRagdoll )
		pFnDoRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 43087 ];

	ATgPawn_Boss_execDoRagdoll_Parms DoRagdoll_Parms;

	this->ProcessEvent ( pFnDoRagdoll, &DoRagdoll_Parms, NULL );
};

// Function TgGame.TgPawn_Boss.OnAnimEnd
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_Boss::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43082 ];

	ATgPawn_Boss_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_Boss.GetWeaponStartTraceLocation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn_Boss::eventGetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 43076 ];

	ATgPawn_Boss_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_ColonyEye.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void ATgPawn_ColonyEye::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 43157 ];

	ATgPawn_ColonyEye_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function TgGame.TgPawn_ColonyEye.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_ColonyEye::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43153 ];

	ATgPawn_ColonyEye_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_ColonyEye.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_ColonyEye::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43151 ];

	ATgPawn_ColonyEye_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_ColonyEye.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_ColonyEye::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43149 ];

	ATgPawn_ColonyEye_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Dismantler.OnPostureChange
// [0x00020102] 
// Parameters infos:

void ATgPawn_Dismantler::OnPostureChange ( )
{
	static UFunction* pFnOnPostureChange = NULL;

	if ( ! pFnOnPostureChange )
		pFnOnPostureChange = (UFunction*) UObject::GObjObjects()->Data[ 43261 ];

	ATgPawn_Dismantler_execOnPostureChange_Parms OnPostureChange_Parms;

	this->ProcessEvent ( pFnOnPostureChange, &OnPostureChange_Parms, NULL );
};

// Function TgGame.TgPawn_Dismantler.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Dismantler::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43258 ];

	ATgPawn_Dismantler_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Dismantler.OnPetSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pet                            ( CPF_Parm )

void ATgPawn_Dismantler::OnPetSpawned ( class ATgPawn* Pet )
{
	static UFunction* pFnOnPetSpawned = NULL;

	if ( ! pFnOnPetSpawned )
		pFnOnPetSpawned = (UFunction*) UObject::GObjObjects()->Data[ 43256 ];

	ATgPawn_Dismantler_execOnPetSpawned_Parms OnPetSpawned_Parms;
	OnPetSpawned_Parms.Pet = Pet;

	pFnOnPetSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPetSpawned, &OnPetSpawned_Parms, NULL );

	pFnOnPetSpawned->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Dismantler.InitSpawnPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SpawnTableID                   ( CPF_Parm )

void ATgPawn_Dismantler::InitSpawnPets ( int SpawnTableID )
{
	static UFunction* pFnInitSpawnPets = NULL;

	if ( ! pFnInitSpawnPets )
		pFnInitSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 43254 ];

	ATgPawn_Dismantler_execInitSpawnPets_Parms InitSpawnPets_Parms;
	InitSpawnPets_Parms.SpawnTableID = SpawnTableID;

	pFnInitSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSpawnPets, &InitSpawnPets_Parms, NULL );

	pFnInitSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_FlyingBoss.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void ATgPawn_FlyingBoss::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 43343 ];

	ATgPawn_FlyingBoss_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function TgGame.TgPawn_FlyingBoss.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_FlyingBoss::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43339 ];

	ATgPawn_FlyingBoss_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_FlyingBoss.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_FlyingBoss::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43337 ];

	ATgPawn_FlyingBoss_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_FlyingBoss.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_FlyingBoss::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43335 ];

	ATgPawn_FlyingBoss_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Juggernaut.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_Juggernaut::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43667 ];

	ATgPawn_Juggernaut_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_Juggernaut.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Juggernaut::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43665 ];

	ATgPawn_Juggernaut_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Juggernaut.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Juggernaut::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 43664 ];

	ATgPawn_Juggernaut_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgPawn_Juggernaut.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Juggernaut::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43662 ];

	ATgPawn_Juggernaut_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Juggernaut.UpdateTargetingBeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Juggernaut::UpdateTargetingBeam ( )
{
	static UFunction* pFnUpdateTargetingBeam = NULL;

	if ( ! pFnUpdateTargetingBeam )
		pFnUpdateTargetingBeam = (UFunction*) UObject::GObjObjects()->Data[ 43661 ];

	ATgPawn_Juggernaut_execUpdateTargetingBeam_Parms UpdateTargetingBeam_Parms;

	pFnUpdateTargetingBeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetingBeam, &UpdateTargetingBeam_Parms, NULL );

	pFnUpdateTargetingBeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Marauder.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_Marauder::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43693 ];

	ATgPawn_Marauder_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_Marauder.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Marauder::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43691 ];

	ATgPawn_Marauder_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Marauder.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Marauder::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43689 ];

	ATgPawn_Marauder_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Marauder.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Marauder::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43687 ];

	ATgPawn_Marauder_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_RecursiveSpawner.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_RecursiveSpawner::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43742 ];

	ATgPawn_RecursiveSpawner_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_RecursiveSpawner.OnPetSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pet                            ( CPF_Parm )

void ATgPawn_RecursiveSpawner::OnPetSpawned ( class ATgPawn* Pet )
{
	static UFunction* pFnOnPetSpawned = NULL;

	if ( ! pFnOnPetSpawned )
		pFnOnPetSpawned = (UFunction*) UObject::GObjObjects()->Data[ 43740 ];

	ATgPawn_RecursiveSpawner_execOnPetSpawned_Parms OnPetSpawned_Parms;
	OnPetSpawned_Parms.Pet = Pet;

	pFnOnPetSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPetSpawned, &OnPetSpawned_Parms, NULL );

	pFnOnPetSpawned->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_RecursiveSpawner.InitSpawnPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SpawnTableID                   ( CPF_Parm )

void ATgPawn_RecursiveSpawner::InitSpawnPets ( int SpawnTableID )
{
	static UFunction* pFnInitSpawnPets = NULL;

	if ( ! pFnInitSpawnPets )
		pFnInitSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 43738 ];

	ATgPawn_RecursiveSpawner_execInitSpawnPets_Parms InitSpawnPets_Parms;
	InitSpawnPets_Parms.SpawnTableID = SpawnTableID;

	pFnInitSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSpawnPets, &InitSpawnPets_Parms, NULL );

	pFnInitSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Interact_NPC.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgPawn_Interact_NPC::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 43543 ];

	ATgPawn_Interact_NPC_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgPawn_Interact_NPC.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgPawn_Interact_NPC::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 43537 ];

	ATgPawn_Interact_NPC_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgPawn_Interact_NPC.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Interact_NPC::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 43536 ];

	ATgPawn_Interact_NPC_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn_Interact_NPC.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_Interact_NPC::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 43535 ];

	ATgPawn_Interact_NPC_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_NPC.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_NPC::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43517 ];

	ATgPawn_NPC_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_Sniper.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Sniper::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43846 ];

	ATgPawn_Sniper_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Sniper.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Sniper::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43844 ];

	ATgPawn_Sniper_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Sniper.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Sniper::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 43843 ];

	ATgPawn_Sniper_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgPawn_Sniper.UpdateTargetingBeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Sniper::UpdateTargetingBeam ( )
{
	static UFunction* pFnUpdateTargetingBeam = NULL;

	if ( ! pFnUpdateTargetingBeam )
		pFnUpdateTargetingBeam = (UFunction*) UObject::GObjObjects()->Data[ 43842 ];

	ATgPawn_Sniper_execUpdateTargetingBeam_Parms UpdateTargetingBeam_Parms;

	pFnUpdateTargetingBeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetingBeam, &UpdateTargetingBeam_Parms, NULL );

	pFnUpdateTargetingBeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_SonoranCommander.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_SonoranCommander::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43867 ];

	ATgPawn_SonoranCommander_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_SonoranCommander.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_SonoranCommander::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43865 ];

	ATgPawn_SonoranCommander_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_SonoranCommander.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_SonoranCommander::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43863 ];

	ATgPawn_SonoranCommander_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_SonoranCommander.PlayFullBodyAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_Parm )
// float                          BlendOutTime                   ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bOverride                      ( CPF_Parm )
// unsigned long                  bDisablePlayerControls         ( CPF_Parm )
// unsigned long                  bBlendOutIfVelocityIsGreaterThanZero ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bHideInHandDevice              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_SonoranCommander::PlayFullBodyAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bDisablePlayerControls, unsigned long bBlendOutIfVelocityIsGreaterThanZero, unsigned long bHideInHandDevice )
{
	static UFunction* pFnPlayFullBodyAnim = NULL;

	if ( ! pFnPlayFullBodyAnim )
		pFnPlayFullBodyAnim = (UFunction*) UObject::GObjObjects()->Data[ 43853 ];

	ATgPawn_SonoranCommander_execPlayFullBodyAnim_Parms PlayFullBodyAnim_Parms;
	memcpy ( &PlayFullBodyAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayFullBodyAnim_Parms.Rate = Rate;
	PlayFullBodyAnim_Parms.BlendInTime = BlendInTime;
	PlayFullBodyAnim_Parms.BlendOutTime = BlendOutTime;
	PlayFullBodyAnim_Parms.bLooping = bLooping;
	PlayFullBodyAnim_Parms.bOverride = bOverride;
	PlayFullBodyAnim_Parms.bDisablePlayerControls = bDisablePlayerControls;
	PlayFullBodyAnim_Parms.bBlendOutIfVelocityIsGreaterThanZero = bBlendOutIfVelocityIsGreaterThanZero;
	PlayFullBodyAnim_Parms.bHideInHandDevice = bHideInHandDevice;

	pFnPlayFullBodyAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFullBodyAnim, &PlayFullBodyAnim_Parms, NULL );

	pFnPlayFullBodyAnim->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Turret.GetSaveHealthPercent
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn_Turret::GetSaveHealthPercent ( )
{
	static UFunction* pFnGetSaveHealthPercent = NULL;

	if ( ! pFnGetSaveHealthPercent )
		pFnGetSaveHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 44022 ];

	ATgPawn_Turret_execGetSaveHealthPercent_Parms GetSaveHealthPercent_Parms;

	this->ProcessEvent ( pFnGetSaveHealthPercent, &GetSaveHealthPercent_Parms, NULL );

	return GetSaveHealthPercent_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.PickUpBot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 pReceiver                      ( CPF_Parm )

bool ATgPawn_Turret::PickUpBot ( class ATgPawn* pReceiver )
{
	static UFunction* pFnPickUpBot = NULL;

	if ( ! pFnPickUpBot )
		pFnPickUpBot = (UFunction*) UObject::GObjObjects()->Data[ 44017 ];

	ATgPawn_Turret_execPickUpBot_Parms PickUpBot_Parms;
	PickUpBot_Parms.pReceiver = pReceiver;

	this->ProcessEvent ( pFnPickUpBot, &PickUpBot_Parms, NULL );

	return PickUpBot_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.CanBePickedUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Turret::CanBePickedUp ( )
{
	static UFunction* pFnCanBePickedUp = NULL;

	if ( ! pFnCanBePickedUp )
		pFnCanBePickedUp = (UFunction*) UObject::GObjObjects()->Data[ 44015 ];

	ATgPawn_Turret_execCanBePickedUp_Parms CanBePickedUp_Parms;

	this->ProcessEvent ( pFnCanBePickedUp, &CanBePickedUp_Parms, NULL );

	return CanBePickedUp_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.OnPawnInitialized
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Turret::eventOnPawnInitialized ( )
{
	static UFunction* pFnOnPawnInitialized = NULL;

	if ( ! pFnOnPawnInitialized )
		pFnOnPawnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 44014 ];

	ATgPawn_Turret_eventOnPawnInitialized_Parms OnPawnInitialized_Parms;

	this->ProcessEvent ( pFnOnPawnInitialized, &OnPawnInitialized_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.CanPickupDroppedItem
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Turret::CanPickupDroppedItem ( )
{
	static UFunction* pFnCanPickupDroppedItem = NULL;

	if ( ! pFnCanPickupDroppedItem )
		pFnCanPickupDroppedItem = (UFunction*) UObject::GObjObjects()->Data[ 44012 ];

	ATgPawn_Turret_execCanPickupDroppedItem_Parms CanPickupDroppedItem_Parms;

	this->ProcessEvent ( pFnCanPickupDroppedItem, &CanPickupDroppedItem_Parms, NULL );

	return CanPickupDroppedItem_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.PlayDyingPhysicsAndAnimation
// [0x00820102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Turret::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 44008 ];

	ATgPawn_Turret_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.SupportDistanceRendering
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Turret::SupportDistanceRendering ( )
{
	static UFunction* pFnSupportDistanceRendering = NULL;

	if ( ! pFnSupportDistanceRendering )
		pFnSupportDistanceRendering = (UFunction*) UObject::GObjObjects()->Data[ 44006 ];

	ATgPawn_Turret_execSupportDistanceRendering_Parms SupportDistanceRendering_Parms;

	this->ProcessEvent ( pFnSupportDistanceRendering, &SupportDistanceRendering_Parms, NULL );

	return SupportDistanceRendering_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.TickDeploy
// [0x00020100] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Turret::TickDeploy ( float DeltaSeconds )
{
	static UFunction* pFnTickDeploy = NULL;

	if ( ! pFnTickDeploy )
		pFnTickDeploy = (UFunction*) UObject::GObjObjects()->Data[ 43988 ];

	ATgPawn_Turret_execTickDeploy_Parms TickDeploy_Parms;
	TickDeploy_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTickDeploy, &TickDeploy_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.ExtractDeployTimeFromMyAnimation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPawn_Turret::ExtractDeployTimeFromMyAnimation ( )
{
	static UFunction* pFnExtractDeployTimeFromMyAnimation = NULL;

	if ( ! pFnExtractDeployTimeFromMyAnimation )
		pFnExtractDeployTimeFromMyAnimation = (UFunction*) UObject::GObjObjects()->Data[ 43985 ];

	ATgPawn_Turret_execExtractDeployTimeFromMyAnimation_Parms ExtractDeployTimeFromMyAnimation_Parms;

	this->ProcessEvent ( pFnExtractDeployTimeFromMyAnimation, &ExtractDeployTimeFromMyAnimation_Parms, NULL );

	return ExtractDeployTimeFromMyAnimation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.CalcDeployPercentage
// [0x00020102] 
// Parameters infos:

void ATgPawn_Turret::CalcDeployPercentage ( )
{
	static UFunction* pFnCalcDeployPercentage = NULL;

	if ( ! pFnCalcDeployPercentage )
		pFnCalcDeployPercentage = (UFunction*) UObject::GObjObjects()->Data[ 43983 ];

	ATgPawn_Turret_execCalcDeployPercentage_Parms CalcDeployPercentage_Parms;

	this->ProcessEvent ( pFnCalcDeployPercentage, &CalcDeployPercentage_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.DeployComplete
// [0x00020102] 
// Parameters infos:

void ATgPawn_Turret::DeployComplete ( )
{
	static UFunction* pFnDeployComplete = NULL;

	if ( ! pFnDeployComplete )
		pFnDeployComplete = (UFunction*) UObject::GObjObjects()->Data[ 43982 ];

	ATgPawn_Turret_execDeployComplete_Parms DeployComplete_Parms;

	this->ProcessEvent ( pFnDeployComplete, &DeployComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.StartDeploy
// [0x00020102] 
// Parameters infos:

void ATgPawn_Turret::StartDeploy ( )
{
	static UFunction* pFnStartDeploy = NULL;

	if ( ! pFnStartDeploy )
		pFnStartDeploy = (UFunction*) UObject::GObjObjects()->Data[ 43981 ];

	ATgPawn_Turret_execStartDeploy_Parms StartDeploy_Parms;

	this->ProcessEvent ( pFnStartDeploy, &StartDeploy_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.UpdateTimeToDeploySecs
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void ATgPawn_Turret::UpdateTimeToDeploySecs ( float fValue )
{
	static UFunction* pFnUpdateTimeToDeploySecs = NULL;

	if ( ! pFnUpdateTimeToDeploySecs )
		pFnUpdateTimeToDeploySecs = (UFunction*) UObject::GObjObjects()->Data[ 43979 ];

	ATgPawn_Turret_execUpdateTimeToDeploySecs_Parms UpdateTimeToDeploySecs_Parms;
	UpdateTimeToDeploySecs_Parms.fValue = fValue;

	this->ProcessEvent ( pFnUpdateTimeToDeploySecs, &UpdateTimeToDeploySecs_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.GetWeaponStartTraceLocation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn_Turret::eventGetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 43973 ];

	ATgPawn_Turret_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Turret::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43971 ];

	ATgPawn_Turret_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.EnableFootControls
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            foot                           ( CPF_Parm )
// unsigned long                  bDisable                       ( CPF_Parm )

void ATgPawn_Turret::eventEnableFootControls ( int foot, unsigned long bDisable )
{
	static UFunction* pFnEnableFootControls = NULL;

	if ( ! pFnEnableFootControls )
		pFnEnableFootControls = (UFunction*) UObject::GObjObjects()->Data[ 43968 ];

	ATgPawn_Turret_eventEnableFootControls_Parms EnableFootControls_Parms;
	EnableFootControls_Parms.foot = foot;
	EnableFootControls_Parms.bDisable = bDisable;

	this->ProcessEvent ( pFnEnableFootControls, &EnableFootControls_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Turret::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43966 ];

	ATgPawn_Turret_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.SetPosture
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            ePosture                       ( CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Turret::eventSetPosture ( int ePosture, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnSetPosture = NULL;

	if ( ! pFnSetPosture )
		pFnSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 43962 ];

	ATgPawn_Turret_eventSetPosture_Parms SetPosture_Parms;
	SetPosture_Parms.ePosture = ePosture;
	SetPosture_Parms.fRateScale = fRateScale;
	SetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnSetPosture, &SetPosture_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.OnWaitingForPawnDone
// [0x00020102] 
// Parameters infos:

void ATgPawn_Turret::OnWaitingForPawnDone ( )
{
	static UFunction* pFnOnWaitingForPawnDone = NULL;

	if ( ! pFnOnWaitingForPawnDone )
		pFnOnWaitingForPawnDone = (UFunction*) UObject::GObjObjects()->Data[ 43961 ];

	ATgPawn_Turret_execOnWaitingForPawnDone_Parms OnWaitingForPawnDone_Parms;

	this->ProcessEvent ( pFnOnWaitingForPawnDone, &OnWaitingForPawnDone_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.SetDeployStateBasedOnPosture
// [0x00020102] 
// Parameters infos:

void ATgPawn_Turret::SetDeployStateBasedOnPosture ( )
{
	static UFunction* pFnSetDeployStateBasedOnPosture = NULL;

	if ( ! pFnSetDeployStateBasedOnPosture )
		pFnSetDeployStateBasedOnPosture = (UFunction*) UObject::GObjObjects()->Data[ 43960 ];

	ATgPawn_Turret_execSetDeployStateBasedOnPosture_Parms SetDeployStateBasedOnPosture_Parms;

	this->ProcessEvent ( pFnSetDeployStateBasedOnPosture, &SetDeployStateBasedOnPosture_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.CanBeRepaired
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Turret::CanBeRepaired ( )
{
	static UFunction* pFnCanBeRepaired = NULL;

	if ( ! pFnCanBeRepaired )
		pFnCanBeRepaired = (UFunction*) UObject::GObjObjects()->Data[ 43958 ];

	ATgPawn_Turret_execCanBeRepaired_Parms CanBeRepaired_Parms;

	this->ProcessEvent ( pFnCanBeRepaired, &CanBeRepaired_Parms, NULL );

	return CanBeRepaired_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Turret::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43956 ];

	ATgPawn_Turret_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Turret.Poke
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  byHitType                      ( CPF_Parm )
// unsigned char                  byHitMagnitude                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 RayDirection                   ( CPF_Parm )

void ATgPawn_Turret::eventPoke ( unsigned char byHitType, unsigned char byHitMagnitude, struct FVector HitLocation, struct FVector RayDirection )
{
	static UFunction* pFnPoke = NULL;

	if ( ! pFnPoke )
		pFnPoke = (UFunction*) UObject::GObjObjects()->Data[ 43949 ];

	ATgPawn_Turret_eventPoke_Parms Poke_Parms;
	Poke_Parms.byHitType = byHitType;
	Poke_Parms.byHitMagnitude = byHitMagnitude;
	memcpy ( &Poke_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Poke_Parms.RayDirection, &RayDirection, 0xC );

	this->ProcessEvent ( pFnPoke, &Poke_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Turret::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 43948 ];

	ATgPawn_Turret_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgPawn_Turret.UpdateTargetingBeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Turret::UpdateTargetingBeam ( )
{
	static UFunction* pFnUpdateTargetingBeam = NULL;

	if ( ! pFnUpdateTargetingBeam )
		pFnUpdateTargetingBeam = (UFunction*) UObject::GObjObjects()->Data[ 43947 ];

	ATgPawn_Turret_execUpdateTargetingBeam_Parms UpdateTargetingBeam_Parms;

	pFnUpdateTargetingBeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetingBeam, &UpdateTargetingBeam_Parms, NULL );

	pFnUpdateTargetingBeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Turret.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_Turret::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 43945 ];

	ATgPawn_Turret_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Turret.SetInitialHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPercent                       ( CPF_Parm )

void ATgPawn_Turret::SetInitialHealthPercent ( float fPercent )
{
	static UFunction* pFnSetInitialHealthPercent = NULL;

	if ( ! pFnSetInitialHealthPercent )
		pFnSetInitialHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 43943 ];

	ATgPawn_Turret_execSetInitialHealthPercent_Parms SetInitialHealthPercent_Parms;
	SetInitialHealthPercent_Parms.fPercent = fPercent;

	pFnSetInitialHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInitialHealthPercent, &SetInitialHealthPercent_Parms, NULL );

	pFnSetInitialHealthPercent->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Turret.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgPawn_Turret::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 43941 ];

	ATgPawn_Turret_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_TurretAVAFlak.StopGunRecoil
// [0x00020102] 
// Parameters infos:

void ATgPawn_TurretAVAFlak::StopGunRecoil ( )
{
	static UFunction* pFnStopGunRecoil = NULL;

	if ( ! pFnStopGunRecoil )
		pFnStopGunRecoil = (UFunction*) UObject::GObjObjects()->Data[ 44046 ];

	ATgPawn_TurretAVAFlak_execStopGunRecoil_Parms StopGunRecoil_Parms;

	this->ProcessEvent ( pFnStopGunRecoil, &StopGunRecoil_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVAFlak.PlayGunRecoil
// [0x00020102] 
// Parameters infos:

void ATgPawn_TurretAVAFlak::PlayGunRecoil ( )
{
	static UFunction* pFnPlayGunRecoil = NULL;

	if ( ! pFnPlayGunRecoil )
		pFnPlayGunRecoil = (UFunction*) UObject::GObjObjects()->Data[ 44045 ];

	ATgPawn_TurretAVAFlak_execPlayGunRecoil_Parms PlayGunRecoil_Parms;

	this->ProcessEvent ( pFnPlayGunRecoil, &PlayGunRecoil_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVAFlak.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_TurretAVAFlak::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 44044 ];

	ATgPawn_TurretAVAFlak_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVAFlak.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_TurretAVAFlak::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44042 ];

	ATgPawn_TurretAVAFlak_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVAFlak.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_TurretAVAFlak::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44040 ];

	ATgPawn_TurretAVAFlak_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVAFlak.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TurretAVAFlak::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44038 ];

	ATgPawn_TurretAVAFlak_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_TurretAVAFlak.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_TurretAVAFlak::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 44036 ];

	ATgPawn_TurretAVAFlak_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_TurretAVARocket.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_TurretAVARocket::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44060 ];

	ATgPawn_TurretAVARocket_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVARocket.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_TurretAVARocket::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44058 ];

	ATgPawn_TurretAVARocket_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_TurretAVARocket.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TurretAVARocket::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44056 ];

	ATgPawn_TurretAVARocket_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_TurretAVARocket.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_TurretAVARocket::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 44054 ];

	ATgPawn_TurretAVARocket_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Hover.GetWeaponStartTraceLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn_Hover::GetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 43429 ];

	ATgPawn_Hover_execGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Hover.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Hover::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 43428 ];

	ATgPawn_Hover_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Hover::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 43425 ];

	ATgPawn_Hover_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void ATgPawn_Hover::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 43424 ];

	ATgPawn_Hover_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.PlayHitReaction
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ATgPawn_Hover::eventPlayHitReaction ( struct FVector Direction )
{
	static UFunction* pFnPlayHitReaction = NULL;

	if ( ! pFnPlayHitReaction )
		pFnPlayHitReaction = (UFunction*) UObject::GObjObjects()->Data[ 43419 ];

	ATgPawn_Hover_eventPlayHitReaction_Parms PlayHitReaction_Parms;
	memcpy ( &PlayHitReaction_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnPlayHitReaction, &PlayHitReaction_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Hover::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 43415 ];

	ATgPawn_Hover_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Hover::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43412 ];

	ATgPawn_Hover_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Hover::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43410 ];

	ATgPawn_Hover_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Hover.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Hover::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43407 ];

	ATgPawn_Hover_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Hover.UpdateTargetCylinderLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Hover::UpdateTargetCylinderLocation ( float DeltaSeconds )
{
	static UFunction* pFnUpdateTargetCylinderLocation = NULL;

	if ( ! pFnUpdateTargetCylinderLocation )
		pFnUpdateTargetCylinderLocation = (UFunction*) UObject::GObjObjects()->Data[ 43405 ];

	ATgPawn_Hover_execUpdateTargetCylinderLocation_Parms UpdateTargetCylinderLocation_Parms;
	UpdateTargetCylinderLocation_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateTargetCylinderLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetCylinderLocation, &UpdateTargetCylinderLocation_Parms, NULL );

	pFnUpdateTargetCylinderLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Hover.InitializeHoverBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Hover::InitializeHoverBot ( )
{
	static UFunction* pFnInitializeHoverBot = NULL;

	if ( ! pFnInitializeHoverBot )
		pFnInitializeHoverBot = (UFunction*) UObject::GObjObjects()->Data[ 43403 ];

	ATgPawn_Hover_execInitializeHoverBot_Parms InitializeHoverBot_Parms;

	pFnInitializeHoverBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeHoverBot, &InitializeHoverBot_Parms, NULL );

	pFnInitializeHoverBot->FunctionFlags |= 0x400;

	return InitializeHoverBot_Parms.ReturnValue;
};

// Function TgGame.TgPawn_NewWasp.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_NewWasp::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 43710 ];

	ATgPawn_NewWasp_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_NewWasp.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void ATgPawn_NewWasp::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 43709 ];

	ATgPawn_NewWasp_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function TgGame.TgPawn_NewWasp.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_NewWasp::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 43705 ];

	ATgPawn_NewWasp_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgPawn_NewWasp.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_NewWasp::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43703 ];

	ATgPawn_NewWasp_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_NewWasp.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_NewWasp::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43701 ];

	ATgPawn_NewWasp_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_NewWasp.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_NewWasp::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43699 ];

	ATgPawn_NewWasp_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_NewWasp.InitializeHoverBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_NewWasp::InitializeHoverBot ( )
{
	static UFunction* pFnInitializeHoverBot = NULL;

	if ( ! pFnInitializeHoverBot )
		pFnInitializeHoverBot = (UFunction*) UObject::GObjObjects()->Data[ 43697 ];

	ATgPawn_NewWasp_execInitializeHoverBot_Parms InitializeHoverBot_Parms;

	pFnInitializeHoverBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeHoverBot, &InitializeHoverBot_Parms, NULL );

	pFnInitializeHoverBot->FunctionFlags |= 0x400;

	return InitializeHoverBot_Parms.ReturnValue;
};

// Function TgGame.TgPawn_WaspSpawner.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_WaspSpawner::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44226 ];

	ATgPawn_WaspSpawner_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_WaspSpawner.OnPetSpawned
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Pet                            ( CPF_Parm )

void ATgPawn_WaspSpawner::OnPetSpawned ( class ATgPawn* Pet )
{
	static UFunction* pFnOnPetSpawned = NULL;

	if ( ! pFnOnPetSpawned )
		pFnOnPetSpawned = (UFunction*) UObject::GObjObjects()->Data[ 44224 ];

	ATgPawn_WaspSpawner_execOnPetSpawned_Parms OnPetSpawned_Parms;
	OnPetSpawned_Parms.Pet = Pet;

	pFnOnPetSpawned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPetSpawned, &OnPetSpawned_Parms, NULL );

	pFnOnPetSpawned->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_WaspSpawner.InitSpawnPets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SpawnTableID                   ( CPF_Parm )

void ATgPawn_WaspSpawner::InitSpawnPets ( int SpawnTableID )
{
	static UFunction* pFnInitSpawnPets = NULL;

	if ( ! pFnInitSpawnPets )
		pFnInitSpawnPets = (UFunction*) UObject::GObjObjects()->Data[ 44222 ];

	ATgPawn_WaspSpawner_execInitSpawnPets_Parms InitSpawnPets_Parms;
	InitSpawnPets_Parms.SpawnTableID = SpawnTableID;

	pFnInitSpawnPets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSpawnPets, &InitSpawnPets_Parms, NULL );

	pFnInitSpawnPets->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Robot.PlayDyingPhysicsAndAnimation
// [0x00820102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Robot::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 42616 ];

	ATgPawn_Robot_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_Robot.GetWeaponStartTraceLocation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn_Robot::eventGetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 42609 ];

	ATgPawn_Robot_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Robot.CanTrackATarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Robot::CanTrackATarget ( )
{
	static UFunction* pFnCanTrackATarget = NULL;

	if ( ! pFnCanTrackATarget )
		pFnCanTrackATarget = (UFunction*) UObject::GObjObjects()->Data[ 42607 ];

	ATgPawn_Robot_execCanTrackATarget_Parms CanTrackATarget_Parms;

	this->ProcessEvent ( pFnCanTrackATarget, &CanTrackATarget_Parms, NULL );

	return CanTrackATarget_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Robot.DoFootPlacement
// [0x00020102] 
// Parameters infos:

void ATgPawn_Robot::DoFootPlacement ( )
{
	static UFunction* pFnDoFootPlacement = NULL;

	if ( ! pFnDoFootPlacement )
		pFnDoFootPlacement = (UFunction*) UObject::GObjObjects()->Data[ 42606 ];

	ATgPawn_Robot_execDoFootPlacement_Parms DoFootPlacement_Parms;

	this->ProcessEvent ( pFnDoFootPlacement, &DoFootPlacement_Parms, NULL );
};

// Function TgGame.TgPawn_Robot.UpdateMeshBoneControllers
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_Robot::eventUpdateMeshBoneControllers ( float DeltaTime )
{
	static UFunction* pFnUpdateMeshBoneControllers = NULL;

	if ( ! pFnUpdateMeshBoneControllers )
		pFnUpdateMeshBoneControllers = (UFunction*) UObject::GObjObjects()->Data[ 42601 ];

	ATgPawn_Robot_eventUpdateMeshBoneControllers_Parms UpdateMeshBoneControllers_Parms;
	UpdateMeshBoneControllers_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateMeshBoneControllers, &UpdateMeshBoneControllers_Parms, NULL );
};

// Function TgGame.TgPawn_Robot.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Robot::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 42599 ];

	ATgPawn_Robot_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Ambush::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 42644 ];

	ATgPawn_Ambush_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.PlayGoBackInGroundEffects
// [0x00020102] 
// Parameters infos:

void ATgPawn_Ambush::PlayGoBackInGroundEffects ( )
{
	static UFunction* pFnPlayGoBackInGroundEffects = NULL;

	if ( ! pFnPlayGoBackInGroundEffects )
		pFnPlayGoBackInGroundEffects = (UFunction*) UObject::GObjObjects()->Data[ 42643 ];

	ATgPawn_Ambush_execPlayGoBackInGroundEffects_Parms PlayGoBackInGroundEffects_Parms;

	this->ProcessEvent ( pFnPlayGoBackInGroundEffects, &PlayGoBackInGroundEffects_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.PlayAmbushEffects
// [0x00820102] 
// Parameters infos:

void ATgPawn_Ambush::PlayAmbushEffects ( )
{
	static UFunction* pFnPlayAmbushEffects = NULL;

	if ( ! pFnPlayAmbushEffects )
		pFnPlayAmbushEffects = (UFunction*) UObject::GObjObjects()->Data[ 42640 ];

	ATgPawn_Ambush_execPlayAmbushEffects_Parms PlayAmbushEffects_Parms;

	this->ProcessEvent ( pFnPlayAmbushEffects, &PlayAmbushEffects_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.BackInGround
// [0x00020102] 
// Parameters infos:

void ATgPawn_Ambush::BackInGround ( )
{
	static UFunction* pFnBackInGround = NULL;

	if ( ! pFnBackInGround )
		pFnBackInGround = (UFunction*) UObject::GObjObjects()->Data[ 42639 ];

	ATgPawn_Ambush_execBackInGround_Parms BackInGround_Parms;

	this->ProcessEvent ( pFnBackInGround, &BackInGround_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.SetDeployed
// [0x00020102] 
// Parameters infos:

void ATgPawn_Ambush::SetDeployed ( )
{
	static UFunction* pFnSetDeployed = NULL;

	if ( ! pFnSetDeployed )
		pFnSetDeployed = (UFunction*) UObject::GObjObjects()->Data[ 42638 ];

	ATgPawn_Ambush_execSetDeployed_Parms SetDeployed_Parms;

	this->ProcessEvent ( pFnSetDeployed, &SetDeployed_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.ServerSetDeployed
// [0x00020002] 
// Parameters infos:

void ATgPawn_Ambush::ServerSetDeployed ( )
{
	static UFunction* pFnServerSetDeployed = NULL;

	if ( ! pFnServerSetDeployed )
		pFnServerSetDeployed = (UFunction*) UObject::GObjObjects()->Data[ 42637 ];

	ATgPawn_Ambush_execServerSetDeployed_Parms ServerSetDeployed_Parms;

	this->ProcessEvent ( pFnServerSetDeployed, &ServerSetDeployed_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.SetPosture
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            ePosture                       ( CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Ambush::eventSetPosture ( int ePosture, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnSetPosture = NULL;

	if ( ! pFnSetPosture )
		pFnSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 42633 ];

	ATgPawn_Ambush_eventSetPosture_Parms SetPosture_Parms;
	SetPosture_Parms.ePosture = ePosture;
	SetPosture_Parms.fRateScale = fRateScale;
	SetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnSetPosture, &SetPosture_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_Ambush::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 42632 ];

	ATgPawn_Ambush_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Ambush::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 42630 ];

	ATgPawn_Ambush_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Ambush.ShouldUpdateStealthedFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 ViewerPawn                     ( CPF_Parm )

bool ATgPawn_Ambush::ShouldUpdateStealthedFor ( class ATgPawn* ViewerPawn )
{
	static UFunction* pFnShouldUpdateStealthedFor = NULL;

	if ( ! pFnShouldUpdateStealthedFor )
		pFnShouldUpdateStealthedFor = (UFunction*) UObject::GObjObjects()->Data[ 42627 ];

	ATgPawn_Ambush_execShouldUpdateStealthedFor_Parms ShouldUpdateStealthedFor_Parms;
	ShouldUpdateStealthedFor_Parms.ViewerPawn = ViewerPawn;

	pFnShouldUpdateStealthedFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldUpdateStealthedFor, &ShouldUpdateStealthedFor_Parms, NULL );

	pFnShouldUpdateStealthedFor->FunctionFlags |= 0x400;

	return ShouldUpdateStealthedFor_Parms.ReturnValue;
};

// Function TgGame.TgPawn_CTR.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_CTR::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43206 ];

	ATgPawn_CTR_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_CTR::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43204 ];

	ATgPawn_CTR_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.GetGenderTypeCode
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_CTR::eventGetGenderTypeCode ( )
{
	static UFunction* pFnGetGenderTypeCode = NULL;

	if ( ! pFnGetGenderTypeCode )
		pFnGetGenderTypeCode = (UFunction*) UObject::GObjObjects()->Data[ 43202 ];

	ATgPawn_CTR_eventGetGenderTypeCode_Parms GetGenderTypeCode_Parms;

	this->ProcessEvent ( pFnGetGenderTypeCode, &GetGenderTypeCode_Parms, NULL );

	return GetGenderTypeCode_Parms.ReturnValue;
};

// Function TgGame.TgPawn_CTR.SetDeviceTypeAnim
// [0x00020102] 
// Parameters infos:
// int                            NewActiveChild                 ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void ATgPawn_CTR::SetDeviceTypeAnim ( int NewActiveChild, float BlendTime )
{
	static UFunction* pFnSetDeviceTypeAnim = NULL;

	if ( ! pFnSetDeviceTypeAnim )
		pFnSetDeviceTypeAnim = (UFunction*) UObject::GObjObjects()->Data[ 43198 ];

	ATgPawn_CTR_execSetDeviceTypeAnim_Parms SetDeviceTypeAnim_Parms;
	SetDeviceTypeAnim_Parms.NewActiveChild = NewActiveChild;
	SetDeviceTypeAnim_Parms.BlendTime = BlendTime;

	this->ProcessEvent ( pFnSetDeviceTypeAnim, &SetDeviceTypeAnim_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.UpdatePilot
// [0x00020102] 
// Parameters infos:

void ATgPawn_CTR::UpdatePilot ( )
{
	static UFunction* pFnUpdatePilot = NULL;

	if ( ! pFnUpdatePilot )
		pFnUpdatePilot = (UFunction*) UObject::GObjObjects()->Data[ 43196 ];

	ATgPawn_CTR_execUpdatePilot_Parms UpdatePilot_Parms;

	this->ProcessEvent ( pFnUpdatePilot, &UpdatePilot_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_CTR::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43194 ];

	ATgPawn_CTR_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_CTR::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 43193 ];

	ATgPawn_CTR_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.PlayUncrewedAnim
// [0x00020102] 
// Parameters infos:

void ATgPawn_CTR::PlayUncrewedAnim ( )
{
	static UFunction* pFnPlayUncrewedAnim = NULL;

	if ( ! pFnPlayUncrewedAnim )
		pFnPlayUncrewedAnim = (UFunction*) UObject::GObjObjects()->Data[ 43192 ];

	ATgPawn_CTR_execPlayUncrewedAnim_Parms PlayUncrewedAnim_Parms;

	this->ProcessEvent ( pFnPlayUncrewedAnim, &PlayUncrewedAnim_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.PlayPowerUpAnim
// [0x00020102] 
// Parameters infos:

void ATgPawn_CTR::PlayPowerUpAnim ( )
{
	static UFunction* pFnPlayPowerUpAnim = NULL;

	if ( ! pFnPlayPowerUpAnim )
		pFnPlayPowerUpAnim = (UFunction*) UObject::GObjObjects()->Data[ 43190 ];

	ATgPawn_CTR_execPlayPowerUpAnim_Parms PlayPowerUpAnim_Parms;

	this->ProcessEvent ( pFnPlayPowerUpAnim, &PlayPowerUpAnim_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_CTR::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43188 ];

	ATgPawn_CTR_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_CTR.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_CTR::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43186 ];

	ATgPawn_CTR_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.HackedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 ControlPawn                    ( CPF_Parm )

void ATgPawn_CTR::eventHackedBy ( class ATgPawn* ControlPawn )
{
	static UFunction* pFnHackedBy = NULL;

	if ( ! pFnHackedBy )
		pFnHackedBy = (UFunction*) UObject::GObjObjects()->Data[ 43184 ];

	ATgPawn_CTR_eventHackedBy_Parms HackedBy_Parms;
	HackedBy_Parms.ControlPawn = ControlPawn;

	this->ProcessEvent ( pFnHackedBy, &HackedBy_Parms, NULL );
};

// Function TgGame.TgPawn_CTR.BuildPilot
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_CTR::BuildPilot ( )
{
	static UFunction* pFnBuildPilot = NULL;

	if ( ! pFnBuildPilot )
		pFnBuildPilot = (UFunction*) UObject::GObjObjects()->Data[ 43183 ];

	ATgPawn_CTR_execBuildPilot_Parms BuildPilot_Parms;

	pFnBuildPilot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildPilot, &BuildPilot_Parms, NULL );

	pFnBuildPilot->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_CTR.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_CTR::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 43181 ];

	ATgPawn_CTR_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_CTR.UnCrewed
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bKillControlPawn               ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_CTR::UnCrewed ( unsigned long bKillControlPawn )
{
	static UFunction* pFnUnCrewed = NULL;

	if ( ! pFnUnCrewed )
		pFnUnCrewed = (UFunction*) UObject::GObjObjects()->Data[ 43179 ];

	ATgPawn_CTR_execUnCrewed_Parms UnCrewed_Parms;
	UnCrewed_Parms.bKillControlPawn = bKillControlPawn;

	pFnUnCrewed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnCrewed, &UnCrewed_Parms, NULL );

	pFnUnCrewed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.SetPhysAnimState
// [0x00020300] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )

void ATgPawn_Scanner::SetPhysAnimState ( unsigned char NewState )
{
	static UFunction* pFnSetPhysAnimState = NULL;

	if ( ! pFnSetPhysAnimState )
		pFnSetPhysAnimState = (UFunction*) UObject::GObjObjects()->Data[ 43633 ];

	ATgPawn_Scanner_execSetPhysAnimState_Parms SetPhysAnimState_Parms;
	SetPhysAnimState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnSetPhysAnimState, &SetPhysAnimState_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Scanner::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 43623 ];

	ATgPawn_Scanner_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Scanner::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 43620 ];

	ATgPawn_Scanner_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Scanner::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43617 ];

	ATgPawn_Scanner_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Scanner.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Scanner::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43615 ];

	ATgPawn_Scanner_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Scanner::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43614 ];

	ATgPawn_Scanner_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.OnPhaseEnded
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nPhaseThatEnded                ( CPF_Parm )

void ATgPawn_Scanner::eventOnPhaseEnded ( int nPhaseThatEnded )
{
	static UFunction* pFnOnPhaseEnded = NULL;

	if ( ! pFnOnPhaseEnded )
		pFnOnPhaseEnded = (UFunction*) UObject::GObjObjects()->Data[ 43612 ];

	ATgPawn_Scanner_eventOnPhaseEnded_Parms OnPhaseEnded_Parms;
	OnPhaseEnded_Parms.nPhaseThatEnded = nPhaseThatEnded;

	this->ProcessEvent ( pFnOnPhaseEnded, &OnPhaseEnded_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.OnPhaseTransitionComplete
// [0x00020102] 
// Parameters infos:

void ATgPawn_Scanner::OnPhaseTransitionComplete ( )
{
	static UFunction* pFnOnPhaseTransitionComplete = NULL;

	if ( ! pFnOnPhaseTransitionComplete )
		pFnOnPhaseTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 43611 ];

	ATgPawn_Scanner_execOnPhaseTransitionComplete_Parms OnPhaseTransitionComplete_Parms;

	this->ProcessEvent ( pFnOnPhaseTransitionComplete, &OnPhaseTransitionComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.ConstructSensorBeamFX
// [0x00020102] 
// Parameters infos:

void ATgPawn_Scanner::ConstructSensorBeamFX ( )
{
	static UFunction* pFnConstructSensorBeamFX = NULL;

	if ( ! pFnConstructSensorBeamFX )
		pFnConstructSensorBeamFX = (UFunction*) UObject::GObjObjects()->Data[ 43607 ];

	ATgPawn_Scanner_execConstructSensorBeamFX_Parms ConstructSensorBeamFX_Parms;

	this->ProcessEvent ( pFnConstructSensorBeamFX, &ConstructSensorBeamFX_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.DoClientSideAlarmEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Scanner::eventDoClientSideAlarmEffects ( )
{
	static UFunction* pFnDoClientSideAlarmEffects = NULL;

	if ( ! pFnDoClientSideAlarmEffects )
		pFnDoClientSideAlarmEffects = (UFunction*) UObject::GObjObjects()->Data[ 43606 ];

	ATgPawn_Scanner_eventDoClientSideAlarmEffects_Parms DoClientSideAlarmEffects_Parms;

	this->ProcessEvent ( pFnDoClientSideAlarmEffects, &DoClientSideAlarmEffects_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.DestroyHighlightBeamActor
// [0x00020102] 
// Parameters infos:

void ATgPawn_Scanner::DestroyHighlightBeamActor ( )
{
	static UFunction* pFnDestroyHighlightBeamActor = NULL;

	if ( ! pFnDestroyHighlightBeamActor )
		pFnDestroyHighlightBeamActor = (UFunction*) UObject::GObjObjects()->Data[ 43605 ];

	ATgPawn_Scanner_execDestroyHighlightBeamActor_Parms DestroyHighlightBeamActor_Parms;

	this->ProcessEvent ( pFnDestroyHighlightBeamActor, &DestroyHighlightBeamActor_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.SensorSweepComplete
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Scanner::eventSensorSweepComplete ( )
{
	static UFunction* pFnSensorSweepComplete = NULL;

	if ( ! pFnSensorSweepComplete )
		pFnSensorSweepComplete = (UFunction*) UObject::GObjObjects()->Data[ 43603 ];

	ATgPawn_Scanner_eventSensorSweepComplete_Parms SensorSweepComplete_Parms;

	this->ProcessEvent ( pFnSensorSweepComplete, &SensorSweepComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.DoSensorSweep
// [0x00020102] 
// Parameters infos:

void ATgPawn_Scanner::DoSensorSweep ( )
{
	static UFunction* pFnDoSensorSweep = NULL;

	if ( ! pFnDoSensorSweep )
		pFnDoSensorSweep = (UFunction*) UObject::GObjObjects()->Data[ 43602 ];

	ATgPawn_Scanner_execDoSensorSweep_Parms DoSensorSweep_Parms;

	this->ProcessEvent ( pFnDoSensorSweep, &DoSensorSweep_Parms, NULL );
};

// Function TgGame.TgPawn_Scanner.DoAlarm
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::DoAlarm ( )
{
	static UFunction* pFnDoAlarm = NULL;

	if ( ! pFnDoAlarm )
		pFnDoAlarm = (UFunction*) UObject::GObjObjects()->Data[ 43601 ];

	ATgPawn_Scanner_execDoAlarm_Parms DoAlarm_Parms;

	pFnDoAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoAlarm, &DoAlarm_Parms, NULL );

	pFnDoAlarm->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.EnemyDetectedTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::EnemyDetectedTimer ( )
{
	static UFunction* pFnEnemyDetectedTimer = NULL;

	if ( ! pFnEnemyDetectedTimer )
		pFnEnemyDetectedTimer = (UFunction*) UObject::GObjObjects()->Data[ 43600 ];

	ATgPawn_Scanner_execEnemyDetectedTimer_Parms EnemyDetectedTimer_Parms;

	pFnEnemyDetectedTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnemyDetectedTimer, &EnemyDetectedTimer_Parms, NULL );

	pFnEnemyDetectedTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.DidSensorBeamDetectEnemy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool ATgPawn_Scanner::DidSensorBeamDetectEnemy ( class AActor* HitActor )
{
	static UFunction* pFnDidSensorBeamDetectEnemy = NULL;

	if ( ! pFnDidSensorBeamDetectEnemy )
		pFnDidSensorBeamDetectEnemy = (UFunction*) UObject::GObjObjects()->Data[ 43597 ];

	ATgPawn_Scanner_execDidSensorBeamDetectEnemy_Parms DidSensorBeamDetectEnemy_Parms;
	DidSensorBeamDetectEnemy_Parms.HitActor = HitActor;

	pFnDidSensorBeamDetectEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDidSensorBeamDetectEnemy, &DidSensorBeamDetectEnemy_Parms, NULL );

	pFnDidSensorBeamDetectEnemy->FunctionFlags |= 0x400;

	return DidSensorBeamDetectEnemy_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Scanner.UpdateBeamVisualHighlightIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Scanner::UpdateBeamVisualHighlightIndex ( float DeltaSeconds )
{
	static UFunction* pFnUpdateBeamVisualHighlightIndex = NULL;

	if ( ! pFnUpdateBeamVisualHighlightIndex )
		pFnUpdateBeamVisualHighlightIndex = (UFunction*) UObject::GObjObjects()->Data[ 43595 ];

	ATgPawn_Scanner_execUpdateBeamVisualHighlightIndex_Parms UpdateBeamVisualHighlightIndex_Parms;
	UpdateBeamVisualHighlightIndex_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateBeamVisualHighlightIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBeamVisualHighlightIndex, &UpdateBeamVisualHighlightIndex_Parms, NULL );

	pFnUpdateBeamVisualHighlightIndex->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.UpdateSensorSweep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Scanner::UpdateSensorSweep ( float DeltaSeconds )
{
	static UFunction* pFnUpdateSensorSweep = NULL;

	if ( ! pFnUpdateSensorSweep )
		pFnUpdateSensorSweep = (UFunction*) UObject::GObjObjects()->Data[ 43593 ];

	ATgPawn_Scanner_execUpdateSensorSweep_Parms UpdateSensorSweep_Parms;
	UpdateSensorSweep_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateSensorSweep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSensorSweep, &UpdateSensorSweep_Parms, NULL );

	pFnUpdateSensorSweep->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.PatrolComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::PatrolComplete ( )
{
	static UFunction* pFnPatrolComplete = NULL;

	if ( ! pFnPatrolComplete )
		pFnPatrolComplete = (UFunction*) UObject::GObjObjects()->Data[ 43592 ];

	ATgPawn_Scanner_execPatrolComplete_Parms PatrolComplete_Parms;

	pFnPatrolComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPatrolComplete, &PatrolComplete_Parms, NULL );

	pFnPatrolComplete->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.DoPatrol
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::DoPatrol ( )
{
	static UFunction* pFnDoPatrol = NULL;

	if ( ! pFnDoPatrol )
		pFnDoPatrol = (UFunction*) UObject::GObjObjects()->Data[ 43591 ];

	ATgPawn_Scanner_execDoPatrol_Parms DoPatrol_Parms;

	pFnDoPatrol->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoPatrol, &DoPatrol_Parms, NULL );

	pFnDoPatrol->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.PowerRechargeComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::PowerRechargeComplete ( )
{
	static UFunction* pFnPowerRechargeComplete = NULL;

	if ( ! pFnPowerRechargeComplete )
		pFnPowerRechargeComplete = (UFunction*) UObject::GObjObjects()->Data[ 43590 ];

	ATgPawn_Scanner_execPowerRechargeComplete_Parms PowerRechargeComplete_Parms;

	pFnPowerRechargeComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPowerRechargeComplete, &PowerRechargeComplete_Parms, NULL );

	pFnPowerRechargeComplete->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.DoPowerRecharge
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::DoPowerRecharge ( )
{
	static UFunction* pFnDoPowerRecharge = NULL;

	if ( ! pFnDoPowerRecharge )
		pFnDoPowerRecharge = (UFunction*) UObject::GObjObjects()->Data[ 43589 ];

	ATgPawn_Scanner_execDoPowerRecharge_Parms DoPowerRecharge_Parms;

	pFnDoPowerRecharge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoPowerRecharge, &DoPowerRecharge_Parms, NULL );

	pFnDoPowerRecharge->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Scanner.AlarmComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Scanner::AlarmComplete ( )
{
	static UFunction* pFnAlarmComplete = NULL;

	if ( ! pFnAlarmComplete )
		pFnAlarmComplete = (UFunction*) UObject::GObjObjects()->Data[ 43588 ];

	ATgPawn_Scanner_execAlarmComplete_Parms AlarmComplete_Parms;

	pFnAlarmComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAlarmComplete, &AlarmComplete_Parms, NULL );

	pFnAlarmComplete->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Siege.DoJump
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ATgPawn_Siege::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 43799 ];

	ATgPawn_Siege_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Siege.GetWeaponStartTraceLocation
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )

struct FVector ATgPawn_Siege::eventGetWeaponStartTraceLocation ( class ATgDevice* Dev )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 43793 ];

	ATgPawn_Siege_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.Dev = Dev;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Siege.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgPawn_Siege::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 43790 ];

	ATgPawn_Siege_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgPawn_Siege.GetCameraValues
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FTgCameraValues         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTgCameraValues ATgPawn_Siege::eventGetCameraValues ( )
{
	static UFunction* pFnGetCameraValues = NULL;

	if ( ! pFnGetCameraValues )
		pFnGetCameraValues = (UFunction*) UObject::GObjObjects()->Data[ 43788 ];

	ATgPawn_Siege_eventGetCameraValues_Parms GetCameraValues_Parms;

	this->ProcessEvent ( pFnGetCameraValues, &GetCameraValues_Parms, NULL );

	return GetCameraValues_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Siege.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Siege::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43785 ];

	ATgPawn_Siege_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Siege.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Siege::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43783 ];

	ATgPawn_Siege_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Siege.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Siege::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43781 ];

	ATgPawn_Siege_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Siege.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Siege::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43779 ];

	ATgPawn_Siege_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Siege.RecalculateMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsFriendlyWithLocalPawn       ( CPF_Parm )

void ATgPawn_Siege::RecalculateMaterial ( unsigned long bIsFriendlyWithLocalPawn )
{
	static UFunction* pFnRecalculateMaterial = NULL;

	if ( ! pFnRecalculateMaterial )
		pFnRecalculateMaterial = (UFunction*) UObject::GObjObjects()->Data[ 43777 ];

	ATgPawn_Siege_execRecalculateMaterial_Parms RecalculateMaterial_Parms;
	RecalculateMaterial_Parms.bIsFriendlyWithLocalPawn = bIsFriendlyWithLocalPawn;

	pFnRecalculateMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateMaterial, &RecalculateMaterial_Parms, NULL );

	pFnRecalculateMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_Siege.BlendBackJetFlares
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Siege::BlendBackJetFlares ( )
{
	static UFunction* pFnBlendBackJetFlares = NULL;

	if ( ! pFnBlendBackJetFlares )
		pFnBlendBackJetFlares = (UFunction*) UObject::GObjObjects()->Data[ 43776 ];

	ATgPawn_Siege_execBlendBackJetFlares_Parms BlendBackJetFlares_Parms;

	pFnBlendBackJetFlares->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendBackJetFlares, &BlendBackJetFlares_Parms, NULL );

	pFnBlendBackJetFlares->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_TreadRobot.Poke
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// unsigned char                  byHitType                      ( CPF_Parm )
// unsigned char                  byHitMagnitude                 ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 RayDirection                   ( CPF_Parm )

void ATgPawn_TreadRobot::eventPoke ( unsigned char byHitType, unsigned char byHitMagnitude, struct FVector HitLocation, struct FVector RayDirection )
{
	static UFunction* pFnPoke = NULL;

	if ( ! pFnPoke )
		pFnPoke = (UFunction*) UObject::GObjObjects()->Data[ 43358 ];

	ATgPawn_TreadRobot_eventPoke_Parms Poke_Parms;
	Poke_Parms.byHitType = byHitType;
	Poke_Parms.byHitMagnitude = byHitMagnitude;
	memcpy ( &Poke_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Poke_Parms.RayDirection, &RayDirection, 0xC );

	this->ProcessEvent ( pFnPoke, &Poke_Parms, NULL );
};

// Function TgGame.TgPawn_TreadRobot.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_TreadRobot::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43356 ];

	ATgPawn_TreadRobot_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_TreadRobot.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TreadRobot::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43354 ];

	ATgPawn_TreadRobot_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Widow.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Widow::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44252 ];

	ATgPawn_Widow_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.EndVortex
// [0x00020102] 
// Parameters infos:

void ATgPawn_Widow::EndVortex ( )
{
	static UFunction* pFnEndVortex = NULL;

	if ( ! pFnEndVortex )
		pFnEndVortex = (UFunction*) UObject::GObjObjects()->Data[ 44251 ];

	ATgPawn_Widow_execEndVortex_Parms EndVortex_Parms;

	this->ProcessEvent ( pFnEndVortex, &EndVortex_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.StartVortex
// [0x00020102] 
// Parameters infos:

void ATgPawn_Widow::StartVortex ( )
{
	static UFunction* pFnStartVortex = NULL;

	if ( ! pFnStartVortex )
		pFnStartVortex = (UFunction*) UObject::GObjObjects()->Data[ 44250 ];

	ATgPawn_Widow_execStartVortex_Parms StartVortex_Parms;

	this->ProcessEvent ( pFnStartVortex, &StartVortex_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Widow::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 44249 ];

	ATgPawn_Widow_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.ClientSetStun
// [0x00020102] 
// Parameters infos:

void ATgPawn_Widow::ClientSetStun ( )
{
	static UFunction* pFnClientSetStun = NULL;

	if ( ! pFnClientSetStun )
		pFnClientSetStun = (UFunction*) UObject::GObjObjects()->Data[ 44248 ];

	ATgPawn_Widow_execClientSetStun_Parms ClientSetStun_Parms;

	this->ProcessEvent ( pFnClientSetStun, &ClientSetStun_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.Stun
// [0x00024102] 
// Parameters infos:
// unsigned long                  bStunController                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Widow::Stun ( unsigned long bStunController, unsigned char eType )
{
	static UFunction* pFnStun = NULL;

	if ( ! pFnStun )
		pFnStun = (UFunction*) UObject::GObjObjects()->Data[ 44245 ];

	ATgPawn_Widow_execStun_Parms Stun_Parms;
	Stun_Parms.bStunController = bStunController;
	Stun_Parms.eType = eType;

	this->ProcessEvent ( pFnStun, &Stun_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Widow::PlayDying ( class UClass* dmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 44242 ];

	ATgPawn_Widow_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.dmgType = dmgType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.OnPhaseTransitionComplete
// [0x00020102] 
// Parameters infos:

void ATgPawn_Widow::OnPhaseTransitionComplete ( )
{
	static UFunction* pFnOnPhaseTransitionComplete = NULL;

	if ( ! pFnOnPhaseTransitionComplete )
		pFnOnPhaseTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 44241 ];

	ATgPawn_Widow_execOnPhaseTransitionComplete_Parms OnPhaseTransitionComplete_Parms;

	this->ProcessEvent ( pFnOnPhaseTransitionComplete, &OnPhaseTransitionComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_Widow::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 44240 ];

	ATgPawn_Widow_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Widow::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 44238 ];

	ATgPawn_Widow_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Widow::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 44237 ];

	ATgPawn_Widow_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function TgGame.TgPawn_Widow.UpdateTargetingBeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPawn_Widow::UpdateTargetingBeam ( )
{
	static UFunction* pFnUpdateTargetingBeam = NULL;

	if ( ! pFnUpdateTargetingBeam )
		pFnUpdateTargetingBeam = (UFunction*) UObject::GObjObjects()->Data[ 44236 ];

	ATgPawn_Widow_execUpdateTargetingBeam_Parms UpdateTargetingBeam_Parms;

	pFnUpdateTargetingBeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTargetingBeam, &UpdateTargetingBeam_Parms, NULL );

	pFnUpdateTargetingBeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_VanityPet.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_VanityPet::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 44192 ];

	ATgPawn_VanityPet_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPawn_VanityPet.GetBodyMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_VanityPet::eventGetBodyMeshId ( )
{
	static UFunction* pFnGetBodyMeshId = NULL;

	if ( ! pFnGetBodyMeshId )
		pFnGetBodyMeshId = (UFunction*) UObject::GObjObjects()->Data[ 44190 ];

	ATgPawn_VanityPet_eventGetBodyMeshId_Parms GetBodyMeshId_Parms;

	this->ProcessEvent ( pFnGetBodyMeshId, &GetBodyMeshId_Parms, NULL );

	return GetBodyMeshId_Parms.ReturnValue;
};

// Function TgGame.TgPawn_VanityPet.OnSpawningItemChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_VanityPet::eventOnSpawningItemChanged ( )
{
	static UFunction* pFnOnSpawningItemChanged = NULL;

	if ( ! pFnOnSpawningItemChanged )
		pFnOnSpawningItemChanged = (UFunction*) UObject::GObjObjects()->Data[ 44189 ];

	ATgPawn_VanityPet_eventOnSpawningItemChanged_Parms OnSpawningItemChanged_Parms;

	this->ProcessEvent ( pFnOnSpawningItemChanged, &OnSpawningItemChanged_Parms, NULL );
};

// Function TgGame.TgPawn_VanityPet.ReplicatedEvent
// [0x00020102] 
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_VanityPet::ReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 44187 ];

	ATgPawn_VanityPet_execReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_VanityPet.OnAnimNodeChildChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimNode*               Node                           ( CPF_Parm )
// int                            OldChild                       ( CPF_Parm )
// int                            NewChild                       ( CPF_Parm )

void ATgPawn_VanityPet::OnAnimNodeChildChanged ( class UAnimNode* Node, int OldChild, int NewChild )
{
	static UFunction* pFnOnAnimNodeChildChanged = NULL;

	if ( ! pFnOnAnimNodeChildChanged )
		pFnOnAnimNodeChildChanged = (UFunction*) UObject::GObjObjects()->Data[ 44183 ];

	ATgPawn_VanityPet_execOnAnimNodeChildChanged_Parms OnAnimNodeChildChanged_Parms;
	OnAnimNodeChildChanged_Parms.Node = Node;
	OnAnimNodeChildChanged_Parms.OldChild = OldChild;
	OnAnimNodeChildChanged_Parms.NewChild = NewChild;

	pFnOnAnimNodeChildChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimNodeChildChanged, &OnAnimNodeChildChanged_Parms, NULL );

	pFnOnAnimNodeChildChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgPawn_VanityPet.IsNonCombat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_VanityPet::IsNonCombat ( )
{
	static UFunction* pFnIsNonCombat = NULL;

	if ( ! pFnIsNonCombat )
		pFnIsNonCombat = (UFunction*) UObject::GObjObjects()->Data[ 44181 ];

	ATgPawn_VanityPet_execIsNonCombat_Parms IsNonCombat_Parms;

	pFnIsNonCombat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNonCombat, &IsNonCombat_Parms, NULL );

	pFnIsNonCombat->FunctionFlags |= 0x400;

	return IsNonCombat_Parms.ReturnValue;
};

// Function TgGame.TgPawn_VanityPet.GetBodyMeshIdToUse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPawn_VanityPet::GetBodyMeshIdToUse ( )
{
	static UFunction* pFnGetBodyMeshIdToUse = NULL;

	if ( ! pFnGetBodyMeshIdToUse )
		pFnGetBodyMeshIdToUse = (UFunction*) UObject::GObjObjects()->Data[ 44179 ];

	ATgPawn_VanityPet_execGetBodyMeshIdToUse_Parms GetBodyMeshIdToUse_Parms;

	pFnGetBodyMeshIdToUse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBodyMeshIdToUse, &GetBodyMeshIdToUse_Parms, NULL );

	pFnGetBodyMeshIdToUse->FunctionFlags |= 0x400;

	return GetBodyMeshIdToUse_Parms.ReturnValue;
};

// Function TgGame.TgPawn_VanityPet.ShouldPawnMeshBeHiddenThisTick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_VanityPet::ShouldPawnMeshBeHiddenThisTick ( )
{
	static UFunction* pFnShouldPawnMeshBeHiddenThisTick = NULL;

	if ( ! pFnShouldPawnMeshBeHiddenThisTick )
		pFnShouldPawnMeshBeHiddenThisTick = (UFunction*) UObject::GObjObjects()->Data[ 44177 ];

	ATgPawn_VanityPet_execShouldPawnMeshBeHiddenThisTick_Parms ShouldPawnMeshBeHiddenThisTick_Parms;

	pFnShouldPawnMeshBeHiddenThisTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldPawnMeshBeHiddenThisTick, &ShouldPawnMeshBeHiddenThisTick_Parms, NULL );

	pFnShouldPawnMeshBeHiddenThisTick->FunctionFlags |= 0x400;

	return ShouldPawnMeshBeHiddenThisTick_Parms.ReturnValue;
};

// Function TgGame.TgPawn_VanityPet.AllManifestsLoaded
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ATgPawn_VanityPet::AllManifestsLoaded ( )
{
	static UFunction* pFnAllManifestsLoaded = NULL;

	if ( ! pFnAllManifestsLoaded )
		pFnAllManifestsLoaded = (UFunction*) UObject::GObjObjects()->Data[ 44176 ];

	ATgPawn_VanityPet_execAllManifestsLoaded_Parms AllManifestsLoaded_Parms;

	pFnAllManifestsLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllManifestsLoaded, &AllManifestsLoaded_Parms, NULL );

	pFnAllManifestsLoaded->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.InspectAgentProfile
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::InspectAgentProfile ( )
{
	static UFunction* pFnInspectAgentProfile = NULL;

	if ( ! pFnInspectAgentProfile )
		pFnInspectAgentProfile = (UFunction*) UObject::GObjObjects()->Data[ 46139 ];

	ATgPlayerController_execInspectAgentProfile_Parms InspectAgentProfile_Parms;

	pFnInspectAgentProfile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInspectAgentProfile, &InspectAgentProfile_Parms, NULL );

	pFnInspectAgentProfile->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetPaperDoll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          TransX                         ( CPF_Parm )
// float                          TransY                         ( CPF_Parm )
// float                          TransZ                         ( CPF_Parm )
// float                          RotX                           ( CPF_Parm )
// float                          RotY                           ( CPF_Parm )
// float                          RotZ                           ( CPF_Parm )

void ATgPlayerController::SetPaperDoll ( float Height, float TransX, float TransY, float TransZ, float RotX, float RotY, float RotZ )
{
	static UFunction* pFnSetPaperDoll = NULL;

	if ( ! pFnSetPaperDoll )
		pFnSetPaperDoll = (UFunction*) UObject::GObjObjects()->Data[ 46131 ];

	ATgPlayerController_execSetPaperDoll_Parms SetPaperDoll_Parms;
	SetPaperDoll_Parms.Height = Height;
	SetPaperDoll_Parms.TransX = TransX;
	SetPaperDoll_Parms.TransY = TransY;
	SetPaperDoll_Parms.TransZ = TransZ;
	SetPaperDoll_Parms.RotX = RotX;
	SetPaperDoll_Parms.RotY = RotY;
	SetPaperDoll_Parms.RotZ = RotZ;

	this->ProcessEvent ( pFnSetPaperDoll, &SetPaperDoll_Parms, NULL );
};

// Function TgGame.TgPlayerController.TogglePawnPostRenderText
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TogglePawnPostRenderText ( )
{
	static UFunction* pFnTogglePawnPostRenderText = NULL;

	if ( ! pFnTogglePawnPostRenderText )
		pFnTogglePawnPostRenderText = (UFunction*) UObject::GObjObjects()->Data[ 46130 ];

	ATgPlayerController_execTogglePawnPostRenderText_Parms TogglePawnPostRenderText_Parms;

	this->ProcessEvent ( pFnTogglePawnPostRenderText, &TogglePawnPostRenderText_Parms, NULL );
};

// Function TgGame.TgPlayerController.TogglePawnPostRender
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TogglePawnPostRender ( )
{
	static UFunction* pFnTogglePawnPostRender = NULL;

	if ( ! pFnTogglePawnPostRender )
		pFnTogglePawnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 46129 ];

	ATgPlayerController_execTogglePawnPostRender_Parms TogglePawnPostRender_Parms;

	this->ProcessEvent ( pFnTogglePawnPostRender, &TogglePawnPostRender_Parms, NULL );
};

// Function TgGame.TgPlayerController.CCTest1
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bUsePAC                        ( CPF_Parm )
// unsigned long                  bLoadAttachments               ( CPF_Parm )

void ATgPlayerController::CCTest1 ( unsigned long bUsePAC, unsigned long bLoadAttachments )
{
	static UFunction* pFnCCTest1 = NULL;

	if ( ! pFnCCTest1 )
		pFnCCTest1 = (UFunction*) UObject::GObjObjects()->Data[ 46118 ];

	ATgPlayerController_execCCTest1_Parms CCTest1_Parms;
	CCTest1_Parms.bUsePAC = bUsePAC;
	CCTest1_Parms.bLoadAttachments = bLoadAttachments;

	this->ProcessEvent ( pFnCCTest1, &CCTest1_Parms, NULL );
};

// Function TgGame.TgPlayerController.UpdateCustomChar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Torso                          ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            GlovesR                        ( CPF_Parm )
// int                            GlovesL                        ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )
// int                            BootsR                         ( CPF_Parm )
// int                            BootsL                         ( CPF_Parm )
// int                            ClassSpecific                  ( CPF_Parm )

void ATgPlayerController::UpdateCustomChar ( int Torso, int Head, int GlovesR, int GlovesL, int Legs, int BootsR, int BootsL, int ClassSpecific )
{
	static UFunction* pFnUpdateCustomChar = NULL;

	if ( ! pFnUpdateCustomChar )
		pFnUpdateCustomChar = (UFunction*) UObject::GObjObjects()->Data[ 46108 ];

	ATgPlayerController_execUpdateCustomChar_Parms UpdateCustomChar_Parms;
	UpdateCustomChar_Parms.Torso = Torso;
	UpdateCustomChar_Parms.Head = Head;
	UpdateCustomChar_Parms.GlovesR = GlovesR;
	UpdateCustomChar_Parms.GlovesL = GlovesL;
	UpdateCustomChar_Parms.Legs = Legs;
	UpdateCustomChar_Parms.BootsR = BootsR;
	UpdateCustomChar_Parms.BootsL = BootsL;
	UpdateCustomChar_Parms.ClassSpecific = ClassSpecific;

	this->ProcessEvent ( pFnUpdateCustomChar, &UpdateCustomChar_Parms, NULL );
};

// Function TgGame.TgPlayerController.PawnPerformanceTest
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnablePerfTest                ( CPF_Parm )
// unsigned long                  bBackpack                      ( CPF_Parm )
// unsigned long                  bHelmet                        ( CPF_Parm )
// unsigned long                  bHair                          ( CPF_Parm )
// unsigned long                  bHead                          ( CPF_Parm )

void ATgPlayerController::PawnPerformanceTest ( unsigned long bEnablePerfTest, unsigned long bBackpack, unsigned long bHelmet, unsigned long bHair, unsigned long bHead )
{
	static UFunction* pFnPawnPerformanceTest = NULL;

	if ( ! pFnPawnPerformanceTest )
		pFnPawnPerformanceTest = (UFunction*) UObject::GObjObjects()->Data[ 46101 ];

	ATgPlayerController_execPawnPerformanceTest_Parms PawnPerformanceTest_Parms;
	PawnPerformanceTest_Parms.bEnablePerfTest = bEnablePerfTest;
	PawnPerformanceTest_Parms.bBackpack = bBackpack;
	PawnPerformanceTest_Parms.bHelmet = bHelmet;
	PawnPerformanceTest_Parms.bHair = bHair;
	PawnPerformanceTest_Parms.bHead = bHead;

	this->ProcessEvent ( pFnPawnPerformanceTest, &PawnPerformanceTest_Parms, NULL );
};

// Function TgGame.TgPlayerController.Cloth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPlayerController::Cloth ( unsigned long bEnabled )
{
	static UFunction* pFnCloth = NULL;

	if ( ! pFnCloth )
		pFnCloth = (UFunction*) UObject::GObjObjects()->Data[ 46098 ];

	ATgPlayerController_execCloth_Parms Cloth_Parms;
	Cloth_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnCloth, &Cloth_Parms, NULL );
};

// Function TgGame.TgPlayerController.Wind
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPlayerController::Wind ( unsigned long bEnabled )
{
	static UFunction* pFnWind = NULL;

	if ( ! pFnWind )
		pFnWind = (UFunction*) UObject::GObjObjects()->Data[ 46094 ];

	ATgPlayerController_execWind_Parms Wind_Parms;
	Wind_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnWind, &Wind_Parms, NULL );
};

// Function TgGame.TgPlayerController.DoFade
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bIn                            ( CPF_Parm )
// float                          Time                           ( CPF_Parm )

void ATgPlayerController::DoFade ( unsigned long bIn, float Time )
{
	static UFunction* pFnDoFade = NULL;

	if ( ! pFnDoFade )
		pFnDoFade = (UFunction*) UObject::GObjObjects()->Data[ 46091 ];

	ATgPlayerController_execDoFade_Parms DoFade_Parms;
	DoFade_Parms.bIn = bIn;
	DoFade_Parms.Time = Time;

	this->ProcessEvent ( pFnDoFade, &DoFade_Parms, NULL );
};

// Function TgGame.TgPlayerController.RandomizeMorphs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::RandomizeMorphs ( )
{
	static UFunction* pFnRandomizeMorphs = NULL;

	if ( ! pFnRandomizeMorphs )
		pFnRandomizeMorphs = (UFunction*) UObject::GObjObjects()->Data[ 46089 ];

	ATgPlayerController_execRandomizeMorphs_Parms RandomizeMorphs_Parms;

	this->ProcessEvent ( pFnRandomizeMorphs, &RandomizeMorphs_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerGetTraceTime
// [0x002200C2] 
// Parameters infos:
// float                          fRange                         ( CPF_Parm )
// unsigned long                  bStopAtAnyHit                  ( CPF_Parm )

void ATgPlayerController::ServerGetTraceTime ( float fRange, unsigned long bStopAtAnyHit )
{
	static UFunction* pFnServerGetTraceTime = NULL;

	if ( ! pFnServerGetTraceTime )
		pFnServerGetTraceTime = (UFunction*) UObject::GObjObjects()->Data[ 46086 ];

	ATgPlayerController_execServerGetTraceTime_Parms ServerGetTraceTime_Parms;
	ServerGetTraceTime_Parms.fRange = fRange;
	ServerGetTraceTime_Parms.bStopAtAnyHit = bStopAtAnyHit;

	this->ProcessEvent ( pFnServerGetTraceTime, &ServerGetTraceTime_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetTraceTimeCheck
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          fRange                         ( CPF_Parm )
// unsigned long                  bStopAtAnyHit                  ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::GetTraceTimeCheck ( float fRange, unsigned long bStopAtAnyHit )
{
	static UFunction* pFnGetTraceTimeCheck = NULL;

	if ( ! pFnGetTraceTimeCheck )
		pFnGetTraceTimeCheck = (UFunction*) UObject::GObjObjects()->Data[ 46083 ];

	ATgPlayerController_execGetTraceTimeCheck_Parms GetTraceTimeCheck_Parms;
	GetTraceTimeCheck_Parms.fRange = fRange;
	GetTraceTimeCheck_Parms.bStopAtAnyHit = bStopAtAnyHit;

	this->ProcessEvent ( pFnGetTraceTimeCheck, &GetTraceTimeCheck_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSimNWCondition
// [0x002200C2] 
// Parameters infos:
// int                            nPktLoss                       ( CPF_Parm )
// int                            nPktLag                        ( CPF_Parm )

void ATgPlayerController::ServerSimNWCondition ( int nPktLoss, int nPktLag )
{
	static UFunction* pFnServerSimNWCondition = NULL;

	if ( ! pFnServerSimNWCondition )
		pFnServerSimNWCondition = (UFunction*) UObject::GObjObjects()->Data[ 46080 ];

	ATgPlayerController_execServerSimNWCondition_Parms ServerSimNWCondition_Parms;
	ServerSimNWCondition_Parms.nPktLoss = nPktLoss;
	ServerSimNWCondition_Parms.nPktLag = nPktLag;

	this->ProcessEvent ( pFnServerSimNWCondition, &ServerSimNWCondition_Parms, NULL );
};

// Function TgGame.TgPlayerController.SimNWCondition
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPktLoss                       ( CPF_Parm )
// int                            nPktLag                        ( CPF_Parm )

void ATgPlayerController::SimNWCondition ( int nPktLoss, int nPktLag )
{
	static UFunction* pFnSimNWCondition = NULL;

	if ( ! pFnSimNWCondition )
		pFnSimNWCondition = (UFunction*) UObject::GObjObjects()->Data[ 46077 ];

	ATgPlayerController_execSimNWCondition_Parms SimNWCondition_Parms;
	SimNWCondition_Parms.nPktLoss = nPktLoss;
	SimNWCondition_Parms.nPktLag = nPktLag;

	this->ProcessEvent ( pFnSimNWCondition, &SimNWCondition_Parms, NULL );
};

// Function TgGame.TgPlayerController.f2test
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  val                            ( CPF_Parm )
// unsigned long                  val2                           ( CPF_Parm )

void ATgPlayerController::f2test ( unsigned long val, unsigned long val2 )
{
	static UFunction* pFnf2test = NULL;

	if ( ! pFnf2test )
		pFnf2test = (UFunction*) UObject::GObjObjects()->Data[ 46074 ];

	ATgPlayerController_execf2test_Parms f2test_Parms;
	f2test_Parms.val = val;
	f2test_Parms.val2 = val2;

	this->ProcessEvent ( pFnf2test, &f2test_Parms, NULL );
};

// Function TgGame.TgPlayerController.TgServerExec
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 stringIn                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::TgServerExec ( struct FString stringIn )
{
	static UFunction* pFnTgServerExec = NULL;

	if ( ! pFnTgServerExec )
		pFnTgServerExec = (UFunction*) UObject::GObjObjects()->Data[ 46072 ];

	ATgPlayerController_execTgServerExec_Parms TgServerExec_Parms;
	memcpy ( &TgServerExec_Parms.stringIn, &stringIn, 0xC );

	this->ProcessEvent ( pFnTgServerExec, &TgServerExec_Parms, NULL );
};

// Function TgGame.TgPlayerController.TgSvrExec
// [0x002200C2] 
// Parameters infos:
// struct FString                 stringIn                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::TgSvrExec ( struct FString stringIn )
{
	static UFunction* pFnTgSvrExec = NULL;

	if ( ! pFnTgSvrExec )
		pFnTgSvrExec = (UFunction*) UObject::GObjObjects()->Data[ 46070 ];

	ATgPlayerController_execTgSvrExec_Parms TgSvrExec_Parms;
	memcpy ( &TgSvrExec_Parms.stringIn, &stringIn, 0xC );

	this->ProcessEvent ( pFnTgSvrExec, &TgSvrExec_Parms, NULL );
};

// Function TgGame.TgPlayerController.DebugFn
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  val                            ( CPF_Parm )
// unsigned long                  val2                           ( CPF_Parm )

void ATgPlayerController::DebugFn ( unsigned long val, unsigned long val2 )
{
	static UFunction* pFnDebugFn = NULL;

	if ( ! pFnDebugFn )
		pFnDebugFn = (UFunction*) UObject::GObjObjects()->Data[ 46067 ];

	ATgPlayerController_execDebugFn_Parms DebugFn_Parms;
	DebugFn_Parms.val = val;
	DebugFn_Parms.val2 = val2;

	pFnDebugFn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugFn, &DebugFn_Parms, NULL );

	pFnDebugFn->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OnClientLoadDevices
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_ClientLoadDevices* Action                         ( CPF_Parm )

void ATgPlayerController::OnClientLoadDevices ( class UTgSeqAct_ClientLoadDevices* Action )
{
	static UFunction* pFnOnClientLoadDevices = NULL;

	if ( ! pFnOnClientLoadDevices )
		pFnOnClientLoadDevices = (UFunction*) UObject::GObjObjects()->Data[ 46065 ];

	ATgPlayerController_execOnClientLoadDevices_Parms OnClientLoadDevices_Parms;
	OnClientLoadDevices_Parms.Action = Action;

	this->ProcessEvent ( pFnOnClientLoadDevices, &OnClientLoadDevices_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientShowHUDElement
// [0x010201C2] 
// Parameters infos:
// unsigned char                  Element                        ( CPF_Parm )

void ATgPlayerController::ClientShowHUDElement ( unsigned char Element )
{
	static UFunction* pFnClientShowHUDElement = NULL;

	if ( ! pFnClientShowHUDElement )
		pFnClientShowHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 46063 ];

	ATgPlayerController_execClientShowHUDElement_Parms ClientShowHUDElement_Parms;
	ClientShowHUDElement_Parms.Element = Element;

	this->ProcessEvent ( pFnClientShowHUDElement, &ClientShowHUDElement_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientHideHUDElement
// [0x010201C2] 
// Parameters infos:
// unsigned char                  Element                        ( CPF_Parm )

void ATgPlayerController::ClientHideHUDElement ( unsigned char Element )
{
	static UFunction* pFnClientHideHUDElement = NULL;

	if ( ! pFnClientHideHUDElement )
		pFnClientHideHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 46061 ];

	ATgPlayerController_execClientHideHUDElement_Parms ClientHideHUDElement_Parms;
	ClientHideHUDElement_Parms.Element = Element;

	this->ProcessEvent ( pFnClientHideHUDElement, &ClientHideHUDElement_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnHideHUDElement
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_HideHUDElement* Action                         ( CPF_Parm )

void ATgPlayerController::OnHideHUDElement ( class UTgSeqAct_HideHUDElement* Action )
{
	static UFunction* pFnOnHideHUDElement = NULL;

	if ( ! pFnOnHideHUDElement )
		pFnOnHideHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 46058 ];

	ATgPlayerController_execOnHideHUDElement_Parms OnHideHUDElement_Parms;
	OnHideHUDElement_Parms.Action = Action;

	this->ProcessEvent ( pFnOnHideHUDElement, &OnHideHUDElement_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnShowHUDElement
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_ShowHUDElement* Action                         ( CPF_Parm )

void ATgPlayerController::OnShowHUDElement ( class UTgSeqAct_ShowHUDElement* Action )
{
	static UFunction* pFnOnShowHUDElement = NULL;

	if ( ! pFnOnShowHUDElement )
		pFnOnShowHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 46055 ];

	ATgPlayerController_execOnShowHUDElement_Parms OnShowHUDElement_Parms;
	OnShowHUDElement_Parms.Action = Action;

	this->ProcessEvent ( pFnOnShowHUDElement, &OnShowHUDElement_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetCameraFade
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnableFading                  ( CPF_Parm )
// struct FColor                  FadeColor                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               FadeAlpha                      ( CPF_OptionalParm | CPF_Parm )
// float                          FadeTime                       ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime )
{
	static UFunction* pFnClientSetCameraFade = NULL;

	if ( ! pFnClientSetCameraFade )
		pFnClientSetCameraFade = (UFunction*) UObject::GObjObjects()->Data[ 46049 ];

	ATgPlayerController_eventClientSetCameraFade_Parms ClientSetCameraFade_Parms;
	ClientSetCameraFade_Parms.bEnableFading = bEnableFading;
	memcpy ( &ClientSetCameraFade_Parms.FadeColor, &FadeColor, 0x4 );
	memcpy ( &ClientSetCameraFade_Parms.FadeAlpha, &FadeAlpha, 0x8 );
	ClientSetCameraFade_Parms.FadeTime = FadeTime;

	this->ProcessEvent ( pFnClientSetCameraFade, &ClientSetCameraFade_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetCameraMode
// [0x010201C2] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void ATgPlayerController::ClientSetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 46047 ];

	ATgPlayerController_execClientSetCameraMode_Parms ClientSetCameraMode_Parms;
	memcpy ( &ClientSetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCamera
// [0x002200C2] 
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void ATgPlayerController::ServerCamera ( struct FName NewMode )
{
	static UFunction* pFnServerCamera = NULL;

	if ( ! pFnServerCamera )
		pFnServerCamera = (UFunction*) UObject::GObjObjects()->Data[ 46045 ];

	ATgPlayerController_execServerCamera_Parms ServerCamera_Parms;
	memcpy ( &ServerCamera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnServerCamera, &ServerCamera_Parms, NULL );
};

// Function TgGame.TgPlayerController.Camera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void ATgPlayerController::Camera ( struct FName NewMode )
{
	static UFunction* pFnCamera = NULL;

	if ( ! pFnCamera )
		pFnCamera = (UFunction*) UObject::GObjObjects()->Data[ 46043 ];

	ATgPlayerController_execCamera_Parms Camera_Parms;
	memcpy ( &Camera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnCamera, &Camera_Parms, NULL );
};

// Function TgGame.TgPlayerController.DeathScreenshot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::DeathScreenshot ( unsigned long bOn )
{
	static UFunction* pFnDeathScreenshot = NULL;

	if ( ! pFnDeathScreenshot )
		pFnDeathScreenshot = (UFunction*) UObject::GObjObjects()->Data[ 46041 ];

	ATgPlayerController_execDeathScreenshot_Parms DeathScreenshot_Parms;
	DeathScreenshot_Parms.bOn = bOn;

	this->ProcessEvent ( pFnDeathScreenshot, &DeathScreenshot_Parms, NULL );
};

// Function TgGame.TgPlayerController.EndDeathScreenshotTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::EndDeathScreenshotTimer ( )
{
	static UFunction* pFnEndDeathScreenshotTimer = NULL;

	if ( ! pFnEndDeathScreenshotTimer )
		pFnEndDeathScreenshotTimer = (UFunction*) UObject::GObjObjects()->Data[ 46040 ];

	ATgPlayerController_execEndDeathScreenshotTimer_Parms EndDeathScreenshotTimer_Parms;

	this->ProcessEvent ( pFnEndDeathScreenshotTimer, &EndDeathScreenshotTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnEndDeathScreenshot
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventOnEndDeathScreenshot ( )
{
	static UFunction* pFnOnEndDeathScreenshot = NULL;

	if ( ! pFnOnEndDeathScreenshot )
		pFnOnEndDeathScreenshot = (UFunction*) UObject::GObjObjects()->Data[ 46039 ];

	ATgPlayerController_eventOnEndDeathScreenshot_Parms OnEndDeathScreenshot_Parms;

	this->ProcessEvent ( pFnOnEndDeathScreenshot, &OnEndDeathScreenshot_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheatLog
// [0x00020002] 
// Parameters infos:
// struct FString                 cheatText                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::CheatLog ( struct FString cheatText, unsigned long bOn )
{
	static UFunction* pFnCheatLog = NULL;

	if ( ! pFnCheatLog )
		pFnCheatLog = (UFunction*) UObject::GObjObjects()->Data[ 46036 ];

	ATgPlayerController_execCheatLog_Parms CheatLog_Parms;
	memcpy ( &CheatLog_Parms.cheatText, &cheatText, 0xC );
	CheatLog_Parms.bOn = bOn;

	this->ProcessEvent ( pFnCheatLog, &CheatLog_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetGroundspeed
// [0x010201C2] 
// Parameters infos:
// float                          val                            ( CPF_Parm )

void ATgPlayerController::ClientSetGroundspeed ( float val )
{
	static UFunction* pFnClientSetGroundspeed = NULL;

	if ( ! pFnClientSetGroundspeed )
		pFnClientSetGroundspeed = (UFunction*) UObject::GObjObjects()->Data[ 46034 ];

	ATgPlayerController_execClientSetGroundspeed_Parms ClientSetGroundspeed_Parms;
	ClientSetGroundspeed_Parms.val = val;

	this->ProcessEvent ( pFnClientSetGroundspeed, &ClientSetGroundspeed_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetGroundspeed
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// float                          val                            ( CPF_Parm )

void ATgPlayerController::eventServerSetGroundspeed ( float val )
{
	static UFunction* pFnServerSetGroundspeed = NULL;

	if ( ! pFnServerSetGroundspeed )
		pFnServerSetGroundspeed = (UFunction*) UObject::GObjObjects()->Data[ 46032 ];

	ATgPlayerController_eventServerSetGroundspeed_Parms ServerSetGroundspeed_Parms;
	ServerSetGroundspeed_Parms.val = val;

	this->ProcessEvent ( pFnServerSetGroundspeed, &ServerSetGroundspeed_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetGroundspeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          val                            ( CPF_Parm )

void ATgPlayerController::SetGroundspeed ( float val )
{
	static UFunction* pFnSetGroundspeed = NULL;

	if ( ! pFnSetGroundspeed )
		pFnSetGroundspeed = (UFunction*) UObject::GObjObjects()->Data[ 46030 ];

	ATgPlayerController_execSetGroundspeed_Parms SetGroundspeed_Parms;
	SetGroundspeed_Parms.val = val;

	this->ProcessEvent ( pFnSetGroundspeed, &SetGroundspeed_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerChronos
// [0x002240C2] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )
// int                            nNewTime                       ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerChronos ( unsigned long bPause, int nNewTime )
{
	static UFunction* pFnServerChronos = NULL;

	if ( ! pFnServerChronos )
		pFnServerChronos = (UFunction*) UObject::GObjObjects()->Data[ 46026 ];

	ATgPlayerController_execServerChronos_Parms ServerChronos_Parms;
	ServerChronos_Parms.bPause = bPause;
	ServerChronos_Parms.nNewTime = nNewTime;

	this->ProcessEvent ( pFnServerChronos, &ServerChronos_Parms, NULL );
};

// Function TgGame.TgPlayerController.Chronos
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )
// int                            nNewTime                       ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::Chronos ( unsigned long bPause, int nNewTime )
{
	static UFunction* pFnChronos = NULL;

	if ( ! pFnChronos )
		pFnChronos = (UFunction*) UObject::GObjObjects()->Data[ 46023 ];

	ATgPlayerController_execChronos_Parms Chronos_Parms;
	Chronos_Parms.bPause = bPause;
	Chronos_Parms.nNewTime = nNewTime;

	this->ProcessEvent ( pFnChronos, &Chronos_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientZeus
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientZeus ( unsigned long bOn )
{
	static UFunction* pFnClientZeus = NULL;

	if ( ! pFnClientZeus )
		pFnClientZeus = (UFunction*) UObject::GObjObjects()->Data[ 46021 ];

	ATgPlayerController_execClientZeus_Parms ClientZeus_Parms;
	ClientZeus_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientZeus, &ClientZeus_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerZeus
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerZeus ( )
{
	static UFunction* pFnServerZeus = NULL;

	if ( ! pFnServerZeus )
		pFnServerZeus = (UFunction*) UObject::GObjObjects()->Data[ 46020 ];

	ATgPlayerController_execServerZeus_Parms ServerZeus_Parms;

	this->ProcessEvent ( pFnServerZeus, &ServerZeus_Parms, NULL );
};

// Function TgGame.TgPlayerController.Zeus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Zeus ( )
{
	static UFunction* pFnZeus = NULL;

	if ( ! pFnZeus )
		pFnZeus = (UFunction*) UObject::GObjObjects()->Data[ 46019 ];

	ATgPlayerController_execZeus_Parms Zeus_Parms;

	this->ProcessEvent ( pFnZeus, &Zeus_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientApollo
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientApollo ( unsigned long bOn )
{
	static UFunction* pFnClientApollo = NULL;

	if ( ! pFnClientApollo )
		pFnClientApollo = (UFunction*) UObject::GObjObjects()->Data[ 46016 ];

	ATgPlayerController_execClientApollo_Parms ClientApollo_Parms;
	ClientApollo_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientApollo, &ClientApollo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerApollo
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerApollo ( )
{
	static UFunction* pFnServerApollo = NULL;

	if ( ! pFnServerApollo )
		pFnServerApollo = (UFunction*) UObject::GObjObjects()->Data[ 46014 ];

	ATgPlayerController_execServerApollo_Parms ServerApollo_Parms;

	this->ProcessEvent ( pFnServerApollo, &ServerApollo_Parms, NULL );
};

// Function TgGame.TgPlayerController.Apollo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Apollo ( )
{
	static UFunction* pFnApollo = NULL;

	if ( ! pFnApollo )
		pFnApollo = (UFunction*) UObject::GObjObjects()->Data[ 46013 ];

	ATgPlayerController_execApollo_Parms Apollo_Parms;

	this->ProcessEvent ( pFnApollo, &Apollo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientElectra
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientElectra ( unsigned long bOn )
{
	static UFunction* pFnClientElectra = NULL;

	if ( ! pFnClientElectra )
		pFnClientElectra = (UFunction*) UObject::GObjObjects()->Data[ 46010 ];

	ATgPlayerController_execClientElectra_Parms ClientElectra_Parms;
	ClientElectra_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientElectra, &ClientElectra_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerElectra
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerElectra ( )
{
	static UFunction* pFnServerElectra = NULL;

	if ( ! pFnServerElectra )
		pFnServerElectra = (UFunction*) UObject::GObjObjects()->Data[ 46008 ];

	ATgPlayerController_execServerElectra_Parms ServerElectra_Parms;

	this->ProcessEvent ( pFnServerElectra, &ServerElectra_Parms, NULL );
};

// Function TgGame.TgPlayerController.Electra
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Electra ( )
{
	static UFunction* pFnElectra = NULL;

	if ( ! pFnElectra )
		pFnElectra = (UFunction*) UObject::GObjObjects()->Data[ 46007 ];

	ATgPlayerController_execElectra_Parms Electra_Parms;

	this->ProcessEvent ( pFnElectra, &Electra_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientHades
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientHades ( unsigned long bOn )
{
	static UFunction* pFnClientHades = NULL;

	if ( ! pFnClientHades )
		pFnClientHades = (UFunction*) UObject::GObjObjects()->Data[ 46004 ];

	ATgPlayerController_execClientHades_Parms ClientHades_Parms;
	ClientHades_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientHades, &ClientHades_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerHades
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerHades ( )
{
	static UFunction* pFnServerHades = NULL;

	if ( ! pFnServerHades )
		pFnServerHades = (UFunction*) UObject::GObjObjects()->Data[ 46002 ];

	ATgPlayerController_execServerHades_Parms ServerHades_Parms;

	this->ProcessEvent ( pFnServerHades, &ServerHades_Parms, NULL );
};

// Function TgGame.TgPlayerController.Hades
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Hades ( )
{
	static UFunction* pFnHades = NULL;

	if ( ! pFnHades )
		pFnHades = (UFunction*) UObject::GObjObjects()->Data[ 46001 ];

	ATgPlayerController_execHades_Parms Hades_Parms;

	this->ProcessEvent ( pFnHades, &Hades_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientCheatFly
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientCheatFly ( unsigned long bOn )
{
	static UFunction* pFnClientCheatFly = NULL;

	if ( ! pFnClientCheatFly )
		pFnClientCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 45999 ];

	ATgPlayerController_execClientCheatFly_Parms ClientCheatFly_Parms;
	ClientCheatFly_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientCheatFly, &ClientCheatFly_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheatFly
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::eventCheatFly ( unsigned long bOn )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 45997 ];

	ATgPlayerController_eventCheatFly_Parms CheatFly_Parms;
	CheatFly_Parms.bOn = bOn;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerIcarus
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerIcarus ( )
{
	static UFunction* pFnServerIcarus = NULL;

	if ( ! pFnServerIcarus )
		pFnServerIcarus = (UFunction*) UObject::GObjObjects()->Data[ 45996 ];

	ATgPlayerController_execServerIcarus_Parms ServerIcarus_Parms;

	this->ProcessEvent ( pFnServerIcarus, &ServerIcarus_Parms, NULL );
};

// Function TgGame.TgPlayerController.Icarus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Icarus ( )
{
	static UFunction* pFnIcarus = NULL;

	if ( ! pFnIcarus )
		pFnIcarus = (UFunction*) UObject::GObjObjects()->Data[ 45995 ];

	ATgPlayerController_execIcarus_Parms Icarus_Parms;

	this->ProcessEvent ( pFnIcarus, &Icarus_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientAthena
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ClientAthena ( unsigned long bOn )
{
	static UFunction* pFnClientAthena = NULL;

	if ( ! pFnClientAthena )
		pFnClientAthena = (UFunction*) UObject::GObjObjects()->Data[ 45992 ];

	ATgPlayerController_execClientAthena_Parms ClientAthena_Parms;
	ClientAthena_Parms.bOn = bOn;

	this->ProcessEvent ( pFnClientAthena, &ClientAthena_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerAthena
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerAthena ( )
{
	static UFunction* pFnServerAthena = NULL;

	if ( ! pFnServerAthena )
		pFnServerAthena = (UFunction*) UObject::GObjObjects()->Data[ 45990 ];

	ATgPlayerController_execServerAthena_Parms ServerAthena_Parms;

	this->ProcessEvent ( pFnServerAthena, &ServerAthena_Parms, NULL );
};

// Function TgGame.TgPlayerController.Athena
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Athena ( )
{
	static UFunction* pFnAthena = NULL;

	if ( ! pFnAthena )
		pFnAthena = (UFunction*) UObject::GObjObjects()->Data[ 45989 ];

	ATgPlayerController_execAthena_Parms Athena_Parms;

	this->ProcessEvent ( pFnAthena, &Athena_Parms, NULL );
};

// Function TgGame.TgPlayerController.Prometheus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Prometheus ( )
{
	static UFunction* pFnPrometheus = NULL;

	if ( ! pFnPrometheus )
		pFnPrometheus = (UFunction*) UObject::GObjObjects()->Data[ 45988 ];

	ATgPlayerController_execPrometheus_Parms Prometheus_Parms;

	this->ProcessEvent ( pFnPrometheus, &Prometheus_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheatHelp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CheatHelp ( )
{
	static UFunction* pFnCheatHelp = NULL;

	if ( ! pFnCheatHelp )
		pFnCheatHelp = (UFunction*) UObject::GObjObjects()->Data[ 45987 ];

	ATgPlayerController_execCheatHelp_Parms CheatHelp_Parms;

	this->ProcessEvent ( pFnCheatHelp, &CheatHelp_Parms, NULL );
};

// Function TgGame.TgPlayerController.Pause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 45986 ];

	ATgPlayerController_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnQuestRequirementGetStatus
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_QuestRequirementGetStatus* Action                         ( CPF_Parm )

void ATgPlayerController::OnQuestRequirementGetStatus ( class UTgSeqAct_QuestRequirementGetStatus* Action )
{
	static UFunction* pFnOnQuestRequirementGetStatus = NULL;

	if ( ! pFnOnQuestRequirementGetStatus )
		pFnOnQuestRequirementGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 45984 ];

	ATgPlayerController_execOnQuestRequirementGetStatus_Parms OnQuestRequirementGetStatus_Parms;
	OnQuestRequirementGetStatus_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestRequirementGetStatus, &OnQuestRequirementGetStatus_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnQuestGetStatus
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_QuestGetStatus* Action                         ( CPF_Parm )

void ATgPlayerController::OnQuestGetStatus ( class UTgSeqAct_QuestGetStatus* Action )
{
	static UFunction* pFnOnQuestGetStatus = NULL;

	if ( ! pFnOnQuestGetStatus )
		pFnOnQuestGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 45982 ];

	ATgPlayerController_execOnQuestGetStatus_Parms OnQuestGetStatus_Parms;
	OnQuestGetStatus_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestGetStatus, &OnQuestGetStatus_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnQuestIncrementReqCount
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_QuestIncrementReqCount* Action                         ( CPF_Parm )

void ATgPlayerController::OnQuestIncrementReqCount ( class UTgSeqAct_QuestIncrementReqCount* Action )
{
	static UFunction* pFnOnQuestIncrementReqCount = NULL;

	if ( ! pFnOnQuestIncrementReqCount )
		pFnOnQuestIncrementReqCount = (UFunction*) UObject::GObjObjects()->Data[ 45980 ];

	ATgPlayerController_execOnQuestIncrementReqCount_Parms OnQuestIncrementReqCount_Parms;
	OnQuestIncrementReqCount_Parms.Action = Action;

	this->ProcessEvent ( pFnOnQuestIncrementReqCount, &OnQuestIncrementReqCount_Parms, NULL );
};

// Function TgGame.TgPlayerController.NativeQuestIncrementRequirementCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_QuestIncrementReqCount* Action                         ( CPF_Parm )

void ATgPlayerController::NativeQuestIncrementRequirementCount ( class UTgSeqAct_QuestIncrementReqCount* Action )
{
	static UFunction* pFnNativeQuestIncrementRequirementCount = NULL;

	if ( ! pFnNativeQuestIncrementRequirementCount )
		pFnNativeQuestIncrementRequirementCount = (UFunction*) UObject::GObjObjects()->Data[ 45978 ];

	ATgPlayerController_execNativeQuestIncrementRequirementCount_Parms NativeQuestIncrementRequirementCount_Parms;
	NativeQuestIncrementRequirementCount_Parms.Action = Action;

	pFnNativeQuestIncrementRequirementCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeQuestIncrementRequirementCount, &NativeQuestIncrementRequirementCount_Parms, NULL );

	pFnNativeQuestIncrementRequirementCount->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.NativeQuestRequirementGetStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_QuestRequirementGetStatus* Action                         ( CPF_Parm )

void ATgPlayerController::NativeQuestRequirementGetStatus ( class UTgSeqAct_QuestRequirementGetStatus* Action )
{
	static UFunction* pFnNativeQuestRequirementGetStatus = NULL;

	if ( ! pFnNativeQuestRequirementGetStatus )
		pFnNativeQuestRequirementGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 45976 ];

	ATgPlayerController_execNativeQuestRequirementGetStatus_Parms NativeQuestRequirementGetStatus_Parms;
	NativeQuestRequirementGetStatus_Parms.Action = Action;

	pFnNativeQuestRequirementGetStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeQuestRequirementGetStatus, &NativeQuestRequirementGetStatus_Parms, NULL );

	pFnNativeQuestRequirementGetStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.NativeQuestGetStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_QuestGetStatus* Action                         ( CPF_Parm )

void ATgPlayerController::NativeQuestGetStatus ( class UTgSeqAct_QuestGetStatus* Action )
{
	static UFunction* pFnNativeQuestGetStatus = NULL;

	if ( ! pFnNativeQuestGetStatus )
		pFnNativeQuestGetStatus = (UFunction*) UObject::GObjObjects()->Data[ 45974 ];

	ATgPlayerController_execNativeQuestGetStatus_Parms NativeQuestGetStatus_Parms;
	NativeQuestGetStatus_Parms.Action = Action;

	pFnNativeQuestGetStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeQuestGetStatus, &NativeQuestGetStatus_Parms, NULL );

	pFnNativeQuestGetStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.NotifyPlayerQuestStateReady
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::NotifyPlayerQuestStateReady ( )
{
	static UFunction* pFnNotifyPlayerQuestStateReady = NULL;

	if ( ! pFnNotifyPlayerQuestStateReady )
		pFnNotifyPlayerQuestStateReady = (UFunction*) UObject::GObjObjects()->Data[ 45973 ];

	ATgPlayerController_execNotifyPlayerQuestStateReady_Parms NotifyPlayerQuestStateReady_Parms;

	pFnNotifyPlayerQuestStateReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyPlayerQuestStateReady, &NotifyPlayerQuestStateReady_Parms, NULL );

	pFnNotifyPlayerQuestStateReady->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerUpdateStats
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventServerUpdateStats ( )
{
	static UFunction* pFnServerUpdateStats = NULL;

	if ( ! pFnServerUpdateStats )
		pFnServerUpdateStats = (UFunction*) UObject::GObjObjects()->Data[ 45971 ];

	ATgPlayerController_eventServerUpdateStats_Parms ServerUpdateStats_Parms;

	this->ProcessEvent ( pFnServerUpdateStats, &ServerUpdateStats_Parms, NULL );
};

// Function TgGame.TgPlayerController.CanCommunicate
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 45969 ];

	ATgPlayerController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.SpeakTTS
// [0x00024102] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnSpeakTTS = NULL;

	if ( ! pFnSpeakTTS )
		pFnSpeakTTS = (UFunction*) UObject::GObjObjects()->Data[ 45966 ];

	ATgPlayerController_execSpeakTTS_Parms SpeakTTS_Parms;
	memcpy ( &SpeakTTS_Parms.S, &S, 0xC );
	SpeakTTS_Parms.PRI = PRI;

	this->ProcessEvent ( pFnSpeakTTS, &SpeakTTS_Parms, NULL );
};

// Function TgGame.TgPlayerController.DisableTextToSpeech
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::DisableTextToSpeech ( )
{
	static UFunction* pFnDisableTextToSpeech = NULL;

	if ( ! pFnDisableTextToSpeech )
		pFnDisableTextToSpeech = (UFunction*) UObject::GObjObjects()->Data[ 45965 ];

	ATgPlayerController_execDisableTextToSpeech_Parms DisableTextToSpeech_Parms;

	this->ProcessEvent ( pFnDisableTextToSpeech, &DisableTextToSpeech_Parms, NULL );
};

// Function TgGame.TgPlayerController.EnableTextToSpeech
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::EnableTextToSpeech ( )
{
	static UFunction* pFnEnableTextToSpeech = NULL;

	if ( ! pFnEnableTextToSpeech )
		pFnEnableTextToSpeech = (UFunction*) UObject::GObjObjects()->Data[ 45964 ];

	ATgPlayerController_execEnableTextToSpeech_Parms EnableTextToSpeech_Parms;

	this->ProcessEvent ( pFnEnableTextToSpeech, &EnableTextToSpeech_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleHudTick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleHudTick ( )
{
	static UFunction* pFnToggleHudTick = NULL;

	if ( ! pFnToggleHudTick )
		pFnToggleHudTick = (UFunction*) UObject::GObjObjects()->Data[ 45963 ];

	ATgPlayerController_execToggleHudTick_Parms ToggleHudTick_Parms;

	this->ProcessEvent ( pFnToggleHudTick, &ToggleHudTick_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleHudPostRender
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleHudPostRender ( )
{
	static UFunction* pFnToggleHudPostRender = NULL;

	if ( ! pFnToggleHudPostRender )
		pFnToggleHudPostRender = (UFunction*) UObject::GObjObjects()->Data[ 45962 ];

	ATgPlayerController_execToggleHudPostRender_Parms ToggleHudPostRender_Parms;

	this->ProcessEvent ( pFnToggleHudPostRender, &ToggleHudPostRender_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleLevelTimeOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleLevelTimeOnly ( )
{
	static UFunction* pFnToggleLevelTimeOnly = NULL;

	if ( ! pFnToggleLevelTimeOnly )
		pFnToggleLevelTimeOnly = (UFunction*) UObject::GObjObjects()->Data[ 45961 ];

	ATgPlayerController_execToggleLevelTimeOnly_Parms ToggleLevelTimeOnly_Parms;

	this->ProcessEvent ( pFnToggleLevelTimeOnly, &ToggleLevelTimeOnly_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerToggleSelfFxOnly
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerToggleSelfFxOnly ( )
{
	static UFunction* pFnServerToggleSelfFxOnly = NULL;

	if ( ! pFnServerToggleSelfFxOnly )
		pFnServerToggleSelfFxOnly = (UFunction*) UObject::GObjObjects()->Data[ 45960 ];

	ATgPlayerController_execServerToggleSelfFxOnly_Parms ServerToggleSelfFxOnly_Parms;

	this->ProcessEvent ( pFnServerToggleSelfFxOnly, &ServerToggleSelfFxOnly_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleSelfFxOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleSelfFxOnly ( )
{
	static UFunction* pFnToggleSelfFxOnly = NULL;

	if ( ! pFnToggleSelfFxOnly )
		pFnToggleSelfFxOnly = (UFunction*) UObject::GObjObjects()->Data[ 45959 ];

	ATgPlayerController_execToggleSelfFxOnly_Parms ToggleSelfFxOnly_Parms;

	this->ProcessEvent ( pFnToggleSelfFxOnly, &ToggleSelfFxOnly_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerToggleProjOpt
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerToggleProjOpt ( )
{
	static UFunction* pFnServerToggleProjOpt = NULL;

	if ( ! pFnServerToggleProjOpt )
		pFnServerToggleProjOpt = (UFunction*) UObject::GObjObjects()->Data[ 45958 ];

	ATgPlayerController_execServerToggleProjOpt_Parms ServerToggleProjOpt_Parms;

	this->ProcessEvent ( pFnServerToggleProjOpt, &ServerToggleProjOpt_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleProjectileOpt
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleProjectileOpt ( )
{
	static UFunction* pFnToggleProjectileOpt = NULL;

	if ( ! pFnToggleProjectileOpt )
		pFnToggleProjectileOpt = (UFunction*) UObject::GObjObjects()->Data[ 45957 ];

	ATgPlayerController_execToggleProjectileOpt_Parms ToggleProjectileOpt_Parms;

	this->ProcessEvent ( pFnToggleProjectileOpt, &ToggleProjectileOpt_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetMatStringFontScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fScale                         ( CPF_Parm )

void ATgPlayerController::SetMatStringFontScale ( float fScale )
{
	static UFunction* pFnSetMatStringFontScale = NULL;

	if ( ! pFnSetMatStringFontScale )
		pFnSetMatStringFontScale = (UFunction*) UObject::GObjObjects()->Data[ 45955 ];

	ATgPlayerController_execSetMatStringFontScale_Parms SetMatStringFontScale_Parms;
	SetMatStringFontScale_Parms.fScale = fScale;

	this->ProcessEvent ( pFnSetMatStringFontScale, &SetMatStringFontScale_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleTestMatString
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleTestMatString ( )
{
	static UFunction* pFnToggleTestMatString = NULL;

	if ( ! pFnToggleTestMatString )
		pFnToggleTestMatString = (UFunction*) UObject::GObjObjects()->Data[ 45954 ];

	ATgPlayerController_execToggleTestMatString_Parms ToggleTestMatString_Parms;

	this->ProcessEvent ( pFnToggleTestMatString, &ToggleTestMatString_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetDeathCamOption
// [0x002200C2] 
// Parameters infos:
// int                            nOption                        ( CPF_Parm )

void ATgPlayerController::ServerSetDeathCamOption ( int nOption )
{
	static UFunction* pFnServerSetDeathCamOption = NULL;

	if ( ! pFnServerSetDeathCamOption )
		pFnServerSetDeathCamOption = (UFunction*) UObject::GObjObjects()->Data[ 45952 ];

	ATgPlayerController_execServerSetDeathCamOption_Parms ServerSetDeathCamOption_Parms;
	ServerSetDeathCamOption_Parms.nOption = nOption;

	this->ProcessEvent ( pFnServerSetDeathCamOption, &ServerSetDeathCamOption_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetDeathCamOption
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nOption                        ( CPF_Parm )

void ATgPlayerController::SetDeathCamOption ( int nOption )
{
	static UFunction* pFnSetDeathCamOption = NULL;

	if ( ! pFnSetDeathCamOption )
		pFnSetDeathCamOption = (UFunction*) UObject::GObjObjects()->Data[ 45950 ];

	ATgPlayerController_execSetDeathCamOption_Parms SetDeathCamOption_Parms;
	SetDeathCamOption_Parms.nOption = nOption;

	this->ProcessEvent ( pFnSetDeathCamOption, &SetDeathCamOption_Parms, NULL );
};

// Function TgGame.TgPlayerController.DumpClassInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sClassName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::DumpClassInfo ( struct FString sClassName )
{
	static UFunction* pFnDumpClassInfo = NULL;

	if ( ! pFnDumpClassInfo )
		pFnDumpClassInfo = (UFunction*) UObject::GObjObjects()->Data[ 45948 ];

	ATgPlayerController_execDumpClassInfo_Parms DumpClassInfo_Parms;
	memcpy ( &DumpClassInfo_Parms.sClassName, &sClassName, 0xC );

	this->ProcessEvent ( pFnDumpClassInfo, &DumpClassInfo_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestCrash
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TestCrash ( )
{
	static UFunction* pFnTestCrash = NULL;

	if ( ! pFnTestCrash )
		pFnTestCrash = (UFunction*) UObject::GObjObjects()->Data[ 45947 ];

	ATgPlayerController_execTestCrash_Parms TestCrash_Parms;

	this->ProcessEvent ( pFnTestCrash, &TestCrash_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetPlayerSuits
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            SuitIndex                      ( CPF_Parm )

void ATgPlayerController::SetPlayerSuits ( int SuitIndex )
{
	static UFunction* pFnSetPlayerSuits = NULL;

	if ( ! pFnSetPlayerSuits )
		pFnSetPlayerSuits = (UFunction*) UObject::GObjObjects()->Data[ 45945 ];

	ATgPlayerController_execSetPlayerSuits_Parms SetPlayerSuits_Parms;
	SetPlayerSuits_Parms.SuitIndex = SuitIndex;

	pFnSetPlayerSuits->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPlayerSuits, &SetPlayerSuits_Parms, NULL );

	pFnSetPlayerSuits->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CanPlayerMove
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ATgPlayerController::CanPlayerMove ( class APawn* P )
{
	static UFunction* pFnCanPlayerMove = NULL;

	if ( ! pFnCanPlayerMove )
		pFnCanPlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 45942 ];

	ATgPlayerController_execCanPlayerMove_Parms CanPlayerMove_Parms;
	CanPlayerMove_Parms.P = P;

	this->ProcessEvent ( pFnCanPlayerMove, &CanPlayerMove_Parms, NULL );

	return CanPlayerMove_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetTFRI
// [0x00020002] 
// Parameters infos:
// class ATgRepInfo_TaskForce*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgRepInfo_TaskForce* ATgPlayerController::GetTFRI ( )
{
	static UFunction* pFnGetTFRI = NULL;

	if ( ! pFnGetTFRI )
		pFnGetTFRI = (UFunction*) UObject::GObjObjects()->Data[ 45939 ];

	ATgPlayerController_execGetTFRI_Parms GetTFRI_Parms;

	this->ProcessEvent ( pFnGetTFRI, &GetTFRI_Parms, NULL );

	return GetTFRI_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerCycleTeammateView
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bForward                       ( CPF_Parm )

void ATgPlayerController::ServerCycleTeammateView ( unsigned long bForward )
{
	static UFunction* pFnServerCycleTeammateView = NULL;

	if ( ! pFnServerCycleTeammateView )
		pFnServerCycleTeammateView = (UFunction*) UObject::GObjObjects()->Data[ 45931 ];

	ATgPlayerController_execServerCycleTeammateView_Parms ServerCycleTeammateView_Parms;
	ServerCycleTeammateView_Parms.bForward = bForward;

	this->ProcessEvent ( pFnServerCycleTeammateView, &ServerCycleTeammateView_Parms, NULL );
};

// Function TgGame.TgPlayerController.ViewPreviousTeammate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ViewPreviousTeammate ( )
{
	static UFunction* pFnViewPreviousTeammate = NULL;

	if ( ! pFnViewPreviousTeammate )
		pFnViewPreviousTeammate = (UFunction*) UObject::GObjObjects()->Data[ 45930 ];

	ATgPlayerController_execViewPreviousTeammate_Parms ViewPreviousTeammate_Parms;

	this->ProcessEvent ( pFnViewPreviousTeammate, &ViewPreviousTeammate_Parms, NULL );
};

// Function TgGame.TgPlayerController.ViewNextTeammate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ViewNextTeammate ( )
{
	static UFunction* pFnViewNextTeammate = NULL;

	if ( ! pFnViewNextTeammate )
		pFnViewNextTeammate = (UFunction*) UObject::GObjObjects()->Data[ 45929 ];

	ATgPlayerController_execViewNextTeammate_Parms ViewNextTeammate_Parms;

	this->ProcessEvent ( pFnViewNextTeammate, &ViewNextTeammate_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetSkydiveLandingLocation
// [0x002200C2] 
// Parameters infos:
// struct FVector                 newAccel                       ( CPF_Parm )

void ATgPlayerController::SetSkydiveLandingLocation ( struct FVector newAccel )
{
	static UFunction* pFnSetSkydiveLandingLocation = NULL;

	if ( ! pFnSetSkydiveLandingLocation )
		pFnSetSkydiveLandingLocation = (UFunction*) UObject::GObjObjects()->Data[ 45927 ];

	ATgPlayerController_execSetSkydiveLandingLocation_Parms SetSkydiveLandingLocation_Parms;
	memcpy ( &SetSkydiveLandingLocation_Parms.newAccel, &newAccel, 0xC );

	this->ProcessEvent ( pFnSetSkydiveLandingLocation, &SetSkydiveLandingLocation_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetServerValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::GetServerValue ( struct FString strObject, struct FString strVariable )
{
	static UFunction* pFnGetServerValue = NULL;

	if ( ! pFnGetServerValue )
		pFnGetServerValue = (UFunction*) UObject::GObjObjects()->Data[ 45903 ];

	ATgPlayerController_execGetServerValue_Parms GetServerValue_Parms;
	memcpy ( &GetServerValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &GetServerValue_Parms.strVariable, &strVariable, 0xC );

	this->ProcessEvent ( pFnGetServerValue, &GetServerValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetClientValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::GetClientValue ( struct FString strObject, struct FString strVariable )
{
	static UFunction* pFnGetClientValue = NULL;

	if ( ! pFnGetClientValue )
		pFnGetClientValue = (UFunction*) UObject::GObjObjects()->Data[ 45900 ];

	ATgPlayerController_execGetClientValue_Parms GetClientValue_Parms;
	memcpy ( &GetClientValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &GetClientValue_Parms.strVariable, &strVariable, 0xC );

	this->ProcessEvent ( pFnGetClientValue, &GetClientValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetServerValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 StrValue                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::SetServerValue ( struct FString strObject, struct FString strVariable, struct FString StrValue )
{
	static UFunction* pFnSetServerValue = NULL;

	if ( ! pFnSetServerValue )
		pFnSetServerValue = (UFunction*) UObject::GObjObjects()->Data[ 45896 ];

	ATgPlayerController_execSetServerValue_Parms SetServerValue_Parms;
	memcpy ( &SetServerValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &SetServerValue_Parms.strVariable, &strVariable, 0xC );
	memcpy ( &SetServerValue_Parms.StrValue, &StrValue, 0xC );

	this->ProcessEvent ( pFnSetServerValue, &SetServerValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetClientValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 StrValue                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::SetClientValue ( struct FString strObject, struct FString strVariable, struct FString StrValue )
{
	static UFunction* pFnSetClientValue = NULL;

	if ( ! pFnSetClientValue )
		pFnSetClientValue = (UFunction*) UObject::GObjObjects()->Data[ 45892 ];

	ATgPlayerController_execSetClientValue_Parms SetClientValue_Parms;
	memcpy ( &SetClientValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &SetClientValue_Parms.strVariable, &strVariable, 0xC );
	memcpy ( &SetClientValue_Parms.StrValue, &StrValue, 0xC );

	this->ProcessEvent ( pFnSetClientValue, &SetClientValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerGetValue
// [0x002200C2] 
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerGetValue ( struct FString strObject, struct FString strVariable )
{
	static UFunction* pFnServerGetValue = NULL;

	if ( ! pFnServerGetValue )
		pFnServerGetValue = (UFunction*) UObject::GObjObjects()->Data[ 45889 ];

	ATgPlayerController_execServerGetValue_Parms ServerGetValue_Parms;
	memcpy ( &ServerGetValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &ServerGetValue_Parms.strVariable, &strVariable, 0xC );

	this->ProcessEvent ( pFnServerGetValue, &ServerGetValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientGetValue
// [0x010201C2] 
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ClientGetValue ( struct FString strObject, struct FString strVariable )
{
	static UFunction* pFnClientGetValue = NULL;

	if ( ! pFnClientGetValue )
		pFnClientGetValue = (UFunction*) UObject::GObjObjects()->Data[ 45886 ];

	ATgPlayerController_execClientGetValue_Parms ClientGetValue_Parms;
	memcpy ( &ClientGetValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &ClientGetValue_Parms.strVariable, &strVariable, 0xC );

	this->ProcessEvent ( pFnClientGetValue, &ClientGetValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetValue
// [0x002200C2] 
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 StrValue                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerSetValue ( struct FString strObject, struct FString strVariable, struct FString StrValue )
{
	static UFunction* pFnServerSetValue = NULL;

	if ( ! pFnServerSetValue )
		pFnServerSetValue = (UFunction*) UObject::GObjObjects()->Data[ 45882 ];

	ATgPlayerController_execServerSetValue_Parms ServerSetValue_Parms;
	memcpy ( &ServerSetValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &ServerSetValue_Parms.strVariable, &strVariable, 0xC );
	memcpy ( &ServerSetValue_Parms.StrValue, &StrValue, 0xC );

	this->ProcessEvent ( pFnServerSetValue, &ServerSetValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetValue
// [0x010201C2] 
// Parameters infos:
// struct FString                 strObject                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 strVariable                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 StrValue                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ClientSetValue ( struct FString strObject, struct FString strVariable, struct FString StrValue )
{
	static UFunction* pFnClientSetValue = NULL;

	if ( ! pFnClientSetValue )
		pFnClientSetValue = (UFunction*) UObject::GObjObjects()->Data[ 45878 ];

	ATgPlayerController_execClientSetValue_Parms ClientSetValue_Parms;
	memcpy ( &ClientSetValue_Parms.strObject, &strObject, 0xC );
	memcpy ( &ClientSetValue_Parms.strVariable, &strVariable, 0xC );
	memcpy ( &ClientSetValue_Parms.StrValue, &StrValue, 0xC );

	this->ProcessEvent ( pFnClientSetValue, &ClientSetValue_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCommandAttack
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerCommandAttack ( )
{
	static UFunction* pFnServerCommandAttack = NULL;

	if ( ! pFnServerCommandAttack )
		pFnServerCommandAttack = (UFunction*) UObject::GObjObjects()->Data[ 45876 ];

	ATgPlayerController_execServerCommandAttack_Parms ServerCommandAttack_Parms;

	this->ProcessEvent ( pFnServerCommandAttack, &ServerCommandAttack_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCommandTarget
// [0x002200C2] 
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void ATgPlayerController::ServerCommandTarget ( class AActor* TargetActor )
{
	static UFunction* pFnServerCommandTarget = NULL;

	if ( ! pFnServerCommandTarget )
		pFnServerCommandTarget = (UFunction*) UObject::GObjObjects()->Data[ 45873 ];

	ATgPlayerController_execServerCommandTarget_Parms ServerCommandTarget_Parms;
	ServerCommandTarget_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnServerCommandTarget, &ServerCommandTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCommandGoto
// [0x002200C2] 
// Parameters infos:
// struct FVector                 vDest                          ( CPF_Parm )

void ATgPlayerController::ServerCommandGoto ( struct FVector vDest )
{
	static UFunction* pFnServerCommandGoto = NULL;

	if ( ! pFnServerCommandGoto )
		pFnServerCommandGoto = (UFunction*) UObject::GObjObjects()->Data[ 45869 ];

	ATgPlayerController_execServerCommandGoto_Parms ServerCommandGoto_Parms;
	memcpy ( &ServerCommandGoto_Parms.vDest, &vDest, 0xC );

	this->ProcessEvent ( pFnServerCommandGoto, &ServerCommandGoto_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCommandFollow
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerCommandFollow ( )
{
	static UFunction* pFnServerCommandFollow = NULL;

	if ( ! pFnServerCommandFollow )
		pFnServerCommandFollow = (UFunction*) UObject::GObjObjects()->Data[ 45867 ];

	ATgPlayerController_execServerCommandFollow_Parms ServerCommandFollow_Parms;

	this->ProcessEvent ( pFnServerCommandFollow, &ServerCommandFollow_Parms, NULL );
};

// Function TgGame.TgPlayerController.CommandAttack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CommandAttack ( )
{
	static UFunction* pFnCommandAttack = NULL;

	if ( ! pFnCommandAttack )
		pFnCommandAttack = (UFunction*) UObject::GObjObjects()->Data[ 45866 ];

	ATgPlayerController_execCommandAttack_Parms CommandAttack_Parms;

	this->ProcessEvent ( pFnCommandAttack, &CommandAttack_Parms, NULL );
};

// Function TgGame.TgPlayerController.CommandTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CommandTarget ( )
{
	static UFunction* pFnCommandTarget = NULL;

	if ( ! pFnCommandTarget )
		pFnCommandTarget = (UFunction*) UObject::GObjObjects()->Data[ 45865 ];

	ATgPlayerController_execCommandTarget_Parms CommandTarget_Parms;

	this->ProcessEvent ( pFnCommandTarget, &CommandTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.CommandGoto
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CommandGoto ( )
{
	static UFunction* pFnCommandGoto = NULL;

	if ( ! pFnCommandGoto )
		pFnCommandGoto = (UFunction*) UObject::GObjObjects()->Data[ 45864 ];

	ATgPlayerController_execCommandGoto_Parms CommandGoto_Parms;

	this->ProcessEvent ( pFnCommandGoto, &CommandGoto_Parms, NULL );
};

// Function TgGame.TgPlayerController.CommandFollow
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CommandFollow ( )
{
	static UFunction* pFnCommandFollow = NULL;

	if ( ! pFnCommandFollow )
		pFnCommandFollow = (UFunction*) UObject::GObjObjects()->Data[ 45863 ];

	ATgPlayerController_execCommandFollow_Parms CommandFollow_Parms;

	this->ProcessEvent ( pFnCommandFollow, &CommandFollow_Parms, NULL );
};

// Function TgGame.TgPlayerController.ForceUpdateDeviceBar
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  EquippedInHand                 ( CPF_Parm )

void ATgPlayerController::eventForceUpdateDeviceBar ( unsigned char EquippedInHand )
{
	static UFunction* pFnForceUpdateDeviceBar = NULL;

	if ( ! pFnForceUpdateDeviceBar )
		pFnForceUpdateDeviceBar = (UFunction*) UObject::GObjObjects()->Data[ 45858 ];

	ATgPlayerController_eventForceUpdateDeviceBar_Parms ForceUpdateDeviceBar_Parms;
	ForceUpdateDeviceBar_Parms.EquippedInHand = EquippedInHand;

	this->ProcessEvent ( pFnForceUpdateDeviceBar, &ForceUpdateDeviceBar_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerKillPets
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerKillPets ( )
{
	static UFunction* pFnServerKillPets = NULL;

	if ( ! pFnServerKillPets )
		pFnServerKillPets = (UFunction*) UObject::GObjObjects()->Data[ 45857 ];

	ATgPlayerController_execServerKillPets_Parms ServerKillPets_Parms;

	this->ProcessEvent ( pFnServerKillPets, &ServerKillPets_Parms, NULL );
};

// Function TgGame.TgPlayerController.KillPets
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::KillPets ( )
{
	static UFunction* pFnKillPets = NULL;

	if ( ! pFnKillPets )
		pFnKillPets = (UFunction*) UObject::GObjObjects()->Data[ 45856 ];

	ATgPlayerController_execKillPets_Parms KillPets_Parms;

	this->ProcessEvent ( pFnKillPets, &KillPets_Parms, NULL );
};

// Function TgGame.TgPlayerController.HideTaskForce
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::HideTaskForce ( )
{
	static UFunction* pFnHideTaskForce = NULL;

	if ( ! pFnHideTaskForce )
		pFnHideTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 45855 ];

	ATgPlayerController_execHideTaskForce_Parms HideTaskForce_Parms;

	this->ProcessEvent ( pFnHideTaskForce, &HideTaskForce_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShowTaskForce
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ShowTaskForce ( )
{
	static UFunction* pFnShowTaskForce = NULL;

	if ( ! pFnShowTaskForce )
		pFnShowTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 45854 ];

	ATgPlayerController_execShowTaskForce_Parms ShowTaskForce_Parms;

	this->ProcessEvent ( pFnShowTaskForce, &ShowTaskForce_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerGotoFly
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerGotoFly ( )
{
	static UFunction* pFnServerGotoFly = NULL;

	if ( ! pFnServerGotoFly )
		pFnServerGotoFly = (UFunction*) UObject::GObjObjects()->Data[ 45853 ];

	ATgPlayerController_execServerGotoFly_Parms ServerGotoFly_Parms;

	this->ProcessEvent ( pFnServerGotoFly, &ServerGotoFly_Parms, NULL );
};

// Function TgGame.TgPlayerController.GotoFly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::GotoFly ( )
{
	static UFunction* pFnGotoFly = NULL;

	if ( ! pFnGotoFly )
		pFnGotoFly = (UFunction*) UObject::GObjObjects()->Data[ 45852 ];

	ATgPlayerController_execGotoFly_Parms GotoFly_Parms;

	this->ProcessEvent ( pFnGotoFly, &GotoFly_Parms, NULL );
};

// Function TgGame.TgPlayerController.Stun
// [0x00024102] 
// Parameters infos:
// unsigned long                  bStunController                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::Stun ( unsigned long bStunController, unsigned char eType )
{
	static UFunction* pFnStun = NULL;

	if ( ! pFnStun )
		pFnStun = (UFunction*) UObject::GObjObjects()->Data[ 45849 ];

	ATgPlayerController_execStun_Parms Stun_Parms;
	Stun_Parms.bStunController = bStunController;
	Stun_Parms.eType = eType;

	this->ProcessEvent ( pFnStun, &Stun_Parms, NULL );
};

// Function TgGame.TgPlayerController.serverdostun
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::serverdostun ( )
{
	static UFunction* pFnserverdostun = NULL;

	if ( ! pFnserverdostun )
		pFnserverdostun = (UFunction*) UObject::GObjObjects()->Data[ 45848 ];

	ATgPlayerController_execserverdostun_Parms serverdostun_Parms;

	this->ProcessEvent ( pFnserverdostun, &serverdostun_Parms, NULL );
};

// Function TgGame.TgPlayerController.dostun
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::dostun ( )
{
	static UFunction* pFndostun = NULL;

	if ( ! pFndostun )
		pFndostun = (UFunction*) UObject::GObjObjects()->Data[ 45847 ];

	ATgPlayerController_execdostun_Parms dostun_Parms;

	this->ProcessEvent ( pFndostun, &dostun_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientResetStunnedBehavior
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bStunController                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ClientResetStunnedBehavior ( unsigned long bStunController, unsigned char eType )
{
	static UFunction* pFnClientResetStunnedBehavior = NULL;

	if ( ! pFnClientResetStunnedBehavior )
		pFnClientResetStunnedBehavior = (UFunction*) UObject::GObjObjects()->Data[ 45844 ];

	ATgPlayerController_execClientResetStunnedBehavior_Parms ClientResetStunnedBehavior_Parms;
	ClientResetStunnedBehavior_Parms.bStunController = bStunController;
	ClientResetStunnedBehavior_Parms.eType = eType;

	this->ProcessEvent ( pFnClientResetStunnedBehavior, &ClientResetStunnedBehavior_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetTagPlayerMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSet                           ( CPF_Parm )

void ATgPlayerController::SetTagPlayerMode ( unsigned long bSet )
{
	static UFunction* pFnSetTagPlayerMode = NULL;

	if ( ! pFnSetTagPlayerMode )
		pFnSetTagPlayerMode = (UFunction*) UObject::GObjObjects()->Data[ 45815 ];

	ATgPlayerController_execSetTagPlayerMode_Parms SetTagPlayerMode_Parms;
	SetTagPlayerMode_Parms.bSet = bSet;

	this->ProcessEvent ( pFnSetTagPlayerMode, &SetTagPlayerMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.IsInTagPlayerMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::IsInTagPlayerMode ( )
{
	static UFunction* pFnIsInTagPlayerMode = NULL;

	if ( ! pFnIsInTagPlayerMode )
		pFnIsInTagPlayerMode = (UFunction*) UObject::GObjObjects()->Data[ 45813 ];

	ATgPlayerController_execIsInTagPlayerMode_Parms IsInTagPlayerMode_Parms;

	this->ProcessEvent ( pFnIsInTagPlayerMode, &IsInTagPlayerMode_Parms, NULL );

	return IsInTagPlayerMode_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.OnRestartPlayers
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_RestartPlayers* inAction                       ( CPF_Parm )

void ATgPlayerController::OnRestartPlayers ( class UTgSeqAct_RestartPlayers* inAction )
{
	static UFunction* pFnOnRestartPlayers = NULL;

	if ( ! pFnOnRestartPlayers )
		pFnOnRestartPlayers = (UFunction*) UObject::GObjObjects()->Data[ 45810 ];

	ATgPlayerController_execOnRestartPlayers_Parms OnRestartPlayers_Parms;
	OnRestartPlayers_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnRestartPlayers, &OnRestartPlayers_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetPosture
// [0x002240C2] 
// Parameters infos:
// unsigned char                  Posture                        ( CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerSetPosture ( unsigned char Posture, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnServerSetPosture = NULL;

	if ( ! pFnServerSetPosture )
		pFnServerSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 45806 ];

	ATgPlayerController_execServerSetPosture_Parms ServerSetPosture_Parms;
	ServerSetPosture_Parms.Posture = Posture;
	ServerSetPosture_Parms.fRateScale = fRateScale;
	ServerSetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnServerSetPosture, &ServerSetPosture_Parms, NULL );
};

// Function TgGame.TgPlayerController.DeploySlow
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::DeploySlow ( )
{
	static UFunction* pFnDeploySlow = NULL;

	if ( ! pFnDeploySlow )
		pFnDeploySlow = (UFunction*) UObject::GObjObjects()->Data[ 45805 ];

	ATgPlayerController_execDeploySlow_Parms DeploySlow_Parms;

	this->ProcessEvent ( pFnDeploySlow, &DeploySlow_Parms, NULL );
};

// Function TgGame.TgPlayerController.DeployFast
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::DeployFast ( )
{
	static UFunction* pFnDeployFast = NULL;

	if ( ! pFnDeployFast )
		pFnDeployFast = (UFunction*) UObject::GObjObjects()->Data[ 45804 ];

	ATgPlayerController_execDeployFast_Parms DeployFast_Parms;

	this->ProcessEvent ( pFnDeployFast, &DeployFast_Parms, NULL );
};

// Function TgGame.TgPlayerController.HibernateTrans
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::HibernateTrans ( )
{
	static UFunction* pFnHibernateTrans = NULL;

	if ( ! pFnHibernateTrans )
		pFnHibernateTrans = (UFunction*) UObject::GObjObjects()->Data[ 45803 ];

	ATgPlayerController_execHibernateTrans_Parms HibernateTrans_Parms;

	this->ProcessEvent ( pFnHibernateTrans, &HibernateTrans_Parms, NULL );
};

// Function TgGame.TgPlayerController.Hibernate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Hibernate ( )
{
	static UFunction* pFnHibernate = NULL;

	if ( ! pFnHibernate )
		pFnHibernate = (UFunction*) UObject::GObjObjects()->Data[ 45802 ];

	ATgPlayerController_execHibernate_Parms Hibernate_Parms;

	this->ProcessEvent ( pFnHibernate, &Hibernate_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetPosture
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  Posture                        ( CPF_Parm )
// float                          fRateScale                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreTransition              ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::SetPosture ( unsigned char Posture, float fRateScale, unsigned long bIgnoreTransition )
{
	static UFunction* pFnSetPosture = NULL;

	if ( ! pFnSetPosture )
		pFnSetPosture = (UFunction*) UObject::GObjObjects()->Data[ 45798 ];

	ATgPlayerController_execSetPosture_Parms SetPosture_Parms;
	SetPosture_Parms.Posture = Posture;
	SetPosture_Parms.fRateScale = fRateScale;
	SetPosture_Parms.bIgnoreTransition = bIgnoreTransition;

	this->ProcessEvent ( pFnSetPosture, &SetPosture_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientPerformedUseAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::ClientPerformedUseAction ( )
{
	static UFunction* pFnClientPerformedUseAction = NULL;

	if ( ! pFnClientPerformedUseAction )
		pFnClientPerformedUseAction = (UFunction*) UObject::GObjObjects()->Data[ 45795 ];

	ATgPlayerController_execClientPerformedUseAction_Parms ClientPerformedUseAction_Parms;

	this->ProcessEvent ( pFnClientPerformedUseAction, &ClientPerformedUseAction_Parms, NULL );

	return ClientPerformedUseAction_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerPerformedUseAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::ServerPerformedUseAction ( )
{
	static UFunction* pFnServerPerformedUseAction = NULL;

	if ( ! pFnServerPerformedUseAction )
		pFnServerPerformedUseAction = (UFunction*) UObject::GObjObjects()->Data[ 45792 ];

	ATgPlayerController_execServerPerformedUseAction_Parms ServerPerformedUseAction_Parms;

	this->ProcessEvent ( pFnServerPerformedUseAction, &ServerPerformedUseAction_Parms, NULL );

	return ServerPerformedUseAction_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ClientUse
// [0x010201C2] 
// Parameters infos:

void ATgPlayerController::ClientUse ( )
{
	static UFunction* pFnClientUse = NULL;

	if ( ! pFnClientUse )
		pFnClientUse = (UFunction*) UObject::GObjObjects()->Data[ 45791 ];

	ATgPlayerController_execClientUse_Parms ClientUse_Parms;

	this->ProcessEvent ( pFnClientUse, &ClientUse_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerUse
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerUse ( )
{
	static UFunction* pFnServerUse = NULL;

	if ( ! pFnServerUse )
		pFnServerUse = (UFunction*) UObject::GObjObjects()->Data[ 45790 ];

	ATgPlayerController_execServerUse_Parms ServerUse_Parms;

	this->ProcessEvent ( pFnServerUse, &ServerUse_Parms, NULL );
};

// Function TgGame.TgPlayerController.Use
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 45789 ];

	ATgPlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function TgGame.TgPlayerController.ResetCameraYaw
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ResetCameraYaw ( )
{
	static UFunction* pFnResetCameraYaw = NULL;

	if ( ! pFnResetCameraYaw )
		pFnResetCameraYaw = (UFunction*) UObject::GObjObjects()->Data[ 45786 ];

	ATgPlayerController_execResetCameraYaw_Parms ResetCameraYaw_Parms;

	this->ProcessEvent ( pFnResetCameraYaw, &ResetCameraYaw_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleShowLastAimedEnemyStat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleShowLastAimedEnemyStat ( )
{
	static UFunction* pFnToggleShowLastAimedEnemyStat = NULL;

	if ( ! pFnToggleShowLastAimedEnemyStat )
		pFnToggleShowLastAimedEnemyStat = (UFunction*) UObject::GObjObjects()->Data[ 45785 ];

	ATgPlayerController_execToggleShowLastAimedEnemyStat_Parms ToggleShowLastAimedEnemyStat_Parms;

	this->ProcessEvent ( pFnToggleShowLastAimedEnemyStat, &ToggleShowLastAimedEnemyStat_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleShowTeammateStat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleShowTeammateStat ( )
{
	static UFunction* pFnToggleShowTeammateStat = NULL;

	if ( ! pFnToggleShowTeammateStat )
		pFnToggleShowTeammateStat = (UFunction*) UObject::GObjObjects()->Data[ 45784 ];

	ATgPlayerController_execToggleShowTeammateStat_Parms ToggleShowTeammateStat_Parms;

	this->ProcessEvent ( pFnToggleShowTeammateStat, &ToggleShowTeammateStat_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleDefaultWeaponMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleDefaultWeaponMode ( )
{
	static UFunction* pFnToggleDefaultWeaponMode = NULL;

	if ( ! pFnToggleDefaultWeaponMode )
		pFnToggleDefaultWeaponMode = (UFunction*) UObject::GObjObjects()->Data[ 45783 ];

	ATgPlayerController_execToggleDefaultWeaponMode_Parms ToggleDefaultWeaponMode_Parms;

	this->ProcessEvent ( pFnToggleDefaultWeaponMode, &ToggleDefaultWeaponMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCallForHelp
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerCallForHelp ( )
{
	static UFunction* pFnServerCallForHelp = NULL;

	if ( ! pFnServerCallForHelp )
		pFnServerCallForHelp = (UFunction*) UObject::GObjObjects()->Data[ 45782 ];

	ATgPlayerController_execServerCallForHelp_Parms ServerCallForHelp_Parms;

	this->ProcessEvent ( pFnServerCallForHelp, &ServerCallForHelp_Parms, NULL );
};

// Function TgGame.TgPlayerController.CallForHelp
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::CallForHelp ( )
{
	static UFunction* pFnCallForHelp = NULL;

	if ( ! pFnCallForHelp )
		pFnCallForHelp = (UFunction*) UObject::GObjObjects()->Data[ 45781 ];

	ATgPlayerController_execCallForHelp_Parms CallForHelp_Parms;

	this->ProcessEvent ( pFnCallForHelp, &CallForHelp_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetEmote
// [0x002240C2] 
// Parameters infos:
// unsigned char                  emote                          ( CPF_Parm )
// unsigned char                  Length                         ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerSetEmote ( unsigned char emote, unsigned char Length )
{
	static UFunction* pFnServerSetEmote = NULL;

	if ( ! pFnServerSetEmote )
		pFnServerSetEmote = (UFunction*) UObject::GObjObjects()->Data[ 45778 ];

	ATgPlayerController_execServerSetEmote_Parms ServerSetEmote_Parms;
	ServerSetEmote_Parms.emote = emote;
	ServerSetEmote_Parms.Length = Length;

	this->ProcessEvent ( pFnServerSetEmote, &ServerSetEmote_Parms, NULL );
};

// Function TgGame.TgPlayerController.PlayEmote
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// unsigned char                  emote                          ( CPF_Parm )
// unsigned char                  Length                         ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::PlayEmote ( unsigned char emote, unsigned char Length )
{
	static UFunction* pFnPlayEmote = NULL;

	if ( ! pFnPlayEmote )
		pFnPlayEmote = (UFunction*) UObject::GObjObjects()->Data[ 45775 ];

	ATgPlayerController_execPlayEmote_Parms PlayEmote_Parms;
	PlayEmote_Parms.emote = emote;
	PlayEmote_Parms.Length = Length;

	this->ProcessEvent ( pFnPlayEmote, &PlayEmote_Parms, NULL );
};

// Function TgGame.TgPlayerController.ForceKillPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventForceKillPawn ( )
{
	static UFunction* pFnForceKillPawn = NULL;

	if ( ! pFnForceKillPawn )
		pFnForceKillPawn = (UFunction*) UObject::GObjObjects()->Data[ 45774 ];

	ATgPlayerController_eventForceKillPawn_Parms ForceKillPawn_Parms;

	this->ProcessEvent ( pFnForceKillPawn, &ForceKillPawn_Parms, NULL );
};

// Function TgGame.TgPlayerController.AddNewDisplayMessageToHUD
// [0x010201C2] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::AddNewDisplayMessageToHUD ( struct FString sMessage )
{
	static UFunction* pFnAddNewDisplayMessageToHUD = NULL;

	if ( ! pFnAddNewDisplayMessageToHUD )
		pFnAddNewDisplayMessageToHUD = (UFunction*) UObject::GObjObjects()->Data[ 45771 ];

	ATgPlayerController_execAddNewDisplayMessageToHUD_Parms AddNewDisplayMessageToHUD_Parms;
	memcpy ( &AddNewDisplayMessageToHUD_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnAddNewDisplayMessageToHUD, &AddNewDisplayMessageToHUD_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientToggleEndRoundScreen
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm )

void ATgPlayerController::ClientToggleEndRoundScreen ( unsigned long bShow, class ATgRepInfo_TaskForce* Winner )
{
	static UFunction* pFnClientToggleEndRoundScreen = NULL;

	if ( ! pFnClientToggleEndRoundScreen )
		pFnClientToggleEndRoundScreen = (UFunction*) UObject::GObjObjects()->Data[ 45767 ];

	ATgPlayerController_execClientToggleEndRoundScreen_Parms ClientToggleEndRoundScreen_Parms;
	ClientToggleEndRoundScreen_Parms.bShow = bShow;
	ClientToggleEndRoundScreen_Parms.Winner = Winner;

	this->ProcessEvent ( pFnClientToggleEndRoundScreen, &ClientToggleEndRoundScreen_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShowReleaseDialog
// [0x00020002] 
// Parameters infos:
// struct FDeathZoomInfo          Info                           ( CPF_Parm )

void ATgPlayerController::ShowReleaseDialog ( struct FDeathZoomInfo Info )
{
	static UFunction* pFnShowReleaseDialog = NULL;

	if ( ! pFnShowReleaseDialog )
		pFnShowReleaseDialog = (UFunction*) UObject::GObjObjects()->Data[ 45763 ];

	ATgPlayerController_execShowReleaseDialog_Parms ShowReleaseDialog_Parms;
	memcpy ( &ShowReleaseDialog_Parms.Info, &Info, 0x1C );

	this->ProcessEvent ( pFnShowReleaseDialog, &ShowReleaseDialog_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientUpdateTimeRemaining
// [0x010201C2] 
// Parameters infos:
// float                          fTimeRemaining                 ( CPF_Parm )

void ATgPlayerController::ClientUpdateTimeRemaining ( float fTimeRemaining )
{
	static UFunction* pFnClientUpdateTimeRemaining = NULL;

	if ( ! pFnClientUpdateTimeRemaining )
		pFnClientUpdateTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 45761 ];

	ATgPlayerController_execClientUpdateTimeRemaining_Parms ClientUpdateTimeRemaining_Parms;
	ClientUpdateTimeRemaining_Parms.fTimeRemaining = fTimeRemaining;

	this->ProcessEvent ( pFnClientUpdateTimeRemaining, &ClientUpdateTimeRemaining_Parms, NULL );
};

// Function TgGame.TgPlayerController.ViewObjectiveCamerasTimer
// [0x00020000] 
// Parameters infos:

void ATgPlayerController::ViewObjectiveCamerasTimer ( )
{
	static UFunction* pFnViewObjectiveCamerasTimer = NULL;

	if ( ! pFnViewObjectiveCamerasTimer )
		pFnViewObjectiveCamerasTimer = (UFunction*) UObject::GObjObjects()->Data[ 45760 ];

	ATgPlayerController_execViewObjectiveCamerasTimer_Parms ViewObjectiveCamerasTimer_Parms;

	this->ProcessEvent ( pFnViewObjectiveCamerasTimer, &ViewObjectiveCamerasTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.DoDeathZoomTimer
// [0x00020000] 
// Parameters infos:

void ATgPlayerController::DoDeathZoomTimer ( )
{
	static UFunction* pFnDoDeathZoomTimer = NULL;

	if ( ! pFnDoDeathZoomTimer )
		pFnDoDeathZoomTimer = (UFunction*) UObject::GObjObjects()->Data[ 45759 ];

	ATgPlayerController_execDoDeathZoomTimer_Parms DoDeathZoomTimer_Parms;

	this->ProcessEvent ( pFnDoDeathZoomTimer, &DoDeathZoomTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.DoDeathZoom
// [0x00020102] 
// Parameters infos:
// struct FDeathZoomInfo          Info                           ( CPF_Parm )

void ATgPlayerController::DoDeathZoom ( struct FDeathZoomInfo Info )
{
	static UFunction* pFnDoDeathZoom = NULL;

	if ( ! pFnDoDeathZoom )
		pFnDoDeathZoom = (UFunction*) UObject::GObjObjects()->Data[ 45757 ];

	ATgPlayerController_execDoDeathZoom_Parms DoDeathZoom_Parms;
	memcpy ( &DoDeathZoom_Parms.Info, &Info, 0x1C );

	this->ProcessEvent ( pFnDoDeathZoom, &DoDeathZoom_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientDoDeathZoom
// [0x010201C2] 
// Parameters infos:
// struct FDeathZoomInfo          Info                           ( CPF_Parm )

void ATgPlayerController::ClientDoDeathZoom ( struct FDeathZoomInfo Info )
{
	static UFunction* pFnClientDoDeathZoom = NULL;

	if ( ! pFnClientDoDeathZoom )
		pFnClientDoDeathZoom = (UFunction*) UObject::GObjObjects()->Data[ 45755 ];

	ATgPlayerController_execClientDoDeathZoom_Parms ClientDoDeathZoom_Parms;
	memcpy ( &ClientDoDeathZoom_Parms.Info, &Info, 0x1C );

	this->ProcessEvent ( pFnClientDoDeathZoom, &ClientDoDeathZoom_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetStateNameEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ATgPlayerController::eventGetStateNameEx ( )
{
	static UFunction* pFnGetStateNameEx = NULL;

	if ( ! pFnGetStateNameEx )
		pFnGetStateNameEx = (UFunction*) UObject::GObjObjects()->Data[ 45753 ];

	ATgPlayerController_eventGetStateNameEx_Parms GetStateNameEx_Parms;

	this->ProcessEvent ( pFnGetStateNameEx, &GetStateNameEx_Parms, NULL );

	return GetStateNameEx_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerSetForceViewTarget
// [0x00020002] 
// Parameters infos:
// class ATgPawn*                 NewTarget                      ( CPF_Parm )

void ATgPlayerController::ServerSetForceViewTarget ( class ATgPawn* NewTarget )
{
	static UFunction* pFnServerSetForceViewTarget = NULL;

	if ( ! pFnServerSetForceViewTarget )
		pFnServerSetForceViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45751 ];

	ATgPlayerController_execServerSetForceViewTarget_Parms ServerSetForceViewTarget_Parms;
	ServerSetForceViewTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnServerSetForceViewTarget, &ServerSetForceViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ResetForceViewTarget
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::ResetForceViewTarget ( )
{
	static UFunction* pFnResetForceViewTarget = NULL;

	if ( ! pFnResetForceViewTarget )
		pFnResetForceViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45750 ];

	ATgPlayerController_execResetForceViewTarget_Parms ResetForceViewTarget_Parms;

	this->ProcessEvent ( pFnResetForceViewTarget, &ResetForceViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetForceViewTarget
// [0x010201C2] 
// Parameters infos:
// class ATgPawn*                 NewTarget                      ( CPF_Parm )

void ATgPlayerController::ClientSetForceViewTarget ( class ATgPawn* NewTarget )
{
	static UFunction* pFnClientSetForceViewTarget = NULL;

	if ( ! pFnClientSetForceViewTarget )
		pFnClientSetForceViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45748 ];

	ATgPlayerController_execClientSetForceViewTarget_Parms ClientSetForceViewTarget_Parms;
	ClientSetForceViewTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnClientSetForceViewTarget, &ClientSetForceViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelForceViewTarget
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::CancelForceViewTarget ( )
{
	static UFunction* pFnCancelForceViewTarget = NULL;

	if ( ! pFnCancelForceViewTarget )
		pFnCancelForceViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45747 ];

	ATgPlayerController_execCancelForceViewTarget_Parms CancelForceViewTarget_Parms;

	this->ProcessEvent ( pFnCancelForceViewTarget, &CancelForceViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetForceViewTarget
// [0x00820002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void ATgPlayerController::SetForceViewTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetForceViewTarget = NULL;

	if ( ! pFnSetForceViewTarget )
		pFnSetForceViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45743 ];

	ATgPlayerController_execSetForceViewTarget_Parms SetForceViewTarget_Parms;
	SetForceViewTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetForceViewTarget, &SetForceViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPlayerController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 45741 ];

	ATgPlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPlayerController.GMVisUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::GMVisUpdated ( )
{
	static UFunction* pFnGMVisUpdated = NULL;

	if ( ! pFnGMVisUpdated )
		pFnGMVisUpdated = (UFunction*) UObject::GObjObjects()->Data[ 45740 ];

	ATgPlayerController_execGMVisUpdated_Parms GMVisUpdated_Parms;

	pFnGMVisUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGMVisUpdated, &GMVisUpdated_Parms, NULL );

	pFnGMVisUpdated->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerQuit
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerQuit ( )
{
	static UFunction* pFnServerQuit = NULL;

	if ( ! pFnServerQuit )
		pFnServerQuit = (UFunction*) UObject::GObjObjects()->Data[ 45737 ];

	ATgPlayerController_execServerQuit_Parms ServerQuit_Parms;

	this->ProcessEvent ( pFnServerQuit, &ServerQuit_Parms, NULL );
};

// Function TgGame.TgPlayerController.CloseCurrentMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CloseCurrentMap ( )
{
	static UFunction* pFnCloseCurrentMap = NULL;

	if ( ! pFnCloseCurrentMap )
		pFnCloseCurrentMap = (UFunction*) UObject::GObjObjects()->Data[ 45736 ];

	ATgPlayerController_execCloseCurrentMap_Parms CloseCurrentMap_Parms;

	this->ProcessEvent ( pFnCloseCurrentMap, &CloseCurrentMap_Parms, NULL );
};

// Function TgGame.TgPlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ATgPlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 45734 ];

	ATgPlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetReadyState
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bReadyToPlay                   ( CPF_Parm )

void ATgPlayerController::ClientSetReadyState ( unsigned long bReadyToPlay )
{
	static UFunction* pFnClientSetReadyState = NULL;

	if ( ! pFnClientSetReadyState )
		pFnClientSetReadyState = (UFunction*) UObject::GObjObjects()->Data[ 45732 ];

	ATgPlayerController_execClientSetReadyState_Parms ClientSetReadyState_Parms;
	ClientSetReadyState_Parms.bReadyToPlay = bReadyToPlay;

	this->ProcessEvent ( pFnClientSetReadyState, &ClientSetReadyState_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetReadyToPlay
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerSetReadyToPlay ( )
{
	static UFunction* pFnServerSetReadyToPlay = NULL;

	if ( ! pFnServerSetReadyToPlay )
		pFnServerSetReadyToPlay = (UFunction*) UObject::GObjObjects()->Data[ 45731 ];

	ATgPlayerController_execServerSetReadyToPlay_Parms ServerSetReadyToPlay_Parms;

	this->ProcessEvent ( pFnServerSetReadyToPlay, &ServerSetReadyToPlay_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetReadyToPlay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::SetReadyToPlay ( )
{
	static UFunction* pFnSetReadyToPlay = NULL;

	if ( ! pFnSetReadyToPlay )
		pFnSetReadyToPlay = (UFunction*) UObject::GObjObjects()->Data[ 45730 ];

	ATgPlayerController_execSetReadyToPlay_Parms SetReadyToPlay_Parms;

	this->ProcessEvent ( pFnSetReadyToPlay, &SetReadyToPlay_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestDie
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bDie                           ( CPF_Parm )
// int                            dmgType                        ( CPF_Parm )

void ATgPlayerController::TestDie ( unsigned long bDie, int dmgType )
{
	static UFunction* pFnTestDie = NULL;

	if ( ! pFnTestDie )
		pFnTestDie = (UFunction*) UObject::GObjObjects()->Data[ 45726 ];

	ATgPlayerController_execTestDie_Parms TestDie_Parms;
	TestDie_Parms.bDie = bDie;
	TestDie_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnTestDie, &TestDie_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShoulderShot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Intensity                      ( CPF_Parm )

void ATgPlayerController::ShoulderShot ( float Intensity )
{
	static UFunction* pFnShoulderShot = NULL;

	if ( ! pFnShoulderShot )
		pFnShoulderShot = (UFunction*) UObject::GObjObjects()->Data[ 45724 ];

	ATgPlayerController_execShoulderShot_Parms ShoulderShot_Parms;
	ShoulderShot_Parms.Intensity = Intensity;

	this->ProcessEvent ( pFnShoulderShot, &ShoulderShot_Parms, NULL );
};

// Function TgGame.TgPlayerController.HeadShot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Intensity                      ( CPF_Parm )

void ATgPlayerController::HeadShot ( float Intensity )
{
	static UFunction* pFnHeadShot = NULL;

	if ( ! pFnHeadShot )
		pFnHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 45722 ];

	ATgPlayerController_execHeadShot_Parms HeadShot_Parms;
	HeadShot_Parms.Intensity = Intensity;

	this->ProcessEvent ( pFnHeadShot, &HeadShot_Parms, NULL );
};

// Function TgGame.TgPlayerController.Impulse
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void ATgPlayerController::Impulse ( float X, float Y, float Z, struct FName BoneName )
{
	static UFunction* pFnImpulse = NULL;

	if ( ! pFnImpulse )
		pFnImpulse = (UFunction*) UObject::GObjObjects()->Data[ 45716 ];

	ATgPlayerController_execImpulse_Parms Impulse_Parms;
	Impulse_Parms.X = X;
	Impulse_Parms.Y = Y;
	Impulse_Parms.Z = Z;
	memcpy ( &Impulse_Parms.BoneName, &BoneName, 0x8 );

	this->ProcessEvent ( pFnImpulse, &Impulse_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleWalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleWalk ( )
{
	static UFunction* pFnToggleWalk = NULL;

	if ( ! pFnToggleWalk )
		pFnToggleWalk = (UFunction*) UObject::GObjObjects()->Data[ 45715 ];

	ATgPlayerController_execToggleWalk_Parms ToggleWalk_Parms;

	this->ProcessEvent ( pFnToggleWalk, &ToggleWalk_Parms, NULL );
};

// Function TgGame.TgPlayerController.DebugUpdateConeAttackDevice
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::DebugUpdateConeAttackDevice ( )
{
	static UFunction* pFnDebugUpdateConeAttackDevice = NULL;

	if ( ! pFnDebugUpdateConeAttackDevice )
		pFnDebugUpdateConeAttackDevice = (UFunction*) UObject::GObjObjects()->Data[ 45713 ];

	ATgPlayerController_execDebugUpdateConeAttackDevice_Parms DebugUpdateConeAttackDevice_Parms;

	this->ProcessEvent ( pFnDebugUpdateConeAttackDevice, &DebugUpdateConeAttackDevice_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerToggleDetailedDeviceLog
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerToggleDetailedDeviceLog ( )
{
	static UFunction* pFnServerToggleDetailedDeviceLog = NULL;

	if ( ! pFnServerToggleDetailedDeviceLog )
		pFnServerToggleDetailedDeviceLog = (UFunction*) UObject::GObjObjects()->Data[ 45712 ];

	ATgPlayerController_execServerToggleDetailedDeviceLog_Parms ServerToggleDetailedDeviceLog_Parms;

	this->ProcessEvent ( pFnServerToggleDetailedDeviceLog, &ServerToggleDetailedDeviceLog_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleServerDetailedDeviceLog
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::ToggleServerDetailedDeviceLog ( )
{
	static UFunction* pFnToggleServerDetailedDeviceLog = NULL;

	if ( ! pFnToggleServerDetailedDeviceLog )
		pFnToggleServerDetailedDeviceLog = (UFunction*) UObject::GObjObjects()->Data[ 45711 ];

	ATgPlayerController_execToggleServerDetailedDeviceLog_Parms ToggleServerDetailedDeviceLog_Parms;

	this->ProcessEvent ( pFnToggleServerDetailedDeviceLog, &ToggleServerDetailedDeviceLog_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleDetailedDeviceLog
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::ToggleDetailedDeviceLog ( )
{
	static UFunction* pFnToggleDetailedDeviceLog = NULL;

	if ( ! pFnToggleDetailedDeviceLog )
		pFnToggleDetailedDeviceLog = (UFunction*) UObject::GObjObjects()->Data[ 45710 ];

	ATgPlayerController_execToggleDetailedDeviceLog_Parms ToggleDetailedDeviceLog_Parms;

	this->ProcessEvent ( pFnToggleDetailedDeviceLog, &ToggleDetailedDeviceLog_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleSensorDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleSensorDebug ( )
{
	static UFunction* pFnToggleSensorDebug = NULL;

	if ( ! pFnToggleSensorDebug )
		pFnToggleSensorDebug = (UFunction*) UObject::GObjObjects()->Data[ 45708 ];

	ATgPlayerController_execToggleSensorDebug_Parms ToggleSensorDebug_Parms;

	this->ProcessEvent ( pFnToggleSensorDebug, &ToggleSensorDebug_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleShowConeAttackDebug
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::ToggleShowConeAttackDebug ( )
{
	static UFunction* pFnToggleShowConeAttackDebug = NULL;

	if ( ! pFnToggleShowConeAttackDebug )
		pFnToggleShowConeAttackDebug = (UFunction*) UObject::GObjObjects()->Data[ 45707 ];

	ATgPlayerController_execToggleShowConeAttackDebug_Parms ToggleShowConeAttackDebug_Parms;

	this->ProcessEvent ( pFnToggleShowConeAttackDebug, &ToggleShowConeAttackDebug_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShowFootstepInfo
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::ShowFootstepInfo ( )
{
	static UFunction* pFnShowFootstepInfo = NULL;

	if ( ! pFnShowFootstepInfo )
		pFnShowFootstepInfo = (UFunction*) UObject::GObjObjects()->Data[ 45706 ];

	ATgPlayerController_execShowFootstepInfo_Parms ShowFootstepInfo_Parms;

	this->ProcessEvent ( pFnShowFootstepInfo, &ShowFootstepInfo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleShowBotAIDebug
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::ToggleShowBotAIDebug ( )
{
	static UFunction* pFnToggleShowBotAIDebug = NULL;

	if ( ! pFnToggleShowBotAIDebug )
		pFnToggleShowBotAIDebug = (UFunction*) UObject::GObjObjects()->Data[ 45705 ];

	ATgPlayerController_execToggleShowBotAIDebug_Parms ToggleShowBotAIDebug_Parms;

	this->ProcessEvent ( pFnToggleShowBotAIDebug, &ToggleShowBotAIDebug_Parms, NULL );
};

// Function TgGame.TgPlayerController.AIDebug
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::AIDebug ( )
{
	static UFunction* pFnAIDebug = NULL;

	if ( ! pFnAIDebug )
		pFnAIDebug = (UFunction*) UObject::GObjObjects()->Data[ 45704 ];

	ATgPlayerController_execAIDebug_Parms AIDebug_Parms;

	this->ProcessEvent ( pFnAIDebug, &AIDebug_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerForceBotAction
// [0x002200C2] 
// Parameters infos:
// struct FString                 NewAction                      ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerForceBotAction ( struct FString NewAction )
{
	static UFunction* pFnServerForceBotAction = NULL;

	if ( ! pFnServerForceBotAction )
		pFnServerForceBotAction = (UFunction*) UObject::GObjObjects()->Data[ 45701 ];

	ATgPlayerController_execServerForceBotAction_Parms ServerForceBotAction_Parms;
	memcpy ( &ServerForceBotAction_Parms.NewAction, &NewAction, 0xC );

	this->ProcessEvent ( pFnServerForceBotAction, &ServerForceBotAction_Parms, NULL );
};

// Function TgGame.TgPlayerController.ForceBotAction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 NewAction                      ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ForceBotAction ( struct FString NewAction )
{
	static UFunction* pFnForceBotAction = NULL;

	if ( ! pFnForceBotAction )
		pFnForceBotAction = (UFunction*) UObject::GObjObjects()->Data[ 45699 ];

	ATgPlayerController_execForceBotAction_Parms ForceBotAction_Parms;
	memcpy ( &ForceBotAction_Parms.NewAction, &NewAction, 0xC );

	this->ProcessEvent ( pFnForceBotAction, &ForceBotAction_Parms, NULL );
};

// Function TgGame.TgPlayerController._ServerEquipDevice
// [0x002200C2] 
// Parameters infos:
// int                            nDeviceId                      ( CPF_Parm )
// int                            nEquipPointId                  ( CPF_Parm )

void ATgPlayerController::_ServerEquipDevice ( int nDeviceId, int nEquipPointId )
{
	static UFunction* pFn_ServerEquipDevice = NULL;

	if ( ! pFn_ServerEquipDevice )
		pFn_ServerEquipDevice = (UFunction*) UObject::GObjObjects()->Data[ 45696 ];

	ATgPlayerController_exec_ServerEquipDevice_Parms _ServerEquipDevice_Parms;
	_ServerEquipDevice_Parms.nDeviceId = nDeviceId;
	_ServerEquipDevice_Parms.nEquipPointId = nEquipPointId;

	this->ProcessEvent ( pFn_ServerEquipDevice, &_ServerEquipDevice_Parms, NULL );
};

// Function TgGame.TgPlayerController._EquipDeviceByName
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 sDeviceName                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            nEquipPointId                  ( CPF_Parm )

void ATgPlayerController::_EquipDeviceByName ( struct FString sDeviceName, int nEquipPointId )
{
	static UFunction* pFn_EquipDeviceByName = NULL;

	if ( ! pFn_EquipDeviceByName )
		pFn_EquipDeviceByName = (UFunction*) UObject::GObjObjects()->Data[ 45692 ];

	ATgPlayerController_exec_EquipDeviceByName_Parms _EquipDeviceByName_Parms;
	memcpy ( &_EquipDeviceByName_Parms.sDeviceName, &sDeviceName, 0xC );
	_EquipDeviceByName_Parms.nEquipPointId = nEquipPointId;

	this->ProcessEvent ( pFn_EquipDeviceByName, &_EquipDeviceByName_Parms, NULL );
};

// Function TgGame.TgPlayerController._EquipDevice
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nDeviceId                      ( CPF_Parm )
// int                            nEquipPointId                  ( CPF_Parm )

void ATgPlayerController::_EquipDevice ( int nDeviceId, int nEquipPointId )
{
	static UFunction* pFn_EquipDevice = NULL;

	if ( ! pFn_EquipDevice )
		pFn_EquipDevice = (UFunction*) UObject::GObjObjects()->Data[ 45689 ];

	ATgPlayerController_exec_EquipDevice_Parms _EquipDevice_Parms;
	_EquipDevice_Parms.nDeviceId = nDeviceId;
	_EquipDevice_Parms.nEquipPointId = nEquipPointId;

	this->ProcessEvent ( pFn_EquipDevice, &_EquipDevice_Parms, NULL );
};

// Function TgGame.TgPlayerController._ServerSpawnTemplatePlayer
// [0x002200C2] 
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::_ServerSpawnTemplatePlayer ( struct FString sName )
{
	static UFunction* pFn_ServerSpawnTemplatePlayer = NULL;

	if ( ! pFn_ServerSpawnTemplatePlayer )
		pFn_ServerSpawnTemplatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 45687 ];

	ATgPlayerController_exec_ServerSpawnTemplatePlayer_Parms _ServerSpawnTemplatePlayer_Parms;
	memcpy ( &_ServerSpawnTemplatePlayer_Parms.sName, &sName, 0xC );

	this->ProcessEvent ( pFn_ServerSpawnTemplatePlayer, &_ServerSpawnTemplatePlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController._SpawnTemplatePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::_SpawnTemplatePlayer ( struct FString sName )
{
	static UFunction* pFn_SpawnTemplatePlayer = NULL;

	if ( ! pFn_SpawnTemplatePlayer )
		pFn_SpawnTemplatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 45685 ];

	ATgPlayerController_exec_SpawnTemplatePlayer_Parms _SpawnTemplatePlayer_Parms;
	memcpy ( &_SpawnTemplatePlayer_Parms.sName, &sName, 0xC );

	this->ProcessEvent ( pFn_SpawnTemplatePlayer, &_SpawnTemplatePlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController._ServerSpawnBot
// [0x00A200C2] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nTaskForce                     ( CPF_Parm )

class APawn* ATgPlayerController::_ServerSpawnBot ( struct FString sName, int nTaskForce )
{
	static UFunction* pFn_ServerSpawnBot = NULL;

	if ( ! pFn_ServerSpawnBot )
		pFn_ServerSpawnBot = (UFunction*) UObject::GObjObjects()->Data[ 45679 ];

	ATgPlayerController_exec_ServerSpawnBot_Parms _ServerSpawnBot_Parms;
	memcpy ( &_ServerSpawnBot_Parms.sName, &sName, 0xC );
	_ServerSpawnBot_Parms.nTaskForce = nTaskForce;

	this->ProcessEvent ( pFn_ServerSpawnBot, &_ServerSpawnBot_Parms, NULL );

	return _ServerSpawnBot_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController._SpawnBot
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nTaskForce                     ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::_SpawnBot ( struct FString sName, int nTaskForce )
{
	static UFunction* pFn_SpawnBot = NULL;

	if ( ! pFn_SpawnBot )
		pFn_SpawnBot = (UFunction*) UObject::GObjObjects()->Data[ 45676 ];

	ATgPlayerController_exec_SpawnBot_Parms _SpawnBot_Parms;
	memcpy ( &_SpawnBot_Parms.sName, &sName, 0xC );
	_SpawnBot_Parms.nTaskForce = nTaskForce;

	this->ProcessEvent ( pFn_SpawnBot, &_SpawnBot_Parms, NULL );
};

// Function TgGame.TgPlayerController.ChangeCoalition
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  nCoalition                     ( CPF_Parm )

void ATgPlayerController::ChangeCoalition ( unsigned char nCoalition )
{
	static UFunction* pFnChangeCoalition = NULL;

	if ( ! pFnChangeCoalition )
		pFnChangeCoalition = (UFunction*) UObject::GObjObjects()->Data[ 45674 ];

	ATgPlayerController_execChangeCoalition_Parms ChangeCoalition_Parms;
	ChangeCoalition_Parms.nCoalition = nCoalition;

	this->ProcessEvent ( pFnChangeCoalition, &ChangeCoalition_Parms, NULL );
};

// Function TgGame.TgPlayerController.ChangeTaskForce
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  nTaskForce                     ( CPF_Parm )

void ATgPlayerController::ChangeTaskForce ( unsigned char nTaskForce )
{
	static UFunction* pFnChangeTaskForce = NULL;

	if ( ! pFnChangeTaskForce )
		pFnChangeTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 45672 ];

	ATgPlayerController_execChangeTaskForce_Parms ChangeTaskForce_Parms;
	ChangeTaskForce_Parms.nTaskForce = nTaskForce;

	this->ProcessEvent ( pFnChangeTaskForce, &ChangeTaskForce_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 45669 ];

	ATgPlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyJumpApex
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventNotifyJumpApex ( )
{
	static UFunction* pFnNotifyJumpApex = NULL;

	if ( ! pFnNotifyJumpApex )
		pFnNotifyJumpApex = (UFunction*) UObject::GObjObjects()->Data[ 45668 ];

	ATgPlayerController_eventNotifyJumpApex_Parms NotifyJumpApex_Parms;

	this->ProcessEvent ( pFnNotifyJumpApex, &NotifyJumpApex_Parms, NULL );
};

// Function TgGame.TgPlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 45666 ];

	ATgPlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 45665 ];

	ATgPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientAddCheats
// [0x010201C2] 
// Parameters infos:

void ATgPlayerController::ClientAddCheats ( )
{
	static UFunction* pFnClientAddCheats = NULL;

	if ( ! pFnClientAddCheats )
		pFnClientAddCheats = (UFunction*) UObject::GObjObjects()->Data[ 45664 ];

	ATgPlayerController_execClientAddCheats_Parms ClientAddCheats_Parms;

	this->ProcessEvent ( pFnClientAddCheats, &ClientAddCheats_Parms, NULL );
};

// Function TgGame.TgPlayerController.NativeClientAddCheats
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::NativeClientAddCheats ( )
{
	static UFunction* pFnNativeClientAddCheats = NULL;

	if ( ! pFnNativeClientAddCheats )
		pFnNativeClientAddCheats = (UFunction*) UObject::GObjObjects()->Data[ 45662 ];

	ATgPlayerController_execNativeClientAddCheats_Parms NativeClientAddCheats_Parms;

	pFnNativeClientAddCheats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeClientAddCheats, &NativeClientAddCheats_Parms, NULL );

	pFnNativeClientAddCheats->FunctionFlags |= 0x400;

	return NativeClientAddCheats_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ToggleScreenShotMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleScreenShotMode ( )
{
	static UFunction* pFnToggleScreenShotMode = NULL;

	if ( ! pFnToggleScreenShotMode )
		pFnToggleScreenShotMode = (UFunction*) UObject::GObjObjects()->Data[ 45661 ];

	ATgPlayerController_execToggleScreenShotMode_Parms ToggleScreenShotMode_Parms;

	this->ProcessEvent ( pFnToggleScreenShotMode, &ToggleScreenShotMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerToggleSceneCaptureState
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerToggleSceneCaptureState ( )
{
	static UFunction* pFnServerToggleSceneCaptureState = NULL;

	if ( ! pFnServerToggleSceneCaptureState )
		pFnServerToggleSceneCaptureState = (UFunction*) UObject::GObjObjects()->Data[ 45660 ];

	ATgPlayerController_execServerToggleSceneCaptureState_Parms ServerToggleSceneCaptureState_Parms;

	this->ProcessEvent ( pFnServerToggleSceneCaptureState, &ServerToggleSceneCaptureState_Parms, NULL );
};

// Function TgGame.TgPlayerController.LongClientAdjustPosition
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void ATgPlayerController::LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPosition = NULL;

	if ( ! pFnLongClientAdjustPosition )
		pFnLongClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 45645 ];

	ATgPlayerController_execLongClientAdjustPosition_Parms LongClientAdjustPosition_Parms;
	LongClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPosition_Parms.newPhysics = newPhysics;
	LongClientAdjustPosition_Parms.NewLocX = NewLocX;
	LongClientAdjustPosition_Parms.NewLocY = NewLocY;
	LongClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPosition_Parms.NewVelX = NewVelX;
	LongClientAdjustPosition_Parms.NewVelY = NewVelY;
	LongClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPosition_Parms.NewBase = NewBase;
	LongClientAdjustPosition_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPosition_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPosition_Parms.NewFloorZ = NewFloorZ;

	this->ProcessEvent ( pFnLongClientAdjustPosition, &LongClientAdjustPosition_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleSceneCaptureState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleSceneCaptureState ( )
{
	static UFunction* pFnToggleSceneCaptureState = NULL;

	if ( ! pFnToggleSceneCaptureState )
		pFnToggleSceneCaptureState = (UFunction*) UObject::GObjObjects()->Data[ 45644 ];

	ATgPlayerController_execToggleSceneCaptureState_Parms ToggleSceneCaptureState_Parms;

	this->ProcessEvent ( pFnToggleSceneCaptureState, &ToggleSceneCaptureState_Parms, NULL );
};

// Function TgGame.TgPlayerController.CaptureScene
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CaptureScene ( )
{
	static UFunction* pFnCaptureScene = NULL;

	if ( ! pFnCaptureScene )
		pFnCaptureScene = (UFunction*) UObject::GObjObjects()->Data[ 45643 ];

	ATgPlayerController_execCaptureScene_Parms CaptureScene_Parms;

	this->ProcessEvent ( pFnCaptureScene, &CaptureScene_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetCurrentDeviceBehaviorType
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPlayerController::GetCurrentDeviceBehaviorType ( )
{
	static UFunction* pFnGetCurrentDeviceBehaviorType = NULL;

	if ( ! pFnGetCurrentDeviceBehaviorType )
		pFnGetCurrentDeviceBehaviorType = (UFunction*) UObject::GObjObjects()->Data[ 45635 ];

	ATgPlayerController_execGetCurrentDeviceBehaviorType_Parms GetCurrentDeviceBehaviorType_Parms;

	this->ProcessEvent ( pFnGetCurrentDeviceBehaviorType, &GetCurrentDeviceBehaviorType_Parms, NULL );

	return GetCurrentDeviceBehaviorType_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetCurrentDeviceType
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPlayerController::GetCurrentDeviceType ( )
{
	static UFunction* pFnGetCurrentDeviceType = NULL;

	if ( ! pFnGetCurrentDeviceType )
		pFnGetCurrentDeviceType = (UFunction*) UObject::GObjObjects()->Data[ 45633 ];

	ATgPlayerController_execGetCurrentDeviceType_Parms GetCurrentDeviceType_Parms;

	this->ProcessEvent ( pFnGetCurrentDeviceType, &GetCurrentDeviceType_Parms, NULL );

	return GetCurrentDeviceType_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetCurrentEqPoint
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgPlayerController::GetCurrentEqPoint ( )
{
	static UFunction* pFnGetCurrentEqPoint = NULL;

	if ( ! pFnGetCurrentEqPoint )
		pFnGetCurrentEqPoint = (UFunction*) UObject::GObjObjects()->Data[ 45631 ];

	ATgPlayerController_execGetCurrentEqPoint_Parms GetCurrentEqPoint_Parms;

	this->ProcessEvent ( pFnGetCurrentEqPoint, &GetCurrentEqPoint_Parms, NULL );

	return GetCurrentEqPoint_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetEqPointDevice
// [0x00020002] 
// Parameters infos:
// class ATgDevice*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEqPoint                       ( CPF_Parm )

class ATgDevice* ATgPlayerController::GetEqPointDevice ( unsigned char eEqPoint )
{
	static UFunction* pFnGetEqPointDevice = NULL;

	if ( ! pFnGetEqPointDevice )
		pFnGetEqPointDevice = (UFunction*) UObject::GObjObjects()->Data[ 45628 ];

	ATgPlayerController_execGetEqPointDevice_Parms GetEqPointDevice_Parms;
	GetEqPointDevice_Parms.eEqPoint = eEqPoint;

	this->ProcessEvent ( pFnGetEqPointDevice, &GetEqPointDevice_Parms, NULL );

	return GetEqPointDevice_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetEqPointDevFire
// [0x00020002] 
// Parameters infos:
// class UTgDeviceFire*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTgDeviceFire* ATgPlayerController::GetEqPointDevFire ( )
{
	static UFunction* pFnGetEqPointDevFire = NULL;

	if ( ! pFnGetEqPointDevFire )
		pFnGetEqPointDevFire = (UFunction*) UObject::GObjObjects()->Data[ 45625 ];

	ATgPlayerController_execGetEqPointDevFire_Parms GetEqPointDevFire_Parms;

	this->ProcessEvent ( pFnGetEqPointDevFire, &GetEqPointDevFire_Parms, NULL );

	return GetEqPointDevFire_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetTargetModeBasedOnDevFire
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgPlayerController::GetTargetModeBasedOnDevFire ( )
{
	static UFunction* pFnGetTargetModeBasedOnDevFire = NULL;

	if ( ! pFnGetTargetModeBasedOnDevFire )
		pFnGetTargetModeBasedOnDevFire = (UFunction*) UObject::GObjObjects()->Data[ 45621 ];

	ATgPlayerController_execGetTargetModeBasedOnDevFire_Parms GetTargetModeBasedOnDevFire_Parms;

	this->ProcessEvent ( pFnGetTargetModeBasedOnDevFire, &GetTargetModeBasedOnDevFire_Parms, NULL );

	return GetTargetModeBasedOnDevFire_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.RemoveTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::RemoveTarget ( )
{
	static UFunction* pFnRemoveTarget = NULL;

	if ( ! pFnRemoveTarget )
		pFnRemoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 45620 ];

	ATgPlayerController_execRemoveTarget_Parms RemoveTarget_Parms;

	this->ProcessEvent ( pFnRemoveTarget, &RemoveTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.IsValidTarget
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HoverActor                     ( CPF_Parm )

bool ATgPlayerController::IsValidTarget ( class AActor* HoverActor )
{
	static UFunction* pFnIsValidTarget = NULL;

	if ( ! pFnIsValidTarget )
		pFnIsValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 45617 ];

	ATgPlayerController_execIsValidTarget_Parms IsValidTarget_Parms;
	IsValidTarget_Parms.HoverActor = HoverActor;

	this->ProcessEvent ( pFnIsValidTarget, &IsValidTarget_Parms, NULL );

	return IsValidTarget_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.IsTargetDied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TargetActor                    ( CPF_Parm )

bool ATgPlayerController::IsTargetDied ( class AActor* TargetActor )
{
	static UFunction* pFnIsTargetDied = NULL;

	if ( ! pFnIsTargetDied )
		pFnIsTargetDied = (UFunction*) UObject::GObjObjects()->Data[ 45614 ];

	ATgPlayerController_execIsTargetDied_Parms IsTargetDied_Parms;
	IsTargetDied_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnIsTargetDied, &IsTargetDied_Parms, NULL );

	return IsTargetDied_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.IsTargetInFrontOfPawn
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLocation                 ( CPF_Parm )

bool ATgPlayerController::IsTargetInFrontOfPawn ( struct FVector TargetLocation )
{
	static UFunction* pFnIsTargetInFrontOfPawn = NULL;

	if ( ! pFnIsTargetInFrontOfPawn )
		pFnIsTargetInFrontOfPawn = (UFunction*) UObject::GObjObjects()->Data[ 45608 ];

	ATgPlayerController_execIsTargetInFrontOfPawn_Parms IsTargetInFrontOfPawn_Parms;
	memcpy ( &IsTargetInFrontOfPawn_Parms.TargetLocation, &TargetLocation, 0xC );

	this->ProcessEvent ( pFnIsTargetInFrontOfPawn, &IsTargetInFrontOfPawn_Parms, NULL );

	return IsTargetInFrontOfPawn_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.AllowCursorSelectAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::AllowCursorSelectAction ( )
{
	static UFunction* pFnAllowCursorSelectAction = NULL;

	if ( ! pFnAllowCursorSelectAction )
		pFnAllowCursorSelectAction = (UFunction*) UObject::GObjObjects()->Data[ 45606 ];

	ATgPlayerController_execAllowCursorSelectAction_Parms AllowCursorSelectAction_Parms;

	this->ProcessEvent ( pFnAllowCursorSelectAction, &AllowCursorSelectAction_Parms, NULL );

	return AllowCursorSelectAction_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CheckCurrTargetMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  TargetMode                     ( CPF_Parm )

bool ATgPlayerController::CheckCurrTargetMode ( unsigned char TargetMode )
{
	static UFunction* pFnCheckCurrTargetMode = NULL;

	if ( ! pFnCheckCurrTargetMode )
		pFnCheckCurrTargetMode = (UFunction*) UObject::GObjObjects()->Data[ 45603 ];

	ATgPlayerController_execCheckCurrTargetMode_Parms CheckCurrTargetMode_Parms;
	CheckCurrTargetMode_Parms.TargetMode = TargetMode;

	this->ProcessEvent ( pFnCheckCurrTargetMode, &CheckCurrTargetMode_Parms, NULL );

	return CheckCurrTargetMode_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetAdjustedAimFor
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ATgPlayerController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 45599 ];

	ATgPlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.SetTargetDrawScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void ATgPlayerController::SetTargetDrawScale ( float NewScale )
{
	static UFunction* pFnSetTargetDrawScale = NULL;

	if ( ! pFnSetTargetDrawScale )
		pFnSetTargetDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 45597 ];

	ATgPlayerController_execSetTargetDrawScale_Parms SetTargetDrawScale_Parms;
	SetTargetDrawScale_Parms.NewScale = NewScale;

	this->ProcessEvent ( pFnSetTargetDrawScale, &SetTargetDrawScale_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetCameraZScale
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void ATgPlayerController::SetCameraZScale ( float NewScale )
{
	static UFunction* pFnSetCameraZScale = NULL;

	if ( ! pFnSetCameraZScale )
		pFnSetCameraZScale = (UFunction*) UObject::GObjObjects()->Data[ 45595 ];

	ATgPlayerController_execSetCameraZScale_Parms SetCameraZScale_Parms;
	SetCameraZScale_Parms.NewScale = NewScale;

	this->ProcessEvent ( pFnSetCameraZScale, &SetCameraZScale_Parms, NULL );
};

// Function TgGame.TgPlayerController.DisplayHiddenActorsTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::DisplayHiddenActorsTimer ( )
{
	static UFunction* pFnDisplayHiddenActorsTimer = NULL;

	if ( ! pFnDisplayHiddenActorsTimer )
		pFnDisplayHiddenActorsTimer = (UFunction*) UObject::GObjObjects()->Data[ 45593 ];

	ATgPlayerController_execDisplayHiddenActorsTimer_Parms DisplayHiddenActorsTimer_Parms;

	this->ProcessEvent ( pFnDisplayHiddenActorsTimer, &DisplayHiddenActorsTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.DisplayHiddenActors
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          Time                           ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::DisplayHiddenActors ( float Time )
{
	static UFunction* pFnDisplayHiddenActors = NULL;

	if ( ! pFnDisplayHiddenActors )
		pFnDisplayHiddenActors = (UFunction*) UObject::GObjObjects()->Data[ 45591 ];

	ATgPlayerController_execDisplayHiddenActors_Parms DisplayHiddenActors_Parms;
	DisplayHiddenActors_Parms.Time = Time;

	this->ProcessEvent ( pFnDisplayHiddenActors, &DisplayHiddenActors_Parms, NULL );
};

// Function TgGame.TgPlayerController.CanAFK
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 ThePawn                        ( CPF_Parm )

bool ATgPlayerController::CanAFK ( class ATgPawn* ThePawn )
{
	static UFunction* pFnCanAFK = NULL;

	if ( ! pFnCanAFK )
		pFnCanAFK = (UFunction*) UObject::GObjObjects()->Data[ 45588 ];

	ATgPlayerController_execCanAFK_Parms CanAFK_Parms;
	CanAFK_Parms.ThePawn = ThePawn;

	this->ProcessEvent ( pFnCanAFK, &CanAFK_Parms, NULL );

	return CanAFK_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerToggleAFK
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPlayerController::ServerToggleAFK ( unsigned long bEnabled )
{
	static UFunction* pFnServerToggleAFK = NULL;

	if ( ! pFnServerToggleAFK )
		pFnServerToggleAFK = (UFunction*) UObject::GObjObjects()->Data[ 45585 ];

	ATgPlayerController_execServerToggleAFK_Parms ServerToggleAFK_Parms;
	ServerToggleAFK_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnServerToggleAFK, &ServerToggleAFK_Parms, NULL );
};

// Function TgGame.TgPlayerController.GoAFK
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::GoAFK ( )
{
	static UFunction* pFnGoAFK = NULL;

	if ( ! pFnGoAFK )
		pFnGoAFK = (UFunction*) UObject::GObjObjects()->Data[ 45584 ];

	ATgPlayerController_execGoAFK_Parms GoAFK_Parms;

	this->ProcessEvent ( pFnGoAFK, &GoAFK_Parms, NULL );
};

// Function TgGame.TgPlayerController.GoAFKTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::GoAFKTimer ( )
{
	static UFunction* pFnGoAFKTimer = NULL;

	if ( ! pFnGoAFKTimer )
		pFnGoAFKTimer = (UFunction*) UObject::GObjObjects()->Data[ 45583 ];

	ATgPlayerController_execGoAFKTimer_Parms GoAFKTimer_Parms;

	this->ProcessEvent ( pFnGoAFKTimer, &GoAFKTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheckBotsAround
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::CheckBotsAround ( )
{
	static UFunction* pFnCheckBotsAround = NULL;

	if ( ! pFnCheckBotsAround )
		pFnCheckBotsAround = (UFunction*) UObject::GObjObjects()->Data[ 45577 ];

	ATgPlayerController_execCheckBotsAround_Parms CheckBotsAround_Parms;

	this->ProcessEvent ( pFnCheckBotsAround, &CheckBotsAround_Parms, NULL );
};

// Function TgGame.TgPlayerController.IsInOpenPVE
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::IsInOpenPVE ( )
{
	static UFunction* pFnIsInOpenPVE = NULL;

	if ( ! pFnIsInOpenPVE )
		pFnIsInOpenPVE = (UFunction*) UObject::GObjObjects()->Data[ 45574 ];

	ATgPlayerController_execIsInOpenPVE_Parms IsInOpenPVE_Parms;

	this->ProcessEvent ( pFnIsInOpenPVE, &IsInOpenPVE_Parms, NULL );

	return IsInOpenPVE_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.IsInPVE
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::IsInPVE ( )
{
	static UFunction* pFnIsInPVE = NULL;

	if ( ! pFnIsInPVE )
		pFnIsInPVE = (UFunction*) UObject::GObjObjects()->Data[ 45571 ];

	ATgPlayerController_execIsInPVE_Parms IsInPVE_Parms;

	this->ProcessEvent ( pFnIsInPVE, &IsInPVE_Parms, NULL );

	return IsInPVE_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 45568 ];

	ATgPlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheckAFKForDC
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::CheckAFKForDC ( )
{
	static UFunction* pFnCheckAFKForDC = NULL;

	if ( ! pFnCheckAFKForDC )
		pFnCheckAFKForDC = (UFunction*) UObject::GObjObjects()->Data[ 45567 ];

	ATgPlayerController_execCheckAFKForDC_Parms CheckAFKForDC_Parms;

	pFnCheckAFKForDC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAFKForDC, &CheckAFKForDC_Parms, NULL );

	pFnCheckAFKForDC->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CheckAutoKickTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::CheckAutoKickTimer ( )
{
	static UFunction* pFnCheckAutoKickTimer = NULL;

	if ( ! pFnCheckAutoKickTimer )
		pFnCheckAutoKickTimer = (UFunction*) UObject::GObjObjects()->Data[ 45564 ];

	ATgPlayerController_execCheckAutoKickTimer_Parms CheckAutoKickTimer_Parms;

	this->ProcessEvent ( pFnCheckAutoKickTimer, &CheckAutoKickTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.StopAutoKickTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::StopAutoKickTimer ( )
{
	static UFunction* pFnStopAutoKickTimer = NULL;

	if ( ! pFnStopAutoKickTimer )
		pFnStopAutoKickTimer = (UFunction*) UObject::GObjObjects()->Data[ 45563 ];

	ATgPlayerController_execStopAutoKickTimer_Parms StopAutoKickTimer_Parms;

	this->ProcessEvent ( pFnStopAutoKickTimer, &StopAutoKickTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.StartAutoKickTimer
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::StartAutoKickTimer ( )
{
	static UFunction* pFnStartAutoKickTimer = NULL;

	if ( ! pFnStartAutoKickTimer )
		pFnStartAutoKickTimer = (UFunction*) UObject::GObjObjects()->Data[ 45562 ];

	ATgPlayerController_execStartAutoKickTimer_Parms StartAutoKickTimer_Parms;

	this->ProcessEvent ( pFnStartAutoKickTimer, &StartAutoKickTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShouldAutoKick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::ShouldAutoKick ( )
{
	static UFunction* pFnShouldAutoKick = NULL;

	if ( ! pFnShouldAutoKick )
		pFnShouldAutoKick = (UFunction*) UObject::GObjObjects()->Data[ 45560 ];

	ATgPlayerController_execShouldAutoKick_Parms ShouldAutoKick_Parms;

	pFnShouldAutoKick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldAutoKick, &ShouldAutoKick_Parms, NULL );

	pFnShouldAutoKick->FunctionFlags |= 0x400;

	return ShouldAutoKick_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CanPlayerAFK
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::CanPlayerAFK ( )
{
	static UFunction* pFnCanPlayerAFK = NULL;

	if ( ! pFnCanPlayerAFK )
		pFnCanPlayerAFK = (UFunction*) UObject::GObjObjects()->Data[ 45557 ];

	ATgPlayerController_execCanPlayerAFK_Parms CanPlayerAFK_Parms;

	this->ProcessEvent ( pFnCanPlayerAFK, &CanPlayerAFK_Parms, NULL );

	return CanPlayerAFK_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerSetGameSpeed
// [0x002200C2] 
// Parameters infos:
// float                          fSpeedModifer                  ( CPF_Parm )

void ATgPlayerController::ServerSetGameSpeed ( float fSpeedModifer )
{
	static UFunction* pFnServerSetGameSpeed = NULL;

	if ( ! pFnServerSetGameSpeed )
		pFnServerSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 45555 ];

	ATgPlayerController_execServerSetGameSpeed_Parms ServerSetGameSpeed_Parms;
	ServerSetGameSpeed_Parms.fSpeedModifer = fSpeedModifer;

	this->ProcessEvent ( pFnServerSetGameSpeed, &ServerSetGameSpeed_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetGameSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fSpeedModifer                  ( CPF_Parm )

void ATgPlayerController::SetGameSpeed ( float fSpeedModifer )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 45552 ];

	ATgPlayerController_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.fSpeedModifer = fSpeedModifer;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function TgGame.TgPlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 45550 ];

	ATgPlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function TgGame.TgPlayerController.CrouchDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CrouchDebug ( )
{
	static UFunction* pFnCrouchDebug = NULL;

	if ( ! pFnCrouchDebug )
		pFnCrouchDebug = (UFunction*) UObject::GObjObjects()->Data[ 45548 ];

	ATgPlayerController_execCrouchDebug_Parms CrouchDebug_Parms;

	this->ProcessEvent ( pFnCrouchDebug, &CrouchDebug_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetPlayerTeam
// [0x00020002] 
// Parameters infos:
// class ATeamInfo*               NewTeam                        ( CPF_Parm )

void ATgPlayerController::SetPlayerTeam ( class ATeamInfo* NewTeam )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = (UFunction*) UObject::GObjObjects()->Data[ 45546 ];

	ATgPlayerController_execSetPlayerTeam_Parms SetPlayerTeam_Parms;
	SetPlayerTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function TgGame.TgPlayerController.TeamTalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TeamTalk ( )
{
	static UFunction* pFnTeamTalk = NULL;

	if ( ! pFnTeamTalk )
		pFnTeamTalk = (UFunction*) UObject::GObjObjects()->Data[ 45544 ];

	ATgPlayerController_execTeamTalk_Parms TeamTalk_Parms;

	this->ProcessEvent ( pFnTeamTalk, &TeamTalk_Parms, NULL );
};

// Function TgGame.TgPlayerController.Talk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::Talk ( )
{
	static UFunction* pFnTalk = NULL;

	if ( ! pFnTalk )
		pFnTalk = (UFunction*) UObject::GObjObjects()->Data[ 45542 ];

	ATgPlayerController_execTalk_Parms Talk_Parms;

	this->ProcessEvent ( pFnTalk, &Talk_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetRaidChallengerWon
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bAttackerWon                   ( CPF_Parm )

void ATgPlayerController::ClientSetRaidChallengerWon ( unsigned long bAttackerWon )
{
	static UFunction* pFnClientSetRaidChallengerWon = NULL;

	if ( ! pFnClientSetRaidChallengerWon )
		pFnClientSetRaidChallengerWon = (UFunction*) UObject::GObjObjects()->Data[ 45519 ];

	ATgPlayerController_execClientSetRaidChallengerWon_Parms ClientSetRaidChallengerWon_Parms;
	ClientSetRaidChallengerWon_Parms.bAttackerWon = bAttackerWon;

	this->ProcessEvent ( pFnClientSetRaidChallengerWon, &ClientSetRaidChallengerWon_Parms, NULL );
};

// Function TgGame.TgPlayerController.SendClientSetRaidChallengerWon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bAttackerWon                   ( CPF_Parm )

void ATgPlayerController::eventSendClientSetRaidChallengerWon ( unsigned long bAttackerWon )
{
	static UFunction* pFnSendClientSetRaidChallengerWon = NULL;

	if ( ! pFnSendClientSetRaidChallengerWon )
		pFnSendClientSetRaidChallengerWon = (UFunction*) UObject::GObjObjects()->Data[ 45517 ];

	ATgPlayerController_eventSendClientSetRaidChallengerWon_Parms SendClientSetRaidChallengerWon_Parms;
	SendClientSetRaidChallengerWon_Parms.bAttackerWon = bAttackerWon;

	this->ProcessEvent ( pFnSendClientSetRaidChallengerWon, &SendClientSetRaidChallengerWon_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientTrainingMissionEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// struct FTG_TRAINING_END_INFO   trainingEndInfo                ( CPF_Parm )

void ATgPlayerController::ClientTrainingMissionEnded ( class AActor* EndGameFocus, struct FTG_TRAINING_END_INFO trainingEndInfo )
{
	static UFunction* pFnClientTrainingMissionEnded = NULL;

	if ( ! pFnClientTrainingMissionEnded )
		pFnClientTrainingMissionEnded = (UFunction*) UObject::GObjObjects()->Data[ 45514 ];

	ATgPlayerController_execClientTrainingMissionEnded_Parms ClientTrainingMissionEnded_Parms;
	ClientTrainingMissionEnded_Parms.EndGameFocus = EndGameFocus;
	memcpy ( &ClientTrainingMissionEnded_Parms.trainingEndInfo, &trainingEndInfo, 0x14 );

	this->ProcessEvent ( pFnClientTrainingMissionEnded, &ClientTrainingMissionEnded_Parms, NULL );
};

// Function TgGame.TgPlayerController.TrainingMissionHasEnded
// [0x00020002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// int                            awardedMedal                   ( CPF_Parm )
// float                          ElapsedTime                    ( CPF_Parm )

void ATgPlayerController::TrainingMissionHasEnded ( class AActor* EndGameFocus, int awardedMedal, float ElapsedTime )
{
	static UFunction* pFnTrainingMissionHasEnded = NULL;

	if ( ! pFnTrainingMissionHasEnded )
		pFnTrainingMissionHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 45510 ];

	ATgPlayerController_execTrainingMissionHasEnded_Parms TrainingMissionHasEnded_Parms;
	TrainingMissionHasEnded_Parms.EndGameFocus = EndGameFocus;
	TrainingMissionHasEnded_Parms.awardedMedal = awardedMedal;
	TrainingMissionHasEnded_Parms.ElapsedTime = ElapsedTime;

	this->ProcessEvent ( pFnTrainingMissionHasEnded, &TrainingMissionHasEnded_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetGameWinState
// [0x010201C2] 
// Parameters infos:
// unsigned char                  gameWinState                   ( CPF_Parm )

void ATgPlayerController::ClientSetGameWinState ( unsigned char gameWinState )
{
	static UFunction* pFnClientSetGameWinState = NULL;

	if ( ! pFnClientSetGameWinState )
		pFnClientSetGameWinState = (UFunction*) UObject::GObjObjects()->Data[ 45508 ];

	ATgPlayerController_execClientSetGameWinState_Parms ClientSetGameWinState_Parms;
	ClientSetGameWinState_Parms.gameWinState = gameWinState;

	this->ProcessEvent ( pFnClientSetGameWinState, &ClientSetGameWinState_Parms, NULL );
};

// Function TgGame.TgPlayerController.SendClientSetGameWinState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  gameWinState                   ( CPF_Parm )

void ATgPlayerController::eventSendClientSetGameWinState ( unsigned char gameWinState )
{
	static UFunction* pFnSendClientSetGameWinState = NULL;

	if ( ! pFnSendClientSetGameWinState )
		pFnSendClientSetGameWinState = (UFunction*) UObject::GObjObjects()->Data[ 45506 ];

	ATgPlayerController_eventSendClientSetGameWinState_Parms SendClientSetGameWinState_Parms;
	SendClientSetGameWinState_Parms.gameWinState = gameWinState;

	this->ProcessEvent ( pFnSendClientSetGameWinState, &SendClientSetGameWinState_Parms, NULL );
};

// Function TgGame.TgPlayerController.FindGoodView
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::FindGoodView ( )
{
	static UFunction* pFnFindGoodView = NULL;

	if ( ! pFnFindGoodView )
		pFnFindGoodView = (UFunction*) UObject::GObjObjects()->Data[ 45505 ];

	ATgPlayerController_execFindGoodView_Parms FindGoodView_Parms;

	this->ProcessEvent ( pFnFindGoodView, &FindGoodView_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetSpecTiledShot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nMultiplier                    ( CPF_Parm )
// int                            nMargin                        ( CPF_Parm )

void ATgPlayerController::SetSpecTiledShot ( int nMultiplier, int nMargin )
{
	static UFunction* pFnSetSpecTiledShot = NULL;

	if ( ! pFnSetSpecTiledShot )
		pFnSetSpecTiledShot = (UFunction*) UObject::GObjObjects()->Data[ 45474 ];

	ATgPlayerController_execSetSpecTiledShot_Parms SetSpecTiledShot_Parms;
	SetSpecTiledShot_Parms.nMultiplier = nMultiplier;
	SetSpecTiledShot_Parms.nMargin = nMargin;

	this->ProcessEvent ( pFnSetSpecTiledShot, &SetSpecTiledShot_Parms, NULL );
};

// Function TgGame.TgPlayerController.GoSpectate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::GoSpectate ( )
{
	static UFunction* pFnGoSpectate = NULL;

	if ( ! pFnGoSpectate )
		pFnGoSpectate = (UFunction*) UObject::GObjObjects()->Data[ 45465 ];

	ATgPlayerController_execGoSpectate_Parms GoSpectate_Parms;

	this->ProcessEvent ( pFnGoSpectate, &GoSpectate_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientForwardToSpectatingMatch
// [0x010201C2] 
// Parameters infos:

void ATgPlayerController::ClientForwardToSpectatingMatch ( )
{
	static UFunction* pFnClientForwardToSpectatingMatch = NULL;

	if ( ! pFnClientForwardToSpectatingMatch )
		pFnClientForwardToSpectatingMatch = (UFunction*) UObject::GObjObjects()->Data[ 45464 ];

	ATgPlayerController_execClientForwardToSpectatingMatch_Parms ClientForwardToSpectatingMatch_Parms;

	this->ProcessEvent ( pFnClientForwardToSpectatingMatch, &ClientForwardToSpectatingMatch_Parms, NULL );
};

// Function TgGame.TgPlayerController.ForwardToSpectatingMatch
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::ForwardToSpectatingMatch ( )
{
	static UFunction* pFnForwardToSpectatingMatch = NULL;

	if ( ! pFnForwardToSpectatingMatch )
		pFnForwardToSpectatingMatch = (UFunction*) UObject::GObjObjects()->Data[ 45463 ];

	ATgPlayerController_execForwardToSpectatingMatch_Parms ForwardToSpectatingMatch_Parms;

	this->ProcessEvent ( pFnForwardToSpectatingMatch, &ForwardToSpectatingMatch_Parms, NULL );
};

// Function TgGame.TgPlayerController.RoveReplicateMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void ATgPlayerController::RoveReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnRoveReplicateMove = NULL;

	if ( ! pFnRoveReplicateMove )
		pFnRoveReplicateMove = (UFunction*) UObject::GObjObjects()->Data[ 45455 ];

	ATgPlayerController_execRoveReplicateMove_Parms RoveReplicateMove_Parms;
	RoveReplicateMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &RoveReplicateMove_Parms.newAccel, &newAccel, 0xC );
	RoveReplicateMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &RoveReplicateMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnRoveReplicateMove, &RoveReplicateMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetSpectatorLocation
// [0x00220042] 
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )

void ATgPlayerController::ServerSetSpectatorLocation ( struct FVector NewLoc )
{
	static UFunction* pFnServerSetSpectatorLocation = NULL;

	if ( ! pFnServerSetSpectatorLocation )
		pFnServerSetSpectatorLocation = (UFunction*) UObject::GObjObjects()->Data[ 45453 ];

	ATgPlayerController_execServerSetSpectatorLocation_Parms ServerSetSpectatorLocation_Parms;
	memcpy ( &ServerSetSpectatorLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnServerSetSpectatorLocation, &ServerSetSpectatorLocation_Parms, NULL );
};

// Function TgGame.TgPlayerController.RoveProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void ATgPlayerController::RoveProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnRoveProcessMove = NULL;

	if ( ! pFnRoveProcessMove )
		pFnRoveProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 45447 ];

	ATgPlayerController_execRoveProcessMove_Parms RoveProcessMove_Parms;
	RoveProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &RoveProcessMove_Parms.newAccel, &newAccel, 0xC );
	RoveProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &RoveProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnRoveProcessMove, &RoveProcessMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.LimitSpectatorVelocity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::LimitSpectatorVelocity ( )
{
	static UFunction* pFnLimitSpectatorVelocity = NULL;

	if ( ! pFnLimitSpectatorVelocity )
		pFnLimitSpectatorVelocity = (UFunction*) UObject::GObjObjects()->Data[ 45445 ];

	ATgPlayerController_execLimitSpectatorVelocity_Parms LimitSpectatorVelocity_Parms;

	this->ProcessEvent ( pFnLimitSpectatorVelocity, &LimitSpectatorVelocity_Parms, NULL );

	return LimitSpectatorVelocity_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.RovePlayerMove
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPlayerController::RovePlayerMove ( float DeltaTime )
{
	static UFunction* pFnRovePlayerMove = NULL;

	if ( ! pFnRovePlayerMove )
		pFnRovePlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 45440 ];

	ATgPlayerController_execRovePlayerMove_Parms RovePlayerMove_Parms;
	RovePlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnRovePlayerMove, &RovePlayerMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.AddNavFailedAlert
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAlreadyThere                  ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::AddNavFailedAlert ( unsigned long bAlreadyThere )
{
	static UFunction* pFnAddNavFailedAlert = NULL;

	if ( ! pFnAddNavFailedAlert )
		pFnAddNavFailedAlert = (UFunction*) UObject::GObjObjects()->Data[ 45438 ];

	ATgPlayerController_execAddNavFailedAlert_Parms AddNavFailedAlert_Parms;
	AddNavFailedAlert_Parms.bAlreadyThere = bAlreadyThere;

	pFnAddNavFailedAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNavFailedAlert, &AddNavFailedAlert_Parms, NULL );

	pFnAddNavFailedAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ShowPathTo
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  destActor                      ( CPF_Parm )

void ATgPlayerController::eventShowPathTo ( class AActor* destActor )
{
	static UFunction* pFnShowPathTo = NULL;

	if ( ! pFnShowPathTo )
		pFnShowPathTo = (UFunction*) UObject::GObjObjects()->Data[ 45434 ];

	ATgPlayerController_eventShowPathTo_Parms ShowPathTo_Parms;
	ShowPathTo_Parms.destActor = destActor;

	this->ProcessEvent ( pFnShowPathTo, &ShowPathTo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientShowPathTo
// [0x010201C2] 
// Parameters infos:
// class AActor*                  destActor                      ( CPF_Parm )

void ATgPlayerController::ClientShowPathTo ( class AActor* destActor )
{
	static UFunction* pFnClientShowPathTo = NULL;

	if ( ! pFnClientShowPathTo )
		pFnClientShowPathTo = (UFunction*) UObject::GObjObjects()->Data[ 45432 ];

	ATgPlayerController_execClientShowPathTo_Parms ClientShowPathTo_Parms;
	ClientShowPathTo_Parms.destActor = destActor;

	this->ProcessEvent ( pFnClientShowPathTo, &ClientShowPathTo_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnNavIndicator
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_NavIndicator*  Action                         ( CPF_Parm )

void ATgPlayerController::OnNavIndicator ( class UTgSeqAct_NavIndicator* Action )
{
	static UFunction* pFnOnNavIndicator = NULL;

	if ( ! pFnOnNavIndicator )
		pFnOnNavIndicator = (UFunction*) UObject::GObjObjects()->Data[ 45429 ];

	ATgPlayerController_execOnNavIndicator_Parms OnNavIndicator_Parms;
	OnNavIndicator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnNavIndicator, &OnNavIndicator_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShowPathToNearestPOI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ShowPathToNearestPOI ( )
{
	static UFunction* pFnShowPathToNearestPOI = NULL;

	if ( ! pFnShowPathToNearestPOI )
		pFnShowPathToNearestPOI = (UFunction*) UObject::GObjObjects()->Data[ 45424 ];

	ATgPlayerController_execShowPathToNearestPOI_Parms ShowPathToNearestPOI_Parms;

	this->ProcessEvent ( pFnShowPathToNearestPOI, &ShowPathToNearestPOI_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShowPathToObjective
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ShowPathToObjective ( )
{
	static UFunction* pFnShowPathToObjective = NULL;

	if ( ! pFnShowPathToObjective )
		pFnShowPathToObjective = (UFunction*) UObject::GObjObjects()->Data[ 45421 ];

	ATgPlayerController_execShowPathToObjective_Parms ShowPathToObjective_Parms;

	this->ProcessEvent ( pFnShowPathToObjective, &ShowPathToObjective_Parms, NULL );
};

// Function TgGame.TgPlayerController.AdjustCameraScale
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIn                            ( CPF_Parm )

void ATgPlayerController::AdjustCameraScale ( unsigned long bIn )
{
	static UFunction* pFnAdjustCameraScale = NULL;

	if ( ! pFnAdjustCameraScale )
		pFnAdjustCameraScale = (UFunction*) UObject::GObjObjects()->Data[ 45419 ];

	ATgPlayerController_execAdjustCameraScale_Parms AdjustCameraScale_Parms;
	AdjustCameraScale_Parms.bIn = bIn;

	this->ProcessEvent ( pFnAdjustCameraScale, &AdjustCameraScale_Parms, NULL );
};

// Function TgGame.TgPlayerController.CrouchBlendInterpRate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fIn                            ( CPF_Parm )

void ATgPlayerController::CrouchBlendInterpRate ( float fIn )
{
	static UFunction* pFnCrouchBlendInterpRate = NULL;

	if ( ! pFnCrouchBlendInterpRate )
		pFnCrouchBlendInterpRate = (UFunction*) UObject::GObjObjects()->Data[ 45417 ];

	ATgPlayerController_execCrouchBlendInterpRate_Parms CrouchBlendInterpRate_Parms;
	CrouchBlendInterpRate_Parms.fIn = fIn;

	this->ProcessEvent ( pFnCrouchBlendInterpRate, &CrouchBlendInterpRate_Parms, NULL );
};

// Function TgGame.TgPlayerController.CamShock
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fIn                            ( CPF_Parm )

void ATgPlayerController::CamShock ( float fIn )
{
	static UFunction* pFnCamShock = NULL;

	if ( ! pFnCamShock )
		pFnCamShock = (UFunction*) UObject::GObjObjects()->Data[ 45415 ];

	ATgPlayerController_execCamShock_Parms CamShock_Parms;
	CamShock_Parms.fIn = fIn;

	this->ProcessEvent ( pFnCamShock, &CamShock_Parms, NULL );
};

// Function TgGame.TgPlayerController.ZoomOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ZoomOut ( )
{
	static UFunction* pFnZoomOut = NULL;

	if ( ! pFnZoomOut )
		pFnZoomOut = (UFunction*) UObject::GObjObjects()->Data[ 45414 ];

	ATgPlayerController_execZoomOut_Parms ZoomOut_Parms;

	this->ProcessEvent ( pFnZoomOut, &ZoomOut_Parms, NULL );
};

// Function TgGame.TgPlayerController.DebugCam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            X                              ( CPF_Parm )

void ATgPlayerController::DebugCam ( int X )
{
	static UFunction* pFnDebugCam = NULL;

	if ( ! pFnDebugCam )
		pFnDebugCam = (UFunction*) UObject::GObjObjects()->Data[ 45412 ];

	ATgPlayerController_execDebugCam_Parms DebugCam_Parms;
	DebugCam_Parms.X = X;

	this->ProcessEvent ( pFnDebugCam, &DebugCam_Parms, NULL );
};

// Function TgGame.TgPlayerController.ZoomIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ZoomIn ( )
{
	static UFunction* pFnZoomIn = NULL;

	if ( ! pFnZoomIn )
		pFnZoomIn = (UFunction*) UObject::GObjObjects()->Data[ 45411 ];

	ATgPlayerController_execZoomIn_Parms ZoomIn_Parms;

	this->ProcessEvent ( pFnZoomIn, &ZoomIn_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerViewPlayerByName
// [0x002200C2] 
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerViewPlayerByName ( struct FString PlayerName )
{
	static UFunction* pFnServerViewPlayerByName = NULL;

	if ( ! pFnServerViewPlayerByName )
		pFnServerViewPlayerByName = (UFunction*) UObject::GObjObjects()->Data[ 45408 ];

	ATgPlayerController_execServerViewPlayerByName_Parms ServerViewPlayerByName_Parms;
	memcpy ( &ServerViewPlayerByName_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnServerViewPlayerByName, &ServerViewPlayerByName_Parms, NULL );
};

// Function TgGame.TgPlayerController.DoSetViewTarget
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void ATgPlayerController::DoSetViewTarget ( class AActor* NewTarget )
{
	static UFunction* pFnDoSetViewTarget = NULL;

	if ( ! pFnDoSetViewTarget )
		pFnDoSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 45406 ];

	ATgPlayerController_execDoSetViewTarget_Parms DoSetViewTarget_Parms;
	DoSetViewTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnDoSetViewTarget, &DoSetViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ViewPlayerByName
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ViewPlayerByName ( struct FString PlayerName )
{
	static UFunction* pFnViewPlayerByName = NULL;

	if ( ! pFnViewPlayerByName )
		pFnViewPlayerByName = (UFunction*) UObject::GObjObjects()->Data[ 45404 ];

	ATgPlayerController_execViewPlayerByName_Parms ViewPlayerByName_Parms;
	memcpy ( &ViewPlayerByName_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnViewPlayerByName, &ViewPlayerByName_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerViewAPlayer
// [0x00024002] 
// Parameters infos:
// int                            Dir                            ( CPF_Parm )
// unsigned long                  bFriendlyOnly                  ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerViewAPlayer ( int Dir, unsigned long bFriendlyOnly )
{
	static UFunction* pFnServerViewAPlayer = NULL;

	if ( ! pFnServerViewAPlayer )
		pFnServerViewAPlayer = (UFunction*) UObject::GObjObjects()->Data[ 45391 ];

	ATgPlayerController_execServerViewAPlayer_Parms ServerViewAPlayer_Parms;
	ServerViewAPlayer_Parms.Dir = Dir;
	ServerViewAPlayer_Parms.bFriendlyOnly = bFriendlyOnly;

	this->ProcessEvent ( pFnServerViewAPlayer, &ServerViewAPlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerViewPrevPlayer
// [0x00224042] 
// Parameters infos:
// unsigned long                  bFriendlyOnly                  ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerViewPrevPlayer ( unsigned long bFriendlyOnly )
{
	static UFunction* pFnServerViewPrevPlayer = NULL;

	if ( ! pFnServerViewPrevPlayer )
		pFnServerViewPrevPlayer = (UFunction*) UObject::GObjObjects()->Data[ 45389 ];

	ATgPlayerController_execServerViewPrevPlayer_Parms ServerViewPrevPlayer_Parms;
	ServerViewPrevPlayer_Parms.bFriendlyOnly = bFriendlyOnly;

	this->ProcessEvent ( pFnServerViewPrevPlayer, &ServerViewPrevPlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerViewNextPlayer
// [0x00224042] 
// Parameters infos:
// unsigned long                  bFriendlyOnly                  ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerViewNextPlayer ( unsigned long bFriendlyOnly )
{
	static UFunction* pFnServerViewNextPlayer = NULL;

	if ( ! pFnServerViewNextPlayer )
		pFnServerViewNextPlayer = (UFunction*) UObject::GObjObjects()->Data[ 45387 ];

	ATgPlayerController_execServerViewNextPlayer_Parms ServerViewNextPlayer_Parms;
	ServerViewNextPlayer_Parms.bFriendlyOnly = bFriendlyOnly;

	this->ProcessEvent ( pFnServerViewNextPlayer, &ServerViewNextPlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetFOVAngle
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPlayerController::eventGetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 45383 ];

	ATgPlayerController_eventGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.BlendRot
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )
// int                            BlendC                         ( CPF_Parm )
// int                            NewC                           ( CPF_Parm )

int ATgPlayerController::BlendRot ( float DeltaTime, int BlendC, int NewC )
{
	static UFunction* pFnBlendRot = NULL;

	if ( ! pFnBlendRot )
		pFnBlendRot = (UFunction*) UObject::GObjObjects()->Data[ 45378 ];

	ATgPlayerController_execBlendRot_Parms BlendRot_Parms;
	BlendRot_Parms.DeltaTime = DeltaTime;
	BlendRot_Parms.BlendC = BlendC;
	BlendRot_Parms.NewC = NewC;

	this->ProcessEvent ( pFnBlendRot, &BlendRot_Parms, NULL );

	return BlendRot_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ClientEnterStartState
// [0x010201C2] 
// Parameters infos:

void ATgPlayerController::ClientEnterStartState ( )
{
	static UFunction* pFnClientEnterStartState = NULL;

	if ( ! pFnClientEnterStartState )
		pFnClientEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 45377 ];

	ATgPlayerController_execClientEnterStartState_Parms ClientEnterStartState_Parms;

	this->ProcessEvent ( pFnClientEnterStartState, &ClientEnterStartState_Parms, NULL );
};

// Function TgGame.TgPlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 45376 ];

	ATgPlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShortServerMove
// [0x002200C2] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  NewFlags                       ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void ATgPlayerController::ShortServerMove ( float TimeStamp, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnShortServerMove = NULL;

	if ( ! pFnShortServerMove )
		pFnShortServerMove = (UFunction*) UObject::GObjObjects()->Data[ 45347 ];

	ATgPlayerController_execShortServerMove_Parms ShortServerMove_Parms;
	ShortServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &ShortServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	ShortServerMove_Parms.NewFlags = NewFlags;
	ShortServerMove_Parms.ClientRoll = ClientRoll;
	ShortServerMove_Parms.View = View;

	this->ProcessEvent ( pFnShortServerMove, &ShortServerMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.CallServerMove
// [0x00820002] 
// Parameters infos:
// class USavedMove*              NewMove                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )
// class USavedMove*              OldMove                        ( CPF_Parm )

void ATgPlayerController::CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove )
{
	static UFunction* pFnCallServerMove = NULL;

	if ( ! pFnCallServerMove )
		pFnCallServerMove = (UFunction*) UObject::GObjObjects()->Data[ 45335 ];

	ATgPlayerController_execCallServerMove_Parms CallServerMove_Parms;
	CallServerMove_Parms.NewMove = NewMove;
	memcpy ( &CallServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	CallServerMove_Parms.ClientRoll = ClientRoll;
	CallServerMove_Parms.View = View;
	CallServerMove_Parms.OldMove = OldMove;

	this->ProcessEvent ( pFnCallServerMove, &CallServerMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.RMServerMove
// [0x002200C2] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 InAccel                        ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )
// unsigned char                  MoveFlags                      ( CPF_Parm )
// unsigned char                  ClientRoll                     ( CPF_Parm )
// int                            View                           ( CPF_Parm )

void ATgPlayerController::RMServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View )
{
	static UFunction* pFnRMServerMove = NULL;

	if ( ! pFnRMServerMove )
		pFnRMServerMove = (UFunction*) UObject::GObjObjects()->Data[ 45328 ];

	ATgPlayerController_execRMServerMove_Parms RMServerMove_Parms;
	RMServerMove_Parms.TimeStamp = TimeStamp;
	memcpy ( &RMServerMove_Parms.InAccel, &InAccel, 0xC );
	memcpy ( &RMServerMove_Parms.ClientLoc, &ClientLoc, 0xC );
	RMServerMove_Parms.MoveFlags = MoveFlags;
	RMServerMove_Parms.ClientRoll = ClientRoll;
	RMServerMove_Parms.View = View;

	this->ProcessEvent ( pFnRMServerMove, &RMServerMove_Parms, NULL );
};

// Function TgGame.TgPlayerController.ViewShake
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = (UFunction*) UObject::GObjObjects()->Data[ 45326 ];

	ATgPlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.UpdateShakeRotComponent
// [0x00420002] 
// Parameters infos:
// float                          Time                           ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// float                          Max                            ( CPF_Parm | CPF_OutParm )
// int                            Current                        ( CPF_Parm | CPF_OutParm )
// float                          Rate                           ( CPF_Parm | CPF_OutParm )

void ATgPlayerController::UpdateShakeRotComponent ( float Time, float DeltaTime, float* Max, int* Current, float* Rate )
{
	static UFunction* pFnUpdateShakeRotComponent = NULL;

	if ( ! pFnUpdateShakeRotComponent )
		pFnUpdateShakeRotComponent = (UFunction*) UObject::GObjObjects()->Data[ 45319 ];

	ATgPlayerController_execUpdateShakeRotComponent_Parms UpdateShakeRotComponent_Parms;
	UpdateShakeRotComponent_Parms.Time = Time;
	UpdateShakeRotComponent_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateShakeRotComponent, &UpdateShakeRotComponent_Parms, NULL );

	if ( Max )
		*Max = UpdateShakeRotComponent_Parms.Max;

	if ( Current )
		*Current = UpdateShakeRotComponent_Parms.Current;

	if ( Rate )
		*Rate = UpdateShakeRotComponent_Parms.Rate;
};

// Function TgGame.TgPlayerController.CheckShake
// [0x00420002] 
// Parameters infos:
// float                          Time                           ( CPF_Parm )
// float                          MaxOffset                      ( CPF_Parm | CPF_OutParm )
// float                          Offset                         ( CPF_Parm | CPF_OutParm )
// float                          Rate                           ( CPF_Parm | CPF_OutParm )

void ATgPlayerController::CheckShake ( float Time, float* MaxOffset, float* Offset, float* Rate )
{
	static UFunction* pFnCheckShake = NULL;

	if ( ! pFnCheckShake )
		pFnCheckShake = (UFunction*) UObject::GObjObjects()->Data[ 45314 ];

	ATgPlayerController_execCheckShake_Parms CheckShake_Parms;
	CheckShake_Parms.Time = Time;

	this->ProcessEvent ( pFnCheckShake, &CheckShake_Parms, NULL );

	if ( MaxOffset )
		*MaxOffset = CheckShake_Parms.MaxOffset;

	if ( Offset )
		*Offset = CheckShake_Parms.Offset;

	if ( Rate )
		*Rate = CheckShake_Parms.Rate;
};

// Function TgGame.TgPlayerController.StopViewShaking
// [0x00820002] 
// Parameters infos:

void ATgPlayerController::StopViewShaking ( )
{
	static UFunction* pFnStopViewShaking = NULL;

	if ( ! pFnStopViewShaking )
		pFnStopViewShaking = (UFunction*) UObject::GObjObjects()->Data[ 45312 ];

	ATgPlayerController_execStopViewShaking_Parms StopViewShaking_Parms;

	this->ProcessEvent ( pFnStopViewShaking, &StopViewShaking_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnCameraShake
// [0x00020002] 
// Parameters infos:
// class UTgSeqAct_CameraShake*   ShakeAction                    ( CPF_Parm )

void ATgPlayerController::OnCameraShake ( class UTgSeqAct_CameraShake* ShakeAction )
{
	static UFunction* pFnOnCameraShake = NULL;

	if ( ! pFnOnCameraShake )
		pFnOnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 45308 ];

	ATgPlayerController_execOnCameraShake_Parms OnCameraShake_Parms;
	OnCameraShake_Parms.ShakeAction = ShakeAction;

	this->ProcessEvent ( pFnOnCameraShake, &OnCameraShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestCameraShake
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// float                          newLocAmplitude                ( CPF_Parm )

void ATgPlayerController::TestCameraShake ( float Duration, float newLocAmplitude )
{
	static UFunction* pFnTestCameraShake = NULL;

	if ( ! pFnTestCameraShake )
		pFnTestCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 45304 ];

	ATgPlayerController_execTestCameraShake_Parms TestCameraShake_Parms;
	TestCameraShake_Parms.Duration = Duration;
	TestCameraShake_Parms.newLocAmplitude = newLocAmplitude;

	this->ProcessEvent ( pFnTestCameraShake, &TestCameraShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.ShakeView
// [0x00020002] 
// Parameters infos:
// struct FViewShakeInfo          NewViewShake                   ( CPF_Parm )

void ATgPlayerController::ShakeView ( struct FViewShakeInfo NewViewShake )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = (UFunction*) UObject::GObjObjects()->Data[ 45302 ];

	ATgPlayerController_execShakeView_Parms ShakeView_Parms;
	memcpy ( &ShakeView_Parms.NewViewShake, &NewViewShake, 0x38 );

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function TgGame.TgPlayerController.CameraShake
// [0x00820002] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )

void ATgPlayerController::CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency )
{
	static UFunction* pFnCameraShake = NULL;

	if ( ! pFnCameraShake )
		pFnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 45293 ];

	ATgPlayerController_execCameraShake_Parms CameraShake_Parms;
	CameraShake_Parms.Duration = Duration;
	memcpy ( &CameraShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &CameraShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	CameraShake_Parms.newFOVAmplitude = newFOVAmplitude;
	CameraShake_Parms.newFOVFrequency = newFOVFrequency;

	this->ProcessEvent ( pFnCameraShake, &CameraShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.SkyDiveShake
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::SkyDiveShake ( )
{
	static UFunction* pFnSkyDiveShake = NULL;

	if ( ! pFnSkyDiveShake )
		pFnSkyDiveShake = (UFunction*) UObject::GObjObjects()->Data[ 45292 ];

	ATgPlayerController_execSkyDiveShake_Parms SkyDiveShake_Parms;

	this->ProcessEvent ( pFnSkyDiveShake, &SkyDiveShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.WeaponShake
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// int                            Intensity                      ( CPF_Parm )

void ATgPlayerController::WeaponShake ( int Intensity )
{
	static UFunction* pFnWeaponShake = NULL;

	if ( ! pFnWeaponShake )
		pFnWeaponShake = (UFunction*) UObject::GObjObjects()->Data[ 45289 ];

	ATgPlayerController_execWeaponShake_Parms WeaponShake_Parms;
	WeaponShake_Parms.Intensity = Intensity;

	this->ProcessEvent ( pFnWeaponShake, &WeaponShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.DamageShake
// [0x00820002] 
// Parameters infos:
// int                            Damage                         ( CPF_Parm )

void ATgPlayerController::DamageShake ( int Damage )
{
	static UFunction* pFnDamageShake = NULL;

	if ( ! pFnDamageShake )
		pFnDamageShake = (UFunction*) UObject::GObjObjects()->Data[ 45286 ];

	ATgPlayerController_execDamageShake_Parms DamageShake_Parms;
	DamageShake_Parms.Damage = Damage;

	this->ProcessEvent ( pFnDamageShake, &DamageShake_Parms, NULL );
};

// Function TgGame.TgPlayerController.AllowVoiceMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MessageType                    ( CPF_Parm )

bool ATgPlayerController::AllowVoiceMessage ( struct FName MessageType )
{
	static UFunction* pFnAllowVoiceMessage = NULL;

	if ( ! pFnAllowVoiceMessage )
		pFnAllowVoiceMessage = (UFunction*) UObject::GObjObjects()->Data[ 45283 ];

	ATgPlayerController_execAllowVoiceMessage_Parms AllowVoiceMessage_Parms;
	memcpy ( &AllowVoiceMessage_Parms.MessageType, &MessageType, 0x8 );

	this->ProcessEvent ( pFnAllowVoiceMessage, &AllowVoiceMessage_Parms, NULL );

	return AllowVoiceMessage_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.PlayAnnouncement
// [0x00020002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

void ATgPlayerController::PlayAnnouncement ( class UClass* InMessageClass, unsigned char m_byMessageIndex )
{
	static UFunction* pFnPlayAnnouncement = NULL;

	if ( ! pFnPlayAnnouncement )
		pFnPlayAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 45280 ];

	ATgPlayerController_execPlayAnnouncement_Parms PlayAnnouncement_Parms;
	PlayAnnouncement_Parms.InMessageClass = InMessageClass;
	PlayAnnouncement_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnPlayAnnouncement, &PlayAnnouncement_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientPlayAnnouncement
// [0x01020142] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

void ATgPlayerController::ClientPlayAnnouncement ( class UClass* InMessageClass, unsigned char m_byMessageIndex )
{
	static UFunction* pFnClientPlayAnnouncement = NULL;

	if ( ! pFnClientPlayAnnouncement )
		pFnClientPlayAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 45277 ];

	ATgPlayerController_execClientPlayAnnouncement_Parms ClientPlayAnnouncement_Parms;
	ClientPlayAnnouncement_Parms.InMessageClass = InMessageClass;
	ClientPlayAnnouncement_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnClientPlayAnnouncement, &ClientPlayAnnouncement_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )
// class UClass*                  newScoringType                 ( CPF_Parm )

void ATgPlayerController::ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = (UFunction*) UObject::GObjObjects()->Data[ 45273 ];

	ATgPlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;
	ClientSetHUD_Parms.newScoringType = newScoringType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function TgGame.TgPlayerController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 POVLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                POVRotation                    ( CPF_Parm | CPF_OutParm )

void ATgPlayerController::eventGetPlayerViewPoint ( struct FVector* POVLocation, struct FRotator* POVRotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 45270 ];

	ATgPlayerController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( POVLocation )
		memcpy ( POVLocation, &GetPlayerViewPoint_Parms.POVLocation, 0xC );

	if ( POVRotation )
		memcpy ( POVRotation, &GetPlayerViewPoint_Parms.POVRotation, 0xC );
};

// Function TgGame.TgPlayerController.CreatePlayerCamera
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventCreatePlayerCamera ( )
{
	static UFunction* pFnCreatePlayerCamera = NULL;

	if ( ! pFnCreatePlayerCamera )
		pFnCreatePlayerCamera = (UFunction*) UObject::GObjObjects()->Data[ 45269 ];

	ATgPlayerController_eventCreatePlayerCamera_Parms CreatePlayerCamera_Parms;

	this->ProcessEvent ( pFnCreatePlayerCamera, &CreatePlayerCamera_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetRadius
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )

void ATgPlayerController::SetRadius ( float NewRadius )
{
	static UFunction* pFnSetRadius = NULL;

	if ( ! pFnSetRadius )
		pFnSetRadius = (UFunction*) UObject::GObjObjects()->Data[ 45267 ];

	ATgPlayerController_execSetRadius_Parms SetRadius_Parms;
	SetRadius_Parms.NewRadius = NewRadius;

	this->ProcessEvent ( pFnSetRadius, &SetRadius_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientReset
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = (UFunction*) UObject::GObjObjects()->Data[ 45266 ];

	ATgPlayerController_eventClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function TgGame.TgPlayerController.Reset
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 45265 ];

	ATgPlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )

void ATgPlayerController::ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 45260 ];

	ATgPlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;
	ClientSetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void ATgPlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 45251 ];

	ATgPlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnToggleCinematicMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleCinematicMode* Action                         ( CPF_Parm )

void ATgPlayerController::OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action )
{
	static UFunction* pFnOnToggleCinematicMode = NULL;

	if ( ! pFnOnToggleCinematicMode )
		pFnOnToggleCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 45248 ];

	ATgPlayerController_execOnToggleCinematicMode_Parms OnToggleCinematicMode_Parms;
	OnToggleCinematicMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleCinematicMode, &OnToggleCinematicMode_Parms, NULL );
};

// Function TgGame.TgPlayerController.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ATgPlayerController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 45241 ];

	ATgPlayerController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function TgGame.TgPlayerController.ReviveTimer
// [0x00020000] 
// Parameters infos:

void ATgPlayerController::ReviveTimer ( )
{
	static UFunction* pFnReviveTimer = NULL;

	if ( ! pFnReviveTimer )
		pFnReviveTimer = (UFunction*) UObject::GObjObjects()->Data[ 45182 ];

	ATgPlayerController_execReviveTimer_Parms ReviveTimer_Parms;

	this->ProcessEvent ( pFnReviveTimer, &ReviveTimer_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetState
// [0x010201C2] 
// Parameters infos:

void ATgPlayerController::SetState ( )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 45181 ];

	ATgPlayerController_execSetState_Parms SetState_Parms;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );
};

// Function TgGame.TgPlayerController.EndDeathZoom
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::EndDeathZoom ( )
{
	static UFunction* pFnEndDeathZoom = NULL;

	if ( ! pFnEndDeathZoom )
		pFnEndDeathZoom = (UFunction*) UObject::GObjObjects()->Data[ 45180 ];

	ATgPlayerController_execEndDeathZoom_Parms EndDeathZoom_Parms;

	this->ProcessEvent ( pFnEndDeathZoom, &EndDeathZoom_Parms, NULL );
};

// Function TgGame.TgPlayerController.DeathZoomTimerCallback
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::DeathZoomTimerCallback ( )
{
	static UFunction* pFnDeathZoomTimerCallback = NULL;

	if ( ! pFnDeathZoomTimerCallback )
		pFnDeathZoomTimerCallback = (UFunction*) UObject::GObjObjects()->Data[ 45179 ];

	ATgPlayerController_execDeathZoomTimerCallback_Parms DeathZoomTimerCallback_Parms;

	this->ProcessEvent ( pFnDeathZoomTimerCallback, &DeathZoomTimerCallback_Parms, NULL );
};

// Function TgGame.TgPlayerController.RequestRelease
// [0x00024302] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::RequestRelease ( unsigned long bOverride )
{
	static UFunction* pFnRequestRelease = NULL;

	if ( ! pFnRequestRelease )
		pFnRequestRelease = (UFunction*) UObject::GObjObjects()->Data[ 45177 ];

	ATgPlayerController_execRequestRelease_Parms RequestRelease_Parms;
	RequestRelease_Parms.bOverride = bOverride;

	this->ProcessEvent ( pFnRequestRelease, &RequestRelease_Parms, NULL );
};

// Function TgGame.TgPlayerController.Release
// [0x002240C2] 
// Parameters infos:
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::Release ( unsigned long bOverride )
{
	static UFunction* pFnRelease = NULL;

	if ( ! pFnRelease )
		pFnRelease = (UFunction*) UObject::GObjObjects()->Data[ 45175 ];

	ATgPlayerController_execRelease_Parms Release_Parms;
	Release_Parms.bOverride = bOverride;

	this->ProcessEvent ( pFnRelease, &Release_Parms, NULL );
};

// Function TgGame.TgPlayerController.Revive
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventRevive ( )
{
	static UFunction* pFnRevive = NULL;

	if ( ! pFnRevive )
		pFnRevive = (UFunction*) UObject::GObjObjects()->Data[ 45174 ];

	ATgPlayerController_eventRevive_Parms Revive_Parms;

	this->ProcessEvent ( pFnRevive, &Revive_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerGotoPlayerPauseState
// [0x002200C2] 
// Parameters infos:
// float                          PauseTime                      ( CPF_Parm )

void ATgPlayerController::ServerGotoPlayerPauseState ( float PauseTime )
{
	static UFunction* pFnServerGotoPlayerPauseState = NULL;

	if ( ! pFnServerGotoPlayerPauseState )
		pFnServerGotoPlayerPauseState = (UFunction*) UObject::GObjObjects()->Data[ 45172 ];

	ATgPlayerController_execServerGotoPlayerPauseState_Parms ServerGotoPlayerPauseState_Parms;
	ServerGotoPlayerPauseState_Parms.PauseTime = PauseTime;

	this->ProcessEvent ( pFnServerGotoPlayerPauseState, &ServerGotoPlayerPauseState_Parms, NULL );
};

// Function TgGame.TgPlayerController.GotoPlayerPauseState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          PauseTime                      ( CPF_Parm )

void ATgPlayerController::GotoPlayerPauseState ( float PauseTime )
{
	static UFunction* pFnGotoPlayerPauseState = NULL;

	if ( ! pFnGotoPlayerPauseState )
		pFnGotoPlayerPauseState = (UFunction*) UObject::GObjObjects()->Data[ 45170 ];

	ATgPlayerController_execGotoPlayerPauseState_Parms GotoPlayerPauseState_Parms;
	GotoPlayerPauseState_Parms.PauseTime = PauseTime;

	this->ProcessEvent ( pFnGotoPlayerPauseState, &GotoPlayerPauseState_Parms, NULL );
};

// Function TgGame.TgPlayerController.DisarmGrapple
// [0x00820002] 
// Parameters infos:
// unsigned long                  bDismount                      ( CPF_Parm )

void ATgPlayerController::DisarmGrapple ( unsigned long bDismount )
{
	static UFunction* pFnDisarmGrapple = NULL;

	if ( ! pFnDisarmGrapple )
		pFnDisarmGrapple = (UFunction*) UObject::GObjObjects()->Data[ 45145 ];

	ATgPlayerController_execDisarmGrapple_Parms DisarmGrapple_Parms;
	DisarmGrapple_Parms.bDismount = bDismount;

	this->ProcessEvent ( pFnDisarmGrapple, &DisarmGrapple_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerDisarmGrapple
// [0x00A200C2] 
// Parameters infos:
// unsigned long                  bDismount                      ( CPF_Parm )

void ATgPlayerController::ServerDisarmGrapple ( unsigned long bDismount )
{
	static UFunction* pFnServerDisarmGrapple = NULL;

	if ( ! pFnServerDisarmGrapple )
		pFnServerDisarmGrapple = (UFunction*) UObject::GObjObjects()->Data[ 45142 ];

	ATgPlayerController_execServerDisarmGrapple_Parms ServerDisarmGrapple_Parms;
	ServerDisarmGrapple_Parms.bDismount = bDismount;

	this->ProcessEvent ( pFnServerDisarmGrapple, &ServerDisarmGrapple_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetAutoGrappling
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ServerSetAutoGrappling ( unsigned long bOn )
{
	static UFunction* pFnServerSetAutoGrappling = NULL;

	if ( ! pFnServerSetAutoGrappling )
		pFnServerSetAutoGrappling = (UFunction*) UObject::GObjObjects()->Data[ 45140 ];

	ATgPlayerController_execServerSetAutoGrappling_Parms ServerSetAutoGrappling_Parms;
	ServerSetAutoGrappling_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerSetAutoGrappling, &ServerSetAutoGrappling_Parms, NULL );
};

// Function TgGame.TgPlayerController.LadderLetGo
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::LadderLetGo ( )
{
	static UFunction* pFnLadderLetGo = NULL;

	if ( ! pFnLadderLetGo )
		pFnLadderLetGo = (UFunction*) UObject::GObjObjects()->Data[ 45086 ];

	ATgPlayerController_execLadderLetGo_Parms LadderLetGo_Parms;

	this->ProcessEvent ( pFnLadderLetGo, &LadderLetGo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerLadderLetGo
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerLadderLetGo ( )
{
	static UFunction* pFnServerLadderLetGo = NULL;

	if ( ! pFnServerLadderLetGo )
		pFnServerLadderLetGo = (UFunction*) UObject::GObjObjects()->Data[ 45085 ];

	ATgPlayerController_execServerLadderLetGo_Parms ServerLadderLetGo_Parms;

	this->ProcessEvent ( pFnServerLadderLetGo, &ServerLadderLetGo_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerHangingLetGo
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerHangingLetGo ( )
{
	static UFunction* pFnServerHangingLetGo = NULL;

	if ( ! pFnServerHangingLetGo )
		pFnServerHangingLetGo = (UFunction*) UObject::GObjObjects()->Data[ 45055 ];

	ATgPlayerController_execServerHangingLetGo_Parms ServerHangingLetGo_Parms;

	this->ProcessEvent ( pFnServerHangingLetGo, &ServerHangingLetGo_Parms, NULL );
};

// Function TgGame.TgPlayerController.PressFreeCam
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::PressFreeCam ( unsigned long bOn )
{
	static UFunction* pFnPressFreeCam = NULL;

	if ( ! pFnPressFreeCam )
		pFnPressFreeCam = (UFunction*) UObject::GObjObjects()->Data[ 44980 ];

	ATgPlayerController_execPressFreeCam_Parms PressFreeCam_Parms;
	PressFreeCam_Parms.bOn = bOn;

	this->ProcessEvent ( pFnPressFreeCam, &PressFreeCam_Parms, NULL );
};

// Function TgGame.TgPlayerController.RestartPlayerOnTransfer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventRestartPlayerOnTransfer ( )
{
	static UFunction* pFnRestartPlayerOnTransfer = NULL;

	if ( ! pFnRestartPlayerOnTransfer )
		pFnRestartPlayerOnTransfer = (UFunction*) UObject::GObjObjects()->Data[ 44979 ];

	ATgPlayerController_eventRestartPlayerOnTransfer_Parms RestartPlayerOnTransfer_Parms;

	this->ProcessEvent ( pFnRestartPlayerOnTransfer, &RestartPlayerOnTransfer_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelActiveCombat
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::CancelActiveCombat ( )
{
	static UFunction* pFnCancelActiveCombat = NULL;

	if ( ! pFnCancelActiveCombat )
		pFnCancelActiveCombat = (UFunction*) UObject::GObjObjects()->Data[ 44978 ];

	ATgPlayerController_execCancelActiveCombat_Parms CancelActiveCombat_Parms;

	this->ProcessEvent ( pFnCancelActiveCombat, &CancelActiveCombat_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyActiveCombat
// [0x00024102] 
// Parameters infos:
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::NotifyActiveCombat ( int nParam )
{
	static UFunction* pFnNotifyActiveCombat = NULL;

	if ( ! pFnNotifyActiveCombat )
		pFnNotifyActiveCombat = (UFunction*) UObject::GObjObjects()->Data[ 44976 ];

	ATgPlayerController_execNotifyActiveCombat_Parms NotifyActiveCombat_Parms;
	NotifyActiveCombat_Parms.nParam = nParam;

	this->ProcessEvent ( pFnNotifyActiveCombat, &NotifyActiveCombat_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelBeingDetected
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::CancelBeingDetected ( )
{
	static UFunction* pFnCancelBeingDetected = NULL;

	if ( ! pFnCancelBeingDetected )
		pFnCancelBeingDetected = (UFunction*) UObject::GObjObjects()->Data[ 44975 ];

	ATgPlayerController_execCancelBeingDetected_Parms CancelBeingDetected_Parms;

	this->ProcessEvent ( pFnCancelBeingDetected, &CancelBeingDetected_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyBeingDetected
// [0x00024102] 
// Parameters infos:
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::NotifyBeingDetected ( int nParam )
{
	static UFunction* pFnNotifyBeingDetected = NULL;

	if ( ! pFnNotifyBeingDetected )
		pFnNotifyBeingDetected = (UFunction*) UObject::GObjObjects()->Data[ 44973 ];

	ATgPlayerController_execNotifyBeingDetected_Parms NotifyBeingDetected_Parms;
	NotifyBeingDetected_Parms.nParam = nParam;

	this->ProcessEvent ( pFnNotifyBeingDetected, &NotifyBeingDetected_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelBeingTargeted
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::CancelBeingTargeted ( )
{
	static UFunction* pFnCancelBeingTargeted = NULL;

	if ( ! pFnCancelBeingTargeted )
		pFnCancelBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 44972 ];

	ATgPlayerController_execCancelBeingTargeted_Parms CancelBeingTargeted_Parms;

	this->ProcessEvent ( pFnCancelBeingTargeted, &CancelBeingTargeted_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyBeingTargeted
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::NotifyBeingTargeted ( )
{
	static UFunction* pFnNotifyBeingTargeted = NULL;

	if ( ! pFnNotifyBeingTargeted )
		pFnNotifyBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 44971 ];

	ATgPlayerController_execNotifyBeingTargeted_Parms NotifyBeingTargeted_Parms;

	this->ProcessEvent ( pFnNotifyBeingTargeted, &NotifyBeingTargeted_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelInBombRange
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::CancelInBombRange ( )
{
	static UFunction* pFnCancelInBombRange = NULL;

	if ( ! pFnCancelInBombRange )
		pFnCancelInBombRange = (UFunction*) UObject::GObjObjects()->Data[ 44970 ];

	ATgPlayerController_execCancelInBombRange_Parms CancelInBombRange_Parms;

	this->ProcessEvent ( pFnCancelInBombRange, &CancelInBombRange_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyInBombRange
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::NotifyInBombRange ( )
{
	static UFunction* pFnNotifyInBombRange = NULL;

	if ( ! pFnNotifyInBombRange )
		pFnNotifyInBombRange = (UFunction*) UObject::GObjObjects()->Data[ 44969 ];

	ATgPlayerController_execNotifyInBombRange_Parms NotifyInBombRange_Parms;

	this->ProcessEvent ( pFnNotifyInBombRange, &NotifyInBombRange_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelBeingLocked
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::CancelBeingLocked ( )
{
	static UFunction* pFnCancelBeingLocked = NULL;

	if ( ! pFnCancelBeingLocked )
		pFnCancelBeingLocked = (UFunction*) UObject::GObjObjects()->Data[ 44968 ];

	ATgPlayerController_execCancelBeingLocked_Parms CancelBeingLocked_Parms;

	this->ProcessEvent ( pFnCancelBeingLocked, &CancelBeingLocked_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyBeingLocked
// [0x00020102] 
// Parameters infos:

void ATgPlayerController::NotifyBeingLocked ( )
{
	static UFunction* pFnNotifyBeingLocked = NULL;

	if ( ! pFnNotifyBeingLocked )
		pFnNotifyBeingLocked = (UFunction*) UObject::GObjObjects()->Data[ 44967 ];

	ATgPlayerController_execNotifyBeingLocked_Parms NotifyBeingLocked_Parms;

	this->ProcessEvent ( pFnNotifyBeingLocked, &NotifyBeingLocked_Parms, NULL );
};

// Function TgGame.TgPlayerController.CancelBodyUnderAttack
// [0x00020000] 
// Parameters infos:

void ATgPlayerController::CancelBodyUnderAttack ( )
{
	static UFunction* pFnCancelBodyUnderAttack = NULL;

	if ( ! pFnCancelBodyUnderAttack )
		pFnCancelBodyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 44966 ];

	ATgPlayerController_execCancelBodyUnderAttack_Parms CancelBodyUnderAttack_Parms;

	this->ProcessEvent ( pFnCancelBodyUnderAttack, &CancelBodyUnderAttack_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientNotifyBodyUnderAttack
// [0x010201C0] 
// Parameters infos:
// unsigned char                  Damage                         ( CPF_Parm )

void ATgPlayerController::ClientNotifyBodyUnderAttack ( unsigned char Damage )
{
	static UFunction* pFnClientNotifyBodyUnderAttack = NULL;

	if ( ! pFnClientNotifyBodyUnderAttack )
		pFnClientNotifyBodyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 44964 ];

	ATgPlayerController_execClientNotifyBodyUnderAttack_Parms ClientNotifyBodyUnderAttack_Parms;
	ClientNotifyBodyUnderAttack_Parms.Damage = Damage;

	this->ProcessEvent ( pFnClientNotifyBodyUnderAttack, &ClientNotifyBodyUnderAttack_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyBodyUnderAttack
// [0x00020000] 
// Parameters infos:
// unsigned char                  Damage                         ( CPF_Parm )

void ATgPlayerController::NotifyBodyUnderAttack ( unsigned char Damage )
{
	static UFunction* pFnNotifyBodyUnderAttack = NULL;

	if ( ! pFnNotifyBodyUnderAttack )
		pFnNotifyBodyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 44962 ];

	ATgPlayerController_execNotifyBodyUnderAttack_Parms NotifyBodyUnderAttack_Parms;
	NotifyBodyUnderAttack_Parms.Damage = Damage;

	this->ProcessEvent ( pFnNotifyBodyUnderAttack, &NotifyBodyUnderAttack_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientPlayTakeHit
// [0x01020142] 
// Parameters infos:
// struct FVector                 HitLoc                         ( CPF_Parm )
// unsigned char                  Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ATgPlayerController::ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType )
{
	static UFunction* pFnClientPlayTakeHit = NULL;

	if ( ! pFnClientPlayTakeHit )
		pFnClientPlayTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 44958 ];

	ATgPlayerController_execClientPlayTakeHit_Parms ClientPlayTakeHit_Parms;
	memcpy ( &ClientPlayTakeHit_Parms.HitLoc, &HitLoc, 0xC );
	ClientPlayTakeHit_Parms.Damage = Damage;
	ClientPlayTakeHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnClientPlayTakeHit, &ClientPlayTakeHit_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ATgPlayerController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 44951 ];

	ATgPlayerController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function TgGame.TgPlayerController.NotifyChangedWeapon
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 PreviousWeapon                 ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void ATgPlayerController::NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 44948 ];

	ATgPlayerController_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PreviousWeapon = PreviousWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function TgGame.TgPlayerController.AcknowledgePossession
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ATgPlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 44946 ];

	ATgPlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function TgGame.TgPlayerController.PreRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void ATgPlayerController::eventPreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = (UFunction*) UObject::GObjObjects()->Data[ 44944 ];

	ATgPlayerController_eventPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function TgGame.TgPlayerController.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 44941 ];

	ATgPlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerAssignTarget
// [0x002200C2] 
// Parameters infos:
// class ATgPawn*                 TargetPawn                     ( CPF_Parm )

void ATgPlayerController::ServerAssignTarget ( class ATgPawn* TargetPawn )
{
	static UFunction* pFnServerAssignTarget = NULL;

	if ( ! pFnServerAssignTarget )
		pFnServerAssignTarget = (UFunction*) UObject::GObjObjects()->Data[ 44939 ];

	ATgPlayerController_execServerAssignTarget_Parms ServerAssignTarget_Parms;
	ServerAssignTarget_Parms.TargetPawn = TargetPawn;

	this->ProcessEvent ( pFnServerAssignTarget, &ServerAssignTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.PressJump
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::PressJump ( unsigned long bOn )
{
	static UFunction* pFnPressJump = NULL;

	if ( ! pFnPressJump )
		pFnPressJump = (UFunction*) UObject::GObjObjects()->Data[ 44934 ];

	ATgPlayerController_execPressJump_Parms PressJump_Parms;
	PressJump_Parms.bOn = bOn;

	this->ProcessEvent ( pFnPressJump, &PressJump_Parms, NULL );
};

// Function TgGame.TgPlayerController.StartJetpack
// [0x00020002] 
// Parameters infos:

void ATgPlayerController::StartJetpack ( )
{
	static UFunction* pFnStartJetpack = NULL;

	if ( ! pFnStartJetpack )
		pFnStartJetpack = (UFunction*) UObject::GObjObjects()->Data[ 44932 ];

	ATgPlayerController_execStartJetpack_Parms StartJetpack_Parms;

	this->ProcessEvent ( pFnStartJetpack, &StartJetpack_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetDeviceSlotAndMode
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eqPoint                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )

int ATgPlayerController::SetDeviceSlotAndMode ( unsigned char eqPoint, int nMode )
{
	static UFunction* pFnSetDeviceSlotAndMode = NULL;

	if ( ! pFnSetDeviceSlotAndMode )
		pFnSetDeviceSlotAndMode = (UFunction*) UObject::GObjObjects()->Data[ 44926 ];

	ATgPlayerController_execSetDeviceSlotAndMode_Parms SetDeviceSlotAndMode_Parms;
	SetDeviceSlotAndMode_Parms.eqPoint = eqPoint;
	SetDeviceSlotAndMode_Parms.nMode = nMode;

	this->ProcessEvent ( pFnSetDeviceSlotAndMode, &SetDeviceSlotAndMode_Parms, NULL );

	return SetDeviceSlotAndMode_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerPickupPutdownDeployable
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerPickupPutdownDeployable ( )
{
	static UFunction* pFnServerPickupPutdownDeployable = NULL;

	if ( ! pFnServerPickupPutdownDeployable )
		pFnServerPickupPutdownDeployable = (UFunction*) UObject::GObjObjects()->Data[ 44924 ];

	ATgPlayerController_execServerPickupPutdownDeployable_Parms ServerPickupPutdownDeployable_Parms;

	this->ProcessEvent ( pFnServerPickupPutdownDeployable, &ServerPickupPutdownDeployable_Parms, NULL );
};

// Function TgGame.TgPlayerController.PickupPutdownDeployable
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::PickupPutdownDeployable ( )
{
	static UFunction* pFnPickupPutdownDeployable = NULL;

	if ( ! pFnPickupPutdownDeployable )
		pFnPickupPutdownDeployable = (UFunction*) UObject::GObjObjects()->Data[ 44923 ];

	ATgPlayerController_execPickupPutdownDeployable_Parms PickupPutdownDeployable_Parms;

	this->ProcessEvent ( pFnPickupPutdownDeployable, &PickupPutdownDeployable_Parms, NULL );
};

// Function TgGame.TgPlayerController.ChangeToPreviousWeapon
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::ChangeToPreviousWeapon ( )
{
	static UFunction* pFnChangeToPreviousWeapon = NULL;

	if ( ! pFnChangeToPreviousWeapon )
		pFnChangeToPreviousWeapon = (UFunction*) UObject::GObjObjects()->Data[ 44917 ];

	ATgPlayerController_execChangeToPreviousWeapon_Parms ChangeToPreviousWeapon_Parms;

	this->ProcessEvent ( pFnChangeToPreviousWeapon, &ChangeToPreviousWeapon_Parms, NULL );

	return ChangeToPreviousWeapon_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerProfiling
// [0x002200C2] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerProfiling ( struct FString Command )
{
	static UFunction* pFnServerProfiling = NULL;

	if ( ! pFnServerProfiling )
		pFnServerProfiling = (UFunction*) UObject::GObjObjects()->Data[ 44915 ];

	ATgPlayerController_execServerProfiling_Parms ServerProfiling_Parms;
	memcpy ( &ServerProfiling_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnServerProfiling, &ServerProfiling_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerProfileScript
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerProfileScript ( struct FString Command )
{
	static UFunction* pFnServerProfileScript = NULL;

	if ( ! pFnServerProfileScript )
		pFnServerProfileScript = (UFunction*) UObject::GObjObjects()->Data[ 44913 ];

	ATgPlayerController_execServerProfileScript_Parms ServerProfileScript_Parms;
	memcpy ( &ServerProfileScript_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnServerProfileScript, &ServerProfileScript_Parms, NULL );
};

// Function TgGame.TgPlayerController.FloatCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bFloatOn                       ( CPF_Parm )

void ATgPlayerController::FloatCamera ( unsigned long bFloatOn )
{
	static UFunction* pFnFloatCamera = NULL;

	if ( ! pFnFloatCamera )
		pFnFloatCamera = (UFunction*) UObject::GObjObjects()->Data[ 44911 ];

	ATgPlayerController_execFloatCamera_Parms FloatCamera_Parms;
	FloatCamera_Parms.bFloatOn = bFloatOn;

	this->ProcessEvent ( pFnFloatCamera, &FloatCamera_Parms, NULL );
};

// Function TgGame.TgPlayerController.SelfAlert
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// int                            nMsgId                         ( CPF_Parm )

void ATgPlayerController::SelfAlert ( int nPriority, float fDuration, int nMsgId )
{
	static UFunction* pFnSelfAlert = NULL;

	if ( ! pFnSelfAlert )
		pFnSelfAlert = (UFunction*) UObject::GObjObjects()->Data[ 44906 ];

	ATgPlayerController_execSelfAlert_Parms SelfAlert_Parms;
	SelfAlert_Parms.nPriority = nPriority;
	SelfAlert_Parms.fDuration = fDuration;
	SelfAlert_Parms.nMsgId = nMsgId;

	this->ProcessEvent ( pFnSelfAlert, &SelfAlert_Parms, NULL );
};

// Function TgGame.TgPlayerController.RemoveAlertScript
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nMsgId                         ( CPF_Parm )

void ATgPlayerController::RemoveAlertScript ( int nMsgId )
{
	static UFunction* pFnRemoveAlertScript = NULL;

	if ( ! pFnRemoveAlertScript )
		pFnRemoveAlertScript = (UFunction*) UObject::GObjObjects()->Data[ 44904 ];

	ATgPlayerController_execRemoveAlertScript_Parms RemoveAlertScript_Parms;
	RemoveAlertScript_Parms.nMsgId = nMsgId;

	pFnRemoveAlertScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAlertScript, &RemoveAlertScript_Parms, NULL );

	pFnRemoveAlertScript->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AddAlertScript
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Priority                       ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// int                            nMsgId                         ( CPF_Parm )
// unsigned long                  bBlockDuplicates               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestKeybinds               ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::AddAlertScript ( unsigned char Priority, unsigned char Type, float fDuration, int nMsgId, unsigned long bBlockDuplicates, unsigned long bRequestKeybinds )
{
	static UFunction* pFnAddAlertScript = NULL;

	if ( ! pFnAddAlertScript )
		pFnAddAlertScript = (UFunction*) UObject::GObjObjects()->Data[ 44897 ];

	ATgPlayerController_execAddAlertScript_Parms AddAlertScript_Parms;
	AddAlertScript_Parms.Priority = Priority;
	AddAlertScript_Parms.Type = Type;
	AddAlertScript_Parms.fDuration = fDuration;
	AddAlertScript_Parms.nMsgId = nMsgId;
	AddAlertScript_Parms.bBlockDuplicates = bBlockDuplicates;
	AddAlertScript_Parms.bRequestKeybinds = bRequestKeybinds;

	pFnAddAlertScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAlertScript, &AddAlertScript_Parms, NULL );

	pFnAddAlertScript->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetCamOption
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPlayerController::eventGetCamOption ( )
{
	static UFunction* pFnGetCamOption = NULL;

	if ( ! pFnGetCamOption )
		pFnGetCamOption = (UFunction*) UObject::GObjObjects()->Data[ 44895 ];

	ATgPlayerController_eventGetCamOption_Parms GetCamOption_Parms;

	this->ProcessEvent ( pFnGetCamOption, &GetCamOption_Parms, NULL );

	return GetCamOption_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CycleCamOption
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::CycleCamOption ( )
{
	static UFunction* pFnCycleCamOption = NULL;

	if ( ! pFnCycleCamOption )
		pFnCycleCamOption = (UFunction*) UObject::GObjObjects()->Data[ 44894 ];

	ATgPlayerController_execCycleCamOption_Parms CycleCamOption_Parms;

	this->ProcessEvent ( pFnCycleCamOption, &CycleCamOption_Parms, NULL );
};

// Function TgGame.TgPlayerController.CamOption
// [0x00024A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// unsigned long                  saveSetting                    ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::CamOption ( int X, unsigned long saveSetting )
{
	static UFunction* pFnCamOption = NULL;

	if ( ! pFnCamOption )
		pFnCamOption = (UFunction*) UObject::GObjObjects()->Data[ 44891 ];

	ATgPlayerController_execCamOption_Parms CamOption_Parms;
	CamOption_Parms.X = X;
	CamOption_Parms.saveSetting = saveSetting;

	this->ProcessEvent ( pFnCamOption, &CamOption_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCamOption
// [0x002200C2] 
// Parameters infos:
// int                            X                              ( CPF_Parm )

void ATgPlayerController::ServerCamOption ( int X )
{
	static UFunction* pFnServerCamOption = NULL;

	if ( ! pFnServerCamOption )
		pFnServerCamOption = (UFunction*) UObject::GObjObjects()->Data[ 44889 ];

	ATgPlayerController_execServerCamOption_Parms ServerCamOption_Parms;
	ServerCamOption_Parms.X = X;

	this->ProcessEvent ( pFnServerCamOption, &ServerCamOption_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientSetRotationAndDesired
// [0x010241C2] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// unsigned long                  bResetCamera                   ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ClientSetRotationAndDesired ( struct FRotator NewRotation, unsigned long bResetCamera )
{
	static UFunction* pFnClientSetRotationAndDesired = NULL;

	if ( ! pFnClientSetRotationAndDesired )
		pFnClientSetRotationAndDesired = (UFunction*) UObject::GObjObjects()->Data[ 44886 ];

	ATgPlayerController_execClientSetRotationAndDesired_Parms ClientSetRotationAndDesired_Parms;
	memcpy ( &ClientSetRotationAndDesired_Parms.NewRotation, &NewRotation, 0xC );
	ClientSetRotationAndDesired_Parms.bResetCamera = bResetCamera;

	this->ProcessEvent ( pFnClientSetRotationAndDesired, &ClientSetRotationAndDesired_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerReleasePet
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventServerReleasePet ( )
{
	static UFunction* pFnServerReleasePet = NULL;

	if ( ! pFnServerReleasePet )
		pFnServerReleasePet = (UFunction*) UObject::GObjObjects()->Data[ 44884 ];

	ATgPlayerController_eventServerReleasePet_Parms ServerReleasePet_Parms;

	this->ProcessEvent ( pFnServerReleasePet, &ServerReleasePet_Parms, NULL );
};

// Function TgGame.TgPlayerController.ControlPet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventControlPet ( )
{
	static UFunction* pFnControlPet = NULL;

	if ( ! pFnControlPet )
		pFnControlPet = (UFunction*) UObject::GObjObjects()->Data[ 44883 ];

	ATgPlayerController_eventControlPet_Parms ControlPet_Parms;

	this->ProcessEvent ( pFnControlPet, &ControlPet_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetHackingBotState
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsHacking                     ( CPF_Parm )

void ATgPlayerController::SetHackingBotState ( unsigned long bIsHacking )
{
	static UFunction* pFnSetHackingBotState = NULL;

	if ( ! pFnSetHackingBotState )
		pFnSetHackingBotState = (UFunction*) UObject::GObjObjects()->Data[ 44881 ];

	ATgPlayerController_execSetHackingBotState_Parms SetHackingBotState_Parms;
	SetHackingBotState_Parms.bIsHacking = bIsHacking;

	this->ProcessEvent ( pFnSetHackingBotState, &SetHackingBotState_Parms, NULL );
};

// Function TgGame.TgPlayerController.ReleaseHackedPet
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ReleaseHackedPet ( )
{
	static UFunction* pFnReleaseHackedPet = NULL;

	if ( ! pFnReleaseHackedPet )
		pFnReleaseHackedPet = (UFunction*) UObject::GObjObjects()->Data[ 44880 ];

	ATgPlayerController_execReleaseHackedPet_Parms ReleaseHackedPet_Parms;

	this->ProcessEvent ( pFnReleaseHackedPet, &ReleaseHackedPet_Parms, NULL );
};

// Function TgGame.TgPlayerController.LoadItemProfile
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nId                            ( CPF_Parm )

void ATgPlayerController::eventLoadItemProfile ( int nId )
{
	static UFunction* pFnLoadItemProfile = NULL;

	if ( ! pFnLoadItemProfile )
		pFnLoadItemProfile = (UFunction*) UObject::GObjObjects()->Data[ 44878 ];

	ATgPlayerController_eventLoadItemProfile_Parms LoadItemProfile_Parms;
	LoadItemProfile_Parms.nId = nId;

	this->ProcessEvent ( pFnLoadItemProfile, &LoadItemProfile_Parms, NULL );
};

// Function TgGame.TgPlayerController.AcceptNewProfileFromEquipScreen
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nProfileId                     ( CPF_Parm )
// struct FTGEQUIP_SLOTS_STRUCT   DeviceArray                    ( CPF_Parm )

void ATgPlayerController::eventAcceptNewProfileFromEquipScreen ( int nProfileId, struct FTGEQUIP_SLOTS_STRUCT DeviceArray )
{
	static UFunction* pFnAcceptNewProfileFromEquipScreen = NULL;

	if ( ! pFnAcceptNewProfileFromEquipScreen )
		pFnAcceptNewProfileFromEquipScreen = (UFunction*) UObject::GObjObjects()->Data[ 44875 ];

	ATgPlayerController_eventAcceptNewProfileFromEquipScreen_Parms AcceptNewProfileFromEquipScreen_Parms;
	AcceptNewProfileFromEquipScreen_Parms.nProfileId = nProfileId;
	memcpy ( &AcceptNewProfileFromEquipScreen_Parms.DeviceArray, &DeviceArray, 0xC8 );

	this->ProcessEvent ( pFnAcceptNewProfileFromEquipScreen, &AcceptNewProfileFromEquipScreen_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerRove
// [0x002200C2] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ServerRove ( unsigned long bOn )
{
	static UFunction* pFnServerRove = NULL;

	if ( ! pFnServerRove )
		pFnServerRove = (UFunction*) UObject::GObjObjects()->Data[ 44873 ];

	ATgPlayerController_execServerRove_Parms ServerRove_Parms;
	ServerRove_Parms.bOn = bOn;

	this->ProcessEvent ( pFnServerRove, &ServerRove_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleRove
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleRove ( )
{
	static UFunction* pFnToggleRove = NULL;

	if ( ! pFnToggleRove )
		pFnToggleRove = (UFunction*) UObject::GObjObjects()->Data[ 44872 ];

	ATgPlayerController_execToggleRove_Parms ToggleRove_Parms;

	this->ProcessEvent ( pFnToggleRove, &ToggleRove_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerViewSelf
// [0x00224042] 
// Parameters infos:
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnServerViewSelf = NULL;

	if ( ! pFnServerViewSelf )
		pFnServerViewSelf = (UFunction*) UObject::GObjObjects()->Data[ 44870 ];

	ATgPlayerController_execServerViewSelf_Parms ServerViewSelf_Parms;
	memcpy ( &ServerViewSelf_Parms.TransitionParams, &TransitionParams, 0xC );

	this->ProcessEvent ( pFnServerViewSelf, &ServerViewSelf_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerWatchOtherPlayer
// [0x002200C2] 
// Parameters infos:
// unsigned char                  Mode                           ( CPF_Parm )

void ATgPlayerController::ServerWatchOtherPlayer ( unsigned char Mode )
{
	static UFunction* pFnServerWatchOtherPlayer = NULL;

	if ( ! pFnServerWatchOtherPlayer )
		pFnServerWatchOtherPlayer = (UFunction*) UObject::GObjObjects()->Data[ 44868 ];

	ATgPlayerController_execServerWatchOtherPlayer_Parms ServerWatchOtherPlayer_Parms;
	ServerWatchOtherPlayer_Parms.Mode = Mode;

	this->ProcessEvent ( pFnServerWatchOtherPlayer, &ServerWatchOtherPlayer_Parms, NULL );
};

// Function TgGame.TgPlayerController.StopWatchOthers
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::StopWatchOthers ( )
{
	static UFunction* pFnStopWatchOthers = NULL;

	if ( ! pFnStopWatchOthers )
		pFnStopWatchOthers = (UFunction*) UObject::GObjObjects()->Data[ 44867 ];

	ATgPlayerController_execStopWatchOthers_Parms StopWatchOthers_Parms;

	this->ProcessEvent ( pFnStopWatchOthers, &StopWatchOthers_Parms, NULL );
};

// Function TgGame.TgPlayerController.StartWatchOthers
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  Mode                           ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::StartWatchOthers ( unsigned char Mode )
{
	static UFunction* pFnStartWatchOthers = NULL;

	if ( ! pFnStartWatchOthers )
		pFnStartWatchOthers = (UFunction*) UObject::GObjObjects()->Data[ 44865 ];

	ATgPlayerController_execStartWatchOthers_Parms StartWatchOthers_Parms;
	StartWatchOthers_Parms.Mode = Mode;

	this->ProcessEvent ( pFnStartWatchOthers, &StartWatchOthers_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetCorrectViewTarget
// [0x00820002] 
// Parameters infos:

void ATgPlayerController::SetCorrectViewTarget ( )
{
	static UFunction* pFnSetCorrectViewTarget = NULL;

	if ( ! pFnSetCorrectViewTarget )
		pFnSetCorrectViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 44862 ];

	ATgPlayerController_execSetCorrectViewTarget_Parms SetCorrectViewTarget_Parms;

	this->ProcessEvent ( pFnSetCorrectViewTarget, &SetCorrectViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetViewTarget
// [0x002200C2] 
// Parameters infos:
// class AActor*                  me                             ( CPF_Parm )

void ATgPlayerController::ServerSetViewTarget ( class AActor* me )
{
	static UFunction* pFnServerSetViewTarget = NULL;

	if ( ! pFnServerSetViewTarget )
		pFnServerSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 44860 ];

	ATgPlayerController_execServerSetViewTarget_Parms ServerSetViewTarget_Parms;
	ServerSetViewTarget_Parms.me = me;

	this->ProcessEvent ( pFnServerSetViewTarget, &ServerSetViewTarget_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnRightMouseReleased
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::OnRightMouseReleased ( )
{
	static UFunction* pFnOnRightMouseReleased = NULL;

	if ( ! pFnOnRightMouseReleased )
		pFnOnRightMouseReleased = (UFunction*) UObject::GObjObjects()->Data[ 44857 ];

	ATgPlayerController_execOnRightMouseReleased_Parms OnRightMouseReleased_Parms;

	this->ProcessEvent ( pFnOnRightMouseReleased, &OnRightMouseReleased_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnRightMousePressed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::OnRightMousePressed ( )
{
	static UFunction* pFnOnRightMousePressed = NULL;

	if ( ! pFnOnRightMousePressed )
		pFnOnRightMousePressed = (UFunction*) UObject::GObjObjects()->Data[ 44853 ];

	ATgPlayerController_execOnRightMousePressed_Parms OnRightMousePressed_Parms;

	this->ProcessEvent ( pFnOnRightMousePressed, &OnRightMousePressed_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnLeftMouseReleased
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::OnLeftMouseReleased ( )
{
	static UFunction* pFnOnLeftMouseReleased = NULL;

	if ( ! pFnOnLeftMouseReleased )
		pFnOnLeftMouseReleased = (UFunction*) UObject::GObjObjects()->Data[ 44851 ];

	ATgPlayerController_execOnLeftMouseReleased_Parms OnLeftMouseReleased_Parms;

	this->ProcessEvent ( pFnOnLeftMouseReleased, &OnLeftMouseReleased_Parms, NULL );
};

// Function TgGame.TgPlayerController.OnLeftMousePressed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::OnLeftMousePressed ( )
{
	static UFunction* pFnOnLeftMousePressed = NULL;

	if ( ! pFnOnLeftMousePressed )
		pFnOnLeftMousePressed = (UFunction*) UObject::GObjObjects()->Data[ 44849 ];

	ATgPlayerController_execOnLeftMousePressed_Parms OnLeftMousePressed_Parms;

	this->ProcessEvent ( pFnOnLeftMousePressed, &OnLeftMousePressed_Parms, NULL );
};

// Function TgGame.TgPlayerController.CheckNonCombatInteraction
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::CheckNonCombatInteraction ( )
{
	static UFunction* pFnCheckNonCombatInteraction = NULL;

	if ( ! pFnCheckNonCombatInteraction )
		pFnCheckNonCombatInteraction = (UFunction*) UObject::GObjObjects()->Data[ 44847 ];

	ATgPlayerController_execCheckNonCombatInteraction_Parms CheckNonCombatInteraction_Parms;

	pFnCheckNonCombatInteraction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckNonCombatInteraction, &CheckNonCombatInteraction_Parms, NULL );

	pFnCheckNonCombatInteraction->FunctionFlags |= 0x400;

	return CheckNonCombatInteraction_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CCE
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::CCE ( struct FName EventName )
{
	static UFunction* pFnCCE = NULL;

	if ( ! pFnCCE )
		pFnCCE = (UFunction*) UObject::GObjObjects()->Data[ 44845 ];

	ATgPlayerController_execCCE_Parms CCE_Parms;
	memcpy ( &CCE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCCE, &CCE_Parms, NULL );
};

// Function TgGame.TgPlayerController.CauseClientEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::CauseClientEvent ( struct FName EventName )
{
	static UFunction* pFnCauseClientEvent = NULL;

	if ( ! pFnCauseClientEvent )
		pFnCauseClientEvent = (UFunction*) UObject::GObjObjects()->Data[ 44837 ];

	ATgPlayerController_execCauseClientEvent_Parms CauseClientEvent_Parms;
	memcpy ( &CauseClientEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseClientEvent, &CauseClientEvent_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerCallKismetEventFromClient
// [0x002200C2] 
// Parameters infos:

void ATgPlayerController::ServerCallKismetEventFromClient ( )
{
	static UFunction* pFnServerCallKismetEventFromClient = NULL;

	if ( ! pFnServerCallKismetEventFromClient )
		pFnServerCallKismetEventFromClient = (UFunction*) UObject::GObjObjects()->Data[ 44836 ];

	ATgPlayerController_execServerCallKismetEventFromClient_Parms ServerCallKismetEventFromClient_Parms;

	this->ProcessEvent ( pFnServerCallKismetEventFromClient, &ServerCallKismetEventFromClient_Parms, NULL );
};

// Function TgGame.TgPlayerController.CallServerSideKismetEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::CallServerSideKismetEvent ( )
{
	static UFunction* pFnCallServerSideKismetEvent = NULL;

	if ( ! pFnCallServerSideKismetEvent )
		pFnCallServerSideKismetEvent = (UFunction*) UObject::GObjObjects()->Data[ 44835 ];

	ATgPlayerController_execCallServerSideKismetEvent_Parms CallServerSideKismetEvent_Parms;

	this->ProcessEvent ( pFnCallServerSideKismetEvent, &CallServerSideKismetEvent_Parms, NULL );
};

// Function TgGame.TgPlayerController.RaidW
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::RaidW ( struct FString Message )
{
	static UFunction* pFnRaidW = NULL;

	if ( ! pFnRaidW )
		pFnRaidW = (UFunction*) UObject::GObjObjects()->Data[ 44833 ];

	ATgPlayerController_execRaidW_Parms RaidW_Parms;
	memcpy ( &RaidW_Parms.Message, &Message, 0xC );

	pFnRaidW->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRaidW, &RaidW_Parms, NULL );

	pFnRaidW->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.RgW
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::RgW ( struct FString Message )
{
	static UFunction* pFnRgW = NULL;

	if ( ! pFnRgW )
		pFnRgW = (UFunction*) UObject::GObjObjects()->Data[ 44831 ];

	ATgPlayerController_execRgW_Parms RgW_Parms;
	memcpy ( &RgW_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnRgW, &RgW_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetSpawnAtMe
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            bSetToMe                       ( CPF_Parm )

void ATgPlayerController::SetSpawnAtMe ( int bSetToMe )
{
	static UFunction* pFnSetSpawnAtMe = NULL;

	if ( ! pFnSetSpawnAtMe )
		pFnSetSpawnAtMe = (UFunction*) UObject::GObjObjects()->Data[ 44829 ];

	ATgPlayerController_execSetSpawnAtMe_Parms SetSpawnAtMe_Parms;
	SetSpawnAtMe_Parms.bSetToMe = bSetToMe;

	this->ProcessEvent ( pFnSetSpawnAtMe, &SetSpawnAtMe_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetSpawnAtMe
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            bSetToMe                       ( CPF_Parm )

void ATgPlayerController::ServerSetSpawnAtMe ( int bSetToMe )
{
	static UFunction* pFnServerSetSpawnAtMe = NULL;

	if ( ! pFnServerSetSpawnAtMe )
		pFnServerSetSpawnAtMe = (UFunction*) UObject::GObjObjects()->Data[ 44827 ];

	ATgPlayerController_execServerSetSpawnAtMe_Parms ServerSetSpawnAtMe_Parms;
	ServerSetSpawnAtMe_Parms.bSetToMe = bSetToMe;

	pFnServerSetSpawnAtMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetSpawnAtMe, &ServerSetSpawnAtMe_Parms, NULL );

	pFnServerSetSpawnAtMe->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AddAutoKickAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::AddAutoKickAlert ( )
{
	static UFunction* pFnAddAutoKickAlert = NULL;

	if ( ! pFnAddAutoKickAlert )
		pFnAddAutoKickAlert = (UFunction*) UObject::GObjObjects()->Data[ 44826 ];

	ATgPlayerController_execAddAutoKickAlert_Parms AddAutoKickAlert_Parms;

	pFnAddAutoKickAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAutoKickAlert, &AddAutoKickAlert_Parms, NULL );

	pFnAddAutoKickAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AddMoraleReadyAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::AddMoraleReadyAlert ( )
{
	static UFunction* pFnAddMoraleReadyAlert = NULL;

	if ( ! pFnAddMoraleReadyAlert )
		pFnAddMoraleReadyAlert = (UFunction*) UObject::GObjObjects()->Data[ 44825 ];

	ATgPlayerController_execAddMoraleReadyAlert_Parms AddMoraleReadyAlert_Parms;

	pFnAddMoraleReadyAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMoraleReadyAlert, &AddMoraleReadyAlert_Parms, NULL );

	pFnAddMoraleReadyAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AddAssistAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 KilledName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::AddAssistAlert ( struct FString KilledName, struct FString KillerName )
{
	static UFunction* pFnAddAssistAlert = NULL;

	if ( ! pFnAddAssistAlert )
		pFnAddAssistAlert = (UFunction*) UObject::GObjObjects()->Data[ 44822 ];

	ATgPlayerController_execAddAssistAlert_Parms AddAssistAlert_Parms;
	memcpy ( &AddAssistAlert_Parms.KilledName, &KilledName, 0xC );
	memcpy ( &AddAssistAlert_Parms.KillerName, &KillerName, 0xC );

	pFnAddAssistAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAssistAlert, &AddAssistAlert_Parms, NULL );

	pFnAddAssistAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AddKillAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 KilledName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  KillerWasPlayer                ( CPF_Parm )

void ATgPlayerController::AddKillAlert ( struct FString KilledName, struct FString KillerName, unsigned long KillerWasPlayer )
{
	static UFunction* pFnAddKillAlert = NULL;

	if ( ! pFnAddKillAlert )
		pFnAddKillAlert = (UFunction*) UObject::GObjObjects()->Data[ 44818 ];

	ATgPlayerController_execAddKillAlert_Parms AddKillAlert_Parms;
	memcpy ( &AddKillAlert_Parms.KilledName, &KilledName, 0xC );
	memcpy ( &AddKillAlert_Parms.KillerName, &KillerName, 0xC );
	AddKillAlert_Parms.KillerWasPlayer = KillerWasPlayer;

	pFnAddKillAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddKillAlert, &AddKillAlert_Parms, NULL );

	pFnAddKillAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ClientAddKilled
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FString                 KilledName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 KillerName                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  KillerWasPlayer                ( CPF_Parm )

void ATgPlayerController::eventClientAddKilled ( struct FString KilledName, struct FString KillerName, unsigned long KillerWasPlayer )
{
	static UFunction* pFnClientAddKilled = NULL;

	if ( ! pFnClientAddKilled )
		pFnClientAddKilled = (UFunction*) UObject::GObjObjects()->Data[ 44814 ];

	ATgPlayerController_eventClientAddKilled_Parms ClientAddKilled_Parms;
	memcpy ( &ClientAddKilled_Parms.KilledName, &KilledName, 0xC );
	memcpy ( &ClientAddKilled_Parms.KillerName, &KillerName, 0xC );
	ClientAddKilled_Parms.KillerWasPlayer = KillerWasPlayer;

	this->ProcessEvent ( pFnClientAddKilled, &ClientAddKilled_Parms, NULL );
};

// Function TgGame.TgPlayerController.RequestBeaconNetworkHop
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgStartPoint*           sp                             ( CPF_Parm )

void ATgPlayerController::eventRequestBeaconNetworkHop ( class ATgStartPoint* sp )
{
	static UFunction* pFnRequestBeaconNetworkHop = NULL;

	if ( ! pFnRequestBeaconNetworkHop )
		pFnRequestBeaconNetworkHop = (UFunction*) UObject::GObjObjects()->Data[ 44812 ];

	ATgPlayerController_eventRequestBeaconNetworkHop_Parms RequestBeaconNetworkHop_Parms;
	RequestBeaconNetworkHop_Parms.sp = sp;

	this->ProcessEvent ( pFnRequestBeaconNetworkHop, &RequestBeaconNetworkHop_Parms, NULL );
};

// Function TgGame.TgPlayerController.ToggleBinoculars
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ToggleBinoculars ( )
{
	static UFunction* pFnToggleBinoculars = NULL;

	if ( ! pFnToggleBinoculars )
		pFnToggleBinoculars = (UFunction*) UObject::GObjObjects()->Data[ 44811 ];

	ATgPlayerController_execToggleBinoculars_Parms ToggleBinoculars_Parms;

	this->ProcessEvent ( pFnToggleBinoculars, &ToggleBinoculars_Parms, NULL );
};

// Function TgGame.TgPlayerController.SensorModeChanged
// [0x00020002] 
// Parameters infos:
// int                            nNewMode                       ( CPF_Parm )

void ATgPlayerController::SensorModeChanged ( int nNewMode )
{
	static UFunction* pFnSensorModeChanged = NULL;

	if ( ! pFnSensorModeChanged )
		pFnSensorModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 44808 ];

	ATgPlayerController_execSensorModeChanged_Parms SensorModeChanged_Parms;
	SensorModeChanged_Parms.nNewMode = nNewMode;

	this->ProcessEvent ( pFnSensorModeChanged, &SensorModeChanged_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetHenchman
// [0x002200C2] 
// Parameters infos:
// int                            nHenchmanNumber                ( CPF_Parm )
// int                            nBotId                         ( CPF_Parm )

void ATgPlayerController::ServerSetHenchman ( int nHenchmanNumber, int nBotId )
{
	static UFunction* pFnServerSetHenchman = NULL;

	if ( ! pFnServerSetHenchman )
		pFnServerSetHenchman = (UFunction*) UObject::GObjObjects()->Data[ 44805 ];

	ATgPlayerController_execServerSetHenchman_Parms ServerSetHenchman_Parms;
	ServerSetHenchman_Parms.nHenchmanNumber = nHenchmanNumber;
	ServerSetHenchman_Parms.nBotId = nBotId;

	this->ProcessEvent ( pFnServerSetHenchman, &ServerSetHenchman_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetTaskforceLead
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::SetTaskforceLead ( struct FString fsName )
{
	static UFunction* pFnSetTaskforceLead = NULL;

	if ( ! pFnSetTaskforceLead )
		pFnSetTaskforceLead = (UFunction*) UObject::GObjObjects()->Data[ 44803 ];

	ATgPlayerController_execSetTaskforceLead_Parms SetTaskforceLead_Parms;
	memcpy ( &SetTaskforceLead_Parms.fsName, &fsName, 0xC );

	this->ProcessEvent ( pFnSetTaskforceLead, &SetTaskforceLead_Parms, NULL );
};

// Function TgGame.TgPlayerController.NameScale
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          nScaleIn                       ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::NameScale ( float nScaleIn )
{
	static UFunction* pFnNameScale = NULL;

	if ( ! pFnNameScale )
		pFnNameScale = (UFunction*) UObject::GObjObjects()->Data[ 44801 ];

	ATgPlayerController_execNameScale_Parms NameScale_Parms;
	NameScale_Parms.nScaleIn = nScaleIn;

	this->ProcessEvent ( pFnNameScale, &NameScale_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetShowRangeTargeter
// [0x00020102] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void ATgPlayerController::SetShowRangeTargeter ( unsigned long bShow )
{
	static UFunction* pFnSetShowRangeTargeter = NULL;

	if ( ! pFnSetShowRangeTargeter )
		pFnSetShowRangeTargeter = (UFunction*) UObject::GObjObjects()->Data[ 44799 ];

	ATgPlayerController_execSetShowRangeTargeter_Parms SetShowRangeTargeter_Parms;
	SetShowRangeTargeter_Parms.bShow = bShow;

	this->ProcessEvent ( pFnSetShowRangeTargeter, &SetShowRangeTargeter_Parms, NULL );
};

// Function TgGame.TgPlayerController.Wear
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 flairName                      ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::Wear ( struct FString flairName )
{
	static UFunction* pFnWear = NULL;

	if ( ! pFnWear )
		pFnWear = (UFunction*) UObject::GObjObjects()->Data[ 44797 ];

	ATgPlayerController_execWear_Parms Wear_Parms;
	memcpy ( &Wear_Parms.flairName, &flairName, 0xC );

	this->ProcessEvent ( pFnWear, &Wear_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientPlaySound
// [0x01020142] 
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )

void ATgPlayerController::ClientPlaySound ( class USoundCue* ASound )
{
	static UFunction* pFnClientPlaySound = NULL;

	if ( ! pFnClientPlaySound )
		pFnClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 44795 ];

	ATgPlayerController_execClientPlaySound_Parms ClientPlaySound_Parms;
	ClientPlaySound_Parms.ASound = ASound;

	this->ProcessEvent ( pFnClientPlaySound, &ClientPlaySound_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClientResetEquipScreen
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void ATgPlayerController::eventClientResetEquipScreen ( )
{
	static UFunction* pFnClientResetEquipScreen = NULL;

	if ( ! pFnClientResetEquipScreen )
		pFnClientResetEquipScreen = (UFunction*) UObject::GObjObjects()->Data[ 44794 ];

	ATgPlayerController_eventClientResetEquipScreen_Parms ClientResetEquipScreen_Parms;

	this->ProcessEvent ( pFnClientResetEquipScreen, &ClientResetEquipScreen_Parms, NULL );
};

// Function TgGame.TgPlayerController.rbgrav
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void ATgPlayerController::rbgrav ( float F )
{
	static UFunction* pFnrbgrav = NULL;

	if ( ! pFnrbgrav )
		pFnrbgrav = (UFunction*) UObject::GObjObjects()->Data[ 44792 ];

	ATgPlayerController_execrbgrav_Parms rbgrav_Parms;
	rbgrav_Parms.F = F;

	this->ProcessEvent ( pFnrbgrav, &rbgrav_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestShowInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TestShowInventory ( )
{
	static UFunction* pFnTestShowInventory = NULL;

	if ( ! pFnTestShowInventory )
		pFnTestShowInventory = (UFunction*) UObject::GObjObjects()->Data[ 44791 ];

	ATgPlayerController_execTestShowInventory_Parms TestShowInventory_Parms;

	this->ProcessEvent ( pFnTestShowInventory, &TestShowInventory_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerSetLookingForMembers
// [0x002200C2] 
// Parameters infos:
// int                            nCount                         ( CPF_Parm )

void ATgPlayerController::ServerSetLookingForMembers ( int nCount )
{
	static UFunction* pFnServerSetLookingForMembers = NULL;

	if ( ! pFnServerSetLookingForMembers )
		pFnServerSetLookingForMembers = (UFunction*) UObject::GObjObjects()->Data[ 44787 ];

	ATgPlayerController_execServerSetLookingForMembers_Parms ServerSetLookingForMembers_Parms;
	ServerSetLookingForMembers_Parms.nCount = nCount;

	this->ProcessEvent ( pFnServerSetLookingForMembers, &ServerSetLookingForMembers_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetLookingForMembers
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nCount                         ( CPF_Parm )

void ATgPlayerController::eventSetLookingForMembers ( int nCount )
{
	static UFunction* pFnSetLookingForMembers = NULL;

	if ( ! pFnSetLookingForMembers )
		pFnSetLookingForMembers = (UFunction*) UObject::GObjObjects()->Data[ 44785 ];

	ATgPlayerController_eventSetLookingForMembers_Parms SetLookingForMembers_Parms;
	SetLookingForMembers_Parms.nCount = nCount;

	this->ProcessEvent ( pFnSetLookingForMembers, &SetLookingForMembers_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerAbandonAssignment
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerAbandonAssignment ( )
{
	static UFunction* pFnServerAbandonAssignment = NULL;

	if ( ! pFnServerAbandonAssignment )
		pFnServerAbandonAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44784 ];

	ATgPlayerController_execServerAbandonAssignment_Parms ServerAbandonAssignment_Parms;

	pFnServerAbandonAssignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerAbandonAssignment, &ServerAbandonAssignment_Parms, NULL );

	pFnServerAbandonAssignment->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AbandonAssignment
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::AbandonAssignment ( )
{
	static UFunction* pFnAbandonAssignment = NULL;

	if ( ! pFnAbandonAssignment )
		pFnAbandonAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44783 ];

	ATgPlayerController_execAbandonAssignment_Parms AbandonAssignment_Parms;

	this->ProcessEvent ( pFnAbandonAssignment, &AbandonAssignment_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerRequestAssignment
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgPlayerController::ServerRequestAssignment ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnServerRequestAssignment = NULL;

	if ( ! pFnServerRequestAssignment )
		pFnServerRequestAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44780 ];

	ATgPlayerController_execServerRequestAssignment_Parms ServerRequestAssignment_Parms;
	ServerRequestAssignment_Parms.Objective = Objective;

	pFnServerRequestAssignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRequestAssignment, &ServerRequestAssignment_Parms, NULL );

	pFnServerRequestAssignment->FunctionFlags |= 0x400;

	return ServerRequestAssignment_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.RequestAssignment
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

void ATgPlayerController::eventRequestAssignment ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnRequestAssignment = NULL;

	if ( ! pFnRequestAssignment )
		pFnRequestAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44778 ];

	ATgPlayerController_eventRequestAssignment_Parms RequestAssignment_Parms;
	RequestAssignment_Parms.Objective = Objective;

	this->ProcessEvent ( pFnRequestAssignment, &RequestAssignment_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerTestCloseAllAssignments
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerTestCloseAllAssignments ( )
{
	static UFunction* pFnServerTestCloseAllAssignments = NULL;

	if ( ! pFnServerTestCloseAllAssignments )
		pFnServerTestCloseAllAssignments = (UFunction*) UObject::GObjObjects()->Data[ 44777 ];

	ATgPlayerController_execServerTestCloseAllAssignments_Parms ServerTestCloseAllAssignments_Parms;

	pFnServerTestCloseAllAssignments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerTestCloseAllAssignments, &ServerTestCloseAllAssignments_Parms, NULL );

	pFnServerTestCloseAllAssignments->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TestCloseAllAssignments
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::TestCloseAllAssignments ( )
{
	static UFunction* pFnTestCloseAllAssignments = NULL;

	if ( ! pFnTestCloseAllAssignments )
		pFnTestCloseAllAssignments = (UFunction*) UObject::GObjObjects()->Data[ 44776 ];

	ATgPlayerController_execTestCloseAllAssignments_Parms TestCloseAllAssignments_Parms;

	this->ProcessEvent ( pFnTestCloseAllAssignments, &TestCloseAllAssignments_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerTestRequestAssignment
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgPlayerController::ServerTestRequestAssignment ( int nPriority )
{
	static UFunction* pFnServerTestRequestAssignment = NULL;

	if ( ! pFnServerTestRequestAssignment )
		pFnServerTestRequestAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44774 ];

	ATgPlayerController_execServerTestRequestAssignment_Parms ServerTestRequestAssignment_Parms;
	ServerTestRequestAssignment_Parms.nPriority = nPriority;

	pFnServerTestRequestAssignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerTestRequestAssignment, &ServerTestRequestAssignment_Parms, NULL );

	pFnServerTestRequestAssignment->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TestRequestAssignment
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgPlayerController::TestRequestAssignment ( int nPriority )
{
	static UFunction* pFnTestRequestAssignment = NULL;

	if ( ! pFnTestRequestAssignment )
		pFnTestRequestAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44772 ];

	ATgPlayerController_execTestRequestAssignment_Parms TestRequestAssignment_Parms;
	TestRequestAssignment_Parms.nPriority = nPriority;

	this->ProcessEvent ( pFnTestRequestAssignment, &TestRequestAssignment_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerTestBeginAssignment
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )
// int                            nAttackerTf                    ( CPF_Parm )
// int                            nDefenderTf                    ( CPF_Parm )

void ATgPlayerController::ServerTestBeginAssignment ( int nPriority, int nAttackerTf, int nDefenderTf )
{
	static UFunction* pFnServerTestBeginAssignment = NULL;

	if ( ! pFnServerTestBeginAssignment )
		pFnServerTestBeginAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44768 ];

	ATgPlayerController_execServerTestBeginAssignment_Parms ServerTestBeginAssignment_Parms;
	ServerTestBeginAssignment_Parms.nPriority = nPriority;
	ServerTestBeginAssignment_Parms.nAttackerTf = nAttackerTf;
	ServerTestBeginAssignment_Parms.nDefenderTf = nDefenderTf;

	pFnServerTestBeginAssignment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerTestBeginAssignment, &ServerTestBeginAssignment_Parms, NULL );

	pFnServerTestBeginAssignment->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TestBeginAssignment
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )
// int                            nAttackerTf                    ( CPF_Parm )
// int                            nDefenderTf                    ( CPF_Parm )

void ATgPlayerController::TestBeginAssignment ( int nPriority, int nAttackerTf, int nDefenderTf )
{
	static UFunction* pFnTestBeginAssignment = NULL;

	if ( ! pFnTestBeginAssignment )
		pFnTestBeginAssignment = (UFunction*) UObject::GObjObjects()->Data[ 44764 ];

	ATgPlayerController_execTestBeginAssignment_Parms TestBeginAssignment_Parms;
	TestBeginAssignment_Parms.nPriority = nPriority;
	TestBeginAssignment_Parms.nAttackerTf = nAttackerTf;
	TestBeginAssignment_Parms.nDefenderTf = nDefenderTf;

	this->ProcessEvent ( pFnTestBeginAssignment, &TestBeginAssignment_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerTestAwardLoot
// [0x002200C2] 
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )

void ATgPlayerController::ServerTestAwardLoot ( int nLootTableId )
{
	static UFunction* pFnServerTestAwardLoot = NULL;

	if ( ! pFnServerTestAwardLoot )
		pFnServerTestAwardLoot = (UFunction*) UObject::GObjObjects()->Data[ 44762 ];

	ATgPlayerController_execServerTestAwardLoot_Parms ServerTestAwardLoot_Parms;
	ServerTestAwardLoot_Parms.nLootTableId = nLootTableId;

	this->ProcessEvent ( pFnServerTestAwardLoot, &ServerTestAwardLoot_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestAwardLoot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )

void ATgPlayerController::TestAwardLoot ( int nLootTableId )
{
	static UFunction* pFnTestAwardLoot = NULL;

	if ( ! pFnTestAwardLoot )
		pFnTestAwardLoot = (UFunction*) UObject::GObjObjects()->Data[ 44760 ];

	ATgPlayerController_execTestAwardLoot_Parms TestAwardLoot_Parms;
	TestAwardLoot_Parms.nLootTableId = nLootTableId;

	this->ProcessEvent ( pFnTestAwardLoot, &TestAwardLoot_Parms, NULL );
};

// Function TgGame.TgPlayerController.TestSystemMailItem
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            nPlayerId                      ( CPF_Parm )
// int                            nItemId                        ( CPF_Parm )
// int                            nQuantity                      ( CPF_Parm )
// unsigned long                  bSystemCraft                   ( CPF_OptionalParm | CPF_Parm )
// int                            nMaxQuanlityValueId            ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::TestSystemMailItem ( int nPlayerId, int nItemId, int nQuantity, unsigned long bSystemCraft, int nMaxQuanlityValueId )
{
	static UFunction* pFnTestSystemMailItem = NULL;

	if ( ! pFnTestSystemMailItem )
		pFnTestSystemMailItem = (UFunction*) UObject::GObjObjects()->Data[ 44754 ];

	ATgPlayerController_execTestSystemMailItem_Parms TestSystemMailItem_Parms;
	TestSystemMailItem_Parms.nPlayerId = nPlayerId;
	TestSystemMailItem_Parms.nItemId = nItemId;
	TestSystemMailItem_Parms.nQuantity = nQuantity;
	TestSystemMailItem_Parms.bSystemCraft = bSystemCraft;
	TestSystemMailItem_Parms.nMaxQuanlityValueId = nMaxQuanlityValueId;

	this->ProcessEvent ( pFnTestSystemMailItem, &TestSystemMailItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.ClearMeProfiles
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ClearMeProfiles ( )
{
	static UFunction* pFnClearMeProfiles = NULL;

	if ( ! pFnClearMeProfiles )
		pFnClearMeProfiles = (UFunction*) UObject::GObjObjects()->Data[ 44753 ];

	ATgPlayerController_execClearMeProfiles_Parms ClearMeProfiles_Parms;

	this->ProcessEvent ( pFnClearMeProfiles, &ClearMeProfiles_Parms, NULL );
};

// Function TgGame.TgPlayerController.ResetMeSkills
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPlayerController::ResetMeSkills ( )
{
	static UFunction* pFnResetMeSkills = NULL;

	if ( ! pFnResetMeSkills )
		pFnResetMeSkills = (UFunction*) UObject::GObjObjects()->Data[ 44752 ];

	ATgPlayerController_execResetMeSkills_Parms ResetMeSkills_Parms;

	this->ProcessEvent ( pFnResetMeSkills, &ResetMeSkills_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetMeLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nLevel                         ( CPF_Parm )

void ATgPlayerController::SetMeLevel ( int nLevel )
{
	static UFunction* pFnSetMeLevel = NULL;

	if ( ! pFnSetMeLevel )
		pFnSetMeLevel = (UFunction*) UObject::GObjObjects()->Data[ 44750 ];

	ATgPlayerController_execSetMeLevel_Parms SetMeLevel_Parms;
	SetMeLevel_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnSetMeLevel, &SetMeLevel_Parms, NULL );
};

// Function TgGame.TgPlayerController.GiveMeXP
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Amt                            ( CPF_Parm )

void ATgPlayerController::GiveMeXP ( int Amt )
{
	static UFunction* pFnGiveMeXP = NULL;

	if ( ! pFnGiveMeXP )
		pFnGiveMeXP = (UFunction*) UObject::GObjObjects()->Data[ 44748 ];

	ATgPlayerController_execGiveMeXP_Parms GiveMeXP_Parms;
	GiveMeXP_Parms.Amt = Amt;

	this->ProcessEvent ( pFnGiveMeXP, &GiveMeXP_Parms, NULL );
};

// Function TgGame.TgPlayerController.SetPawnAlwaysRelevant
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nDistSquared                   ( CPF_Parm )

void ATgPlayerController::SetPawnAlwaysRelevant ( int nDistSquared )
{
	static UFunction* pFnSetPawnAlwaysRelevant = NULL;

	if ( ! pFnSetPawnAlwaysRelevant )
		pFnSetPawnAlwaysRelevant = (UFunction*) UObject::GObjObjects()->Data[ 44746 ];

	ATgPlayerController_execSetPawnAlwaysRelevant_Parms SetPawnAlwaysRelevant_Parms;
	SetPawnAlwaysRelevant_Parms.nDistSquared = nDistSquared;

	this->ProcessEvent ( pFnSetPawnAlwaysRelevant, &SetPawnAlwaysRelevant_Parms, NULL );
};

// Function TgGame.TgPlayerController.GMGiven
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nCharacterId                   ( CPF_Parm )
// int                            nCurrency                      ( CPF_Parm )

void ATgPlayerController::GMGiven ( int nCharacterId, int nCurrency )
{
	static UFunction* pFnGMGiven = NULL;

	if ( ! pFnGMGiven )
		pFnGMGiven = (UFunction*) UObject::GObjObjects()->Data[ 44743 ];

	ATgPlayerController_execGMGiven_Parms GMGiven_Parms;
	GMGiven_Parms.nCharacterId = nCharacterId;
	GMGiven_Parms.nCurrency = nCurrency;

	this->ProcessEvent ( pFnGMGiven, &GMGiven_Parms, NULL );
};

// Function TgGame.TgPlayerController.AddHZPoints
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nValue                         ( CPF_Parm )

void ATgPlayerController::AddHZPoints ( int nValue )
{
	static UFunction* pFnAddHZPoints = NULL;

	if ( ! pFnAddHZPoints )
		pFnAddHZPoints = (UFunction*) UObject::GObjObjects()->Data[ 44741 ];

	ATgPlayerController_execAddHZPoints_Parms AddHZPoints_Parms;
	AddHZPoints_Parms.nValue = nValue;

	this->ProcessEvent ( pFnAddHZPoints, &AddHZPoints_Parms, NULL );
};

// Function TgGame.TgPlayerController.AddToken
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nValue                         ( CPF_Parm )

void ATgPlayerController::AddToken ( int nValue )
{
	static UFunction* pFnAddToken = NULL;

	if ( ! pFnAddToken )
		pFnAddToken = (UFunction*) UObject::GObjObjects()->Data[ 44739 ];

	ATgPlayerController_execAddToken_Parms AddToken_Parms;
	AddToken_Parms.nValue = nValue;

	this->ProcessEvent ( pFnAddToken, &AddToken_Parms, NULL );
};

// Function TgGame.TgPlayerController.Obama
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nCurrency                      ( CPF_Parm )

void ATgPlayerController::Obama ( int nCurrency )
{
	static UFunction* pFnObama = NULL;

	if ( ! pFnObama )
		pFnObama = (UFunction*) UObject::GObjObjects()->Data[ 44737 ];

	ATgPlayerController_execObama_Parms Obama_Parms;
	Obama_Parms.nCurrency = nCurrency;

	this->ProcessEvent ( pFnObama, &Obama_Parms, NULL );
};

// Function TgGame.TgPlayerController.ActivateInvItem
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )

void ATgPlayerController::ActivateInvItem ( int nInvId )
{
	static UFunction* pFnActivateInvItem = NULL;

	if ( ! pFnActivateInvItem )
		pFnActivateInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44735 ];

	ATgPlayerController_execActivateInvItem_Parms ActivateInvItem_Parms;
	ActivateInvItem_Parms.nInvId = nInvId;

	this->ProcessEvent ( pFnActivateInvItem, &ActivateInvItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.SalvageInvItem
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nCount                         ( CPF_Parm )

void ATgPlayerController::SalvageInvItem ( int nInvId, int nCount )
{
	static UFunction* pFnSalvageInvItem = NULL;

	if ( ! pFnSalvageInvItem )
		pFnSalvageInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44732 ];

	ATgPlayerController_execSalvageInvItem_Parms SalvageInvItem_Parms;
	SalvageInvItem_Parms.nInvId = nInvId;
	SalvageInvItem_Parms.nCount = nCount;

	this->ProcessEvent ( pFnSalvageInvItem, &SalvageInvItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.RepairAllUpgrades
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:

void ATgPlayerController::RepairAllUpgrades ( )
{
	static UFunction* pFnRepairAllUpgrades = NULL;

	if ( ! pFnRepairAllUpgrades )
		pFnRepairAllUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 44731 ];

	ATgPlayerController_execRepairAllUpgrades_Parms RepairAllUpgrades_Parms;

	this->ProcessEvent ( pFnRepairAllUpgrades, &RepairAllUpgrades_Parms, NULL );
};

// Function TgGame.TgPlayerController.RepairInvItem
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )

void ATgPlayerController::RepairInvItem ( int nInvId )
{
	static UFunction* pFnRepairInvItem = NULL;

	if ( ! pFnRepairInvItem )
		pFnRepairInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44729 ];

	ATgPlayerController_execRepairInvItem_Parms RepairInvItem_Parms;
	RepairInvItem_Parms.nInvId = nInvId;

	this->ProcessEvent ( pFnRepairInvItem, &RepairInvItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.CombineItems
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nModKitInvId                   ( CPF_Parm )

void ATgPlayerController::CombineItems ( int nInvId, int nModKitInvId )
{
	static UFunction* pFnCombineItems = NULL;

	if ( ! pFnCombineItems )
		pFnCombineItems = (UFunction*) UObject::GObjObjects()->Data[ 44726 ];

	ATgPlayerController_execCombineItems_Parms CombineItems_Parms;
	CombineItems_Parms.nInvId = nInvId;
	CombineItems_Parms.nModKitInvId = nModKitInvId;

	this->ProcessEvent ( pFnCombineItems, &CombineItems_Parms, NULL );
};

// Function TgGame.TgPlayerController.CraftItem
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nBlueprintId                   ( CPF_Parm )

void ATgPlayerController::CraftItem ( int nBlueprintId )
{
	static UFunction* pFnCraftItem = NULL;

	if ( ! pFnCraftItem )
		pFnCraftItem = (UFunction*) UObject::GObjObjects()->Data[ 44724 ];

	ATgPlayerController_execCraftItem_Parms CraftItem_Parms;
	CraftItem_Parms.nBlueprintId = nBlueprintId;

	this->ProcessEvent ( pFnCraftItem, &CraftItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.DestroyInvItem
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nCount                         ( CPF_Parm )
// unsigned long                  bSellIt                        ( CPF_Parm )

void ATgPlayerController::DestroyInvItem ( int nInvId, int nCount, unsigned long bSellIt )
{
	static UFunction* pFnDestroyInvItem = NULL;

	if ( ! pFnDestroyInvItem )
		pFnDestroyInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44720 ];

	ATgPlayerController_execDestroyInvItem_Parms DestroyInvItem_Parms;
	DestroyInvItem_Parms.nInvId = nInvId;
	DestroyInvItem_Parms.nCount = nCount;
	DestroyInvItem_Parms.bSellIt = bSellIt;

	this->ProcessEvent ( pFnDestroyInvItem, &DestroyInvItem_Parms, NULL );
};

// Function TgGame.TgPlayerController.ServerActivateInvItem
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )

void ATgPlayerController::ServerActivateInvItem ( int nInvId )
{
	static UFunction* pFnServerActivateInvItem = NULL;

	if ( ! pFnServerActivateInvItem )
		pFnServerActivateInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44718 ];

	ATgPlayerController_execServerActivateInvItem_Parms ServerActivateInvItem_Parms;
	ServerActivateInvItem_Parms.nInvId = nInvId;

	pFnServerActivateInvItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerActivateInvItem, &ServerActivateInvItem_Parms, NULL );

	pFnServerActivateInvItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerSalvageInvItem
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nCount                         ( CPF_Parm )

void ATgPlayerController::ServerSalvageInvItem ( int nInvId, int nCount )
{
	static UFunction* pFnServerSalvageInvItem = NULL;

	if ( ! pFnServerSalvageInvItem )
		pFnServerSalvageInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44715 ];

	ATgPlayerController_execServerSalvageInvItem_Parms ServerSalvageInvItem_Parms;
	ServerSalvageInvItem_Parms.nInvId = nInvId;
	ServerSalvageInvItem_Parms.nCount = nCount;

	pFnServerSalvageInvItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSalvageInvItem, &ServerSalvageInvItem_Parms, NULL );

	pFnServerSalvageInvItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerRepairAllUpgrades
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerRepairAllUpgrades ( )
{
	static UFunction* pFnServerRepairAllUpgrades = NULL;

	if ( ! pFnServerRepairAllUpgrades )
		pFnServerRepairAllUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 44714 ];

	ATgPlayerController_execServerRepairAllUpgrades_Parms ServerRepairAllUpgrades_Parms;

	pFnServerRepairAllUpgrades->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRepairAllUpgrades, &ServerRepairAllUpgrades_Parms, NULL );

	pFnServerRepairAllUpgrades->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerRepairInvItem
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )

void ATgPlayerController::ServerRepairInvItem ( int nInvId )
{
	static UFunction* pFnServerRepairInvItem = NULL;

	if ( ! pFnServerRepairInvItem )
		pFnServerRepairInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44712 ];

	ATgPlayerController_execServerRepairInvItem_Parms ServerRepairInvItem_Parms;
	ServerRepairInvItem_Parms.nInvId = nInvId;

	pFnServerRepairInvItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRepairInvItem, &ServerRepairInvItem_Parms, NULL );

	pFnServerRepairInvItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerDestroyInvItem
// [0x002244C0] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nCount                         ( CPF_Parm )
// unsigned long                  bSellIt                        ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerDestroyInvItem ( int nInvId, int nCount, unsigned long bSellIt )
{
	static UFunction* pFnServerDestroyInvItem = NULL;

	if ( ! pFnServerDestroyInvItem )
		pFnServerDestroyInvItem = (UFunction*) UObject::GObjObjects()->Data[ 44708 ];

	ATgPlayerController_execServerDestroyInvItem_Parms ServerDestroyInvItem_Parms;
	ServerDestroyInvItem_Parms.nInvId = nInvId;
	ServerDestroyInvItem_Parms.nCount = nCount;
	ServerDestroyInvItem_Parms.bSellIt = bSellIt;

	pFnServerDestroyInvItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerDestroyInvItem, &ServerDestroyInvItem_Parms, NULL );

	pFnServerDestroyInvItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerCombineItems
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nInvId                         ( CPF_Parm )
// int                            nModKitInvId                   ( CPF_Parm )

void ATgPlayerController::ServerCombineItems ( int nInvId, int nModKitInvId )
{
	static UFunction* pFnServerCombineItems = NULL;

	if ( ! pFnServerCombineItems )
		pFnServerCombineItems = (UFunction*) UObject::GObjObjects()->Data[ 44705 ];

	ATgPlayerController_execServerCombineItems_Parms ServerCombineItems_Parms;
	ServerCombineItems_Parms.nInvId = nInvId;
	ServerCombineItems_Parms.nModKitInvId = nModKitInvId;

	pFnServerCombineItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerCombineItems, &ServerCombineItems_Parms, NULL );

	pFnServerCombineItems->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerCraftItem
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nBlueprintId                   ( CPF_Parm )

void ATgPlayerController::ServerCraftItem ( int nBlueprintId )
{
	static UFunction* pFnServerCraftItem = NULL;

	if ( ! pFnServerCraftItem )
		pFnServerCraftItem = (UFunction*) UObject::GObjObjects()->Data[ 44703 ];

	ATgPlayerController_execServerCraftItem_Parms ServerCraftItem_Parms;
	ServerCraftItem_Parms.nBlueprintId = nBlueprintId;

	pFnServerCraftItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerCraftItem, &ServerCraftItem_Parms, NULL );

	pFnServerCraftItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerAddHZPoints
// [0x002244C0] ( FUNC_Native )
// Parameters infos:
// int                            nValue                         ( CPF_Parm )
// int                            nCharId                        ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerAddHZPoints ( int nValue, int nCharId )
{
	static UFunction* pFnServerAddHZPoints = NULL;

	if ( ! pFnServerAddHZPoints )
		pFnServerAddHZPoints = (UFunction*) UObject::GObjObjects()->Data[ 44700 ];

	ATgPlayerController_execServerAddHZPoints_Parms ServerAddHZPoints_Parms;
	ServerAddHZPoints_Parms.nValue = nValue;
	ServerAddHZPoints_Parms.nCharId = nCharId;

	pFnServerAddHZPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerAddHZPoints, &ServerAddHZPoints_Parms, NULL );

	pFnServerAddHZPoints->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerGMGiven
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nCharacterId                   ( CPF_Parm )
// int                            nCurrency                      ( CPF_Parm )

void ATgPlayerController::ServerGMGiven ( int nCharacterId, int nCurrency )
{
	static UFunction* pFnServerGMGiven = NULL;

	if ( ! pFnServerGMGiven )
		pFnServerGMGiven = (UFunction*) UObject::GObjObjects()->Data[ 44697 ];

	ATgPlayerController_execServerGMGiven_Parms ServerGMGiven_Parms;
	ServerGMGiven_Parms.nCharacterId = nCharacterId;
	ServerGMGiven_Parms.nCurrency = nCurrency;

	pFnServerGMGiven->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerGMGiven, &ServerGMGiven_Parms, NULL );

	pFnServerGMGiven->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerAddToken
// [0x002244C0] ( FUNC_Native )
// Parameters infos:
// int                            nValue                         ( CPF_Parm )
// int                            nCharId                        ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerAddToken ( int nValue, int nCharId )
{
	static UFunction* pFnServerAddToken = NULL;

	if ( ! pFnServerAddToken )
		pFnServerAddToken = (UFunction*) UObject::GObjObjects()->Data[ 44694 ];

	ATgPlayerController_execServerAddToken_Parms ServerAddToken_Parms;
	ServerAddToken_Parms.nValue = nValue;
	ServerAddToken_Parms.nCharId = nCharId;

	pFnServerAddToken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerAddToken, &ServerAddToken_Parms, NULL );

	pFnServerAddToken->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerObama
// [0x002244C0] ( FUNC_Native )
// Parameters infos:
// int                            nCurrency                      ( CPF_Parm )
// int                            nCharId                        ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerObama ( int nCurrency, int nCharId )
{
	static UFunction* pFnServerObama = NULL;

	if ( ! pFnServerObama )
		pFnServerObama = (UFunction*) UObject::GObjObjects()->Data[ 44691 ];

	ATgPlayerController_execServerObama_Parms ServerObama_Parms;
	ServerObama_Parms.nCurrency = nCurrency;
	ServerObama_Parms.nCharId = nCharId;

	pFnServerObama->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerObama, &ServerObama_Parms, NULL );

	pFnServerObama->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerClearSkillsAndDevices
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerClearSkillsAndDevices ( )
{
	static UFunction* pFnServerClearSkillsAndDevices = NULL;

	if ( ! pFnServerClearSkillsAndDevices )
		pFnServerClearSkillsAndDevices = (UFunction*) UObject::GObjObjects()->Data[ 44690 ];

	ATgPlayerController_execServerClearSkillsAndDevices_Parms ServerClearSkillsAndDevices_Parms;

	pFnServerClearSkillsAndDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerClearSkillsAndDevices, &ServerClearSkillsAndDevices_Parms, NULL );

	pFnServerClearSkillsAndDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerClearProfiles
// [0x002204C0] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerClearProfiles ( )
{
	static UFunction* pFnServerClearProfiles = NULL;

	if ( ! pFnServerClearProfiles )
		pFnServerClearProfiles = (UFunction*) UObject::GObjObjects()->Data[ 44689 ];

	ATgPlayerController_execServerClearProfiles_Parms ServerClearProfiles_Parms;

	pFnServerClearProfiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerClearProfiles, &ServerClearProfiles_Parms, NULL );

	pFnServerClearProfiles->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerApplyFlair
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// struct FString                 flairName                      ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerApplyFlair ( struct FString flairName )
{
	static UFunction* pFnServerApplyFlair = NULL;

	if ( ! pFnServerApplyFlair )
		pFnServerApplyFlair = (UFunction*) UObject::GObjObjects()->Data[ 44687 ];

	ATgPlayerController_execServerApplyFlair_Parms ServerApplyFlair_Parms;
	memcpy ( &ServerApplyFlair_Parms.flairName, &flairName, 0xC );

	pFnServerApplyFlair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerApplyFlair, &ServerApplyFlair_Parms, NULL );

	pFnServerApplyFlair->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerSetLevel
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nLevel                         ( CPF_Parm )

void ATgPlayerController::ServerSetLevel ( int nLevel )
{
	static UFunction* pFnServerSetLevel = NULL;

	if ( ! pFnServerSetLevel )
		pFnServerSetLevel = (UFunction*) UObject::GObjObjects()->Data[ 44685 ];

	ATgPlayerController_execServerSetLevel_Parms ServerSetLevel_Parms;
	ServerSetLevel_Parms.nLevel = nLevel;

	pFnServerSetLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetLevel, &ServerSetLevel_Parms, NULL );

	pFnServerSetLevel->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerDevGiveXP
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            Amt                            ( CPF_Parm )

void ATgPlayerController::ServerDevGiveXP ( int Amt )
{
	static UFunction* pFnServerDevGiveXP = NULL;

	if ( ! pFnServerDevGiveXP )
		pFnServerDevGiveXP = (UFunction*) UObject::GObjObjects()->Data[ 44683 ];

	ATgPlayerController_execServerDevGiveXP_Parms ServerDevGiveXP_Parms;
	ServerDevGiveXP_Parms.Amt = Amt;

	pFnServerDevGiveXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerDevGiveXP, &ServerDevGiveXP_Parms, NULL );

	pFnServerDevGiveXP->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CanPlayerUseVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgOmegaVolume*          pOmega                         ( CPF_Parm )

bool ATgPlayerController::CanPlayerUseVolume ( class ATgOmegaVolume* pOmega )
{
	static UFunction* pFnCanPlayerUseVolume = NULL;

	if ( ! pFnCanPlayerUseVolume )
		pFnCanPlayerUseVolume = (UFunction*) UObject::GObjObjects()->Data[ 44680 ];

	ATgPlayerController_execCanPlayerUseVolume_Parms CanPlayerUseVolume_Parms;
	CanPlayerUseVolume_Parms.pOmega = pOmega;

	pFnCanPlayerUseVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPlayerUseVolume, &CanPlayerUseVolume_Parms, NULL );

	pFnCanPlayerUseVolume->FunctionFlags |= 0x400;

	return CanPlayerUseVolume_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.SetNWCondition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPktLoss                       ( CPF_Parm )
// int                            nPktLag                        ( CPF_Parm )

void ATgPlayerController::SetNWCondition ( int nPktLoss, int nPktLag )
{
	static UFunction* pFnSetNWCondition = NULL;

	if ( ! pFnSetNWCondition )
		pFnSetNWCondition = (UFunction*) UObject::GObjObjects()->Data[ 44677 ];

	ATgPlayerController_execSetNWCondition_Parms SetNWCondition_Parms;
	SetNWCondition_Parms.nPktLoss = nPktLoss;
	SetNWCondition_Parms.nPktLag = nPktLag;

	pFnSetNWCondition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNWCondition, &SetNWCondition_Parms, NULL );

	pFnSetNWCondition->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TestCrashReport
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::TestCrashReport ( )
{
	static UFunction* pFnTestCrashReport = NULL;

	if ( ! pFnTestCrashReport )
		pFnTestCrashReport = (UFunction*) UObject::GObjObjects()->Data[ 44676 ];

	ATgPlayerController_execTestCrashReport_Parms TestCrashReport_Parms;

	pFnTestCrashReport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestCrashReport, &TestCrashReport_Parms, NULL );

	pFnTestCrashReport->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerExecQuit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerExecQuit ( )
{
	static UFunction* pFnServerExecQuit = NULL;

	if ( ! pFnServerExecQuit )
		pFnServerExecQuit = (UFunction*) UObject::GObjObjects()->Data[ 44675 ];

	ATgPlayerController_execServerExecQuit_Parms ServerExecQuit_Parms;

	pFnServerExecQuit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerExecQuit, &ServerExecQuit_Parms, NULL );

	pFnServerExecQuit->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetMICResource
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nResourceId                    ( CPF_Parm )

class UMaterialInstanceConstant* ATgPlayerController::GetMICResource ( int nResourceId )
{
	static UFunction* pFnGetMICResource = NULL;

	if ( ! pFnGetMICResource )
		pFnGetMICResource = (UFunction*) UObject::GObjObjects()->Data[ 44672 ];

	ATgPlayerController_execGetMICResource_Parms GetMICResource_Parms;
	GetMICResource_Parms.nResourceId = nResourceId;

	pFnGetMICResource->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMICResource, &GetMICResource_Parms, NULL );

	pFnGetMICResource->FunctionFlags |= 0x400;

	return GetMICResource_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ServerLogSpeedHack
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::ServerLogSpeedHack ( )
{
	static UFunction* pFnServerLogSpeedHack = NULL;

	if ( ! pFnServerLogSpeedHack )
		pFnServerLogSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 44671 ];

	ATgPlayerController_execServerLogSpeedHack_Parms ServerLogSpeedHack_Parms;

	pFnServerLogSpeedHack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerLogSpeedHack, &ServerLogSpeedHack_Parms, NULL );

	pFnServerLogSpeedHack->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CheckPostSpawnAchievements
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::CheckPostSpawnAchievements ( )
{
	static UFunction* pFnCheckPostSpawnAchievements = NULL;

	if ( ! pFnCheckPostSpawnAchievements )
		pFnCheckPostSpawnAchievements = (UFunction*) UObject::GObjObjects()->Data[ 44670 ];

	ATgPlayerController_execCheckPostSpawnAchievements_Parms CheckPostSpawnAchievements_Parms;

	pFnCheckPostSpawnAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPostSpawnAchievements, &CheckPostSpawnAchievements_Parms, NULL );

	pFnCheckPostSpawnAchievements->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DebugGetLangMsg
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nMsgId                         ( CPF_Parm )

void ATgPlayerController::DebugGetLangMsg ( int nMsgId )
{
	static UFunction* pFnDebugGetLangMsg = NULL;

	if ( ! pFnDebugGetLangMsg )
		pFnDebugGetLangMsg = (UFunction*) UObject::GObjObjects()->Data[ 44668 ];

	ATgPlayerController_execDebugGetLangMsg_Parms DebugGetLangMsg_Parms;
	DebugGetLangMsg_Parms.nMsgId = nMsgId;

	pFnDebugGetLangMsg->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugGetLangMsg, &DebugGetLangMsg_Parms, NULL );

	pFnDebugGetLangMsg->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.PostLimitedAuctionItems
// [0x00024600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nItemId                        ( CPF_Parm )
// int                            nItemCount                     ( CPF_Parm )
// int                            nDurationHours                 ( CPF_OptionalParm | CPF_Parm )
// int                            nStartPrice                    ( CPF_OptionalParm | CPF_Parm )
// int                            nBuyoutPrice                   ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::PostLimitedAuctionItems ( int nItemId, int nItemCount, int nDurationHours, int nStartPrice, int nBuyoutPrice )
{
	static UFunction* pFnPostLimitedAuctionItems = NULL;

	if ( ! pFnPostLimitedAuctionItems )
		pFnPostLimitedAuctionItems = (UFunction*) UObject::GObjObjects()->Data[ 44662 ];

	ATgPlayerController_execPostLimitedAuctionItems_Parms PostLimitedAuctionItems_Parms;
	PostLimitedAuctionItems_Parms.nItemId = nItemId;
	PostLimitedAuctionItems_Parms.nItemCount = nItemCount;
	PostLimitedAuctionItems_Parms.nDurationHours = nDurationHours;
	PostLimitedAuctionItems_Parms.nStartPrice = nStartPrice;
	PostLimitedAuctionItems_Parms.nBuyoutPrice = nBuyoutPrice;

	pFnPostLimitedAuctionItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostLimitedAuctionItems, &PostLimitedAuctionItems_Parms, NULL );

	pFnPostLimitedAuctionItems->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ClaimPromotion
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sCode                          ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ClaimPromotion ( struct FString sCode )
{
	static UFunction* pFnClaimPromotion = NULL;

	if ( ! pFnClaimPromotion )
		pFnClaimPromotion = (UFunction*) UObject::GObjObjects()->Data[ 44660 ];

	ATgPlayerController_execClaimPromotion_Parms ClaimPromotion_Parms;
	memcpy ( &ClaimPromotion_Parms.sCode, &sCode, 0xC );

	pFnClaimPromotion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClaimPromotion, &ClaimPromotion_Parms, NULL );

	pFnClaimPromotion->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetSoundMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   NewSoundMode                   ( CPF_Parm )

void ATgPlayerController::SetSoundMode ( struct FName NewSoundMode )
{
	static UFunction* pFnSetSoundMode = NULL;

	if ( ! pFnSetSoundMode )
		pFnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 44658 ];

	ATgPlayerController_execSetSoundMode_Parms SetSoundMode_Parms;
	memcpy ( &SetSoundMode_Parms.NewSoundMode, &NewSoundMode, 0x8 );

	pFnSetSoundMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoundMode, &SetSoundMode_Parms, NULL );

	pFnSetSoundMode->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DumpPerfTrackData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::DumpPerfTrackData ( )
{
	static UFunction* pFnDumpPerfTrackData = NULL;

	if ( ! pFnDumpPerfTrackData )
		pFnDumpPerfTrackData = (UFunction*) UObject::GObjObjects()->Data[ 44657 ];

	ATgPlayerController_execDumpPerfTrackData_Parms DumpPerfTrackData_Parms;

	pFnDumpPerfTrackData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpPerfTrackData, &DumpPerfTrackData_Parms, NULL );

	pFnDumpPerfTrackData->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DebugVoice
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DebugVoice ( )
{
	static UFunction* pFnDebugVoice = NULL;

	if ( ! pFnDebugVoice )
		pFnDebugVoice = (UFunction*) UObject::GObjObjects()->Data[ 44656 ];

	ATgPlayerController_execDebugVoice_Parms DebugVoice_Parms;

	pFnDebugVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugVoice, &DebugVoice_Parms, NULL );

	pFnDebugVoice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ToggleEchoVoice
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::ToggleEchoVoice ( )
{
	static UFunction* pFnToggleEchoVoice = NULL;

	if ( ! pFnToggleEchoVoice )
		pFnToggleEchoVoice = (UFunction*) UObject::GObjObjects()->Data[ 44655 ];

	ATgPlayerController_execToggleEchoVoice_Parms ToggleEchoVoice_Parms;

	pFnToggleEchoVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleEchoVoice, &ToggleEchoVoice_Parms, NULL );

	pFnToggleEchoVoice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TestVoice
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::TestVoice ( unsigned long bOn )
{
	static UFunction* pFnTestVoice = NULL;

	if ( ! pFnTestVoice )
		pFnTestVoice = (UFunction*) UObject::GObjObjects()->Data[ 44653 ];

	ATgPlayerController_execTestVoice_Parms TestVoice_Parms;
	TestVoice_Parms.bOn = bOn;

	pFnTestVoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestVoice, &TestVoice_Parms, NULL );

	pFnTestVoice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TgPerfTrack
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bStart                         ( CPF_Parm )

void ATgPlayerController::TgPerfTrack ( unsigned long bStart )
{
	static UFunction* pFnTgPerfTrack = NULL;

	if ( ! pFnTgPerfTrack )
		pFnTgPerfTrack = (UFunction*) UObject::GObjObjects()->Data[ 44651 ];

	ATgPlayerController_execTgPerfTrack_Parms TgPerfTrack_Parms;
	TgPerfTrack_Parms.bStart = bStart;

	pFnTgPerfTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTgPerfTrack, &TgPerfTrack_Parms, NULL );

	pFnTgPerfTrack->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetPawnTickState
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nState                         ( CPF_Parm )

void ATgPlayerController::SetPawnTickState ( int nState )
{
	static UFunction* pFnSetPawnTickState = NULL;

	if ( ! pFnSetPawnTickState )
		pFnSetPawnTickState = (UFunction*) UObject::GObjObjects()->Data[ 44649 ];

	ATgPlayerController_execSetPawnTickState_Parms SetPawnTickState_Parms;
	SetPawnTickState_Parms.nState = nState;

	pFnSetPawnTickState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPawnTickState, &SetPawnTickState_Parms, NULL );

	pFnSetPawnTickState->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ToggleTick
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bDisable                       ( CPF_Parm )

void ATgPlayerController::ToggleTick ( struct FString ClassName, unsigned long bDisable )
{
	static UFunction* pFnToggleTick = NULL;

	if ( ! pFnToggleTick )
		pFnToggleTick = (UFunction*) UObject::GObjObjects()->Data[ 44646 ];

	ATgPlayerController_execToggleTick_Parms ToggleTick_Parms;
	memcpy ( &ToggleTick_Parms.ClassName, &ClassName, 0xC );
	ToggleTick_Parms.bDisable = bDisable;

	pFnToggleTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleTick, &ToggleTick_Parms, NULL );

	pFnToggleTick->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DoClientSidePerfTracking
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nLength                        ( CPF_Parm )

void ATgPlayerController::DoClientSidePerfTracking ( int nLength )
{
	static UFunction* pFnDoClientSidePerfTracking = NULL;

	if ( ! pFnDoClientSidePerfTracking )
		pFnDoClientSidePerfTracking = (UFunction*) UObject::GObjObjects()->Data[ 44644 ];

	ATgPlayerController_execDoClientSidePerfTracking_Parms DoClientSidePerfTracking_Parms;
	DoClientSidePerfTracking_Parms.nLength = nLength;

	pFnDoClientSidePerfTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoClientSidePerfTracking, &DoClientSidePerfTracking_Parms, NULL );

	pFnDoClientSidePerfTracking->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetTraceTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRange                         ( CPF_Parm )
// unsigned long                  bStopAtAnyHit                  ( CPF_Parm )

float ATgPlayerController::GetTraceTime ( float fRange, unsigned long bStopAtAnyHit )
{
	static UFunction* pFnGetTraceTime = NULL;

	if ( ! pFnGetTraceTime )
		pFnGetTraceTime = (UFunction*) UObject::GObjObjects()->Data[ 44640 ];

	ATgPlayerController_execGetTraceTime_Parms GetTraceTime_Parms;
	GetTraceTime_Parms.fRange = fRange;
	GetTraceTime_Parms.bStopAtAnyHit = bStopAtAnyHit;

	pFnGetTraceTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTraceTime, &GetTraceTime_Parms, NULL );

	pFnGetTraceTime->FunctionFlags |= 0x400;

	return GetTraceTime_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.DebugLoc
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DebugLoc ( )
{
	static UFunction* pFnDebugLoc = NULL;

	if ( ! pFnDebugLoc )
		pFnDebugLoc = (UFunction*) UObject::GObjObjects()->Data[ 44639 ];

	ATgPlayerController_execDebugLoc_Parms DebugLoc_Parms;

	pFnDebugLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugLoc, &DebugLoc_Parms, NULL );

	pFnDebugLoc->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OutputRelevantActors
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::OutputRelevantActors ( )
{
	static UFunction* pFnOutputRelevantActors = NULL;

	if ( ! pFnOutputRelevantActors )
		pFnOutputRelevantActors = (UFunction*) UObject::GObjObjects()->Data[ 44638 ];

	ATgPlayerController_execOutputRelevantActors_Parms OutputRelevantActors_Parms;

	pFnOutputRelevantActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOutputRelevantActors, &OutputRelevantActors_Parms, NULL );

	pFnOutputRelevantActors->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DebugInvisiblePlayer
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DebugInvisiblePlayer ( )
{
	static UFunction* pFnDebugInvisiblePlayer = NULL;

	if ( ! pFnDebugInvisiblePlayer )
		pFnDebugInvisiblePlayer = (UFunction*) UObject::GObjObjects()->Data[ 44637 ];

	ATgPlayerController_execDebugInvisiblePlayer_Parms DebugInvisiblePlayer_Parms;

	pFnDebugInvisiblePlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugInvisiblePlayer, &DebugInvisiblePlayer_Parms, NULL );

	pFnDebugInvisiblePlayer->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DebugStealth
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DebugStealth ( )
{
	static UFunction* pFnDebugStealth = NULL;

	if ( ! pFnDebugStealth )
		pFnDebugStealth = (UFunction*) UObject::GObjObjects()->Data[ 44636 ];

	ATgPlayerController_execDebugStealth_Parms DebugStealth_Parms;

	pFnDebugStealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugStealth, &DebugStealth_Parms, NULL );

	pFnDebugStealth->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DebugRandomSMActors
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DebugRandomSMActors ( )
{
	static UFunction* pFnDebugRandomSMActors = NULL;

	if ( ! pFnDebugRandomSMActors )
		pFnDebugRandomSMActors = (UFunction*) UObject::GObjObjects()->Data[ 44635 ];

	ATgPlayerController_execDebugRandomSMActors_Parms DebugRandomSMActors_Parms;

	pFnDebugRandomSMActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugRandomSMActors, &DebugRandomSMActors_Parms, NULL );

	pFnDebugRandomSMActors->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ActiveVoiceChannel
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nChannelType                   ( CPF_Parm )

void ATgPlayerController::ActiveVoiceChannel ( int nChannelType )
{
	static UFunction* pFnActiveVoiceChannel = NULL;

	if ( ! pFnActiveVoiceChannel )
		pFnActiveVoiceChannel = (UFunction*) UObject::GObjObjects()->Data[ 44633 ];

	ATgPlayerController_execActiveVoiceChannel_Parms ActiveVoiceChannel_Parms;
	ActiveVoiceChannel_Parms.nChannelType = nChannelType;

	pFnActiveVoiceChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActiveVoiceChannel, &ActiveVoiceChannel_Parms, NULL );

	pFnActiveVoiceChannel->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ActiveNewsChannel
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ActiveNewsChannel ( unsigned long bOn )
{
	static UFunction* pFnActiveNewsChannel = NULL;

	if ( ! pFnActiveNewsChannel )
		pFnActiveNewsChannel = (UFunction*) UObject::GObjObjects()->Data[ 44631 ];

	ATgPlayerController_execActiveNewsChannel_Parms ActiveNewsChannel_Parms;
	ActiveNewsChannel_Parms.bOn = bOn;

	pFnActiveNewsChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActiveNewsChannel, &ActiveNewsChannel_Parms, NULL );

	pFnActiveNewsChannel->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetNewsSpeakerLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::SetNewsSpeakerLocation ( )
{
	static UFunction* pFnSetNewsSpeakerLocation = NULL;

	if ( ! pFnSetNewsSpeakerLocation )
		pFnSetNewsSpeakerLocation = (UFunction*) UObject::GObjObjects()->Data[ 44630 ];

	ATgPlayerController_execSetNewsSpeakerLocation_Parms SetNewsSpeakerLocation_Parms;

	pFnSetNewsSpeakerLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNewsSpeakerLocation, &SetNewsSpeakerLocation_Parms, NULL );

	pFnSetNewsSpeakerLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.UpdateNewsListeningLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::UpdateNewsListeningLocation ( )
{
	static UFunction* pFnUpdateNewsListeningLocation = NULL;

	if ( ! pFnUpdateNewsListeningLocation )
		pFnUpdateNewsListeningLocation = (UFunction*) UObject::GObjObjects()->Data[ 44629 ];

	ATgPlayerController_execUpdateNewsListeningLocation_Parms UpdateNewsListeningLocation_Parms;

	pFnUpdateNewsListeningLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateNewsListeningLocation, &UpdateNewsListeningLocation_Parms, NULL );

	pFnUpdateNewsListeningLocation->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CheckMaxEffectDistance
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ATgPlayerController::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance )
{
	static UFunction* pFnCheckMaxEffectDistance = NULL;

	if ( ! pFnCheckMaxEffectDistance )
		pFnCheckMaxEffectDistance = (UFunction*) UObject::GObjObjects()->Data[ 44624 ];

	ATgPlayerController_execCheckMaxEffectDistance_Parms CheckMaxEffectDistance_Parms;
	CheckMaxEffectDistance_Parms.P = P;
	memcpy ( &CheckMaxEffectDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	CheckMaxEffectDistance_Parms.CullDistance = CullDistance;

	pFnCheckMaxEffectDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckMaxEffectDistance, &CheckMaxEffectDistance_Parms, NULL );

	pFnCheckMaxEffectDistance->FunctionFlags |= 0x400;

	return CheckMaxEffectDistance_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.DisplayReticuleEmitter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bDisplay                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::DisplayReticuleEmitter ( unsigned long bDisplay, struct FVector HitLocation )
{
	static UFunction* pFnDisplayReticuleEmitter = NULL;

	if ( ! pFnDisplayReticuleEmitter )
		pFnDisplayReticuleEmitter = (UFunction*) UObject::GObjObjects()->Data[ 44621 ];

	ATgPlayerController_execDisplayReticuleEmitter_Parms DisplayReticuleEmitter_Parms;
	DisplayReticuleEmitter_Parms.bDisplay = bDisplay;
	memcpy ( &DisplayReticuleEmitter_Parms.HitLocation, &HitLocation, 0xC );

	pFnDisplayReticuleEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayReticuleEmitter, &DisplayReticuleEmitter_Parms, NULL );

	pFnDisplayReticuleEmitter->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CheckRangedTargetDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDevice*               Dev                            ( CPF_Parm )

void ATgPlayerController::CheckRangedTargetDevice ( class ATgDevice* Dev )
{
	static UFunction* pFnCheckRangedTargetDevice = NULL;

	if ( ! pFnCheckRangedTargetDevice )
		pFnCheckRangedTargetDevice = (UFunction*) UObject::GObjObjects()->Data[ 44619 ];

	ATgPlayerController_execCheckRangedTargetDevice_Parms CheckRangedTargetDevice_Parms;
	CheckRangedTargetDevice_Parms.Dev = Dev;

	pFnCheckRangedTargetDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckRangedTargetDevice, &CheckRangedTargetDevice_Parms, NULL );

	pFnCheckRangedTargetDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TraceWeaponFire
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDevice*               Dev                            ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// class AActor*                  TraceActor                     ( CPF_OptionalParm | CPF_Parm )

struct FVector ATgPlayerController::TraceWeaponFire ( class ATgDevice* Dev, struct FVector StartTrace, struct FVector EndTrace, class AActor* TraceActor )
{
	static UFunction* pFnTraceWeaponFire = NULL;

	if ( ! pFnTraceWeaponFire )
		pFnTraceWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 44613 ];

	ATgPlayerController_execTraceWeaponFire_Parms TraceWeaponFire_Parms;
	TraceWeaponFire_Parms.Dev = Dev;
	memcpy ( &TraceWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &TraceWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	TraceWeaponFire_Parms.TraceActor = TraceActor;

	pFnTraceWeaponFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceWeaponFire, &TraceWeaponFire_Parms, NULL );

	pFnTraceWeaponFire->FunctionFlags |= 0x400;

	return TraceWeaponFire_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.UseFreezeDeathCam
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::UseFreezeDeathCam ( )
{
	static UFunction* pFnUseFreezeDeathCam = NULL;

	if ( ! pFnUseFreezeDeathCam )
		pFnUseFreezeDeathCam = (UFunction*) UObject::GObjObjects()->Data[ 44611 ];

	ATgPlayerController_execUseFreezeDeathCam_Parms UseFreezeDeathCam_Parms;

	pFnUseFreezeDeathCam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUseFreezeDeathCam, &UseFreezeDeathCam_Parms, NULL );

	pFnUseFreezeDeathCam->FunctionFlags |= 0x400;

	return UseFreezeDeathCam_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.OpenUpdateFaceScreen
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::OpenUpdateFaceScreen ( )
{
	static UFunction* pFnOpenUpdateFaceScreen = NULL;

	if ( ! pFnOpenUpdateFaceScreen )
		pFnOpenUpdateFaceScreen = (UFunction*) UObject::GObjObjects()->Data[ 44610 ];

	ATgPlayerController_execOpenUpdateFaceScreen_Parms OpenUpdateFaceScreen_Parms;

	pFnOpenUpdateFaceScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenUpdateFaceScreen, &OpenUpdateFaceScreen_Parms, NULL );

	pFnOpenUpdateFaceScreen->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OpenUpdateHairScreen
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::OpenUpdateHairScreen ( )
{
	static UFunction* pFnOpenUpdateHairScreen = NULL;

	if ( ! pFnOpenUpdateHairScreen )
		pFnOpenUpdateHairScreen = (UFunction*) UObject::GObjObjects()->Data[ 44609 ];

	ATgPlayerController_execOpenUpdateHairScreen_Parms OpenUpdateHairScreen_Parms;

	pFnOpenUpdateHairScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenUpdateHairScreen, &OpenUpdateHairScreen_Parms, NULL );

	pFnOpenUpdateHairScreen->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OpenCraftScreen
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::OpenCraftScreen ( )
{
	static UFunction* pFnOpenCraftScreen = NULL;

	if ( ! pFnOpenCraftScreen )
		pFnOpenCraftScreen = (UFunction*) UObject::GObjObjects()->Data[ 44608 ];

	ATgPlayerController_execOpenCraftScreen_Parms OpenCraftScreen_Parms;

	pFnOpenCraftScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenCraftScreen, &OpenCraftScreen_Parms, NULL );

	pFnOpenCraftScreen->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OpenVendorScene
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )

void ATgPlayerController::OpenVendorScene ( int nLootTableId )
{
	static UFunction* pFnOpenVendorScene = NULL;

	if ( ! pFnOpenVendorScene )
		pFnOpenVendorScene = (UFunction*) UObject::GObjObjects()->Data[ 44606 ];

	ATgPlayerController_execOpenVendorScene_Parms OpenVendorScene_Parms;
	OpenVendorScene_Parms.nLootTableId = nLootTableId;

	pFnOpenVendorScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenVendorScene, &OpenVendorScene_Parms, NULL );

	pFnOpenVendorScene->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DoAutoLogin
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DoAutoLogin ( )
{
	static UFunction* pFnDoAutoLogin = NULL;

	if ( ! pFnDoAutoLogin )
		pFnDoAutoLogin = (UFunction*) UObject::GObjObjects()->Data[ 44605 ];

	ATgPlayerController_execDoAutoLogin_Parms DoAutoLogin_Parms;

	pFnDoAutoLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoAutoLogin, &DoAutoLogin_Parms, NULL );

	pFnDoAutoLogin->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ConvertTimeDisplay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nMinutes                       ( CPF_Parm )
// struct FString                 sDisplay                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ATgPlayerController::ConvertTimeDisplay ( int nMinutes, struct FString* sDisplay )
{
	static UFunction* pFnConvertTimeDisplay = NULL;

	if ( ! pFnConvertTimeDisplay )
		pFnConvertTimeDisplay = (UFunction*) UObject::GObjObjects()->Data[ 44602 ];

	ATgPlayerController_execConvertTimeDisplay_Parms ConvertTimeDisplay_Parms;
	ConvertTimeDisplay_Parms.nMinutes = nMinutes;

	pFnConvertTimeDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConvertTimeDisplay, &ConvertTimeDisplay_Parms, NULL );

	pFnConvertTimeDisplay->FunctionFlags |= 0x400;

	if ( sDisplay )
		memcpy ( sDisplay, &ConvertTimeDisplay_Parms.sDisplay, 0xC );
};

// Function TgGame.TgPlayerController.GetAfkTimeout
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPlayerController::GetAfkTimeout ( )
{
	static UFunction* pFnGetAfkTimeout = NULL;

	if ( ! pFnGetAfkTimeout )
		pFnGetAfkTimeout = (UFunction*) UObject::GObjObjects()->Data[ 44600 ];

	ATgPlayerController_execGetAfkTimeout_Parms GetAfkTimeout_Parms;

	pFnGetAfkTimeout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAfkTimeout, &GetAfkTimeout_Parms, NULL );

	pFnGetAfkTimeout->FunctionFlags |= 0x400;

	return GetAfkTimeout_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CheckStealthedCharacter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 P                              ( CPF_Parm )

void ATgPlayerController::CheckStealthedCharacter ( class ATgPawn* P )
{
	static UFunction* pFnCheckStealthedCharacter = NULL;

	if ( ! pFnCheckStealthedCharacter )
		pFnCheckStealthedCharacter = (UFunction*) UObject::GObjObjects()->Data[ 44598 ];

	ATgPlayerController_execCheckStealthedCharacter_Parms CheckStealthedCharacter_Parms;
	CheckStealthedCharacter_Parms.P = P;

	pFnCheckStealthedCharacter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckStealthedCharacter, &CheckStealthedCharacter_Parms, NULL );

	pFnCheckStealthedCharacter->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CheckPendingDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::CheckPendingDevice ( )
{
	static UFunction* pFnCheckPendingDevice = NULL;

	if ( ! pFnCheckPendingDevice )
		pFnCheckPendingDevice = (UFunction*) UObject::GObjObjects()->Data[ 44597 ];

	ATgPlayerController_execCheckPendingDevice_Parms CheckPendingDevice_Parms;

	pFnCheckPendingDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPendingDevice, &CheckPendingDevice_Parms, NULL );

	pFnCheckPendingDevice->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.LoopRelevantPawns
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::LoopRelevantPawns ( )
{
	static UFunction* pFnLoopRelevantPawns = NULL;

	if ( ! pFnLoopRelevantPawns )
		pFnLoopRelevantPawns = (UFunction*) UObject::GObjObjects()->Data[ 44596 ];

	ATgPlayerController_execLoopRelevantPawns_Parms LoopRelevantPawns_Parms;

	pFnLoopRelevantPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoopRelevantPawns, &LoopRelevantPawns_Parms, NULL );

	pFnLoopRelevantPawns->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.RefreshRandomSMSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::RefreshRandomSMSettings ( )
{
	static UFunction* pFnRefreshRandomSMSettings = NULL;

	if ( ! pFnRefreshRandomSMSettings )
		pFnRefreshRandomSMSettings = (UFunction*) UObject::GObjObjects()->Data[ 44595 ];

	ATgPlayerController_execRefreshRandomSMSettings_Parms RefreshRandomSMSettings_Parms;

	pFnRefreshRandomSMSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshRandomSMSettings, &RefreshRandomSMSettings_Parms, NULL );

	pFnRefreshRandomSMSettings->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ShouldShowDyeColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 P                              ( CPF_Parm )

bool ATgPlayerController::ShouldShowDyeColor ( class ATgPawn* P )
{
	static UFunction* pFnShouldShowDyeColor = NULL;

	if ( ! pFnShouldShowDyeColor )
		pFnShouldShowDyeColor = (UFunction*) UObject::GObjObjects()->Data[ 44592 ];

	ATgPlayerController_execShouldShowDyeColor_Parms ShouldShowDyeColor_Parms;
	ShouldShowDyeColor_Parms.P = P;

	pFnShouldShowDyeColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowDyeColor, &ShouldShowDyeColor_Parms, NULL );

	pFnShouldShowDyeColor->FunctionFlags |= 0x400;

	return ShouldShowDyeColor_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.SetDyeColorOption
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nOpt                           ( CPF_Parm )

void ATgPlayerController::SetDyeColorOption ( int nOpt )
{
	static UFunction* pFnSetDyeColorOption = NULL;

	if ( ! pFnSetDyeColorOption )
		pFnSetDyeColorOption = (UFunction*) UObject::GObjObjects()->Data[ 44590 ];

	ATgPlayerController_execSetDyeColorOption_Parms SetDyeColorOption_Parms;
	SetDyeColorOption_Parms.nOpt = nOpt;

	pFnSetDyeColorOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDyeColorOption, &SetDyeColorOption_Parms, NULL );

	pFnSetDyeColorOption->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.EnableVoip
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::EnableVoip ( )
{
	static UFunction* pFnEnableVoip = NULL;

	if ( ! pFnEnableVoip )
		pFnEnableVoip = (UFunction*) UObject::GObjObjects()->Data[ 44589 ];

	ATgPlayerController_execEnableVoip_Parms EnableVoip_Parms;

	pFnEnableVoip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableVoip, &EnableVoip_Parms, NULL );

	pFnEnableVoip->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DisableVoip
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::DisableVoip ( )
{
	static UFunction* pFnDisableVoip = NULL;

	if ( ! pFnDisableVoip )
		pFnDisableVoip = (UFunction*) UObject::GObjObjects()->Data[ 44588 ];

	ATgPlayerController_execDisableVoip_Parms DisableVoip_Parms;

	pFnDisableVoip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableVoip, &DisableVoip_Parms, NULL );

	pFnDisableVoip->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.Unfilter
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::Unfilter ( struct FString PlayerName )
{
	static UFunction* pFnUnfilter = NULL;

	if ( ! pFnUnfilter )
		pFnUnfilter = (UFunction*) UObject::GObjObjects()->Data[ 44586 ];

	ATgPlayerController_execUnfilter_Parms Unfilter_Parms;
	memcpy ( &Unfilter_Parms.PlayerName, &PlayerName, 0xC );

	pFnUnfilter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnfilter, &Unfilter_Parms, NULL );

	pFnUnfilter->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.Filter
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::Filter ( struct FString PlayerName )
{
	static UFunction* pFnFilter = NULL;

	if ( ! pFnFilter )
		pFnFilter = (UFunction*) UObject::GObjObjects()->Data[ 44584 ];

	ATgPlayerController_execFilter_Parms Filter_Parms;
	memcpy ( &Filter_Parms.PlayerName, &PlayerName, 0xC );

	pFnFilter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFilter, &Filter_Parms, NULL );

	pFnFilter->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.PropagateVoipSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::PropagateVoipSettings ( )
{
	static UFunction* pFnPropagateVoipSettings = NULL;

	if ( ! pFnPropagateVoipSettings )
		pFnPropagateVoipSettings = (UFunction*) UObject::GObjObjects()->Data[ 44583 ];

	ATgPlayerController_execPropagateVoipSettings_Parms PropagateVoipSettings_Parms;

	pFnPropagateVoipSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPropagateVoipSettings, &PropagateVoipSettings_Parms, NULL );

	pFnPropagateVoipSettings->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ToggleVoipDetailedLog
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::ToggleVoipDetailedLog ( )
{
	static UFunction* pFnToggleVoipDetailedLog = NULL;

	if ( ! pFnToggleVoipDetailedLog )
		pFnToggleVoipDetailedLog = (UFunction*) UObject::GObjObjects()->Data[ 44582 ];

	ATgPlayerController_execToggleVoipDetailedLog_Parms ToggleVoipDetailedLog_Parms;

	pFnToggleVoipDetailedLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleVoipDetailedLog, &ToggleVoipDetailedLog_Parms, NULL );

	pFnToggleVoipDetailedLog->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.UnmuteAll
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::UnmuteAll ( )
{
	static UFunction* pFnUnmuteAll = NULL;

	if ( ! pFnUnmuteAll )
		pFnUnmuteAll = (UFunction*) UObject::GObjObjects()->Data[ 44581 ];

	ATgPlayerController_execUnmuteAll_Parms UnmuteAll_Parms;

	pFnUnmuteAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnmuteAll, &UnmuteAll_Parms, NULL );

	pFnUnmuteAll->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.MuteAll
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::MuteAll ( )
{
	static UFunction* pFnMuteAll = NULL;

	if ( ! pFnMuteAll )
		pFnMuteAll = (UFunction*) UObject::GObjObjects()->Data[ 44580 ];

	ATgPlayerController_execMuteAll_Parms MuteAll_Parms;

	pFnMuteAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMuteAll, &MuteAll_Parms, NULL );

	pFnMuteAll->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.UnMute
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsPlayerName                   ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::UnMute ( struct FString fsPlayerName )
{
	static UFunction* pFnUnMute = NULL;

	if ( ! pFnUnMute )
		pFnUnMute = (UFunction*) UObject::GObjObjects()->Data[ 44578 ];

	ATgPlayerController_execUnMute_Parms UnMute_Parms;
	memcpy ( &UnMute_Parms.fsPlayerName, &fsPlayerName, 0xC );

	pFnUnMute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnMute, &UnMute_Parms, NULL );

	pFnUnMute->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.Mute
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsPlayerName                   ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::Mute ( struct FString fsPlayerName )
{
	static UFunction* pFnMute = NULL;

	if ( ! pFnMute )
		pFnMute = (UFunction*) UObject::GObjObjects()->Data[ 44576 ];

	ATgPlayerController_execMute_Parms Mute_Parms;
	memcpy ( &Mute_Parms.fsPlayerName, &fsPlayerName, 0xC );

	pFnMute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMute, &Mute_Parms, NULL );

	pFnMute->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerTestSystemMailItem
// [0x002244C0] ( FUNC_Native )
// Parameters infos:
// int                            nPlayerId                      ( CPF_Parm )
// int                            nItemId                        ( CPF_Parm )
// int                            nQuantity                      ( CPF_Parm )
// unsigned long                  bSystemCraft                   ( CPF_OptionalParm | CPF_Parm )
// int                            nMaxQuanlityValueId            ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ServerTestSystemMailItem ( int nPlayerId, int nItemId, int nQuantity, unsigned long bSystemCraft, int nMaxQuanlityValueId )
{
	static UFunction* pFnServerTestSystemMailItem = NULL;

	if ( ! pFnServerTestSystemMailItem )
		pFnServerTestSystemMailItem = (UFunction*) UObject::GObjObjects()->Data[ 44570 ];

	ATgPlayerController_execServerTestSystemMailItem_Parms ServerTestSystemMailItem_Parms;
	ServerTestSystemMailItem_Parms.nPlayerId = nPlayerId;
	ServerTestSystemMailItem_Parms.nItemId = nItemId;
	ServerTestSystemMailItem_Parms.nQuantity = nQuantity;
	ServerTestSystemMailItem_Parms.bSystemCraft = bSystemCraft;
	ServerTestSystemMailItem_Parms.nMaxQuanlityValueId = nMaxQuanlityValueId;

	pFnServerTestSystemMailItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerTestSystemMailItem, &ServerTestSystemMailItem_Parms, NULL );

	pFnServerTestSystemMailItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerSetPawnAlwaysRelevant
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nDistSquared                   ( CPF_Parm )

void ATgPlayerController::ServerSetPawnAlwaysRelevant ( int nDistSquared )
{
	static UFunction* pFnServerSetPawnAlwaysRelevant = NULL;

	if ( ! pFnServerSetPawnAlwaysRelevant )
		pFnServerSetPawnAlwaysRelevant = (UFunction*) UObject::GObjObjects()->Data[ 44568 ];

	ATgPlayerController_execServerSetPawnAlwaysRelevant_Parms ServerSetPawnAlwaysRelevant_Parms;
	ServerSetPawnAlwaysRelevant_Parms.nDistSquared = nDistSquared;

	pFnServerSetPawnAlwaysRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetPawnAlwaysRelevant, &ServerSetPawnAlwaysRelevant_Parms, NULL );

	pFnServerSetPawnAlwaysRelevant->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerAcceptNewProfileFromEquipScreen
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nProfileId                     ( CPF_Parm )
// struct FTGEQUIP_SLOTS_STRUCT   DeviceArray                    ( CPF_Parm )

void ATgPlayerController::ServerAcceptNewProfileFromEquipScreen ( int nProfileId, struct FTGEQUIP_SLOTS_STRUCT DeviceArray )
{
	static UFunction* pFnServerAcceptNewProfileFromEquipScreen = NULL;

	if ( ! pFnServerAcceptNewProfileFromEquipScreen )
		pFnServerAcceptNewProfileFromEquipScreen = (UFunction*) UObject::GObjObjects()->Data[ 44565 ];

	ATgPlayerController_execServerAcceptNewProfileFromEquipScreen_Parms ServerAcceptNewProfileFromEquipScreen_Parms;
	ServerAcceptNewProfileFromEquipScreen_Parms.nProfileId = nProfileId;
	memcpy ( &ServerAcceptNewProfileFromEquipScreen_Parms.DeviceArray, &DeviceArray, 0xC8 );

	pFnServerAcceptNewProfileFromEquipScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerAcceptNewProfileFromEquipScreen, &ServerAcceptNewProfileFromEquipScreen_Parms, NULL );

	pFnServerAcceptNewProfileFromEquipScreen->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerChangeCoalition
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nCoalition                     ( CPF_Parm )

void ATgPlayerController::ServerChangeCoalition ( unsigned char nCoalition )
{
	static UFunction* pFnServerChangeCoalition = NULL;

	if ( ! pFnServerChangeCoalition )
		pFnServerChangeCoalition = (UFunction*) UObject::GObjObjects()->Data[ 44563 ];

	ATgPlayerController_execServerChangeCoalition_Parms ServerChangeCoalition_Parms;
	ServerChangeCoalition_Parms.nCoalition = nCoalition;

	pFnServerChangeCoalition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerChangeCoalition, &ServerChangeCoalition_Parms, NULL );

	pFnServerChangeCoalition->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerChangeTaskForce
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nTaskForce                     ( CPF_Parm )

void ATgPlayerController::ServerChangeTaskForce ( unsigned char nTaskForce )
{
	static UFunction* pFnServerChangeTaskForce = NULL;

	if ( ! pFnServerChangeTaskForce )
		pFnServerChangeTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 44561 ];

	ATgPlayerController_execServerChangeTaskForce_Parms ServerChangeTaskForce_Parms;
	ServerChangeTaskForce_Parms.nTaskForce = nTaskForce;

	pFnServerChangeTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerChangeTaskForce, &ServerChangeTaskForce_Parms, NULL );

	pFnServerChangeTaskForce->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerLoadItemProfile
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// int                            nId                            ( CPF_Parm )

void ATgPlayerController::ServerLoadItemProfile ( int nId )
{
	static UFunction* pFnServerLoadItemProfile = NULL;

	if ( ! pFnServerLoadItemProfile )
		pFnServerLoadItemProfile = (UFunction*) UObject::GObjObjects()->Data[ 44559 ];

	ATgPlayerController_execServerLoadItemProfile_Parms ServerLoadItemProfile_Parms;
	ServerLoadItemProfile_Parms.nId = nId;

	pFnServerLoadItemProfile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerLoadItemProfile, &ServerLoadItemProfile_Parms, NULL );

	pFnServerLoadItemProfile->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetPlayerControlPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgPlayerController::GetPlayerControlPawn ( )
{
	static UFunction* pFnGetPlayerControlPawn = NULL;

	if ( ! pFnGetPlayerControlPawn )
		pFnGetPlayerControlPawn = (UFunction*) UObject::GObjObjects()->Data[ 44557 ];

	ATgPlayerController_execGetPlayerControlPawn_Parms GetPlayerControlPawn_Parms;

	pFnGetPlayerControlPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControlPawn, &GetPlayerControlPawn_Parms, NULL );

	pFnGetPlayerControlPawn->FunctionFlags |= 0x400;

	return GetPlayerControlPawn_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.SendGameOverEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  gameWinState                   ( CPF_Parm )
// unsigned long                  bPlayerIsAttacker              ( CPF_Parm )

void ATgPlayerController::SendGameOverEvent ( unsigned char gameWinState, unsigned long bPlayerIsAttacker )
{
	static UFunction* pFnSendGameOverEvent = NULL;

	if ( ! pFnSendGameOverEvent )
		pFnSendGameOverEvent = (UFunction*) UObject::GObjObjects()->Data[ 44554 ];

	ATgPlayerController_execSendGameOverEvent_Parms SendGameOverEvent_Parms;
	SendGameOverEvent_Parms.gameWinState = gameWinState;
	SendGameOverEvent_Parms.bPlayerIsAttacker = bPlayerIsAttacker;

	pFnSendGameOverEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendGameOverEvent, &SendGameOverEvent_Parms, NULL );

	pFnSendGameOverEvent->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ToggleDeathZoom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void ATgPlayerController::ToggleDeathZoom ( unsigned long bOn )
{
	static UFunction* pFnToggleDeathZoom = NULL;

	if ( ! pFnToggleDeathZoom )
		pFnToggleDeathZoom = (UFunction*) UObject::GObjObjects()->Data[ 44552 ];

	ATgPlayerController_execToggleDeathZoom_Parms ToggleDeathZoom_Parms;
	ToggleDeathZoom_Parms.bOn = bOn;

	pFnToggleDeathZoom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleDeathZoom, &ToggleDeathZoom_Parms, NULL );

	pFnToggleDeathZoom->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetDeathPitchOffset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          CurrentPitch                   ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

float ATgPlayerController::GetDeathPitchOffset ( float CurrentPitch, float DeltaTime )
{
	static UFunction* pFnGetDeathPitchOffset = NULL;

	if ( ! pFnGetDeathPitchOffset )
		pFnGetDeathPitchOffset = (UFunction*) UObject::GObjObjects()->Data[ 44548 ];

	ATgPlayerController_execGetDeathPitchOffset_Parms GetDeathPitchOffset_Parms;
	GetDeathPitchOffset_Parms.CurrentPitch = CurrentPitch;
	GetDeathPitchOffset_Parms.DeltaTime = DeltaTime;

	pFnGetDeathPitchOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeathPitchOffset, &GetDeathPitchOffset_Parms, NULL );

	pFnGetDeathPitchOffset->FunctionFlags |= 0x400;

	return GetDeathPitchOffset_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ToggleVoiceCapture
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )
// int                            nChannelType                   ( CPF_Parm )

void ATgPlayerController::ToggleVoiceCapture ( unsigned long bEnabled, int nChannelType )
{
	static UFunction* pFnToggleVoiceCapture = NULL;

	if ( ! pFnToggleVoiceCapture )
		pFnToggleVoiceCapture = (UFunction*) UObject::GObjObjects()->Data[ 44545 ];

	ATgPlayerController_execToggleVoiceCapture_Parms ToggleVoiceCapture_Parms;
	ToggleVoiceCapture_Parms.bEnabled = bEnabled;
	ToggleVoiceCapture_Parms.nChannelType = nChannelType;

	pFnToggleVoiceCapture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleVoiceCapture, &ToggleVoiceCapture_Parms, NULL );

	pFnToggleVoiceCapture->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.DumpClassInfoToFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sClassName                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::DumpClassInfoToFile ( struct FString sClassName )
{
	static UFunction* pFnDumpClassInfoToFile = NULL;

	if ( ! pFnDumpClassInfoToFile )
		pFnDumpClassInfoToFile = (UFunction*) UObject::GObjObjects()->Data[ 44543 ];

	ATgPlayerController_execDumpClassInfoToFile_Parms DumpClassInfoToFile_Parms;
	memcpy ( &DumpClassInfoToFile_Parms.sClassName, &sClassName, 0xC );

	pFnDumpClassInfoToFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpClassInfoToFile, &DumpClassInfoToFile_Parms, NULL );

	pFnDumpClassInfoToFile->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ClientLoadDevices
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgSeqAct_ClientLoadDevices* Action                         ( CPF_Parm )

void ATgPlayerController::ClientLoadDevices ( class UTgSeqAct_ClientLoadDevices* Action )
{
	static UFunction* pFnClientLoadDevices = NULL;

	if ( ! pFnClientLoadDevices )
		pFnClientLoadDevices = (UFunction*) UObject::GObjObjects()->Data[ 44541 ];

	ATgPlayerController_execClientLoadDevices_Parms ClientLoadDevices_Parms;
	ClientLoadDevices_Parms.Action = Action;

	pFnClientLoadDevices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientLoadDevices, &ClientLoadDevices_Parms, NULL );

	pFnClientLoadDevices->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetHUDFade
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFadeIn                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm )

void ATgPlayerController::SetHUDFade ( unsigned long bFadeIn, float FadeTime )
{
	static UFunction* pFnSetHUDFade = NULL;

	if ( ! pFnSetHUDFade )
		pFnSetHUDFade = (UFunction*) UObject::GObjObjects()->Data[ 44538 ];

	ATgPlayerController_execSetHUDFade_Parms SetHUDFade_Parms;
	SetHUDFade_Parms.bFadeIn = bFadeIn;
	SetHUDFade_Parms.FadeTime = FadeTime;

	pFnSetHUDFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHUDFade, &SetHUDFade_Parms, NULL );

	pFnSetHUDFade->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.HideHUDElement
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Element                        ( CPF_Parm )

void ATgPlayerController::HideHUDElement ( unsigned char Element )
{
	static UFunction* pFnHideHUDElement = NULL;

	if ( ! pFnHideHUDElement )
		pFnHideHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 44536 ];

	ATgPlayerController_execHideHUDElement_Parms HideHUDElement_Parms;
	HideHUDElement_Parms.Element = Element;

	pFnHideHUDElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideHUDElement, &HideHUDElement_Parms, NULL );

	pFnHideHUDElement->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ShowHUDElement
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Element                        ( CPF_Parm )

void ATgPlayerController::ShowHUDElement ( unsigned char Element )
{
	static UFunction* pFnShowHUDElement = NULL;

	if ( ! pFnShowHUDElement )
		pFnShowHUDElement = (UFunction*) UObject::GObjObjects()->Data[ 44534 ];

	ATgPlayerController_execShowHUDElement_Parms ShowHUDElement_Parms;
	ShowHUDElement_Parms.Element = Element;

	pFnShowHUDElement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowHUDElement, &ShowHUDElement_Parms, NULL );

	pFnShowHUDElement->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.FadeMasterSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFadeIn                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm )

void ATgPlayerController::FadeMasterSound ( unsigned long bFadeIn, float FadeTime )
{
	static UFunction* pFnFadeMasterSound = NULL;

	if ( ! pFnFadeMasterSound )
		pFnFadeMasterSound = (UFunction*) UObject::GObjObjects()->Data[ 44531 ];

	ATgPlayerController_execFadeMasterSound_Parms FadeMasterSound_Parms;
	FadeMasterSound_Parms.bFadeIn = bFadeIn;
	FadeMasterSound_Parms.FadeTime = FadeTime;

	pFnFadeMasterSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeMasterSound, &FadeMasterSound_Parms, NULL );

	pFnFadeMasterSound->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TriggerOmegaAlert
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForced                        ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::TriggerOmegaAlert ( unsigned long bForced )
{
	static UFunction* pFnTriggerOmegaAlert = NULL;

	if ( ! pFnTriggerOmegaAlert )
		pFnTriggerOmegaAlert = (UFunction*) UObject::GObjObjects()->Data[ 44529 ];

	ATgPlayerController_execTriggerOmegaAlert_Parms TriggerOmegaAlert_Parms;
	TriggerOmegaAlert_Parms.bForced = bForced;

	pFnTriggerOmegaAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerOmegaAlert, &TriggerOmegaAlert_Parms, NULL );

	pFnTriggerOmegaAlert->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CloseConfirmPopup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   fnCallback                     ( CPF_Parm )
// unsigned long                  bTellGameClient                ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::CloseConfirmPopup ( struct FName fnCallback, unsigned long bTellGameClient )
{
	static UFunction* pFnCloseConfirmPopup = NULL;

	if ( ! pFnCloseConfirmPopup )
		pFnCloseConfirmPopup = (UFunction*) UObject::GObjObjects()->Data[ 44526 ];

	ATgPlayerController_execCloseConfirmPopup_Parms CloseConfirmPopup_Parms;
	memcpy ( &CloseConfirmPopup_Parms.fnCallback, &fnCallback, 0x8 );
	CloseConfirmPopup_Parms.bTellGameClient = bTellGameClient;

	pFnCloseConfirmPopup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseConfirmPopup, &CloseConfirmPopup_Parms, NULL );

	pFnCloseConfirmPopup->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OpenConfirmPopup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 fsMessage                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   fnCallback                     ( CPF_Parm )

void ATgPlayerController::OpenConfirmPopup ( struct FString fsMessage, struct FName fnCallback )
{
	static UFunction* pFnOpenConfirmPopup = NULL;

	if ( ! pFnOpenConfirmPopup )
		pFnOpenConfirmPopup = (UFunction*) UObject::GObjObjects()->Data[ 44523 ];

	ATgPlayerController_execOpenConfirmPopup_Parms OpenConfirmPopup_Parms;
	memcpy ( &OpenConfirmPopup_Parms.fsMessage, &fsMessage, 0xC );
	memcpy ( &OpenConfirmPopup_Parms.fnCallback, &fnCallback, 0x8 );

	pFnOpenConfirmPopup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenConfirmPopup, &OpenConfirmPopup_Parms, NULL );

	pFnOpenConfirmPopup->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetDeviceIdByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sDeviceName                    ( CPF_Parm | CPF_NeedCtorLink )

int ATgPlayerController::GetDeviceIdByName ( struct FString sDeviceName )
{
	static UFunction* pFnGetDeviceIdByName = NULL;

	if ( ! pFnGetDeviceIdByName )
		pFnGetDeviceIdByName = (UFunction*) UObject::GObjObjects()->Data[ 44520 ];

	ATgPlayerController_execGetDeviceIdByName_Parms GetDeviceIdByName_Parms;
	memcpy ( &GetDeviceIdByName_Parms.sDeviceName, &sDeviceName, 0xC );

	pFnGetDeviceIdByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceIdByName, &GetDeviceIdByName_Parms, NULL );

	pFnGetDeviceIdByName->FunctionFlags |= 0x400;

	return GetDeviceIdByName_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CanShiftReticule
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::CanShiftReticule ( )
{
	static UFunction* pFnCanShiftReticule = NULL;

	if ( ! pFnCanShiftReticule )
		pFnCanShiftReticule = (UFunction*) UObject::GObjObjects()->Data[ 44518 ];

	ATgPlayerController_execCanShiftReticule_Parms CanShiftReticule_Parms;

	pFnCanShiftReticule->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanShiftReticule, &CanShiftReticule_Parms, NULL );

	pFnCanShiftReticule->FunctionFlags |= 0x400;

	return CanShiftReticule_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CheckAlertSounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bHealthAlert                   ( CPF_Parm )
// unsigned long                  bPowerAlert                    ( CPF_Parm )

void ATgPlayerController::CheckAlertSounds ( unsigned long bHealthAlert, unsigned long bPowerAlert )
{
	static UFunction* pFnCheckAlertSounds = NULL;

	if ( ! pFnCheckAlertSounds )
		pFnCheckAlertSounds = (UFunction*) UObject::GObjObjects()->Data[ 44515 ];

	ATgPlayerController_execCheckAlertSounds_Parms CheckAlertSounds_Parms;
	CheckAlertSounds_Parms.bHealthAlert = bHealthAlert;
	CheckAlertSounds_Parms.bPowerAlert = bPowerAlert;

	pFnCheckAlertSounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAlertSounds, &CheckAlertSounds_Parms, NULL );

	pFnCheckAlertSounds->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 fsObject                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 fsVariable                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 fsValue                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::SetValue ( struct FString fsObject, struct FString fsVariable, struct FString fsValue )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = (UFunction*) UObject::GObjObjects()->Data[ 44511 ];

	ATgPlayerController_execSetValue_Parms SetValue_Parms;
	memcpy ( &SetValue_Parms.fsObject, &fsObject, 0xC );
	memcpy ( &SetValue_Parms.fsVariable, &fsVariable, 0xC );
	memcpy ( &SetValue_Parms.fsValue, &fsValue, 0xC );

	pFnSetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );

	pFnSetValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 fsObject                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 fsValue                        ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::GetValue ( struct FString fsObject, struct FString fsValue )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 44508 ];

	ATgPlayerController_execGetValue_Parms GetValue_Parms;
	memcpy ( &GetValue_Parms.fsObject, &fsObject, 0xC );
	memcpy ( &GetValue_Parms.fsValue, &fsValue, 0xC );

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.bIsEditor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::bIsEditor ( )
{
	static UFunction* pFnbIsEditor = NULL;

	if ( ! pFnbIsEditor )
		pFnbIsEditor = (UFunction*) UObject::GObjObjects()->Data[ 44506 ];

	ATgPlayerController_execbIsEditor_Parms bIsEditor_Parms;

	pFnbIsEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnbIsEditor, &bIsEditor_Parms, NULL );

	pFnbIsEditor->FunctionFlags |= 0x400;

	return bIsEditor_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ForceRelevant
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  pActor                         ( CPF_Parm )
// float                          fDuration                      ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ForceRelevant ( class AActor* pActor, float fDuration )
{
	static UFunction* pFnForceRelevant = NULL;

	if ( ! pFnForceRelevant )
		pFnForceRelevant = (UFunction*) UObject::GObjObjects()->Data[ 44503 ];

	ATgPlayerController_execForceRelevant_Parms ForceRelevant_Parms;
	ForceRelevant_Parms.pActor = pActor;
	ForceRelevant_Parms.fDuration = fDuration;

	pFnForceRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRelevant, &ForceRelevant_Parms, NULL );

	pFnForceRelevant->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.FinalSave
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::FinalSave ( )
{
	static UFunction* pFnFinalSave = NULL;

	if ( ! pFnFinalSave )
		pFnFinalSave = (UFunction*) UObject::GObjObjects()->Data[ 44502 ];

	ATgPlayerController_execFinalSave_Parms FinalSave_Parms;

	pFnFinalSave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalSave, &FinalSave_Parms, NULL );

	pFnFinalSave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.StopLogTo
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::StopLogTo ( )
{
	static UFunction* pFnStopLogTo = NULL;

	if ( ! pFnStopLogTo )
		pFnStopLogTo = (UFunction*) UObject::GObjObjects()->Data[ 44501 ];

	ATgPlayerController_execStopLogTo_Parms StopLogTo_Parms;

	pFnStopLogTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopLogTo, &StopLogTo_Parms, NULL );

	pFnStopLogTo->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.LogTo
// [0x00024600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsHost                         ( CPF_Parm | CPF_NeedCtorLink )
// int                            nPort                          ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::LogTo ( struct FString fsHost, int nPort )
{
	static UFunction* pFnLogTo = NULL;

	if ( ! pFnLogTo )
		pFnLogTo = (UFunction*) UObject::GObjObjects()->Data[ 44498 ];

	ATgPlayerController_execLogTo_Parms LogTo_Parms;
	memcpy ( &LogTo_Parms.fsHost, &fsHost, 0xC );
	LogTo_Parms.nPort = nPort;

	pFnLogTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTo, &LogTo_Parms, NULL );

	pFnLogTo->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetHoverTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgPlayerController::GetHoverTarget ( )
{
	static UFunction* pFnGetHoverTarget = NULL;

	if ( ! pFnGetHoverTarget )
		pFnGetHoverTarget = (UFunction*) UObject::GObjObjects()->Data[ 44496 ];

	ATgPlayerController_execGetHoverTarget_Parms GetHoverTarget_Parms;

	pFnGetHoverTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHoverTarget, &GetHoverTarget_Parms, NULL );

	pFnGetHoverTarget->FunctionFlags |= 0x400;

	return GetHoverTarget_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.GetHoverLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgPlayerController::GetHoverLocation ( )
{
	static UFunction* pFnGetHoverLocation = NULL;

	if ( ! pFnGetHoverLocation )
		pFnGetHoverLocation = (UFunction*) UObject::GObjObjects()->Data[ 44494 ];

	ATgPlayerController_execGetHoverLocation_Parms GetHoverLocation_Parms;

	pFnGetHoverLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHoverLocation, &GetHoverLocation_Parms, NULL );

	pFnGetHoverLocation->FunctionFlags |= 0x400;

	return GetHoverLocation_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController._Crash
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::_Crash ( )
{
	static UFunction* pFn_Crash = NULL;

	if ( ! pFn_Crash )
		pFn_Crash = (UFunction*) UObject::GObjObjects()->Data[ 44493 ];

	ATgPlayerController_exec_Crash_Parms _Crash_Parms;

	pFn_Crash->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFn_Crash, &_Crash_Parms, NULL );

	pFn_Crash->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.Bug
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::Bug ( )
{
	static UFunction* pFnBug = NULL;

	if ( ! pFnBug )
		pFnBug = (UFunction*) UObject::GObjObjects()->Data[ 44492 ];

	ATgPlayerController_execBug_Parms Bug_Parms;

	pFnBug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBug, &Bug_Parms, NULL );

	pFnBug->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.Support
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::Support ( )
{
	static UFunction* pFnSupport = NULL;

	if ( ! pFnSupport )
		pFnSupport = (UFunction*) UObject::GObjObjects()->Data[ 44491 ];

	ATgPlayerController_execSupport_Parms Support_Parms;

	pFnSupport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSupport, &Support_Parms, NULL );

	pFnSupport->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GetPRI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_Player*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgRepInfo_Player* ATgPlayerController::GetPRI ( )
{
	static UFunction* pFnGetPRI = NULL;

	if ( ! pFnGetPRI )
		pFnGetPRI = (UFunction*) UObject::GObjObjects()->Data[ 44489 ];

	ATgPlayerController_execGetPRI_Parms GetPRI_Parms;

	pFnGetPRI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPRI, &GetPRI_Parms, NULL );

	pFnGetPRI->FunctionFlags |= 0x400;

	return GetPRI_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.ChangeInstance
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nMapGameId                     ( CPF_Parm )
// int                            nInstanceId                    ( CPF_OptionalParm | CPF_Parm )

void ATgPlayerController::ChangeInstance ( int nMapGameId, int nInstanceId )
{
	static UFunction* pFnChangeInstance = NULL;

	if ( ! pFnChangeInstance )
		pFnChangeInstance = (UFunction*) UObject::GObjObjects()->Data[ 44486 ];

	ATgPlayerController_execChangeInstance_Parms ChangeInstance_Parms;
	ChangeInstance_Parms.nMapGameId = nMapGameId;
	ChangeInstance_Parms.nInstanceId = nInstanceId;

	pFnChangeInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeInstance, &ChangeInstance_Parms, NULL );

	pFnChangeInstance->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GmBand
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsPlayerName                   ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::GmBand ( struct FString fsPlayerName )
{
	static UFunction* pFnGmBand = NULL;

	if ( ! pFnGmBand )
		pFnGmBand = (UFunction*) UObject::GObjObjects()->Data[ 44484 ];

	ATgPlayerController_execGmBand_Parms GmBand_Parms;
	memcpy ( &GmBand_Parms.fsPlayerName, &fsPlayerName, 0xC );

	pFnGmBand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGmBand, &GmBand_Parms, NULL );

	pFnGmBand->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ProcessSkillPromptResponse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void ATgPlayerController::ProcessSkillPromptResponse ( unsigned long bValue )
{
	static UFunction* pFnProcessSkillPromptResponse = NULL;

	if ( ! pFnProcessSkillPromptResponse )
		pFnProcessSkillPromptResponse = (UFunction*) UObject::GObjObjects()->Data[ 44482 ];

	ATgPlayerController_execProcessSkillPromptResponse_Parms ProcessSkillPromptResponse_Parms;
	ProcessSkillPromptResponse_Parms.bValue = bValue;

	pFnProcessSkillPromptResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessSkillPromptResponse, &ProcessSkillPromptResponse_Parms, NULL );

	pFnProcessSkillPromptResponse->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AccompanyOnQuestMap
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::AccompanyOnQuestMap ( unsigned long bAccepted )
{
	static UFunction* pFnAccompanyOnQuestMap = NULL;

	if ( ! pFnAccompanyOnQuestMap )
		pFnAccompanyOnQuestMap = (UFunction*) UObject::GObjObjects()->Data[ 44480 ];

	ATgPlayerController_execAccompanyOnQuestMap_Parms AccompanyOnQuestMap_Parms;
	AccompanyOnQuestMap_Parms.bAccepted = bAccepted;

	pFnAccompanyOnQuestMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAccompanyOnQuestMap, &AccompanyOnQuestMap_Parms, NULL );

	pFnAccompanyOnQuestMap->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AcceptHexOwnership
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::AcceptHexOwnership ( unsigned long bAccepted )
{
	static UFunction* pFnAcceptHexOwnership = NULL;

	if ( ! pFnAcceptHexOwnership )
		pFnAcceptHexOwnership = (UFunction*) UObject::GObjObjects()->Data[ 44478 ];

	ATgPlayerController_execAcceptHexOwnership_Parms AcceptHexOwnership_Parms;
	AcceptHexOwnership_Parms.bAccepted = bAccepted;

	pFnAcceptHexOwnership->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptHexOwnership, &AcceptHexOwnership_Parms, NULL );

	pFnAcceptHexOwnership->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.RaidSetLeader
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsLeader                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::RaidSetLeader ( struct FString fsLeader )
{
	static UFunction* pFnRaidSetLeader = NULL;

	if ( ! pFnRaidSetLeader )
		pFnRaidSetLeader = (UFunction*) UObject::GObjObjects()->Data[ 44476 ];

	ATgPlayerController_execRaidSetLeader_Parms RaidSetLeader_Parms;
	memcpy ( &RaidSetLeader_Parms.fsLeader, &fsLeader, 0xC );

	pFnRaidSetLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRaidSetLeader, &RaidSetLeader_Parms, NULL );

	pFnRaidSetLeader->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.RaidAcceptLaunch
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::RaidAcceptLaunch ( unsigned long bAccepted )
{
	static UFunction* pFnRaidAcceptLaunch = NULL;

	if ( ! pFnRaidAcceptLaunch )
		pFnRaidAcceptLaunch = (UFunction*) UObject::GObjObjects()->Data[ 44474 ];

	ATgPlayerController_execRaidAcceptLaunch_Parms RaidAcceptLaunch_Parms;
	RaidAcceptLaunch_Parms.bAccepted = bAccepted;

	pFnRaidAcceptLaunch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRaidAcceptLaunch, &RaidAcceptLaunch_Parms, NULL );

	pFnRaidAcceptLaunch->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.HexMissionLeave
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::HexMissionLeave ( )
{
	static UFunction* pFnHexMissionLeave = NULL;

	if ( ! pFnHexMissionLeave )
		pFnHexMissionLeave = (UFunction*) UObject::GObjObjects()->Data[ 44473 ];

	ATgPlayerController_execHexMissionLeave_Parms HexMissionLeave_Parms;

	pFnHexMissionLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHexMissionLeave, &HexMissionLeave_Parms, NULL );

	pFnHexMissionLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.HexGotoBattle
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::HexGotoBattle ( unsigned long bAccepted )
{
	static UFunction* pFnHexGotoBattle = NULL;

	if ( ! pFnHexGotoBattle )
		pFnHexGotoBattle = (UFunction*) UObject::GObjObjects()->Data[ 44471 ];

	ATgPlayerController_execHexGotoBattle_Parms HexGotoBattle_Parms;
	HexGotoBattle_Parms.bAccepted = bAccepted;

	pFnHexGotoBattle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHexGotoBattle, &HexGotoBattle_Parms, NULL );

	pFnHexGotoBattle->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.MatchAccept
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::eventMatchAccept ( unsigned long bAccepted )
{
	static UFunction* pFnMatchAccept = NULL;

	if ( ! pFnMatchAccept )
		pFnMatchAccept = (UFunction*) UObject::GObjObjects()->Data[ 44469 ];

	ATgPlayerController_eventMatchAccept_Parms MatchAccept_Parms;
	MatchAccept_Parms.bAccepted = bAccepted;

	pFnMatchAccept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchAccept, &MatchAccept_Parms, NULL );

	pFnMatchAccept->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.MatchLeave
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAsTeam                        ( CPF_Parm )

void ATgPlayerController::MatchLeave ( unsigned long bAsTeam )
{
	static UFunction* pFnMatchLeave = NULL;

	if ( ! pFnMatchLeave )
		pFnMatchLeave = (UFunction*) UObject::GObjObjects()->Data[ 44467 ];

	ATgPlayerController_execMatchLeave_Parms MatchLeave_Parms;
	MatchLeave_Parms.bAsTeam = bAsTeam;

	pFnMatchLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchLeave, &MatchLeave_Parms, NULL );

	pFnMatchLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ConfirmMatchLeave
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLeave                         ( CPF_Parm )

void ATgPlayerController::ConfirmMatchLeave ( unsigned long bLeave )
{
	static UFunction* pFnConfirmMatchLeave = NULL;

	if ( ! pFnConfirmMatchLeave )
		pFnConfirmMatchLeave = (UFunction*) UObject::GObjObjects()->Data[ 44465 ];

	ATgPlayerController_execConfirmMatchLeave_Parms ConfirmMatchLeave_Parms;
	ConfirmMatchLeave_Parms.bLeave = bLeave;

	pFnConfirmMatchLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConfirmMatchLeave, &ConfirmMatchLeave_Parms, NULL );

	pFnConfirmMatchLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.OpenConfirmMatchLeave
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::OpenConfirmMatchLeave ( )
{
	static UFunction* pFnOpenConfirmMatchLeave = NULL;

	if ( ! pFnOpenConfirmMatchLeave )
		pFnOpenConfirmMatchLeave = (UFunction*) UObject::GObjObjects()->Data[ 44464 ];

	ATgPlayerController_execOpenConfirmMatchLeave_Parms OpenConfirmMatchLeave_Parms;

	pFnOpenConfirmMatchLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenConfirmMatchLeave, &OpenConfirmMatchLeave_Parms, NULL );

	pFnOpenConfirmMatchLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AllianceAccept
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::AllianceAccept ( unsigned long bAccepted )
{
	static UFunction* pFnAllianceAccept = NULL;

	if ( ! pFnAllianceAccept )
		pFnAllianceAccept = (UFunction*) UObject::GObjObjects()->Data[ 44462 ];

	ATgPlayerController_execAllianceAccept_Parms AllianceAccept_Parms;
	AllianceAccept_Parms.bAccepted = bAccepted;

	pFnAllianceAccept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllianceAccept, &AllianceAccept_Parms, NULL );

	pFnAllianceAccept->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AllianceInvite
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::AllianceInvite ( struct FString fsName )
{
	static UFunction* pFnAllianceInvite = NULL;

	if ( ! pFnAllianceInvite )
		pFnAllianceInvite = (UFunction*) UObject::GObjObjects()->Data[ 44460 ];

	ATgPlayerController_execAllianceInvite_Parms AllianceInvite_Parms;
	memcpy ( &AllianceInvite_Parms.fsName, &fsName, 0xC );

	pFnAllianceInvite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllianceInvite, &AllianceInvite_Parms, NULL );

	pFnAllianceInvite->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AgencyDisband
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::AgencyDisband ( )
{
	static UFunction* pFnAgencyDisband = NULL;

	if ( ! pFnAgencyDisband )
		pFnAgencyDisband = (UFunction*) UObject::GObjObjects()->Data[ 44459 ];

	ATgPlayerController_execAgencyDisband_Parms AgencyDisband_Parms;

	pFnAgencyDisband->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAgencyDisband, &AgencyDisband_Parms, NULL );

	pFnAgencyDisband->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AgencyLeave
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::AgencyLeave ( )
{
	static UFunction* pFnAgencyLeave = NULL;

	if ( ! pFnAgencyLeave )
		pFnAgencyLeave = (UFunction*) UObject::GObjObjects()->Data[ 44458 ];

	ATgPlayerController_execAgencyLeave_Parms AgencyLeave_Parms;

	pFnAgencyLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAgencyLeave, &AgencyLeave_Parms, NULL );

	pFnAgencyLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AgencyAccept
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::AgencyAccept ( unsigned long bAccepted )
{
	static UFunction* pFnAgencyAccept = NULL;

	if ( ! pFnAgencyAccept )
		pFnAgencyAccept = (UFunction*) UObject::GObjObjects()->Data[ 44456 ];

	ATgPlayerController_execAgencyAccept_Parms AgencyAccept_Parms;
	AgencyAccept_Parms.bAccepted = bAccepted;

	pFnAgencyAccept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAgencyAccept, &AgencyAccept_Parms, NULL );

	pFnAgencyAccept->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.AgencyInvite
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::AgencyInvite ( struct FString fsName )
{
	static UFunction* pFnAgencyInvite = NULL;

	if ( ! pFnAgencyInvite )
		pFnAgencyInvite = (UFunction*) UObject::GObjObjects()->Data[ 44454 ];

	ATgPlayerController_execAgencyInvite_Parms AgencyInvite_Parms;
	memcpy ( &AgencyInvite_Parms.fsName, &fsName, 0xC );

	pFnAgencyInvite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAgencyInvite, &AgencyInvite_Parms, NULL );

	pFnAgencyInvite->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.SetHomeMapGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgPlayerController::SetHomeMapGame ( )
{
	static UFunction* pFnSetHomeMapGame = NULL;

	if ( ! pFnSetHomeMapGame )
		pFnSetHomeMapGame = (UFunction*) UObject::GObjObjects()->Data[ 44453 ];

	ATgPlayerController_execSetHomeMapGame_Parms SetHomeMapGame_Parms;

	pFnSetHomeMapGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHomeMapGame, &SetHomeMapGame_Parms, NULL );

	pFnSetHomeMapGame->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TeamChallenge
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsInfo                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::TeamChallenge ( struct FString fsInfo )
{
	static UFunction* pFnTeamChallenge = NULL;

	if ( ! pFnTeamChallenge )
		pFnTeamChallenge = (UFunction*) UObject::GObjObjects()->Data[ 44451 ];

	ATgPlayerController_execTeamChallenge_Parms TeamChallenge_Parms;
	memcpy ( &TeamChallenge_Parms.fsInfo, &fsInfo, 0xC );

	pFnTeamChallenge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamChallenge, &TeamChallenge_Parms, NULL );

	pFnTeamChallenge->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TeamSetLeader
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsLeader                       ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::TeamSetLeader ( struct FString fsLeader )
{
	static UFunction* pFnTeamSetLeader = NULL;

	if ( ! pFnTeamSetLeader )
		pFnTeamSetLeader = (UFunction*) UObject::GObjObjects()->Data[ 44449 ];

	ATgPlayerController_execTeamSetLeader_Parms TeamSetLeader_Parms;
	memcpy ( &TeamSetLeader_Parms.fsLeader, &fsLeader, 0xC );

	pFnTeamSetLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamSetLeader, &TeamSetLeader_Parms, NULL );

	pFnTeamSetLeader->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TeamLeave
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void ATgPlayerController::TeamLeave ( )
{
	static UFunction* pFnTeamLeave = NULL;

	if ( ! pFnTeamLeave )
		pFnTeamLeave = (UFunction*) UObject::GObjObjects()->Data[ 44448 ];

	ATgPlayerController_execTeamLeave_Parms TeamLeave_Parms;

	pFnTeamLeave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamLeave, &TeamLeave_Parms, NULL );

	pFnTeamLeave->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TeamAccept
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )

void ATgPlayerController::TeamAccept ( unsigned long bAccepted )
{
	static UFunction* pFnTeamAccept = NULL;

	if ( ! pFnTeamAccept )
		pFnTeamAccept = (UFunction*) UObject::GObjObjects()->Data[ 44446 ];

	ATgPlayerController_execTeamAccept_Parms TeamAccept_Parms;
	TeamAccept_Parms.bAccepted = bAccepted;

	pFnTeamAccept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamAccept, &TeamAccept_Parms, NULL );

	pFnTeamAccept->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.TeamInvite
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::TeamInvite ( struct FString fsName )
{
	static UFunction* pFnTeamInvite = NULL;

	if ( ! pFnTeamInvite )
		pFnTeamInvite = (UFunction*) UObject::GObjObjects()->Data[ 44444 ];

	ATgPlayerController_execTeamInvite_Parms TeamInvite_Parms;
	memcpy ( &TeamInvite_Parms.fsName, &fsName, 0xC );

	pFnTeamInvite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamInvite, &TeamInvite_Parms, NULL );

	pFnTeamInvite->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.GMCommand
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 fsCommand                      ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::GMCommand ( struct FString fsCommand )
{
	static UFunction* pFnGMCommand = NULL;

	if ( ! pFnGMCommand )
		pFnGMCommand = (UFunction*) UObject::GObjObjects()->Data[ 44442 ];

	ATgPlayerController_execGMCommand_Parms GMCommand_Parms;
	memcpy ( &GMCommand_Parms.fsCommand, &fsCommand, 0xC );

	pFnGMCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGMCommand, &GMCommand_Parms, NULL );

	pFnGMCommand->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerRequestBeaconNetworkHop
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// class ATgStartPoint*           pStartPoint                    ( CPF_Parm )

void ATgPlayerController::ServerRequestBeaconNetworkHop ( class ATgStartPoint* pStartPoint )
{
	static UFunction* pFnServerRequestBeaconNetworkHop = NULL;

	if ( ! pFnServerRequestBeaconNetworkHop )
		pFnServerRequestBeaconNetworkHop = (UFunction*) UObject::GObjObjects()->Data[ 44440 ];

	ATgPlayerController_execServerRequestBeaconNetworkHop_Parms ServerRequestBeaconNetworkHop_Parms;
	ServerRequestBeaconNetworkHop_Parms.pStartPoint = pStartPoint;

	pFnServerRequestBeaconNetworkHop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRequestBeaconNetworkHop, &ServerRequestBeaconNetworkHop_Parms, NULL );

	pFnServerRequestBeaconNetworkHop->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerMarkSpawnReturn
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// class ATeleporter*             pTeleporter                    ( CPF_Parm )

void ATgPlayerController::ServerMarkSpawnReturn ( class ATeleporter* pTeleporter )
{
	static UFunction* pFnServerMarkSpawnReturn = NULL;

	if ( ! pFnServerMarkSpawnReturn )
		pFnServerMarkSpawnReturn = (UFunction*) UObject::GObjObjects()->Data[ 44438 ];

	ATgPlayerController_execServerMarkSpawnReturn_Parms ServerMarkSpawnReturn_Parms;
	ServerMarkSpawnReturn_Parms.pTeleporter = pTeleporter;

	pFnServerMarkSpawnReturn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerMarkSpawnReturn, &ServerMarkSpawnReturn_Parms, NULL );

	pFnServerMarkSpawnReturn->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.ServerSetTaskforceLead
// [0x002204C0] ( FUNC_Native )
// Parameters infos:
// struct FString                 fsName                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgPlayerController::ServerSetTaskforceLead ( struct FString fsName )
{
	static UFunction* pFnServerSetTaskforceLead = NULL;

	if ( ! pFnServerSetTaskforceLead )
		pFnServerSetTaskforceLead = (UFunction*) UObject::GObjObjects()->Data[ 44436 ];

	ATgPlayerController_execServerSetTaskforceLead_Parms ServerSetTaskforceLead_Parms;
	memcpy ( &ServerSetTaskforceLead_Parms.fsName, &fsName, 0xC );

	pFnServerSetTaskforceLead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetTaskforceLead, &ServerSetTaskforceLead_Parms, NULL );

	pFnServerSetTaskforceLead->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerController.CanCameraSeeActorCenter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// float                          ZOffset                        ( CPF_OptionalParm | CPF_Parm )

bool ATgPlayerController::CanCameraSeeActorCenter ( class AActor* Other, float ZOffset )
{
	static UFunction* pFnCanCameraSeeActorCenter = NULL;

	if ( ! pFnCanCameraSeeActorCenter )
		pFnCanCameraSeeActorCenter = (UFunction*) UObject::GObjObjects()->Data[ 44432 ];

	ATgPlayerController_execCanCameraSeeActorCenter_Parms CanCameraSeeActorCenter_Parms;
	CanCameraSeeActorCenter_Parms.Other = Other;
	CanCameraSeeActorCenter_Parms.ZOffset = ZOffset;

	pFnCanCameraSeeActorCenter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanCameraSeeActorCenter, &CanCameraSeeActorCenter_Parms, NULL );

	pFnCanCameraSeeActorCenter->FunctionFlags |= 0x400;

	return CanCameraSeeActorCenter_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CanCameraSeePawnCenter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPawn*                 Other                          ( CPF_Parm )

bool ATgPlayerController::CanCameraSeePawnCenter ( class ATgPawn* Other )
{
	static UFunction* pFnCanCameraSeePawnCenter = NULL;

	if ( ! pFnCanCameraSeePawnCenter )
		pFnCanCameraSeePawnCenter = (UFunction*) UObject::GObjObjects()->Data[ 44429 ];

	ATgPlayerController_execCanCameraSeePawnCenter_Parms CanCameraSeePawnCenter_Parms;
	CanCameraSeePawnCenter_Parms.Other = Other;

	pFnCanCameraSeePawnCenter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanCameraSeePawnCenter, &CanCameraSeePawnCenter_Parms, NULL );

	pFnCanCameraSeePawnCenter->FunctionFlags |= 0x400;

	return CanCameraSeePawnCenter_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.CalcCameraView
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vOutCamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                rOutCamRot                     ( CPF_Parm | CPF_OutParm )

void ATgPlayerController::CalcCameraView ( struct FVector* vOutCamLoc, struct FRotator* rOutCamRot )
{
	static UFunction* pFnCalcCameraView = NULL;

	if ( ! pFnCalcCameraView )
		pFnCalcCameraView = (UFunction*) UObject::GObjObjects()->Data[ 44426 ];

	ATgPlayerController_execCalcCameraView_Parms CalcCameraView_Parms;

	pFnCalcCameraView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcCameraView, &CalcCameraView_Parms, NULL );

	pFnCalcCameraView->FunctionFlags |= 0x400;

	if ( vOutCamLoc )
		memcpy ( vOutCamLoc, &CalcCameraView_Parms.vOutCamLoc, 0xC );

	if ( rOutCamRot )
		memcpy ( rOutCamRot, &CalcCameraView_Parms.rOutCamRot, 0xC );
};

// Function TgGame.TgPlayerController.GetHudClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  pNewHudType                    ( CPF_Parm )

class UClass* ATgPlayerController::GetHudClass ( class UClass* pNewHudType )
{
	static UFunction* pFnGetHudClass = NULL;

	if ( ! pFnGetHudClass )
		pFnGetHudClass = (UFunction*) UObject::GObjObjects()->Data[ 44423 ];

	ATgPlayerController_execGetHudClass_Parms GetHudClass_Parms;
	GetHudClass_Parms.pNewHudType = pNewHudType;

	pFnGetHudClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHudClass, &GetHudClass_Parms, NULL );

	pFnGetHudClass->FunctionFlags |= 0x400;

	return GetHudClass_Parms.ReturnValue;
};

// Function TgGame.TgPlayerController.IsReadyForStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPlayerController::IsReadyForStart ( )
{
	static UFunction* pFnIsReadyForStart = NULL;

	if ( ! pFnIsReadyForStart )
		pFnIsReadyForStart = (UFunction*) UObject::GObjObjects()->Data[ 44421 ];

	ATgPlayerController_execIsReadyForStart_Parms IsReadyForStart_Parms;

	pFnIsReadyForStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsReadyForStart, &IsReadyForStart_Parms, NULL );

	pFnIsReadyForStart->FunctionFlags |= 0x400;

	return IsReadyForStart_Parms.ReturnValue;
};

// Function TgGame.TgPlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UTgPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 46185 ];

	UTgPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function TgGame.TgPlayerInput.CheckForDoubleClickMove
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

unsigned char UTgPlayerInput::CheckForDoubleClickMove ( float DeltaTime )
{
	static UFunction* pFnCheckForDoubleClickMove = NULL;

	if ( ! pFnCheckForDoubleClickMove )
		pFnCheckForDoubleClickMove = (UFunction*) UObject::GObjObjects()->Data[ 46182 ];

	UTgPlayerInput_execCheckForDoubleClickMove_Parms CheckForDoubleClickMove_Parms;
	CheckForDoubleClickMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Parms, NULL );

	return CheckForDoubleClickMove_Parms.ReturnValue;
};

// Function TgGame.TgPlayerInput.Duck
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UTgPlayerInput::Duck ( )
{
	static UFunction* pFnDuck = NULL;

	if ( ! pFnDuck )
		pFnDuck = (UFunction*) UObject::GObjObjects()->Data[ 46181 ];

	UTgPlayerInput_execDuck_Parms Duck_Parms;

	this->ProcessEvent ( pFnDuck, &Duck_Parms, NULL );
};

// Function TgGame.TgPlayerInput.InputChar
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UTgPlayerInput::eventInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnInputChar = NULL;

	if ( ! pFnInputChar )
		pFnInputChar = (UFunction*) UObject::GObjObjects()->Data[ 46177 ];

	UTgPlayerInput_eventInputChar_Parms InputChar_Parms;
	InputChar_Parms.ControllerId = ControllerId;
	memcpy ( &InputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnInputChar, &InputChar_Parms, NULL );

	return InputChar_Parms.ReturnValue;
};

// Function TgGame.TgPlayerInput.OnInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UTgPlayerInput::OnInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnOnInputChar = NULL;

	if ( ! pFnOnInputChar )
		pFnOnInputChar = (UFunction*) UObject::GObjObjects()->Data[ 46159 ];

	UTgPlayerInput_execOnInputChar_Parms OnInputChar_Parms;
	OnInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &OnInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnOnInputChar, &OnInputChar_Parms, NULL );

	return OnInputChar_Parms.ReturnValue;
};

// Function TgGame.TgPlayerInput.OnInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

bool UTgPlayerInput::OnInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime )
{
	static UFunction* pFnOnInputAxis = NULL;

	if ( ! pFnOnInputAxis )
		pFnOnInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 46161 ];

	UTgPlayerInput_execOnInputAxis_Parms OnInputAxis_Parms;
	OnInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &OnInputAxis_Parms.Key, &Key, 0x8 );
	OnInputAxis_Parms.Delta = Delta;
	OnInputAxis_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnOnInputAxis, &OnInputAxis_Parms, NULL );

	return OnInputAxis_Parms.ReturnValue;
};

// Function TgGame.TgPlayerInput.OnRawInputKey
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )

bool UTgPlayerInput::OnRawInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed )
{
	static UFunction* pFnOnRawInputKey = NULL;

	if ( ! pFnOnRawInputKey )
		pFnOnRawInputKey = (UFunction*) UObject::GObjObjects()->Data[ 46163 ];

	UTgPlayerInput_execOnRawInputKey_Parms OnRawInputKey_Parms;
	OnRawInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &OnRawInputKey_Parms.Key, &Key, 0x8 );
	OnRawInputKey_Parms.Event = Event;
	OnRawInputKey_Parms.AmountDepressed = AmountDepressed;

	this->ProcessEvent ( pFnOnRawInputKey, &OnRawInputKey_Parms, NULL );

	return OnRawInputKey_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RandomizeMorphs
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::eventRandomizeMorphs ( )
{
	static UFunction* pFnRandomizeMorphs = NULL;

	if ( ! pFnRandomizeMorphs )
		pFnRandomizeMorphs = (UFunction*) UObject::GObjObjects()->Data[ 47850 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventRandomizeMorphs_Parms RandomizeMorphs_Parms;

	this->ProcessEvent ( pFnRandomizeMorphs, &RandomizeMorphs_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RemoveAllMorphPoses
// [0x00020102] 
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::RemoveAllMorphPoses ( )
{
	static UFunction* pFnRemoveAllMorphPoses = NULL;

	if ( ! pFnRemoveAllMorphPoses )
		pFnRemoveAllMorphPoses = (UFunction*) UObject::GObjObjects()->Data[ 47848 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRemoveAllMorphPoses_Parms RemoveAllMorphPoses_Parms;

	this->ProcessEvent ( pFnRemoveAllMorphPoses, &RemoveAllMorphPoses_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetMorphPose
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          fPct                           ( CPF_Parm )
// unsigned char                  PoseToSet                      ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetMorphPose ( float fPct, unsigned char PoseToSet )
{
	static UFunction* pFnSetMorphPose = NULL;

	if ( ! pFnSetMorphPose )
		pFnSetMorphPose = (UFunction*) UObject::GObjObjects()->Data[ 47845 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetMorphPose_Parms SetMorphPose_Parms;
	SetMorphPose_Parms.fPct = fPct;
	SetMorphPose_Parms.PoseToSet = PoseToSet;

	this->ProcessEvent ( pFnSetMorphPose, &SetMorphPose_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RemoveHeadShot
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::RemoveHeadShot ( )
{
	static UFunction* pFnRemoveHeadShot = NULL;

	if ( ! pFnRemoveHeadShot )
		pFnRemoveHeadShot = (UFunction*) UObject::GObjObjects()->Data[ 47843 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRemoveHeadShot_Parms RemoveHeadShot_Parms;

	this->ProcessEvent ( pFnRemoveHeadShot, &RemoveHeadShot_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHeadShotHead
// [0x00020002] 
// Parameters infos:
// class UTexture2D*              DiffuseTexture                 ( CPF_Parm )
// class UMorphTargetSet*         MorphSet                       ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::SetHeadShotHead ( class UTexture2D* DiffuseTexture, class UMorphTargetSet* MorphSet )
{
	static UFunction* pFnSetHeadShotHead = NULL;

	if ( ! pFnSetHeadShotHead )
		pFnSetHeadShotHead = (UFunction*) UObject::GObjObjects()->Data[ 47839 ];

	ATgSkeletalMeshActor_CharacterBuilder_execSetHeadShotHead_Parms SetHeadShotHead_Parms;
	SetHeadShotHead_Parms.DiffuseTexture = DiffuseTexture;
	SetHeadShotHead_Parms.MorphSet = MorphSet;

	this->ProcessEvent ( pFnSetHeadShotHead, &SetHeadShotHead_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.StopAnims
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::eventStopAnims ( )
{
	static UFunction* pFnStopAnims = NULL;

	if ( ! pFnStopAnims )
		pFnStopAnims = (UFunction*) UObject::GObjObjects()->Data[ 47838 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventStopAnims_Parms StopAnims_Parms;

	this->ProcessEvent ( pFnStopAnims, &StopAnims_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.BuildHair
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// class UMaterialInstanceConstant* HeadMIC                        ( CPF_Parm )
// int                            HairMeshId                     ( CPF_OptionalParm | CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventBuildHair ( class UMaterialInstanceConstant* HeadMIC, int HairMeshId )
{
	static UFunction* pFnBuildHair = NULL;

	if ( ! pFnBuildHair )
		pFnBuildHair = (UFunction*) UObject::GObjObjects()->Data[ 47833 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventBuildHair_Parms BuildHair_Parms;
	BuildHair_Parms.HeadMIC = HeadMIC;
	BuildHair_Parms.HairMeshId = HairMeshId;

	this->ProcessEvent ( pFnBuildHair, &BuildHair_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.BuildDude
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::eventBuildDude ( )
{
	static UFunction* pFnBuildDude = NULL;

	if ( ! pFnBuildDude )
		pFnBuildDude = (UFunction*) UObject::GObjObjects()->Data[ 47821 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventBuildDude_Parms BuildDude_Parms;

	this->ProcessEvent ( pFnBuildDude, &BuildDude_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.BeginAnimControl
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )
// TArray< class UAnimSet* >      InFemaleAnimSets               ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgSkeletalMeshActor_CharacterBuilder::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets, TArray< class UAnimSet* > InFemaleAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 47815 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );
	memcpy ( &BeginAnimControl_Parms.InFemaleAnimSets, &InFemaleAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 47813 ];

	ATgSkeletalMeshActor_CharacterBuilder_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetDefaultDeviceAssembly
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FDeviceAttachmentAssembly ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FDeviceAttachmentAssembly ATgSkeletalMeshActor_CharacterBuilder::eventGetDefaultDeviceAssembly ( )
{
	static UFunction* pFnGetDefaultDeviceAssembly = NULL;

	if ( ! pFnGetDefaultDeviceAssembly )
		pFnGetDefaultDeviceAssembly = (UFunction*) UObject::GObjObjects()->Data[ 47810 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventGetDefaultDeviceAssembly_Parms GetDefaultDeviceAssembly_Parms;

	this->ProcessEvent ( pFnGetDefaultDeviceAssembly, &GetDefaultDeviceAssembly_Parms, NULL );

	return GetDefaultDeviceAssembly_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetDefaultCharacterAssembly
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FCustomCharacterAssembly ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsFemale                      ( CPF_OptionalParm | CPF_Parm )

struct FCustomCharacterAssembly ATgSkeletalMeshActor_CharacterBuilder::eventGetDefaultCharacterAssembly ( unsigned long bIsFemale )
{
	static UFunction* pFnGetDefaultCharacterAssembly = NULL;

	if ( ! pFnGetDefaultCharacterAssembly )
		pFnGetDefaultCharacterAssembly = (UFunction*) UObject::GObjObjects()->Data[ 47807 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventGetDefaultCharacterAssembly_Parms GetDefaultCharacterAssembly_Parms;
	GetDefaultCharacterAssembly_Parms.bIsFemale = bIsFemale;

	this->ProcessEvent ( pFnGetDefaultCharacterAssembly, &GetDefaultCharacterAssembly_Parms, NULL );

	return GetDefaultCharacterAssembly_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetAssemblyToDefaults
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsFemale                      ( CPF_OptionalParm | CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetAssemblyToDefaults ( unsigned long bIsFemale )
{
	static UFunction* pFnSetAssemblyToDefaults = NULL;

	if ( ! pFnSetAssemblyToDefaults )
		pFnSetAssemblyToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 47804 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetAssemblyToDefaults_Parms SetAssemblyToDefaults_Parms;
	SetAssemblyToDefaults_Parms.bIsFemale = bIsFemale;

	this->ProcessEvent ( pFnSetAssemblyToDefaults, &SetAssemblyToDefaults_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetDeviceAssembly
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FDeviceAttachmentAssembly devassembly                    ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetDeviceAssembly ( struct FDeviceAttachmentAssembly devassembly )
{
	static UFunction* pFnSetDeviceAssembly = NULL;

	if ( ! pFnSetDeviceAssembly )
		pFnSetDeviceAssembly = (UFunction*) UObject::GObjObjects()->Data[ 47802 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetDeviceAssembly_Parms SetDeviceAssembly_Parms;
	memcpy ( &SetDeviceAssembly_Parms.devassembly, &devassembly, 0x1C );

	this->ProcessEvent ( pFnSetDeviceAssembly, &SetDeviceAssembly_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetMorphSettings
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Settings                       ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetMorphSettings ( int* Settings )
{
	static UFunction* pFnSetMorphSettings = NULL;

	if ( ! pFnSetMorphSettings )
		pFnSetMorphSettings = (UFunction*) UObject::GObjObjects()->Data[ 47799 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetMorphSettings_Parms SetMorphSettings_Parms;
	memcpy ( &SetMorphSettings_Parms.Settings, &Settings, 0x3FC );

	this->ProcessEvent ( pFnSetMorphSettings, &SetMorphSettings_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetCustomAssembly
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FCustomCharacterAssembly charassembly                   ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetCustomAssembly ( struct FCustomCharacterAssembly charassembly )
{
	static UFunction* pFnSetCustomAssembly = NULL;

	if ( ! pFnSetCustomAssembly )
		pFnSetCustomAssembly = (UFunction*) UObject::GObjObjects()->Data[ 47797 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetCustomAssembly_Parms SetCustomAssembly_Parms;
	memcpy ( &SetCustomAssembly_Parms.charassembly, &charassembly, 0x44 );

	this->ProcessEvent ( pFnSetCustomAssembly, &SetCustomAssembly_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetGenderTypeId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nId                            ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetGenderTypeId ( int nId )
{
	static UFunction* pFnSetGenderTypeId = NULL;

	if ( ! pFnSetGenderTypeId )
		pFnSetGenderTypeId = (UFunction*) UObject::GObjObjects()->Data[ 47795 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetGenderTypeId_Parms SetGenderTypeId_Parms;
	SetGenderTypeId_Parms.nId = nId;

	this->ProcessEvent ( pFnSetGenderTypeId, &SetGenderTypeId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetEyeColorParameterId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetEyeColorParameterId ( int Id )
{
	static UFunction* pFnSetEyeColorParameterId = NULL;

	if ( ! pFnSetEyeColorParameterId )
		pFnSetEyeColorParameterId = (UFunction*) UObject::GObjObjects()->Data[ 47793 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetEyeColorParameterId_Parms SetEyeColorParameterId_Parms;
	SetEyeColorParameterId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetEyeColorParameterId, &SetEyeColorParameterId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetSkinRaceParameterId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetSkinRaceParameterId ( int Id )
{
	static UFunction* pFnSetSkinRaceParameterId = NULL;

	if ( ! pFnSetSkinRaceParameterId )
		pFnSetSkinRaceParameterId = (UFunction*) UObject::GObjObjects()->Data[ 47791 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetSkinRaceParameterId_Parms SetSkinRaceParameterId_Parms;
	SetSkinRaceParameterId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetSkinRaceParameterId, &SetSkinRaceParameterId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetSkinToneParameterId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetSkinToneParameterId ( int Id )
{
	static UFunction* pFnSetSkinToneParameterId = NULL;

	if ( ! pFnSetSkinToneParameterId )
		pFnSetSkinToneParameterId = (UFunction*) UObject::GObjObjects()->Data[ 47789 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetSkinToneParameterId_Parms SetSkinToneParameterId_Parms;
	SetSkinToneParameterId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetSkinToneParameterId, &SetSkinToneParameterId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetSuitFlairId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetSuitFlairId ( int Id )
{
	static UFunction* pFnSetSuitFlairId = NULL;

	if ( ! pFnSetSuitFlairId )
		pFnSetSuitFlairId = (UFunction*) UObject::GObjObjects()->Data[ 47787 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetSuitFlairId_Parms SetSuitFlairId_Parms;
	SetSuitFlairId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetSuitFlairId, &SetSuitFlairId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHeadFlairId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetHeadFlairId ( int Id )
{
	static UFunction* pFnSetHeadFlairId = NULL;

	if ( ! pFnSetHeadFlairId )
		pFnSetHeadFlairId = (UFunction*) UObject::GObjObjects()->Data[ 47785 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetHeadFlairId_Parms SetHeadFlairId_Parms;
	SetHeadFlairId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetHeadFlairId, &SetHeadFlairId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHideHelmetFlag
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bHideHelmetFlag                ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetHideHelmetFlag ( unsigned long bHideHelmetFlag )
{
	static UFunction* pFnSetHideHelmetFlag = NULL;

	if ( ! pFnSetHideHelmetFlag )
		pFnSetHideHelmetFlag = (UFunction*) UObject::GObjObjects()->Data[ 47783 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetHideHelmetFlag_Parms SetHideHelmetFlag_Parms;
	SetHideHelmetFlag_Parms.bHideHelmetFlag = bHideHelmetFlag;

	this->ProcessEvent ( pFnSetHideHelmetFlag, &SetHideHelmetFlag_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetBaldFlag
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bBaldFlag                      ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetBaldFlag ( unsigned long bBaldFlag )
{
	static UFunction* pFnSetBaldFlag = NULL;

	if ( ! pFnSetBaldFlag )
		pFnSetBaldFlag = (UFunction*) UObject::GObjObjects()->Data[ 47781 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetBaldFlag_Parms SetBaldFlag_Parms;
	SetBaldFlag_Parms.bBaldFlag = bBaldFlag;

	this->ProcessEvent ( pFnSetBaldFlag, &SetBaldFlag_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetInHandDeviceIdAndAnimSet
// [0x00024002] 
// Parameters infos:
// int                            MeshId                         ( CPF_Parm )
// int                            InHandAnimSetDeviceId          ( CPF_Parm )
// int                            InHandLeftHandDeviceMeshId     ( CPF_OptionalParm | CPF_Parm )
// int                            InHandLeftHandDeviceAnimSetId  ( CPF_OptionalParm | CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::SetInHandDeviceIdAndAnimSet ( int MeshId, int InHandAnimSetDeviceId, int InHandLeftHandDeviceMeshId, int InHandLeftHandDeviceAnimSetId )
{
	static UFunction* pFnSetInHandDeviceIdAndAnimSet = NULL;

	if ( ! pFnSetInHandDeviceIdAndAnimSet )
		pFnSetInHandDeviceIdAndAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 47776 ];

	ATgSkeletalMeshActor_CharacterBuilder_execSetInHandDeviceIdAndAnimSet_Parms SetInHandDeviceIdAndAnimSet_Parms;
	SetInHandDeviceIdAndAnimSet_Parms.MeshId = MeshId;
	SetInHandDeviceIdAndAnimSet_Parms.InHandAnimSetDeviceId = InHandAnimSetDeviceId;
	SetInHandDeviceIdAndAnimSet_Parms.InHandLeftHandDeviceMeshId = InHandLeftHandDeviceMeshId;
	SetInHandDeviceIdAndAnimSet_Parms.InHandLeftHandDeviceAnimSetId = InHandLeftHandDeviceAnimSetId;

	this->ProcessEvent ( pFnSetInHandDeviceIdAndAnimSet, &SetInHandDeviceIdAndAnimSet_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetBackpackMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetBackpackMeshId ( int Id )
{
	static UFunction* pFnSetBackpackMeshId = NULL;

	if ( ! pFnSetBackpackMeshId )
		pFnSetBackpackMeshId = (UFunction*) UObject::GObjObjects()->Data[ 47774 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetBackpackMeshId_Parms SetBackpackMeshId_Parms;
	SetBackpackMeshId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetBackpackMeshId, &SetBackpackMeshId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHelmetMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetHelmetMeshId ( int Id )
{
	static UFunction* pFnSetHelmetMeshId = NULL;

	if ( ! pFnSetHelmetMeshId )
		pFnSetHelmetMeshId = (UFunction*) UObject::GObjObjects()->Data[ 47772 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetHelmetMeshId_Parms SetHelmetMeshId_Parms;
	SetHelmetMeshId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetHelmetMeshId, &SetHelmetMeshId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHairMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetHairMeshId ( int Id )
{
	static UFunction* pFnSetHairMeshId = NULL;

	if ( ! pFnSetHairMeshId )
		pFnSetHairMeshId = (UFunction*) UObject::GObjObjects()->Data[ 47770 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetHairMeshId_Parms SetHairMeshId_Parms;
	SetHairMeshId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetHairMeshId, &SetHairMeshId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetHeadMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetHeadMeshId ( int Id )
{
	static UFunction* pFnSetHeadMeshId = NULL;

	if ( ! pFnSetHeadMeshId )
		pFnSetHeadMeshId = (UFunction*) UObject::GObjObjects()->Data[ 47768 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetHeadMeshId_Parms SetHeadMeshId_Parms;
	SetHeadMeshId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetHeadMeshId, &SetHeadMeshId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetSuitMeshId
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            Id                             ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetSuitMeshId ( int Id )
{
	static UFunction* pFnSetSuitMeshId = NULL;

	if ( ! pFnSetSuitMeshId )
		pFnSetSuitMeshId = (UFunction*) UObject::GObjObjects()->Data[ 47766 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetSuitMeshId_Parms SetSuitMeshId_Parms;
	SetSuitMeshId_Parms.Id = Id;

	this->ProcessEvent ( pFnSetSuitMeshId, &SetSuitMeshId_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetDyeItem
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            nId                            ( CPF_Parm )
// unsigned char                  eSlot                          ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::eventSetDyeItem ( int nId, unsigned char eSlot )
{
	static UFunction* pFnSetDyeItem = NULL;

	if ( ! pFnSetDyeItem )
		pFnSetDyeItem = (UFunction*) UObject::GObjObjects()->Data[ 47763 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventSetDyeItem_Parms SetDyeItem_Parms;
	SetDyeItem_Parms.nId = nId;
	SetDyeItem_Parms.eSlot = eSlot;

	this->ProcessEvent ( pFnSetDyeItem, &SetDyeItem_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47762 ];

	ATgSkeletalMeshActor_CharacterBuilder_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetHairColorsFromHeadMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FHairColorParams        OutHairColors                  ( CPF_Parm | CPF_OutParm )

void ATgSkeletalMeshActor_CharacterBuilder::GetHairColorsFromHeadMorphData ( struct FHairColorParams* OutHairColors )
{
	static UFunction* pFnGetHairColorsFromHeadMorphData = NULL;

	if ( ! pFnGetHairColorsFromHeadMorphData )
		pFnGetHairColorsFromHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 47760 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetHairColorsFromHeadMorphData_Parms GetHairColorsFromHeadMorphData_Parms;

	pFnGetHairColorsFromHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHairColorsFromHeadMorphData, &GetHairColorsFromHeadMorphData_Parms, NULL );

	pFnGetHairColorsFromHeadMorphData->FunctionFlags |= 0x400;

	if ( OutHairColors )
		memcpy ( OutHairColors, &GetHairColorsFromHeadMorphData_Parms.OutHairColors, 0xF8 );
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetSkinColorsFromHeadMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            OutSkinColor                   ( CPF_Parm | CPF_OutParm )
// struct FLinearColor            OutBaseSkinColor               ( CPF_Parm | CPF_OutParm )
// float                          OutSkinTone                    ( CPF_Parm | CPF_OutParm )

void ATgSkeletalMeshActor_CharacterBuilder::GetSkinColorsFromHeadMorphData ( struct FLinearColor* OutSkinColor, struct FLinearColor* OutBaseSkinColor, float* OutSkinTone )
{
	static UFunction* pFnGetSkinColorsFromHeadMorphData = NULL;

	if ( ! pFnGetSkinColorsFromHeadMorphData )
		pFnGetSkinColorsFromHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 47756 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetSkinColorsFromHeadMorphData_Parms GetSkinColorsFromHeadMorphData_Parms;

	pFnGetSkinColorsFromHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinColorsFromHeadMorphData, &GetSkinColorsFromHeadMorphData_Parms, NULL );

	pFnGetSkinColorsFromHeadMorphData->FunctionFlags |= 0x400;

	if ( OutSkinColor )
		memcpy ( OutSkinColor, &GetSkinColorsFromHeadMorphData_Parms.OutSkinColor, 0x10 );

	if ( OutBaseSkinColor )
		memcpy ( OutBaseSkinColor, &GetSkinColorsFromHeadMorphData_Parms.OutBaseSkinColor, 0x10 );

	if ( OutSkinTone )
		*OutSkinTone = GetSkinColorsFromHeadMorphData_Parms.OutSkinTone;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ShouldDrawHair
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgSkeletalMeshActor_CharacterBuilder::ShouldDrawHair ( )
{
	static UFunction* pFnShouldDrawHair = NULL;

	if ( ! pFnShouldDrawHair )
		pFnShouldDrawHair = (UFunction*) UObject::GObjObjects()->Data[ 47754 ];

	ATgSkeletalMeshActor_CharacterBuilder_execShouldDrawHair_Parms ShouldDrawHair_Parms;

	pFnShouldDrawHair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDrawHair, &ShouldDrawHair_Parms, NULL );

	pFnShouldDrawHair->FunctionFlags |= 0x400;

	return ShouldDrawHair_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ShouldDrawHelmet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgSkeletalMeshActor_CharacterBuilder::ShouldDrawHelmet ( )
{
	static UFunction* pFnShouldDrawHelmet = NULL;

	if ( ! pFnShouldDrawHelmet )
		pFnShouldDrawHelmet = (UFunction*) UObject::GObjObjects()->Data[ 47752 ];

	ATgSkeletalMeshActor_CharacterBuilder_execShouldDrawHelmet_Parms ShouldDrawHelmet_Parms;

	pFnShouldDrawHelmet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDrawHelmet, &ShouldDrawHelmet_Parms, NULL );

	pFnShouldDrawHelmet->FunctionFlags |= 0x400;

	return ShouldDrawHelmet_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ShouldDrawHead
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgSkeletalMeshActor_CharacterBuilder::ShouldDrawHead ( )
{
	static UFunction* pFnShouldDrawHead = NULL;

	if ( ! pFnShouldDrawHead )
		pFnShouldDrawHead = (UFunction*) UObject::GObjObjects()->Data[ 47750 ];

	ATgSkeletalMeshActor_CharacterBuilder_execShouldDrawHead_Parms ShouldDrawHead_Parms;

	pFnShouldDrawHead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDrawHead, &ShouldDrawHead_Parms, NULL );

	pFnShouldDrawHead->FunctionFlags |= 0x400;

	return ShouldDrawHead_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ApplyDyeColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::ApplyDyeColor ( )
{
	static UFunction* pFnApplyDyeColor = NULL;

	if ( ! pFnApplyDyeColor )
		pFnApplyDyeColor = (UFunction*) UObject::GObjObjects()->Data[ 47749 ];

	ATgSkeletalMeshActor_CharacterBuilder_execApplyDyeColor_Parms ApplyDyeColor_Parms;

	pFnApplyDyeColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDyeColor, &ApplyDyeColor_Parms, NULL );

	pFnApplyDyeColor->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ApplyHeadMorphData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::ApplyHeadMorphData ( )
{
	static UFunction* pFnApplyHeadMorphData = NULL;

	if ( ! pFnApplyHeadMorphData )
		pFnApplyHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 47748 ];

	ATgSkeletalMeshActor_CharacterBuilder_execApplyHeadMorphData_Parms ApplyHeadMorphData_Parms;

	pFnApplyHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyHeadMorphData, &ApplyHeadMorphData_Parms, NULL );

	pFnApplyHeadMorphData->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ClearHeadMorphData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::ClearHeadMorphData ( )
{
	static UFunction* pFnClearHeadMorphData = NULL;

	if ( ! pFnClearHeadMorphData )
		pFnClearHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 47747 ];

	ATgSkeletalMeshActor_CharacterBuilder_execClearHeadMorphData_Parms ClearHeadMorphData_Parms;

	pFnClearHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearHeadMorphData, &ClearHeadMorphData_Parms, NULL );

	pFnClearHeadMorphData->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SaveHeadMorphData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::SaveHeadMorphData ( )
{
	static UFunction* pFnSaveHeadMorphData = NULL;

	if ( ! pFnSaveHeadMorphData )
		pFnSaveHeadMorphData = (UFunction*) UObject::GObjObjects()->Data[ 47746 ];

	ATgSkeletalMeshActor_CharacterBuilder_execSaveHeadMorphData_Parms SaveHeadMorphData_Parms;

	pFnSaveHeadMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveHeadMorphData, &SaveHeadMorphData_Parms, NULL );

	pFnSaveHeadMorphData->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.ResolveMorphNodeIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NodeName                       ( CPF_Parm )

int ATgSkeletalMeshActor_CharacterBuilder::ResolveMorphNodeIndex ( struct FName NodeName )
{
	static UFunction* pFnResolveMorphNodeIndex = NULL;

	if ( ! pFnResolveMorphNodeIndex )
		pFnResolveMorphNodeIndex = (UFunction*) UObject::GObjObjects()->Data[ 47743 ];

	ATgSkeletalMeshActor_CharacterBuilder_execResolveMorphNodeIndex_Parms ResolveMorphNodeIndex_Parms;
	memcpy ( &ResolveMorphNodeIndex_Parms.NodeName, &NodeName, 0x8 );

	pFnResolveMorphNodeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveMorphNodeIndex, &ResolveMorphNodeIndex_Parms, NULL );

	pFnResolveMorphNodeIndex->FunctionFlags |= 0x400;

	return ResolveMorphNodeIndex_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RemoveAllMorphPoseWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::RemoveAllMorphPoseWeights ( )
{
	static UFunction* pFnRemoveAllMorphPoseWeights = NULL;

	if ( ! pFnRemoveAllMorphPoseWeights )
		pFnRemoveAllMorphPoseWeights = (UFunction*) UObject::GObjObjects()->Data[ 47742 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRemoveAllMorphPoseWeights_Parms RemoveAllMorphPoseWeights_Parms;

	pFnRemoveAllMorphPoseWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllMorphPoseWeights, &RemoveAllMorphPoseWeights_Parms, NULL );

	pFnRemoveAllMorphPoseWeights->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.SetMorphNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPct                           ( CPF_Parm )
// struct FName                   PoseToSet                      ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::SetMorphNodeWeight ( float fPct, struct FName PoseToSet )
{
	static UFunction* pFnSetMorphNodeWeight = NULL;

	if ( ! pFnSetMorphNodeWeight )
		pFnSetMorphNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 47739 ];

	ATgSkeletalMeshActor_CharacterBuilder_execSetMorphNodeWeight_Parms SetMorphNodeWeight_Parms;
	SetMorphNodeWeight_Parms.fPct = fPct;
	memcpy ( &SetMorphNodeWeight_Parms.PoseToSet, &PoseToSet, 0x8 );

	pFnSetMorphNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphNodeWeight, &SetMorphNodeWeight_Parms, NULL );

	pFnSetMorphNodeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetMorphNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PoseID                         ( CPF_Parm )

float ATgSkeletalMeshActor_CharacterBuilder::GetMorphNodeWeight ( struct FName PoseID )
{
	static UFunction* pFnGetMorphNodeWeight = NULL;

	if ( ! pFnGetMorphNodeWeight )
		pFnGetMorphNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 47736 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetMorphNodeWeight_Parms GetMorphNodeWeight_Parms;
	memcpy ( &GetMorphNodeWeight_Parms.PoseID, &PoseID, 0x8 );

	pFnGetMorphNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMorphNodeWeight, &GetMorphNodeWeight_Parms, NULL );

	pFnGetMorphNodeWeight->FunctionFlags |= 0x400;

	return GetMorphNodeWeight_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetNumMorphsInMorphBlendList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PoseID                         ( CPF_Parm )

int ATgSkeletalMeshActor_CharacterBuilder::GetNumMorphsInMorphBlendList ( struct FName PoseID )
{
	static UFunction* pFnGetNumMorphsInMorphBlendList = NULL;

	if ( ! pFnGetNumMorphsInMorphBlendList )
		pFnGetNumMorphsInMorphBlendList = (UFunction*) UObject::GObjObjects()->Data[ 47733 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetNumMorphsInMorphBlendList_Parms GetNumMorphsInMorphBlendList_Parms;
	memcpy ( &GetNumMorphsInMorphBlendList_Parms.PoseID, &PoseID, 0x8 );

	pFnGetNumMorphsInMorphBlendList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumMorphsInMorphBlendList, &GetNumMorphsInMorphBlendList_Parms, NULL );

	pFnGetNumMorphsInMorphBlendList->FunctionFlags |= 0x400;

	return GetNumMorphsInMorphBlendList_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RandomizeAllMorphNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::RandomizeAllMorphNodes ( )
{
	static UFunction* pFnRandomizeAllMorphNodes = NULL;

	if ( ! pFnRandomizeAllMorphNodes )
		pFnRandomizeAllMorphNodes = (UFunction*) UObject::GObjObjects()->Data[ 47732 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRandomizeAllMorphNodes_Parms RandomizeAllMorphNodes_Parms;

	pFnRandomizeAllMorphNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeAllMorphNodes, &RandomizeAllMorphNodes_Parms, NULL );

	pFnRandomizeAllMorphNodes->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RandomizeMorphNodesByGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  GroupID                        ( CPF_Parm )
// TArray< unsigned char >        IgnorePoses                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgSkeletalMeshActor_CharacterBuilder::RandomizeMorphNodesByGroup ( unsigned char GroupID, TArray< unsigned char > IgnorePoses )
{
	static UFunction* pFnRandomizeMorphNodesByGroup = NULL;

	if ( ! pFnRandomizeMorphNodesByGroup )
		pFnRandomizeMorphNodesByGroup = (UFunction*) UObject::GObjObjects()->Data[ 47728 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRandomizeMorphNodesByGroup_Parms RandomizeMorphNodesByGroup_Parms;
	RandomizeMorphNodesByGroup_Parms.GroupID = GroupID;
	memcpy ( &RandomizeMorphNodesByGroup_Parms.IgnorePoses, &IgnorePoses, 0xC );

	pFnRandomizeMorphNodesByGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeMorphNodesByGroup, &RandomizeMorphNodesByGroup_Parms, NULL );

	pFnRandomizeMorphNodesByGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.RandomizeMorphNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   PoseID                         ( CPF_Parm )

void ATgSkeletalMeshActor_CharacterBuilder::RandomizeMorphNode ( struct FName PoseID )
{
	static UFunction* pFnRandomizeMorphNode = NULL;

	if ( ! pFnRandomizeMorphNode )
		pFnRandomizeMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 47726 ];

	ATgSkeletalMeshActor_CharacterBuilder_execRandomizeMorphNode_Parms RandomizeMorphNode_Parms;
	memcpy ( &RandomizeMorphNode_Parms.PoseID, &PoseID, 0x8 );

	pFnRandomizeMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeMorphNode, &RandomizeMorphNode_Parms, NULL );

	pFnRandomizeMorphNode->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetHeadMorphGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PoseID                         ( CPF_Parm )

unsigned char ATgSkeletalMeshActor_CharacterBuilder::GetHeadMorphGroup ( struct FName PoseID )
{
	static UFunction* pFnGetHeadMorphGroup = NULL;

	if ( ! pFnGetHeadMorphGroup )
		pFnGetHeadMorphGroup = (UFunction*) UObject::GObjObjects()->Data[ 47723 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetHeadMorphGroup_Parms GetHeadMorphGroup_Parms;
	memcpy ( &GetHeadMorphGroup_Parms.PoseID, &PoseID, 0x8 );

	pFnGetHeadMorphGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadMorphGroup, &GetHeadMorphGroup_Parms, NULL );

	pFnGetHeadMorphGroup->FunctionFlags |= 0x400;

	return GetHeadMorphGroup_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetHeadAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimTree*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimTree* ATgSkeletalMeshActor_CharacterBuilder::GetHeadAnimTree ( )
{
	static UFunction* pFnGetHeadAnimTree = NULL;

	if ( ! pFnGetHeadAnimTree )
		pFnGetHeadAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 47721 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetHeadAnimTree_Parms GetHeadAnimTree_Parms;

	pFnGetHeadAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadAnimTree, &GetHeadAnimTree_Parms, NULL );

	pFnGetHeadAnimTree->FunctionFlags |= 0x400;

	return GetHeadAnimTree_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.UpdateSkelPose
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SMC                            ( CPF_Parm | CPF_EditInline )

void ATgSkeletalMeshActor_CharacterBuilder::UpdateSkelPose ( class USkeletalMeshComponent* SMC )
{
	static UFunction* pFnUpdateSkelPose = NULL;

	if ( ! pFnUpdateSkelPose )
		pFnUpdateSkelPose = (UFunction*) UObject::GObjObjects()->Data[ 47719 ];

	ATgSkeletalMeshActor_CharacterBuilder_execUpdateSkelPose_Parms UpdateSkelPose_Parms;
	UpdateSkelPose_Parms.SMC = SMC;

	pFnUpdateSkelPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSkelPose, &UpdateSkelPose_Parms, NULL );

	pFnUpdateSkelPose->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetMeshIdFromFlairId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nItemId                        ( CPF_Parm )

int ATgSkeletalMeshActor_CharacterBuilder::GetMeshIdFromFlairId ( int nItemId )
{
	static UFunction* pFnGetMeshIdFromFlairId = NULL;

	if ( ! pFnGetMeshIdFromFlairId )
		pFnGetMeshIdFromFlairId = (UFunction*) UObject::GObjObjects()->Data[ 47716 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetMeshIdFromFlairId_Parms GetMeshIdFromFlairId_Parms;
	GetMeshIdFromFlairId_Parms.nItemId = nItemId;

	pFnGetMeshIdFromFlairId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMeshIdFromFlairId, &GetMeshIdFromFlairId_Parms, NULL );

	pFnGetMeshIdFromFlairId->FunctionFlags |= 0x400;

	return GetMeshIdFromFlairId_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.UpdateHalfHelmetStatus
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::UpdateHalfHelmetStatus ( )
{
	static UFunction* pFnUpdateHalfHelmetStatus = NULL;

	if ( ! pFnUpdateHalfHelmetStatus )
		pFnUpdateHalfHelmetStatus = (UFunction*) UObject::GObjObjects()->Data[ 47715 ];

	ATgSkeletalMeshActor_CharacterBuilder_execUpdateHalfHelmetStatus_Parms UpdateHalfHelmetStatus_Parms;

	pFnUpdateHalfHelmetStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHalfHelmetStatus, &UpdateHalfHelmetStatus_Parms, NULL );

	pFnUpdateHalfHelmetStatus->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetRootBoneName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  SMC                            ( CPF_Parm | CPF_EditInline )

struct FName ATgSkeletalMeshActor_CharacterBuilder::GetRootBoneName ( class USkeletalMeshComponent* SMC )
{
	static UFunction* pFnGetRootBoneName = NULL;

	if ( ! pFnGetRootBoneName )
		pFnGetRootBoneName = (UFunction*) UObject::GObjObjects()->Data[ 47712 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetRootBoneName_Parms GetRootBoneName_Parms;
	GetRootBoneName_Parms.SMC = SMC;

	pFnGetRootBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRootBoneName, &GetRootBoneName_Parms, NULL );

	pFnGetRootBoneName->FunctionFlags |= 0x400;

	return GetRootBoneName_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.UpdateAnimations
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_CharacterBuilder::UpdateAnimations ( )
{
	static UFunction* pFnUpdateAnimations = NULL;

	if ( ! pFnUpdateAnimations )
		pFnUpdateAnimations = (UFunction*) UObject::GObjObjects()->Data[ 47711 ];

	ATgSkeletalMeshActor_CharacterBuilder_execUpdateAnimations_Parms UpdateAnimations_Parms;

	pFnUpdateAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimations, &UpdateAnimations_Parms, NULL );

	pFnUpdateAnimations->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetHairMIC
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MeshAsmId                      ( CPF_Parm )
// int                            MaterialSubTypeId              ( CPF_Parm )

class UMaterialInstanceConstant* ATgSkeletalMeshActor_CharacterBuilder::GetHairMIC ( int MeshAsmId, int MaterialSubTypeId )
{
	static UFunction* pFnGetHairMIC = NULL;

	if ( ! pFnGetHairMIC )
		pFnGetHairMIC = (UFunction*) UObject::GObjObjects()->Data[ 47707 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetHairMIC_Parms GetHairMIC_Parms;
	GetHairMIC_Parms.MeshAsmId = MeshAsmId;
	GetHairMIC_Parms.MaterialSubTypeId = MaterialSubTypeId;

	pFnGetHairMIC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHairMIC, &GetHairMIC_Parms, NULL );

	pFnGetHairMIC->FunctionFlags |= 0x400;

	return GetHairMIC_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_CharacterBuilder.GetMaterialParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ParameterId                    ( CPF_Parm )

struct FLinearColor ATgSkeletalMeshActor_CharacterBuilder::GetMaterialParameter ( int ParameterId )
{
	static UFunction* pFnGetMaterialParameter = NULL;

	if ( ! pFnGetMaterialParameter )
		pFnGetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 47704 ];

	ATgSkeletalMeshActor_CharacterBuilder_execGetMaterialParameter_Parms GetMaterialParameter_Parms;
	GetMaterialParameter_Parms.ParameterId = ParameterId;

	pFnGetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterialParameter, &GetMaterialParameter_Parms, NULL );

	pFnGetMaterialParameter->FunctionFlags |= 0x400;

	return GetMaterialParameter_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PlayBackpackReaction
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_EquipScreen::eventPlayBackpackReaction ( )
{
	static UFunction* pFnPlayBackpackReaction = NULL;

	if ( ! pFnPlayBackpackReaction )
		pFnPlayBackpackReaction = (UFunction*) UObject::GObjObjects()->Data[ 47944 ];

	ATgSkeletalMeshActor_EquipScreen_eventPlayBackpackReaction_Parms PlayBackpackReaction_Parms;

	this->ProcessEvent ( pFnPlayBackpackReaction, &PlayBackpackReaction_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PlaySuitReaction
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_EquipScreen::eventPlaySuitReaction ( )
{
	static UFunction* pFnPlaySuitReaction = NULL;

	if ( ! pFnPlaySuitReaction )
		pFnPlaySuitReaction = (UFunction*) UObject::GObjObjects()->Data[ 47943 ];

	ATgSkeletalMeshActor_EquipScreen_eventPlaySuitReaction_Parms PlaySuitReaction_Parms;

	this->ProcessEvent ( pFnPlaySuitReaction, &PlaySuitReaction_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PlayHelmetReaction
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_EquipScreen::eventPlayHelmetReaction ( )
{
	static UFunction* pFnPlayHelmetReaction = NULL;

	if ( ! pFnPlayHelmetReaction )
		pFnPlayHelmetReaction = (UFunction*) UObject::GObjObjects()->Data[ 47942 ];

	ATgSkeletalMeshActor_EquipScreen_eventPlayHelmetReaction_Parms PlayHelmetReaction_Parms;

	this->ProcessEvent ( pFnPlayHelmetReaction, &PlayHelmetReaction_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PlayWeaponDeployAnimation
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_EquipScreen::eventPlayWeaponDeployAnimation ( )
{
	static UFunction* pFnPlayWeaponDeployAnimation = NULL;

	if ( ! pFnPlayWeaponDeployAnimation )
		pFnPlayWeaponDeployAnimation = (UFunction*) UObject::GObjObjects()->Data[ 47940 ];

	ATgSkeletalMeshActor_EquipScreen_eventPlayWeaponDeployAnimation_Parms PlayWeaponDeployAnimation_Parms;

	this->ProcessEvent ( pFnPlayWeaponDeployAnimation, &PlayWeaponDeployAnimation_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PlayWeaponReaction
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_EquipScreen::eventPlayWeaponReaction ( )
{
	static UFunction* pFnPlayWeaponReaction = NULL;

	if ( ! pFnPlayWeaponReaction )
		pFnPlayWeaponReaction = (UFunction*) UObject::GObjObjects()->Data[ 47939 ];

	ATgSkeletalMeshActor_EquipScreen_eventPlayWeaponReaction_Parms PlayWeaponReaction_Parms;

	this->ProcessEvent ( pFnPlayWeaponReaction, &PlayWeaponReaction_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_EquipScreen.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgSkeletalMeshActor_EquipScreen::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 47937 ];

	ATgSkeletalMeshActor_EquipScreen_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 48125 ];

	ATgSkeletalMeshActorNPC_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.OnAnimPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 48123 ];

	ATgSkeletalMeshActorNPC_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 48119 ];

	ATgSkeletalMeshActorNPC_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.SetAttentionToNextTarget
// [0x00020102] 
// Parameters infos:

void ATgSkeletalMeshActorNPC::SetAttentionToNextTarget ( )
{
	static UFunction* pFnSetAttentionToNextTarget = NULL;

	if ( ! pFnSetAttentionToNextTarget )
		pFnSetAttentionToNextTarget = (UFunction*) UObject::GObjObjects()->Data[ 48118 ];

	ATgSkeletalMeshActorNPC_execSetAttentionToNextTarget_Parms SetAttentionToNextTarget_Parms;

	this->ProcessEvent ( pFnSetAttentionToNextTarget, &SetAttentionToNextTarget_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.PawnLeftPresence
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 P                              ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventPawnLeftPresence ( class ATgPawn* P )
{
	static UFunction* pFnPawnLeftPresence = NULL;

	if ( ! pFnPawnLeftPresence )
		pFnPawnLeftPresence = (UFunction*) UObject::GObjObjects()->Data[ 48116 ];

	ATgSkeletalMeshActorNPC_eventPawnLeftPresence_Parms PawnLeftPresence_Parms;
	PawnLeftPresence_Parms.P = P;

	this->ProcessEvent ( pFnPawnLeftPresence, &PawnLeftPresence_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.PawnEnteredPresence
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 P                              ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventPawnEnteredPresence ( class ATgPawn* P )
{
	static UFunction* pFnPawnEnteredPresence = NULL;

	if ( ! pFnPawnEnteredPresence )
		pFnPawnEnteredPresence = (UFunction*) UObject::GObjObjects()->Data[ 48114 ];

	ATgSkeletalMeshActorNPC_eventPawnEnteredPresence_Parms PawnEnteredPresence_Parms;
	PawnEnteredPresence_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredPresence, &PawnEnteredPresence_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.CheckCallOut
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaSeconds                   ( CPF_Parm )

bool ATgSkeletalMeshActorNPC::CheckCallOut ( float DeltaSeconds )
{
	static UFunction* pFnCheckCallOut = NULL;

	if ( ! pFnCheckCallOut )
		pFnCheckCallOut = (UFunction*) UObject::GObjObjects()->Data[ 48111 ];

	ATgSkeletalMeshActorNPC_execCheckCallOut_Parms CheckCallOut_Parms;
	CheckCallOut_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnCheckCallOut, &CheckCallOut_Parms, NULL );

	return CheckCallOut_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActorNPC.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgSkeletalMeshActorNPC::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 48098 ];

	ATgSkeletalMeshActorNPC_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.CreateAttachments
// [0x00020102] 
// Parameters infos:

void ATgSkeletalMeshActorNPC::CreateAttachments ( )
{
	static UFunction* pFnCreateAttachments = NULL;

	if ( ! pFnCreateAttachments )
		pFnCreateAttachments = (UFunction*) UObject::GObjObjects()->Data[ 48092 ];

	ATgSkeletalMeshActorNPC_execCreateAttachments_Parms CreateAttachments_Parms;

	this->ProcessEvent ( pFnCreateAttachments, &CreateAttachments_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActorNPC::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48090 ];

	ATgSkeletalMeshActorNPC_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgSkeletalMeshActorNPC::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 48088 ];

	ATgSkeletalMeshActorNPC_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPC.SetOverheadFx
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            FxId                           ( CPF_Parm )
// int                            ExitFxId                       ( CPF_OptionalParm | CPF_Parm )

void ATgSkeletalMeshActorNPC::SetOverheadFx ( int FxId, int ExitFxId )
{
	static UFunction* pFnSetOverheadFx = NULL;

	if ( ! pFnSetOverheadFx )
		pFnSetOverheadFx = (UFunction*) UObject::GObjObjects()->Data[ 48085 ];

	ATgSkeletalMeshActorNPC_execSetOverheadFx_Parms SetOverheadFx_Parms;
	SetOverheadFx_Parms.FxId = FxId;
	SetOverheadFx_Parms.ExitFxId = ExitFxId;

	pFnSetOverheadFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOverheadFx, &SetOverheadFx_Parms, NULL );

	pFnSetOverheadFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_Composite.SetCompositeCharacterInfo
// [0x00020102] 
// Parameters infos:
// int                            Torso                          ( CPF_Parm )
// int                            Head                           ( CPF_Parm )
// int                            GlovesR                        ( CPF_Parm )
// int                            GlovesL                        ( CPF_Parm )
// int                            Legs                           ( CPF_Parm )
// int                            BootsR                         ( CPF_Parm )
// int                            BootsL                         ( CPF_Parm )
// int                            ClassSpecific                  ( CPF_Parm )

void ATgSkeletalMeshActor_Composite::SetCompositeCharacterInfo ( int Torso, int Head, int GlovesR, int GlovesL, int Legs, int BootsR, int BootsL, int ClassSpecific )
{
	static UFunction* pFnSetCompositeCharacterInfo = NULL;

	if ( ! pFnSetCompositeCharacterInfo )
		pFnSetCompositeCharacterInfo = (UFunction*) UObject::GObjObjects()->Data[ 47924 ];

	ATgSkeletalMeshActor_Composite_execSetCompositeCharacterInfo_Parms SetCompositeCharacterInfo_Parms;
	SetCompositeCharacterInfo_Parms.Torso = Torso;
	SetCompositeCharacterInfo_Parms.Head = Head;
	SetCompositeCharacterInfo_Parms.GlovesR = GlovesR;
	SetCompositeCharacterInfo_Parms.GlovesL = GlovesL;
	SetCompositeCharacterInfo_Parms.Legs = Legs;
	SetCompositeCharacterInfo_Parms.BootsR = BootsR;
	SetCompositeCharacterInfo_Parms.BootsL = BootsL;
	SetCompositeCharacterInfo_Parms.ClassSpecific = ClassSpecific;

	this->ProcessEvent ( pFnSetCompositeCharacterInfo, &SetCompositeCharacterInfo_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_Composite.ComposeMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_Composite::ComposeMesh ( )
{
	static UFunction* pFnComposeMesh = NULL;

	if ( ! pFnComposeMesh )
		pFnComposeMesh = (UFunction*) UObject::GObjObjects()->Data[ 47923 ];

	ATgSkeletalMeshActor_Composite_execComposeMesh_Parms ComposeMesh_Parms;

	pFnComposeMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComposeMesh, &ComposeMesh_Parms, NULL );

	pFnComposeMesh->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_Composite.CreateMeshesFromBank
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_Composite::CreateMeshesFromBank ( )
{
	static UFunction* pFnCreateMeshesFromBank = NULL;

	if ( ! pFnCreateMeshesFromBank )
		pFnCreateMeshesFromBank = (UFunction*) UObject::GObjObjects()->Data[ 47922 ];

	ATgSkeletalMeshActor_Composite_execCreateMeshesFromBank_Parms CreateMeshesFromBank_Parms;

	pFnCreateMeshesFromBank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateMeshesFromBank, &CreateMeshesFromBank_Parms, NULL );

	pFnCreateMeshesFromBank->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_Composite.CreateMeshesFromIds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgSkeletalMeshActor_Composite::CreateMeshesFromIds ( )
{
	static UFunction* pFnCreateMeshesFromIds = NULL;

	if ( ! pFnCreateMeshesFromIds )
		pFnCreateMeshesFromIds = (UFunction*) UObject::GObjObjects()->Data[ 47921 ];

	ATgSkeletalMeshActor_Composite_execCreateMeshesFromIds_Parms CreateMeshesFromIds_Parms;

	pFnCreateMeshesFromIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateMeshesFromIds, &CreateMeshesFromIds_Parms, NULL );

	pFnCreateMeshesFromIds->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.OnAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgSkeletalMeshActor_MeleePreVis::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 48024 ];

	ATgSkeletalMeshActor_MeleePreVis_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.OnAnimPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void ATgSkeletalMeshActor_MeleePreVis::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 48022 ];

	ATgSkeletalMeshActor_MeleePreVis_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.EndPostAttackHoldPose
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::EndPostAttackHoldPose ( )
{
	static UFunction* pFnEndPostAttackHoldPose = NULL;

	if ( ! pFnEndPostAttackHoldPose )
		pFnEndPostAttackHoldPose = (UFunction*) UObject::GObjObjects()->Data[ 48021 ];

	ATgSkeletalMeshActor_MeleePreVis_execEndPostAttackHoldPose_Parms EndPostAttackHoldPose_Parms;

	this->ProcessEvent ( pFnEndPostAttackHoldPose, &EndPostAttackHoldPose_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.GoRun
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::GoRun ( )
{
	static UFunction* pFnGoRun = NULL;

	if ( ! pFnGoRun )
		pFnGoRun = (UFunction*) UObject::GObjObjects()->Data[ 48020 ];

	ATgSkeletalMeshActor_MeleePreVis_execGoRun_Parms GoRun_Parms;

	this->ProcessEvent ( pFnGoRun, &GoRun_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.GoIdle
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::GoIdle ( )
{
	static UFunction* pFnGoIdle = NULL;

	if ( ! pFnGoIdle )
		pFnGoIdle = (UFunction*) UObject::GObjObjects()->Data[ 48019 ];

	ATgSkeletalMeshActor_MeleePreVis_execGoIdle_Parms GoIdle_Parms;

	this->ProcessEvent ( pFnGoIdle, &GoIdle_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.Attack
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::Attack ( )
{
	static UFunction* pFnAttack = NULL;

	if ( ! pFnAttack )
		pFnAttack = (UFunction*) UObject::GObjObjects()->Data[ 48018 ];

	ATgSkeletalMeshActor_MeleePreVis_execAttack_Parms Attack_Parms;

	this->ProcessEvent ( pFnAttack, &Attack_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.CanJumpNow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgSkeletalMeshActor_MeleePreVis::CanJumpNow ( )
{
	static UFunction* pFnCanJumpNow = NULL;

	if ( ! pFnCanJumpNow )
		pFnCanJumpNow = (UFunction*) UObject::GObjObjects()->Data[ 48016 ];

	ATgSkeletalMeshActor_MeleePreVis_execCanJumpNow_Parms CanJumpNow_Parms;

	this->ProcessEvent ( pFnCanJumpNow, &CanJumpNow_Parms, NULL );

	return CanJumpNow_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.DoJump
// [0x00020002] 
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::DoJump ( )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 48015 ];

	ATgSkeletalMeshActor_MeleePreVis_execDoJump_Parms DoJump_Parms;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgSkeletalMeshActor_MeleePreVis::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 48014 ];

	ATgSkeletalMeshActor_MeleePreVis_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.Tick
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgSkeletalMeshActor_MeleePreVis::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 48010 ];

	ATgSkeletalMeshActor_MeleePreVis_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActor_MeleePreVis.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgSkeletalMeshActor_MeleePreVis::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 48008 ];

	ATgSkeletalMeshActor_MeleePreVis_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshComponent.GetHairColorsFromMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FHairColorParams        OutHairColors                  ( CPF_Parm | CPF_OutParm )

void UTgSkeletalMeshComponent::GetHairColorsFromMorphData ( struct FHairColorParams* OutHairColors )
{
	static UFunction* pFnGetHairColorsFromMorphData = NULL;

	if ( ! pFnGetHairColorsFromMorphData )
		pFnGetHairColorsFromMorphData = (UFunction*) UObject::GObjObjects()->Data[ 40031 ];

	UTgSkeletalMeshComponent_execGetHairColorsFromMorphData_Parms GetHairColorsFromMorphData_Parms;

	pFnGetHairColorsFromMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHairColorsFromMorphData, &GetHairColorsFromMorphData_Parms, NULL );

	pFnGetHairColorsFromMorphData->FunctionFlags |= 0x400;

	if ( OutHairColors )
		memcpy ( OutHairColors, &GetHairColorsFromMorphData_Parms.OutHairColors, 0xF8 );
};

// Function TgGame.TgSkeletalMeshComponent.GetSkinColorsFromMorphData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            OutSkinColor                   ( CPF_Parm | CPF_OutParm )
// struct FLinearColor            OutBaseSkinColor               ( CPF_Parm | CPF_OutParm )
// float                          OutSkinTone                    ( CPF_Parm | CPF_OutParm )

void UTgSkeletalMeshComponent::GetSkinColorsFromMorphData ( struct FLinearColor* OutSkinColor, struct FLinearColor* OutBaseSkinColor, float* OutSkinTone )
{
	static UFunction* pFnGetSkinColorsFromMorphData = NULL;

	if ( ! pFnGetSkinColorsFromMorphData )
		pFnGetSkinColorsFromMorphData = (UFunction*) UObject::GObjObjects()->Data[ 40027 ];

	UTgSkeletalMeshComponent_execGetSkinColorsFromMorphData_Parms GetSkinColorsFromMorphData_Parms;

	pFnGetSkinColorsFromMorphData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkinColorsFromMorphData, &GetSkinColorsFromMorphData_Parms, NULL );

	pFnGetSkinColorsFromMorphData->FunctionFlags |= 0x400;

	if ( OutSkinColor )
		memcpy ( OutSkinColor, &GetSkinColorsFromMorphData_Parms.OutSkinColor, 0x10 );

	if ( OutBaseSkinColor )
		memcpy ( OutBaseSkinColor, &GetSkinColorsFromMorphData_Parms.OutBaseSkinColor, 0x10 );

	if ( OutSkinTone )
		*OutSkinTone = GetSkinColorsFromMorphData_Parms.OutSkinTone;
};

// Function TgGame.TgSkeletalMeshComponent.SetForceUpdateAttachmentsInTick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bSet                           ( CPF_Parm )

void UTgSkeletalMeshComponent::SetForceUpdateAttachmentsInTick ( unsigned long bSet )
{
	static UFunction* pFnSetForceUpdateAttachmentsInTick = NULL;

	if ( ! pFnSetForceUpdateAttachmentsInTick )
		pFnSetForceUpdateAttachmentsInTick = (UFunction*) UObject::GObjObjects()->Data[ 40025 ];

	UTgSkeletalMeshComponent_execSetForceUpdateAttachmentsInTick_Parms SetForceUpdateAttachmentsInTick_Parms;
	SetForceUpdateAttachmentsInTick_Parms.bSet = bSet;

	pFnSetForceUpdateAttachmentsInTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceUpdateAttachmentsInTick, &SetForceUpdateAttachmentsInTick_Parms, NULL );

	pFnSetForceUpdateAttachmentsInTick->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.ResolveMorphNodeIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NodeName                       ( CPF_Parm )

int UTgSkeletalMeshComponent::ResolveMorphNodeIndex ( struct FName NodeName )
{
	static UFunction* pFnResolveMorphNodeIndex = NULL;

	if ( ! pFnResolveMorphNodeIndex )
		pFnResolveMorphNodeIndex = (UFunction*) UObject::GObjObjects()->Data[ 40022 ];

	UTgSkeletalMeshComponent_execResolveMorphNodeIndex_Parms ResolveMorphNodeIndex_Parms;
	memcpy ( &ResolveMorphNodeIndex_Parms.NodeName, &NodeName, 0x8 );

	pFnResolveMorphNodeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveMorphNodeIndex, &ResolveMorphNodeIndex_Parms, NULL );

	pFnResolveMorphNodeIndex->FunctionFlags |= 0x400;

	return ResolveMorphNodeIndex_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.SetMorphNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPct                           ( CPF_Parm )
// struct FName                   PoseToSet                      ( CPF_Parm )

void UTgSkeletalMeshComponent::SetMorphNodeWeight ( float fPct, struct FName PoseToSet )
{
	static UFunction* pFnSetMorphNodeWeight = NULL;

	if ( ! pFnSetMorphNodeWeight )
		pFnSetMorphNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40019 ];

	UTgSkeletalMeshComponent_execSetMorphNodeWeight_Parms SetMorphNodeWeight_Parms;
	SetMorphNodeWeight_Parms.fPct = fPct;
	memcpy ( &SetMorphNodeWeight_Parms.PoseToSet, &PoseToSet, 0x8 );

	pFnSetMorphNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphNodeWeight, &SetMorphNodeWeight_Parms, NULL );

	pFnSetMorphNodeWeight->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.GetMorphNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PoseID                         ( CPF_Parm )

float UTgSkeletalMeshComponent::GetMorphNodeWeight ( struct FName PoseID )
{
	static UFunction* pFnGetMorphNodeWeight = NULL;

	if ( ! pFnGetMorphNodeWeight )
		pFnGetMorphNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 40016 ];

	UTgSkeletalMeshComponent_execGetMorphNodeWeight_Parms GetMorphNodeWeight_Parms;
	memcpy ( &GetMorphNodeWeight_Parms.PoseID, &PoseID, 0x8 );

	pFnGetMorphNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMorphNodeWeight, &GetMorphNodeWeight_Parms, NULL );

	pFnGetMorphNodeWeight->FunctionFlags |= 0x400;

	return GetMorphNodeWeight_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.GetNumMorphsInMorphBlendList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PoseID                         ( CPF_Parm )

int UTgSkeletalMeshComponent::GetNumMorphsInMorphBlendList ( struct FName PoseID )
{
	static UFunction* pFnGetNumMorphsInMorphBlendList = NULL;

	if ( ! pFnGetNumMorphsInMorphBlendList )
		pFnGetNumMorphsInMorphBlendList = (UFunction*) UObject::GObjObjects()->Data[ 40013 ];

	UTgSkeletalMeshComponent_execGetNumMorphsInMorphBlendList_Parms GetNumMorphsInMorphBlendList_Parms;
	memcpy ( &GetNumMorphsInMorphBlendList_Parms.PoseID, &PoseID, 0x8 );

	pFnGetNumMorphsInMorphBlendList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumMorphsInMorphBlendList, &GetNumMorphsInMorphBlendList_Parms, NULL );

	pFnGetNumMorphsInMorphBlendList->FunctionFlags |= 0x400;

	return GetNumMorphsInMorphBlendList_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.GetAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimTree*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimTree* UTgSkeletalMeshComponent::GetAnimTree ( )
{
	static UFunction* pFnGetAnimTree = NULL;

	if ( ! pFnGetAnimTree )
		pFnGetAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 40011 ];

	UTgSkeletalMeshComponent_execGetAnimTree_Parms GetAnimTree_Parms;

	pFnGetAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimTree, &GetAnimTree_Parms, NULL );

	pFnGetAnimTree->FunctionFlags |= 0x400;

	return GetAnimTree_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.ApplyDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      PrimaryDyeMI                   ( CPF_Parm )
// class UMaterialInterface*      SecondaryDyeMI                 ( CPF_Parm )
// class UMaterialInterface*      EmissiveDyeMI                  ( CPF_Parm )

void UTgSkeletalMeshComponent::ApplyDye ( class UMaterialInterface* PrimaryDyeMI, class UMaterialInterface* SecondaryDyeMI, class UMaterialInterface* EmissiveDyeMI )
{
	static UFunction* pFnApplyDye = NULL;

	if ( ! pFnApplyDye )
		pFnApplyDye = (UFunction*) UObject::GObjObjects()->Data[ 40007 ];

	UTgSkeletalMeshComponent_execApplyDye_Parms ApplyDye_Parms;
	ApplyDye_Parms.PrimaryDyeMI = PrimaryDyeMI;
	ApplyDye_Parms.SecondaryDyeMI = SecondaryDyeMI;
	ApplyDye_Parms.EmissiveDyeMI = EmissiveDyeMI;

	pFnApplyDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDye, &ApplyDye_Parms, NULL );

	pFnApplyDye->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.OnMeshSetHidden
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void UTgSkeletalMeshComponent::OnMeshSetHidden ( unsigned long bHidden )
{
	static UFunction* pFnOnMeshSetHidden = NULL;

	if ( ! pFnOnMeshSetHidden )
		pFnOnMeshSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 40005 ];

	UTgSkeletalMeshComponent_execOnMeshSetHidden_Parms OnMeshSetHidden_Parms;
	OnMeshSetHidden_Parms.bHidden = bHidden;

	pFnOnMeshSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMeshSetHidden, &OnMeshSetHidden_Parms, NULL );

	pFnOnMeshSetHidden->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.RecalculateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSkeletalMeshComponent::RecalculateFx ( )
{
	static UFunction* pFnRecalculateFx = NULL;

	if ( ! pFnRecalculateFx )
		pFnRecalculateFx = (UFunction*) UObject::GObjObjects()->Data[ 40004 ];

	UTgSkeletalMeshComponent_execRecalculateFx_Parms RecalculateFx_Parms;

	pFnRecalculateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateFx, &RecalculateFx_Parms, NULL );

	pFnRecalculateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.ActivateOnWhenDeployedFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgSkeletalMeshComponent::ActivateOnWhenDeployedFx ( )
{
	static UFunction* pFnActivateOnWhenDeployedFx = NULL;

	if ( ! pFnActivateOnWhenDeployedFx )
		pFnActivateOnWhenDeployedFx = (UFunction*) UObject::GObjObjects()->Data[ 40003 ];

	UTgSkeletalMeshComponent_execActivateOnWhenDeployedFx_Parms ActivateOnWhenDeployedFx_Parms;

	pFnActivateOnWhenDeployedFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOnWhenDeployedFx, &ActivateOnWhenDeployedFx_Parms, NULL );

	pFnActivateOnWhenDeployedFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.GetDefaultDeployAnimLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgSkeletalMeshComponent::GetDefaultDeployAnimLength ( )
{
	static UFunction* pFnGetDefaultDeployAnimLength = NULL;

	if ( ! pFnGetDefaultDeployAnimLength )
		pFnGetDefaultDeployAnimLength = (UFunction*) UObject::GObjObjects()->Data[ 40001 ];

	UTgSkeletalMeshComponent_execGetDefaultDeployAnimLength_Parms GetDefaultDeployAnimLength_Parms;

	pFnGetDefaultDeployAnimLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultDeployAnimLength, &GetDefaultDeployAnimLength_Parms, NULL );

	pFnGetDefaultDeployAnimLength->FunctionFlags |= 0x400;

	return GetDefaultDeployAnimLength_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.GetCurrentDeployPercentage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgSkeletalMeshComponent::GetCurrentDeployPercentage ( )
{
	static UFunction* pFnGetCurrentDeployPercentage = NULL;

	if ( ! pFnGetCurrentDeployPercentage )
		pFnGetCurrentDeployPercentage = (UFunction*) UObject::GObjObjects()->Data[ 39999 ];

	UTgSkeletalMeshComponent_execGetCurrentDeployPercentage_Parms GetCurrentDeployPercentage_Parms;

	pFnGetCurrentDeployPercentage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentDeployPercentage, &GetCurrentDeployPercentage_Parms, NULL );

	pFnGetCurrentDeployPercentage->FunctionFlags |= 0x400;

	return GetCurrentDeployPercentage_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.SwapMaterial
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      MI                             ( CPF_Parm )
// unsigned long                  bNoParamReaping                ( CPF_OptionalParm | CPF_Parm )

void UTgSkeletalMeshComponent::SwapMaterial ( class UMaterialInterface* MI, unsigned long bNoParamReaping )
{
	static UFunction* pFnSwapMaterial = NULL;

	if ( ! pFnSwapMaterial )
		pFnSwapMaterial = (UFunction*) UObject::GObjObjects()->Data[ 39996 ];

	UTgSkeletalMeshComponent_execSwapMaterial_Parms SwapMaterial_Parms;
	SwapMaterial_Parms.MI = MI;
	SwapMaterial_Parms.bNoParamReaping = bNoParamReaping;

	pFnSwapMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMaterial, &SwapMaterial_Parms, NULL );

	pFnSwapMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.GetDefaultMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class UMaterialInterface* UTgSkeletalMeshComponent::GetDefaultMaterial ( int nIndex )
{
	static UFunction* pFnGetDefaultMaterial = NULL;

	if ( ! pFnGetDefaultMaterial )
		pFnGetDefaultMaterial = (UFunction*) UObject::GObjObjects()->Data[ 39993 ];

	UTgSkeletalMeshComponent_execGetDefaultMaterial_Parms GetDefaultMaterial_Parms;
	GetDefaultMaterial_Parms.nIndex = nIndex;

	pFnGetDefaultMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultMaterial, &GetDefaultMaterial_Parms, NULL );

	pFnGetDefaultMaterial->FunctionFlags |= 0x400;

	return GetDefaultMaterial_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.SetDefaultSkin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgSkeletalMeshComponent::SetDefaultSkin ( int nIndex )
{
	static UFunction* pFnSetDefaultSkin = NULL;

	if ( ! pFnSetDefaultSkin )
		pFnSetDefaultSkin = (UFunction*) UObject::GObjObjects()->Data[ 39991 ];

	UTgSkeletalMeshComponent_execSetDefaultSkin_Parms SetDefaultSkin_Parms;
	SetDefaultSkin_Parms.nIndex = nIndex;

	pFnSetDefaultSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultSkin, &SetDefaultSkin_Parms, NULL );

	pFnSetDefaultSkin->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxActivateIndependant
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgSkeletalMeshComponent::FxActivateIndependant ( struct FName nmGroup, int nMode, struct FVector HitLocation, struct FVector HitNormal, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxActivateIndependant = NULL;

	if ( ! pFnFxActivateIndependant )
		pFnFxActivateIndependant = (UFunction*) UObject::GObjObjects()->Data[ 39984 ];

	UTgSkeletalMeshComponent_execFxActivateIndependant_Parms FxActivateIndependant_Parms;
	memcpy ( &FxActivateIndependant_Parms.nmGroup, &nmGroup, 0x8 );
	FxActivateIndependant_Parms.nMode = nMode;
	memcpy ( &FxActivateIndependant_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &FxActivateIndependant_Parms.HitNormal, &HitNormal, 0xC );
	FxActivateIndependant_Parms.nSocketIndex = nSocketIndex;
	FxActivateIndependant_Parms.nEquipSlot = nEquipSlot;

	pFnFxActivateIndependant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxActivateIndependant, &FxActivateIndependant_Parms, NULL );

	pFnFxActivateIndependant->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxSpawnSound
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* UTgSkeletalMeshComponent::FxSpawnSound ( struct FName nmGroup, int nMode, struct FVector SoundLocation, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnSound = NULL;

	if ( ! pFnFxSpawnSound )
		pFnFxSpawnSound = (UFunction*) UObject::GObjObjects()->Data[ 39977 ];

	UTgSkeletalMeshComponent_execFxSpawnSound_Parms FxSpawnSound_Parms;
	memcpy ( &FxSpawnSound_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnSound_Parms.nMode = nMode;
	memcpy ( &FxSpawnSound_Parms.SoundLocation, &SoundLocation, 0xC );
	FxSpawnSound_Parms.nSocketIndex = nSocketIndex;
	FxSpawnSound_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnSound, &FxSpawnSound_Parms, NULL );

	pFnFxSpawnSound->FunctionFlags |= 0x400;

	return FxSpawnSound_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.FxSpawnEmitter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgSkeletalMeshComponent::FxSpawnEmitter ( struct FName nmGroup, int nMode, struct FVector HitLocation, struct FVector HitNormal, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnEmitter = NULL;

	if ( ! pFnFxSpawnEmitter )
		pFnFxSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 39970 ];

	UTgSkeletalMeshComponent_execFxSpawnEmitter_Parms FxSpawnEmitter_Parms;
	memcpy ( &FxSpawnEmitter_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnEmitter_Parms.nMode = nMode;
	memcpy ( &FxSpawnEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &FxSpawnEmitter_Parms.HitNormal, &HitNormal, 0xC );
	FxSpawnEmitter_Parms.nSocketIndex = nSocketIndex;
	FxSpawnEmitter_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnEmitter, &FxSpawnEmitter_Parms, NULL );

	pFnFxSpawnEmitter->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxSpawnTracer
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgSkeletalMeshComponent::FxSpawnTracer ( struct FName nmGroup, int nMode, struct FVector HitLocation, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnTracer = NULL;

	if ( ! pFnFxSpawnTracer )
		pFnFxSpawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 39964 ];

	UTgSkeletalMeshComponent_execFxSpawnTracer_Parms FxSpawnTracer_Parms;
	memcpy ( &FxSpawnTracer_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnTracer_Parms.nMode = nMode;
	memcpy ( &FxSpawnTracer_Parms.HitLocation, &HitLocation, 0xC );
	FxSpawnTracer_Parms.nSocketIndex = nSocketIndex;
	FxSpawnTracer_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnTracer, &FxSpawnTracer_Parms, NULL );

	pFnFxSpawnTracer->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxDeactivateGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgSkeletalMeshComponent::FxDeactivateGroup ( struct FName nmGroup, int nMode, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxDeactivateGroup = NULL;

	if ( ! pFnFxDeactivateGroup )
		pFnFxDeactivateGroup = (UFunction*) UObject::GObjObjects()->Data[ 39959 ];

	UTgSkeletalMeshComponent_execFxDeactivateGroup_Parms FxDeactivateGroup_Parms;
	memcpy ( &FxDeactivateGroup_Parms.nmGroup, &nmGroup, 0x8 );
	FxDeactivateGroup_Parms.nMode = nMode;
	FxDeactivateGroup_Parms.nSocketIndex = nSocketIndex;
	FxDeactivateGroup_Parms.nEquipSlot = nEquipSlot;

	pFnFxDeactivateGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxDeactivateGroup, &FxDeactivateGroup_Parms, NULL );

	pFnFxDeactivateGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxActivateGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreRelevancy               ( CPF_OptionalParm | CPF_Parm )

class UObject* UTgSkeletalMeshComponent::FxActivateGroup ( struct FName nmGroup, int nMode, int nSocketIndex, int nEquipSlot, unsigned long bIgnoreRelevancy )
{
	static UFunction* pFnFxActivateGroup = NULL;

	if ( ! pFnFxActivateGroup )
		pFnFxActivateGroup = (UFunction*) UObject::GObjObjects()->Data[ 39952 ];

	UTgSkeletalMeshComponent_execFxActivateGroup_Parms FxActivateGroup_Parms;
	memcpy ( &FxActivateGroup_Parms.nmGroup, &nmGroup, 0x8 );
	FxActivateGroup_Parms.nMode = nMode;
	FxActivateGroup_Parms.nSocketIndex = nSocketIndex;
	FxActivateGroup_Parms.nEquipSlot = nEquipSlot;
	FxActivateGroup_Parms.bIgnoreRelevancy = bIgnoreRelevancy;

	pFnFxActivateGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxActivateGroup, &FxActivateGroup_Parms, NULL );

	pFnFxActivateGroup->FunctionFlags |= 0x400;

	return FxActivateGroup_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.FxGet
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nIndex                         ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

class UObject* UTgSkeletalMeshComponent::FxGet ( struct FName nmGroup, int nMode, int nIndex, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxGet = NULL;

	if ( ! pFnFxGet )
		pFnFxGet = (UFunction*) UObject::GObjObjects()->Data[ 39945 ];

	UTgSkeletalMeshComponent_execFxGet_Parms FxGet_Parms;
	memcpy ( &FxGet_Parms.nmGroup, &nmGroup, 0x8 );
	FxGet_Parms.nMode = nMode;
	FxGet_Parms.nIndex = nIndex;
	FxGet_Parms.nSocketIndex = nSocketIndex;
	FxGet_Parms.nEquipSlot = nEquipSlot;

	pFnFxGet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxGet, &FxGet_Parms, NULL );

	pFnFxGet->FunctionFlags |= 0x400;

	return FxGet_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshComponent.FxRemove
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Fx                             ( CPF_Parm )

void UTgSkeletalMeshComponent::FxRemove ( class UObject* Fx )
{
	static UFunction* pFnFxRemove = NULL;

	if ( ! pFnFxRemove )
		pFnFxRemove = (UFunction*) UObject::GObjObjects()->Data[ 39943 ];

	UTgSkeletalMeshComponent_execFxRemove_Parms FxRemove_Parms;
	FxRemove_Parms.Fx = Fx;

	pFnFxRemove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxRemove, &FxRemove_Parms, NULL );

	pFnFxRemove->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.FxAdd
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Fx                             ( CPF_Parm )

void UTgSkeletalMeshComponent::FxAdd ( class UObject* Fx )
{
	static UFunction* pFnFxAdd = NULL;

	if ( ! pFnFxAdd )
		pFnFxAdd = (UFunction*) UObject::GObjObjects()->Data[ 39941 ];

	UTgSkeletalMeshComponent_execFxAdd_Parms FxAdd_Parms;
	FxAdd_Parms.Fx = Fx;

	pFnFxAdd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxAdd, &FxAdd_Parms, NULL );

	pFnFxAdd->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.EndRagdoll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTgSkeletalMeshComponent::EndRagdoll ( )
{
	static UFunction* pFnEndRagdoll = NULL;

	if ( ! pFnEndRagdoll )
		pFnEndRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 39940 ];

	UTgSkeletalMeshComponent_execEndRagdoll_Parms EndRagdoll_Parms;

	pFnEndRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndRagdoll, &EndRagdoll_Parms, NULL );

	pFnEndRagdoll->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkeletalMeshComponent.InitRagdoll
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTgSkeletalMeshComponent::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 39939 ];

	UTgSkeletalMeshComponent_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.ApplyDye
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      PrimaryDyeMI                   ( CPF_Parm )
// class UMaterialInterface*      SecondaryDyeMI                 ( CPF_Parm )
// class UMaterialInterface*      EmissiveDyeMI                  ( CPF_Parm )

void UTgStaticMeshComponent::ApplyDye ( class UMaterialInterface* PrimaryDyeMI, class UMaterialInterface* SecondaryDyeMI, class UMaterialInterface* EmissiveDyeMI )
{
	static UFunction* pFnApplyDye = NULL;

	if ( ! pFnApplyDye )
		pFnApplyDye = (UFunction*) UObject::GObjObjects()->Data[ 39890 ];

	UTgStaticMeshComponent_execApplyDye_Parms ApplyDye_Parms;
	ApplyDye_Parms.PrimaryDyeMI = PrimaryDyeMI;
	ApplyDye_Parms.SecondaryDyeMI = SecondaryDyeMI;
	ApplyDye_Parms.EmissiveDyeMI = EmissiveDyeMI;

	pFnApplyDye->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDye, &ApplyDye_Parms, NULL );

	pFnApplyDye->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.RecalculateFx
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgStaticMeshComponent::RecalculateFx ( )
{
	static UFunction* pFnRecalculateFx = NULL;

	if ( ! pFnRecalculateFx )
		pFnRecalculateFx = (UFunction*) UObject::GObjObjects()->Data[ 39889 ];

	UTgStaticMeshComponent_execRecalculateFx_Parms RecalculateFx_Parms;

	pFnRecalculateFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecalculateFx, &RecalculateFx_Parms, NULL );

	pFnRecalculateFx->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.OnMeshSetHidden
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bHidden                        ( CPF_Parm )

void UTgStaticMeshComponent::OnMeshSetHidden ( unsigned long bHidden )
{
	static UFunction* pFnOnMeshSetHidden = NULL;

	if ( ! pFnOnMeshSetHidden )
		pFnOnMeshSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 39887 ];

	UTgStaticMeshComponent_execOnMeshSetHidden_Parms OnMeshSetHidden_Parms;
	OnMeshSetHidden_Parms.bHidden = bHidden;

	pFnOnMeshSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnMeshSetHidden, &OnMeshSetHidden_Parms, NULL );

	pFnOnMeshSetHidden->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.GetDefaultMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class UMaterialInterface* UTgStaticMeshComponent::GetDefaultMaterial ( int nIndex )
{
	static UFunction* pFnGetDefaultMaterial = NULL;

	if ( ! pFnGetDefaultMaterial )
		pFnGetDefaultMaterial = (UFunction*) UObject::GObjObjects()->Data[ 39884 ];

	UTgStaticMeshComponent_execGetDefaultMaterial_Parms GetDefaultMaterial_Parms;
	GetDefaultMaterial_Parms.nIndex = nIndex;

	pFnGetDefaultMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultMaterial, &GetDefaultMaterial_Parms, NULL );

	pFnGetDefaultMaterial->FunctionFlags |= 0x400;

	return GetDefaultMaterial_Parms.ReturnValue;
};

// Function TgGame.TgStaticMeshComponent.SetDefaultSkin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgStaticMeshComponent::SetDefaultSkin ( int nIndex )
{
	static UFunction* pFnSetDefaultSkin = NULL;

	if ( ! pFnSetDefaultSkin )
		pFnSetDefaultSkin = (UFunction*) UObject::GObjObjects()->Data[ 39882 ];

	UTgStaticMeshComponent_execSetDefaultSkin_Parms SetDefaultSkin_Parms;
	SetDefaultSkin_Parms.nIndex = nIndex;

	pFnSetDefaultSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultSkin, &SetDefaultSkin_Parms, NULL );

	pFnSetDefaultSkin->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.SwapMaterial
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      MI                             ( CPF_Parm )
// unsigned long                  bNoParamReaping                ( CPF_OptionalParm | CPF_Parm )

void UTgStaticMeshComponent::SwapMaterial ( class UMaterialInterface* MI, unsigned long bNoParamReaping )
{
	static UFunction* pFnSwapMaterial = NULL;

	if ( ! pFnSwapMaterial )
		pFnSwapMaterial = (UFunction*) UObject::GObjObjects()->Data[ 39879 ];

	UTgStaticMeshComponent_execSwapMaterial_Parms SwapMaterial_Parms;
	SwapMaterial_Parms.MI = MI;
	SwapMaterial_Parms.bNoParamReaping = bNoParamReaping;

	pFnSwapMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapMaterial, &SwapMaterial_Parms, NULL );

	pFnSwapMaterial->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxActivateIndependant
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgStaticMeshComponent::FxActivateIndependant ( struct FName nmGroup, int nMode, struct FVector HitLocation, struct FVector HitNormal, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxActivateIndependant = NULL;

	if ( ! pFnFxActivateIndependant )
		pFnFxActivateIndependant = (UFunction*) UObject::GObjObjects()->Data[ 39872 ];

	UTgStaticMeshComponent_execFxActivateIndependant_Parms FxActivateIndependant_Parms;
	memcpy ( &FxActivateIndependant_Parms.nmGroup, &nmGroup, 0x8 );
	FxActivateIndependant_Parms.nMode = nMode;
	memcpy ( &FxActivateIndependant_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &FxActivateIndependant_Parms.HitNormal, &HitNormal, 0xC );
	FxActivateIndependant_Parms.nSocketIndex = nSocketIndex;
	FxActivateIndependant_Parms.nEquipSlot = nEquipSlot;

	pFnFxActivateIndependant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxActivateIndependant, &FxActivateIndependant_Parms, NULL );

	pFnFxActivateIndependant->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxSpawnSound
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* UTgStaticMeshComponent::FxSpawnSound ( struct FName nmGroup, int nMode, struct FVector SoundLocation, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnSound = NULL;

	if ( ! pFnFxSpawnSound )
		pFnFxSpawnSound = (UFunction*) UObject::GObjObjects()->Data[ 39865 ];

	UTgStaticMeshComponent_execFxSpawnSound_Parms FxSpawnSound_Parms;
	memcpy ( &FxSpawnSound_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnSound_Parms.nMode = nMode;
	memcpy ( &FxSpawnSound_Parms.SoundLocation, &SoundLocation, 0xC );
	FxSpawnSound_Parms.nSocketIndex = nSocketIndex;
	FxSpawnSound_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnSound, &FxSpawnSound_Parms, NULL );

	pFnFxSpawnSound->FunctionFlags |= 0x400;

	return FxSpawnSound_Parms.ReturnValue;
};

// Function TgGame.TgStaticMeshComponent.FxSpawnEmitter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgStaticMeshComponent::FxSpawnEmitter ( struct FName nmGroup, int nMode, struct FVector HitLocation, struct FVector HitNormal, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnEmitter = NULL;

	if ( ! pFnFxSpawnEmitter )
		pFnFxSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 39858 ];

	UTgStaticMeshComponent_execFxSpawnEmitter_Parms FxSpawnEmitter_Parms;
	memcpy ( &FxSpawnEmitter_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnEmitter_Parms.nMode = nMode;
	memcpy ( &FxSpawnEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &FxSpawnEmitter_Parms.HitNormal, &HitNormal, 0xC );
	FxSpawnEmitter_Parms.nSocketIndex = nSocketIndex;
	FxSpawnEmitter_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnEmitter, &FxSpawnEmitter_Parms, NULL );

	pFnFxSpawnEmitter->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxSpawnTracer
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgStaticMeshComponent::FxSpawnTracer ( struct FName nmGroup, int nMode, struct FVector HitLocation, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxSpawnTracer = NULL;

	if ( ! pFnFxSpawnTracer )
		pFnFxSpawnTracer = (UFunction*) UObject::GObjObjects()->Data[ 39852 ];

	UTgStaticMeshComponent_execFxSpawnTracer_Parms FxSpawnTracer_Parms;
	memcpy ( &FxSpawnTracer_Parms.nmGroup, &nmGroup, 0x8 );
	FxSpawnTracer_Parms.nMode = nMode;
	memcpy ( &FxSpawnTracer_Parms.HitLocation, &HitLocation, 0xC );
	FxSpawnTracer_Parms.nSocketIndex = nSocketIndex;
	FxSpawnTracer_Parms.nEquipSlot = nEquipSlot;

	pFnFxSpawnTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxSpawnTracer, &FxSpawnTracer_Parms, NULL );

	pFnFxSpawnTracer->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxDeactivateGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

void UTgStaticMeshComponent::FxDeactivateGroup ( struct FName nmGroup, int nMode, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxDeactivateGroup = NULL;

	if ( ! pFnFxDeactivateGroup )
		pFnFxDeactivateGroup = (UFunction*) UObject::GObjObjects()->Data[ 39847 ];

	UTgStaticMeshComponent_execFxDeactivateGroup_Parms FxDeactivateGroup_Parms;
	memcpy ( &FxDeactivateGroup_Parms.nmGroup, &nmGroup, 0x8 );
	FxDeactivateGroup_Parms.nMode = nMode;
	FxDeactivateGroup_Parms.nSocketIndex = nSocketIndex;
	FxDeactivateGroup_Parms.nEquipSlot = nEquipSlot;

	pFnFxDeactivateGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxDeactivateGroup, &FxDeactivateGroup_Parms, NULL );

	pFnFxDeactivateGroup->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxActivateGroup
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreRelevancy               ( CPF_OptionalParm | CPF_Parm )

class UObject* UTgStaticMeshComponent::FxActivateGroup ( struct FName nmGroup, int nMode, int nSocketIndex, int nEquipSlot, unsigned long bIgnoreRelevancy )
{
	static UFunction* pFnFxActivateGroup = NULL;

	if ( ! pFnFxActivateGroup )
		pFnFxActivateGroup = (UFunction*) UObject::GObjObjects()->Data[ 39840 ];

	UTgStaticMeshComponent_execFxActivateGroup_Parms FxActivateGroup_Parms;
	memcpy ( &FxActivateGroup_Parms.nmGroup, &nmGroup, 0x8 );
	FxActivateGroup_Parms.nMode = nMode;
	FxActivateGroup_Parms.nSocketIndex = nSocketIndex;
	FxActivateGroup_Parms.nEquipSlot = nEquipSlot;
	FxActivateGroup_Parms.bIgnoreRelevancy = bIgnoreRelevancy;

	pFnFxActivateGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxActivateGroup, &FxActivateGroup_Parms, NULL );

	pFnFxActivateGroup->FunctionFlags |= 0x400;

	return FxActivateGroup_Parms.ReturnValue;
};

// Function TgGame.TgStaticMeshComponent.FxGet
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGroup                        ( CPF_Parm )
// int                            nMode                          ( CPF_Parm )
// int                            nIndex                         ( CPF_OptionalParm | CPF_Parm )
// int                            nSocketIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            nEquipSlot                     ( CPF_OptionalParm | CPF_Parm )

class UObject* UTgStaticMeshComponent::FxGet ( struct FName nmGroup, int nMode, int nIndex, int nSocketIndex, int nEquipSlot )
{
	static UFunction* pFnFxGet = NULL;

	if ( ! pFnFxGet )
		pFnFxGet = (UFunction*) UObject::GObjObjects()->Data[ 39833 ];

	UTgStaticMeshComponent_execFxGet_Parms FxGet_Parms;
	memcpy ( &FxGet_Parms.nmGroup, &nmGroup, 0x8 );
	FxGet_Parms.nMode = nMode;
	FxGet_Parms.nIndex = nIndex;
	FxGet_Parms.nSocketIndex = nSocketIndex;
	FxGet_Parms.nEquipSlot = nEquipSlot;

	pFnFxGet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxGet, &FxGet_Parms, NULL );

	pFnFxGet->FunctionFlags |= 0x400;

	return FxGet_Parms.ReturnValue;
};

// Function TgGame.TgStaticMeshComponent.FxRemove
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Fx                             ( CPF_Parm )

void UTgStaticMeshComponent::FxRemove ( class UObject* Fx )
{
	static UFunction* pFnFxRemove = NULL;

	if ( ! pFnFxRemove )
		pFnFxRemove = (UFunction*) UObject::GObjObjects()->Data[ 39831 ];

	UTgStaticMeshComponent_execFxRemove_Parms FxRemove_Parms;
	FxRemove_Parms.Fx = Fx;

	pFnFxRemove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxRemove, &FxRemove_Parms, NULL );

	pFnFxRemove->FunctionFlags |= 0x400;
};

// Function TgGame.TgStaticMeshComponent.FxAdd
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Fx                             ( CPF_Parm )

void UTgStaticMeshComponent::FxAdd ( class UObject* Fx )
{
	static UFunction* pFnFxAdd = NULL;

	if ( ! pFnFxAdd )
		pFnFxAdd = (UFunction*) UObject::GObjObjects()->Data[ 39829 ];

	UTgStaticMeshComponent_execFxAdd_Parms FxAdd_Parms;
	FxAdd_Parms.Fx = Fx;

	pFnFxAdd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFxAdd, &FxAdd_Parms, NULL );

	pFnFxAdd->FunctionFlags |= 0x400;
};

// Function TgGame.TgBotEncounterVolume.CheckTouching
// [0x00020002] 
// Parameters infos:

void ATgBotEncounterVolume::CheckTouching ( )
{
	static UFunction* pFnCheckTouching = NULL;

	if ( ! pFnCheckTouching )
		pFnCheckTouching = (UFunction*) UObject::GObjObjects()->Data[ 34573 ];

	ATgBotEncounterVolume_execCheckTouching_Parms CheckTouching_Parms;

	this->ProcessEvent ( pFnCheckTouching, &CheckTouching_Parms, NULL );
};

// Function TgGame.TgBotEncounterVolume.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgBotEncounterVolume::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34572 ];

	ATgBotEncounterVolume_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.ApplyHit
// [0x00820002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void ATgDeviceVolume::ApplyHit ( class AActor* Target )
{
	static UFunction* pFnApplyHit = NULL;

	if ( ! pFnApplyHit )
		pFnApplyHit = (UFunction*) UObject::GObjObjects()->Data[ 37295 ];

	ATgDeviceVolume_execApplyHit_Parms ApplyHit_Parms;
	ApplyHit_Parms.Target = Target;

	this->ProcessEvent ( pFnApplyHit, &ApplyHit_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.OnSetDamageInstigator
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetDamageInstigator* Action                         ( CPF_Parm )

void ATgDeviceVolume::OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action )
{
	static UFunction* pFnOnSetDamageInstigator = NULL;

	if ( ! pFnOnSetDamageInstigator )
		pFnOnSetDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 37293 ];

	ATgDeviceVolume_execOnSetDamageInstigator_Parms OnSetDamageInstigator_Parms;
	OnSetDamageInstigator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDamageInstigator, &OnSetDamageInstigator_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.CausePainTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgDeviceVolume::CausePainTo ( class AActor* Other )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = (UFunction*) UObject::GObjObjects()->Data[ 37291 ];

	ATgDeviceVolume_execCausePainTo_Parms CausePainTo_Parms;
	CausePainTo_Parms.Other = Other;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgDeviceVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 37286 ];

	ATgDeviceVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.TimerPop
// [0x00020002] 
// Parameters infos:
// class ATgDeviceVolumeInfo*     T                              ( CPF_Parm )

void ATgDeviceVolume::TimerPop ( class ATgDeviceVolumeInfo* T )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = (UFunction*) UObject::GObjObjects()->Data[ 37283 ];

	ATgDeviceVolume_execTimerPop_Parms TimerPop_Parms;
	TimerPop_Parms.T = T;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ATgDeviceVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 37281 ];

	ATgDeviceVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.Reset
// [0x00020002] 
// Parameters infos:

void ATgDeviceVolume::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 37280 ];

	ATgDeviceVolume_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgDeviceVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 37278 ];

	ATgDeviceVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgDeviceVolume.setupDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgDeviceVolume::setupDevice ( )
{
	static UFunction* pFnsetupDevice = NULL;

	if ( ! pFnsetupDevice )
		pFnsetupDevice = (UFunction*) UObject::GObjObjects()->Data[ 37276 ];

	ATgDeviceVolume_execsetupDevice_Parms setupDevice_Parms;

	pFnsetupDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnsetupDevice, &setupDevice_Parms, NULL );

	pFnsetupDevice->FunctionFlags |= 0x400;

	return setupDevice_Parms.ReturnValue;
};

// Function TgGame.TgModifyPawnPropertiesVolume.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgModifyPawnPropertiesVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40173 ];

	ATgModifyPawnPropertiesVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgModifyPawnPropertiesVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgModifyPawnPropertiesVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40167 ];

	ATgModifyPawnPropertiesVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgModifyPawnPropertiesVolume.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgModifyPawnPropertiesVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40166 ];

	ATgModifyPawnPropertiesVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgModifyPawnPropertiesVolume.Used
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgModifyPawnPropertiesVolume::Used ( class AActor* Other )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 40164 ];

	ATgModifyPawnPropertiesVolume_execUsed_Parms Used_Parms;
	Used_Parms.Other = Other;

	pFnUsed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );

	pFnUsed->FunctionFlags |= 0x400;
};

// Function TgGame.TgModifyPawnPropertiesVolume.LoadObjectConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgModifyPawnPropertiesVolume::LoadObjectConfig ( )
{
	static UFunction* pFnLoadObjectConfig = NULL;

	if ( ! pFnLoadObjectConfig )
		pFnLoadObjectConfig = (UFunction*) UObject::GObjObjects()->Data[ 40163 ];

	ATgModifyPawnPropertiesVolume_execLoadObjectConfig_Parms LoadObjectConfig_Parms;

	pFnLoadObjectConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadObjectConfig, &LoadObjectConfig_Parms, NULL );

	pFnLoadObjectConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgOmegaVolume.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgOmegaVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40582 ];

	ATgOmegaVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgOmegaVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgOmegaVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40576 ];

	ATgOmegaVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgOmegaVolume.GetDisplayLocation
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgOmegaVolume::GetDisplayLocation ( )
{
	static UFunction* pFnGetDisplayLocation = NULL;

	if ( ! pFnGetDisplayLocation )
		pFnGetDisplayLocation = (UFunction*) UObject::GObjObjects()->Data[ 40574 ];

	ATgOmegaVolume_execGetDisplayLocation_Parms GetDisplayLocation_Parms;

	this->ProcessEvent ( pFnGetDisplayLocation, &GetDisplayLocation_Parms, NULL );

	return GetDisplayLocation_Parms.ReturnValue;
};

// Function TgGame.TgOmegaVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgOmegaVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40573 ];

	ATgOmegaVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgOmegaVolume.NativePostBeginPlay
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgOmegaVolume::NativePostBeginPlay ( )
{
	static UFunction* pFnNativePostBeginPlay = NULL;

	if ( ! pFnNativePostBeginPlay )
		pFnNativePostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40572 ];

	ATgOmegaVolume_execNativePostBeginPlay_Parms NativePostBeginPlay_Parms;

	pFnNativePostBeginPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostBeginPlay, &NativePostBeginPlay_Parms, NULL );

	pFnNativePostBeginPlay->FunctionFlags |= 0x400;
};

// Function TgGame.TgOmegaVolume.Used
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     UsingPlayer                    ( CPF_Parm )

void ATgOmegaVolume::Used ( class ATgPlayerController* UsingPlayer )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 40570 ];

	ATgOmegaVolume_execUsed_Parms Used_Parms;
	Used_Parms.UsingPlayer = UsingPlayer;

	pFnUsed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );

	pFnUsed->FunctionFlags |= 0x400;
};

// Function TgGame.TgPlayerCountVolume.GetCount
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgPlayerCountVolume::eventGetCount ( )
{
	static UFunction* pFnGetCount = NULL;

	if ( ! pFnGetCount )
		pFnGetCount = (UFunction*) UObject::GObjObjects()->Data[ 46155 ];

	ATgPlayerCountVolume_eventGetCount_Parms GetCount_Parms;

	this->ProcessEvent ( pFnGetCount, &GetCount_Parms, NULL );

	return GetCount_Parms.ReturnValue;
};

// Function TgGame.TgPlayerCountVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgPlayerCountVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 46149 ];

	ATgPlayerCountVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgPlayerCountVolume.Update
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPawn*                 Other                          ( CPF_Parm )

void ATgPlayerCountVolume::Update ( class ATgPawn* Other )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46147 ];

	ATgPlayerCountVolume_execUpdate_Parms Update_Parms;
	Update_Parms.Other = Other;

	pFnUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	pFnUpdate->FunctionFlags |= 0x400;
};

// Function TgGame.TgSkydivingVolume.PawnEnteredVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ATgSkydivingVolume::eventPawnEnteredVolume ( class APawn* P )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 48167 ];

	ATgSkydivingVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function TgGame.TgUIDataProvider_SimpleElementProvider.GetElementCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgUIDataProvider_SimpleElementProvider::GetElementCount ( )
{
	static UFunction* pFnGetElementCount = NULL;

	if ( ! pFnGetElementCount )
		pFnGetElementCount = (UFunction*) UObject::GObjObjects()->Data[ 48724 ];

	UTgUIDataProvider_SimpleElementProvider_execGetElementCount_Parms GetElementCount_Parms;

	pFnGetElementCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementCount, &GetElementCount_Parms, NULL );

	pFnGetElementCount->FunctionFlags |= 0x400;

	return GetElementCount_Parms.ReturnValue;
};

// Function TgGame.TgUIDataProvider_StringArray.GetElementCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgUIDataProvider_StringArray::GetElementCount ( )
{
	static UFunction* pFnGetElementCount = NULL;

	if ( ! pFnGetElementCount )
		pFnGetElementCount = (UFunction*) UObject::GObjObjects()->Data[ 48728 ];

	UTgUIDataProvider_StringArray_execGetElementCount_Parms GetElementCount_Parms;

	pFnGetElementCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetElementCount, &GetElementCount_Parms, NULL );

	pFnGetElementCount->FunctionFlags |= 0x400;

	return GetElementCount_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.Num
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

int UTgUIDataStore_StringList::eventNum ( struct FName FieldName )
{
	static UFunction* pFnNum = NULL;

	if ( ! pFnNum )
		pFnNum = (UFunction*) UObject::GObjObjects()->Data[ 48804 ];

	UTgUIDataStore_StringList_eventNum_Parms Num_Parms;
	memcpy ( &Num_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnNum, &Num_Parms, NULL );

	return Num_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.SetCurrentValueIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            NewValueIndex                  ( CPF_Parm )

int UTgUIDataStore_StringList::eventSetCurrentValueIndex ( struct FName FieldName, int NewValueIndex )
{
	static UFunction* pFnSetCurrentValueIndex = NULL;

	if ( ! pFnSetCurrentValueIndex )
		pFnSetCurrentValueIndex = (UFunction*) UObject::GObjObjects()->Data[ 48798 ];

	UTgUIDataStore_StringList_eventSetCurrentValueIndex_Parms SetCurrentValueIndex_Parms;
	memcpy ( &SetCurrentValueIndex_Parms.FieldName, &FieldName, 0x8 );
	SetCurrentValueIndex_Parms.NewValueIndex = NewValueIndex;

	this->ProcessEvent ( pFnSetCurrentValueIndex, &SetCurrentValueIndex_Parms, NULL );

	return SetCurrentValueIndex_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.GetCurrentValueIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

int UTgUIDataStore_StringList::eventGetCurrentValueIndex ( struct FName FieldName )
{
	static UFunction* pFnGetCurrentValueIndex = NULL;

	if ( ! pFnGetCurrentValueIndex )
		pFnGetCurrentValueIndex = (UFunction*) UObject::GObjObjects()->Data[ 48793 ];

	UTgUIDataStore_StringList_eventGetCurrentValueIndex_Parms GetCurrentValueIndex_Parms;
	memcpy ( &GetCurrentValueIndex_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValueIndex, &GetCurrentValueIndex_Parms, NULL );

	return GetCurrentValueIndex_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.GetCurrentValue
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 out_Value                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UTgUIDataStore_StringList::eventGetCurrentValue ( struct FName FieldName, struct FString* out_Value )
{
	static UFunction* pFnGetCurrentValue = NULL;

	if ( ! pFnGetCurrentValue )
		pFnGetCurrentValue = (UFunction*) UObject::GObjObjects()->Data[ 48787 ];

	UTgUIDataStore_StringList_eventGetCurrentValue_Parms GetCurrentValue_Parms;
	memcpy ( &GetCurrentValue_Parms.FieldName, &FieldName, 0x8 );

	this->ProcessEvent ( pFnGetCurrentValue, &GetCurrentValue_Parms, NULL );

	if ( out_Value )
		memcpy ( out_Value, &GetCurrentValue_Parms.out_Value, 0xC );

	return GetCurrentValue_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.GetList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   FieldName                      ( CPF_Parm )

TArray< struct FString > UTgUIDataStore_StringList::GetList ( struct FName FieldName )
{
	static UFunction* pFnGetList = NULL;

	if ( ! pFnGetList )
		pFnGetList = (UFunction*) UObject::GObjObjects()->Data[ 48783 ];

	UTgUIDataStore_StringList_execGetList_Parms GetList_Parms;
	memcpy ( &GetList_Parms.FieldName, &FieldName, 0x8 );

	pFnGetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetList, &GetList_Parms, NULL );

	pFnGetList->FunctionFlags |= 0x400;

	return GetList_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.GetStr
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   FieldName                      ( CPF_Parm )
// int                            StrIndex                       ( CPF_Parm )

struct FString UTgUIDataStore_StringList::GetStr ( struct FName FieldName, int StrIndex )
{
	static UFunction* pFnGetStr = NULL;

	if ( ! pFnGetStr )
		pFnGetStr = (UFunction*) UObject::GObjObjects()->Data[ 48779 ];

	UTgUIDataStore_StringList_execGetStr_Parms GetStr_Parms;
	memcpy ( &GetStr_Parms.FieldName, &FieldName, 0x8 );
	GetStr_Parms.StrIndex = StrIndex;

	pFnGetStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStr, &GetStr_Parms, NULL );

	pFnGetStr->FunctionFlags |= 0x400;

	return GetStr_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.FindStr
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 SearchString                   ( CPF_Parm | CPF_NeedCtorLink )

int UTgUIDataStore_StringList::FindStr ( struct FName FieldName, struct FString SearchString )
{
	static UFunction* pFnFindStr = NULL;

	if ( ! pFnFindStr )
		pFnFindStr = (UFunction*) UObject::GObjObjects()->Data[ 48775 ];

	UTgUIDataStore_StringList_execFindStr_Parms FindStr_Parms;
	memcpy ( &FindStr_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &FindStr_Parms.SearchString, &SearchString, 0xC );

	pFnFindStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStr, &FindStr_Parms, NULL );

	pFnFindStr->FunctionFlags |= 0x400;

	return FindStr_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.Empty
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::Empty ( struct FName FieldName, unsigned long bBatchOp )
{
	static UFunction* pFnEmpty = NULL;

	if ( ! pFnEmpty )
		pFnEmpty = (UFunction*) UObject::GObjObjects()->Data[ 48772 ];

	UTgUIDataStore_StringList_execEmpty_Parms Empty_Parms;
	memcpy ( &Empty_Parms.FieldName, &FieldName, 0x8 );
	Empty_Parms.bBatchOp = bBatchOp;

	pFnEmpty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmpty, &Empty_Parms, NULL );

	pFnEmpty->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.RemoveStrByIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::RemoveStrByIndex ( struct FName FieldName, int Index, int Count, unsigned long bBatchOp )
{
	static UFunction* pFnRemoveStrByIndex = NULL;

	if ( ! pFnRemoveStrByIndex )
		pFnRemoveStrByIndex = (UFunction*) UObject::GObjObjects()->Data[ 48767 ];

	UTgUIDataStore_StringList_execRemoveStrByIndex_Parms RemoveStrByIndex_Parms;
	memcpy ( &RemoveStrByIndex_Parms.FieldName, &FieldName, 0x8 );
	RemoveStrByIndex_Parms.Index = Index;
	RemoveStrByIndex_Parms.Count = Count;
	RemoveStrByIndex_Parms.bBatchOp = bBatchOp;

	pFnRemoveStrByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStrByIndex, &RemoveStrByIndex_Parms, NULL );

	pFnRemoveStrByIndex->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.RemoveStr
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 StringToRemove                 ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::RemoveStr ( struct FName FieldName, struct FString StringToRemove, unsigned long bBatchOp )
{
	static UFunction* pFnRemoveStr = NULL;

	if ( ! pFnRemoveStr )
		pFnRemoveStr = (UFunction*) UObject::GObjObjects()->Data[ 48763 ];

	UTgUIDataStore_StringList_execRemoveStr_Parms RemoveStr_Parms;
	memcpy ( &RemoveStr_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &RemoveStr_Parms.StringToRemove, &StringToRemove, 0xC );
	RemoveStr_Parms.bBatchOp = bBatchOp;

	pFnRemoveStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveStr, &RemoveStr_Parms, NULL );

	pFnRemoveStr->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.UpdateStr
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 NewString                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            UpdateIndex                    ( CPF_Parm )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::UpdateStr ( struct FName FieldName, struct FString NewString, int UpdateIndex, unsigned long bBatchOp )
{
	static UFunction* pFnUpdateStr = NULL;

	if ( ! pFnUpdateStr )
		pFnUpdateStr = (UFunction*) UObject::GObjObjects()->Data[ 48758 ];

	UTgUIDataStore_StringList_execUpdateStr_Parms UpdateStr_Parms;
	memcpy ( &UpdateStr_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &UpdateStr_Parms.NewString, &NewString, 0xC );
	UpdateStr_Parms.UpdateIndex = UpdateIndex;
	UpdateStr_Parms.bBatchOp = bBatchOp;

	pFnUpdateStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStr, &UpdateStr_Parms, NULL );

	pFnUpdateStr->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.InsertStr
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 NewString                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            InsertIndex                    ( CPF_Parm )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::InsertStr ( struct FName FieldName, struct FString NewString, int InsertIndex, unsigned long bBatchOp )
{
	static UFunction* pFnInsertStr = NULL;

	if ( ! pFnInsertStr )
		pFnInsertStr = (UFunction*) UObject::GObjObjects()->Data[ 48753 ];

	UTgUIDataStore_StringList_execInsertStr_Parms InsertStr_Parms;
	memcpy ( &InsertStr_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &InsertStr_Parms.NewString, &NewString, 0xC );
	InsertStr_Parms.InsertIndex = InsertIndex;
	InsertStr_Parms.bBatchOp = bBatchOp;

	pFnInsertStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertStr, &InsertStr_Parms, NULL );

	pFnInsertStr->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.AddStr
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FieldName                      ( CPF_Parm )
// struct FString                 NewString                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bBatchOp                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIDataStore_StringList::AddStr ( struct FName FieldName, struct FString NewString, unsigned long bBatchOp )
{
	static UFunction* pFnAddStr = NULL;

	if ( ! pFnAddStr )
		pFnAddStr = (UFunction*) UObject::GObjObjects()->Data[ 48749 ];

	UTgUIDataStore_StringList_execAddStr_Parms AddStr_Parms;
	memcpy ( &AddStr_Parms.FieldName, &FieldName, 0x8 );
	memcpy ( &AddStr_Parms.NewString, &NewString, 0xC );
	AddStr_Parms.bBatchOp = bBatchOp;

	pFnAddStr->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddStr, &AddStr_Parms, NULL );

	pFnAddStr->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIDataStore_StringList.GetFieldIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   FieldName                      ( CPF_Parm )

int UTgUIDataStore_StringList::GetFieldIndex ( struct FName FieldName )
{
	static UFunction* pFnGetFieldIndex = NULL;

	if ( ! pFnGetFieldIndex )
		pFnGetFieldIndex = (UFunction*) UObject::GObjObjects()->Data[ 48746 ];

	UTgUIDataStore_StringList_execGetFieldIndex_Parms GetFieldIndex_Parms;
	memcpy ( &GetFieldIndex_Parms.FieldName, &FieldName, 0x8 );

	pFnGetFieldIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFieldIndex, &GetFieldIndex_Parms, NULL );

	pFnGetFieldIndex->FunctionFlags |= 0x400;

	return GetFieldIndex_Parms.ReturnValue;
};

// Function TgGame.TgUIDataStore_StringList.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UTgUIDataStore_StringList::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 48743 ];

	UTgUIDataStore_StringList_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function TgGame.TgUIHexWidget.SetMICParams
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* MIC                            ( CPF_Parm )
// struct FHexMICParams           Params                         ( CPF_Parm )

void UTgUIHexWidget::SetMICParams ( class UMaterialInstanceConstant* MIC, struct FHexMICParams Params )
{
	static UFunction* pFnSetMICParams = NULL;

	if ( ! pFnSetMICParams )
		pFnSetMICParams = (UFunction*) UObject::GObjObjects()->Data[ 49005 ];

	UTgUIHexWidget_execSetMICParams_Parms SetMICParams_Parms;
	SetMICParams_Parms.MIC = MIC;
	memcpy ( &SetMICParams_Parms.Params, &Params, 0x58 );

	pFnSetMICParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMICParams, &SetMICParams_Parms, NULL );

	pFnSetMICParams->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.GetMICParams
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FHexMICParams           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

struct FHexMICParams UTgUIHexWidget::GetMICParams ( int nIndex )
{
	static UFunction* pFnGetMICParams = NULL;

	if ( ! pFnGetMICParams )
		pFnGetMICParams = (UFunction*) UObject::GObjObjects()->Data[ 49002 ];

	UTgUIHexWidget_execGetMICParams_Parms GetMICParams_Parms;
	GetMICParams_Parms.nIndex = nIndex;

	pFnGetMICParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMICParams, &GetMICParams_Parms, NULL );

	pFnGetMICParams->FunctionFlags |= 0x400;

	return GetMICParams_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.ClearSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIHexWidget::ClearSelection ( )
{
	static UFunction* pFnClearSelection = NULL;

	if ( ! pFnClearSelection )
		pFnClearSelection = (UFunction*) UObject::GObjObjects()->Data[ 49001 ];

	UTgUIHexWidget_execClearSelection_Parms ClearSelection_Parms;

	pFnClearSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSelection, &ClearSelection_Parms, NULL );

	pFnClearSelection->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.GetScaleData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FScaleData              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FScaleData UTgUIHexWidget::GetScaleData ( )
{
	static UFunction* pFnGetScaleData = NULL;

	if ( ! pFnGetScaleData )
		pFnGetScaleData = (UFunction*) UObject::GObjObjects()->Data[ 48999 ];

	UTgUIHexWidget_execGetScaleData_Parms GetScaleData_Parms;

	pFnGetScaleData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScaleData, &GetScaleData_Parms, NULL );

	pFnGetScaleData->FunctionFlags |= 0x400;

	return GetScaleData_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.GetHexIndexMouse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            xMouse                         ( CPF_Parm )
// int                            yMouse                         ( CPF_Parm )

int UTgUIHexWidget::GetHexIndexMouse ( int xMouse, int yMouse )
{
	static UFunction* pFnGetHexIndexMouse = NULL;

	if ( ! pFnGetHexIndexMouse )
		pFnGetHexIndexMouse = (UFunction*) UObject::GObjObjects()->Data[ 48995 ];

	UTgUIHexWidget_execGetHexIndexMouse_Parms GetHexIndexMouse_Parms;
	GetHexIndexMouse_Parms.xMouse = xMouse;
	GetHexIndexMouse_Parms.yMouse = yMouse;

	pFnGetHexIndexMouse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexIndexMouse, &GetHexIndexMouse_Parms, NULL );

	pFnGetHexIndexMouse->FunctionFlags |= 0x400;

	return GetHexIndexMouse_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.GetHexPositionFromIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int UTgUIHexWidget::GetHexPositionFromIndex ( int nIndex )
{
	static UFunction* pFnGetHexPositionFromIndex = NULL;

	if ( ! pFnGetHexPositionFromIndex )
		pFnGetHexPositionFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 48992 ];

	UTgUIHexWidget_execGetHexPositionFromIndex_Parms GetHexPositionFromIndex_Parms;
	GetHexPositionFromIndex_Parms.nIndex = nIndex;

	pFnGetHexPositionFromIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexPositionFromIndex, &GetHexPositionFromIndex_Parms, NULL );

	pFnGetHexPositionFromIndex->FunctionFlags |= 0x400;

	return GetHexPositionFromIndex_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.GetHexIndexFromPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPos                           ( CPF_Parm )

int UTgUIHexWidget::GetHexIndexFromPosition ( int nPos )
{
	static UFunction* pFnGetHexIndexFromPosition = NULL;

	if ( ! pFnGetHexIndexFromPosition )
		pFnGetHexIndexFromPosition = (UFunction*) UObject::GObjObjects()->Data[ 48989 ];

	UTgUIHexWidget_execGetHexIndexFromPosition_Parms GetHexIndexFromPosition_Parms;
	GetHexIndexFromPosition_Parms.nPos = nPos;

	pFnGetHexIndexFromPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexIndexFromPosition, &GetHexIndexFromPosition_Parms, NULL );

	pFnGetHexIndexFromPosition->FunctionFlags |= 0x400;

	return GetHexIndexFromPosition_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.GetHexPosition
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            XPos                           ( CPF_Parm )
// int                            YPos                           ( CPF_Parm )
// int                            nPos                           ( CPF_Parm | CPF_OutParm )

void UTgUIHexWidget::GetHexPosition ( int XPos, int YPos, int* nPos )
{
	static UFunction* pFnGetHexPosition = NULL;

	if ( ! pFnGetHexPosition )
		pFnGetHexPosition = (UFunction*) UObject::GObjObjects()->Data[ 48985 ];

	UTgUIHexWidget_execGetHexPosition_Parms GetHexPosition_Parms;
	GetHexPosition_Parms.XPos = XPos;
	GetHexPosition_Parms.YPos = YPos;

	pFnGetHexPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexPosition, &GetHexPosition_Parms, NULL );

	pFnGetHexPosition->FunctionFlags |= 0x400;

	if ( nPos )
		*nPos = GetHexPosition_Parms.nPos;
};

// Function TgGame.TgUIHexWidget.GetGridPosition
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nPos                           ( CPF_Parm )
// int                            XPos                           ( CPF_Parm | CPF_OutParm )
// int                            YPos                           ( CPF_Parm | CPF_OutParm )

void UTgUIHexWidget::GetGridPosition ( int nPos, int* XPos, int* YPos )
{
	static UFunction* pFnGetGridPosition = NULL;

	if ( ! pFnGetGridPosition )
		pFnGetGridPosition = (UFunction*) UObject::GObjObjects()->Data[ 48981 ];

	UTgUIHexWidget_execGetGridPosition_Parms GetGridPosition_Parms;
	GetGridPosition_Parms.nPos = nPos;

	pFnGetGridPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGridPosition, &GetGridPosition_Parms, NULL );

	pFnGetGridPosition->FunctionFlags |= 0x400;

	if ( XPos )
		*XPos = GetGridPosition_Parms.XPos;

	if ( YPos )
		*YPos = GetGridPosition_Parms.YPos;
};

// Function TgGame.TgUIHexWidget.GetNeighborIndexes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< int >                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nIndex                         ( CPF_Parm )

TArray< int > UTgUIHexWidget::GetNeighborIndexes ( int nIndex )
{
	static UFunction* pFnGetNeighborIndexes = NULL;

	if ( ! pFnGetNeighborIndexes )
		pFnGetNeighborIndexes = (UFunction*) UObject::GObjObjects()->Data[ 48977 ];

	UTgUIHexWidget_execGetNeighborIndexes_Parms GetNeighborIndexes_Parms;
	GetNeighborIndexes_Parms.nIndex = nIndex;

	pFnGetNeighborIndexes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNeighborIndexes, &GetNeighborIndexes_Parms, NULL );

	pFnGetNeighborIndexes->FunctionFlags |= 0x400;

	return GetNeighborIndexes_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.UpdateZoomLocks
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIHexWidget::UpdateZoomLocks ( )
{
	static UFunction* pFnUpdateZoomLocks = NULL;

	if ( ! pFnUpdateZoomLocks )
		pFnUpdateZoomLocks = (UFunction*) UObject::GObjObjects()->Data[ 48976 ];

	UTgUIHexWidget_execUpdateZoomLocks_Parms UpdateZoomLocks_Parms;

	pFnUpdateZoomLocks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateZoomLocks, &UpdateZoomLocks_Parms, NULL );

	pFnUpdateZoomLocks->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.HexInBounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// float                          fPct                           ( CPF_Parm )

unsigned char UTgUIHexWidget::HexInBounds ( int Index, float fPct )
{
	static UFunction* pFnHexInBounds = NULL;

	if ( ! pFnHexInBounds )
		pFnHexInBounds = (UFunction*) UObject::GObjObjects()->Data[ 48972 ];

	UTgUIHexWidget_execHexInBounds_Parms HexInBounds_Parms;
	HexInBounds_Parms.Index = Index;
	HexInBounds_Parms.fPct = fPct;

	pFnHexInBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHexInBounds, &HexInBounds_Parms, NULL );

	pFnHexInBounds->FunctionFlags |= 0x400;

	return HexInBounds_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.ResizeHexGrid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nNewWidth                      ( CPF_Parm )
// int                            nNewHeight                     ( CPF_Parm )

void UTgUIHexWidget::ResizeHexGrid ( int nNewWidth, int nNewHeight )
{
	static UFunction* pFnResizeHexGrid = NULL;

	if ( ! pFnResizeHexGrid )
		pFnResizeHexGrid = (UFunction*) UObject::GObjObjects()->Data[ 48969 ];

	UTgUIHexWidget_execResizeHexGrid_Parms ResizeHexGrid_Parms;
	ResizeHexGrid_Parms.nNewWidth = nNewWidth;
	ResizeHexGrid_Parms.nNewHeight = nNewHeight;

	pFnResizeHexGrid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResizeHexGrid, &ResizeHexGrid_Parms, NULL );

	pFnResizeHexGrid->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.ResizeNumHexes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nNewSize                       ( CPF_Parm )

void UTgUIHexWidget::ResizeNumHexes ( int nNewSize )
{
	static UFunction* pFnResizeNumHexes = NULL;

	if ( ! pFnResizeNumHexes )
		pFnResizeNumHexes = (UFunction*) UObject::GObjObjects()->Data[ 48967 ];

	UTgUIHexWidget_execResizeNumHexes_Parms ResizeNumHexes_Parms;
	ResizeNumHexes_Parms.nNewSize = nNewSize;

	pFnResizeNumHexes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResizeNumHexes, &ResizeNumHexes_Parms, NULL );

	pFnResizeNumHexes->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.GetAdjustedAspectRatio
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgUIHexWidget::GetAdjustedAspectRatio ( )
{
	static UFunction* pFnGetAdjustedAspectRatio = NULL;

	if ( ! pFnGetAdjustedAspectRatio )
		pFnGetAdjustedAspectRatio = (UFunction*) UObject::GObjObjects()->Data[ 48965 ];

	UTgUIHexWidget_execGetAdjustedAspectRatio_Parms GetAdjustedAspectRatio_Parms;

	pFnGetAdjustedAspectRatio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustedAspectRatio, &GetAdjustedAspectRatio_Parms, NULL );

	pFnGetAdjustedAspectRatio->FunctionFlags |= 0x400;

	return GetAdjustedAspectRatio_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.GetHexData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// struct FHexData                Data                           ( CPF_Parm | CPF_OutParm )

bool UTgUIHexWidget::GetHexData ( int Index, struct FHexData* Data )
{
	static UFunction* pFnGetHexData = NULL;

	if ( ! pFnGetHexData )
		pFnGetHexData = (UFunction*) UObject::GObjObjects()->Data[ 48961 ];

	UTgUIHexWidget_execGetHexData_Parms GetHexData_Parms;
	GetHexData_Parms.Index = Index;

	pFnGetHexData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHexData, &GetHexData_Parms, NULL );

	pFnGetHexData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetHexData_Parms.Data, 0xB4 );

	return GetHexData_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget.CenterMapOn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPos                           ( CPF_Parm )

void UTgUIHexWidget::CenterMapOn ( int nPos )
{
	static UFunction* pFnCenterMapOn = NULL;

	if ( ! pFnCenterMapOn )
		pFnCenterMapOn = (UFunction*) UObject::GObjObjects()->Data[ 48959 ];

	UTgUIHexWidget_execCenterMapOn_Parms CenterMapOn_Parms;
	CenterMapOn_Parms.nPos = nPos;

	pFnCenterMapOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCenterMapOn, &CenterMapOn_Parms, NULL );

	pFnCenterMapOn->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.CenterMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIHexWidget::CenterMap ( )
{
	static UFunction* pFnCenterMap = NULL;

	if ( ! pFnCenterMap )
		pFnCenterMap = (UFunction*) UObject::GObjObjects()->Data[ 48958 ];

	UTgUIHexWidget_execCenterMap_Parms CenterMap_Parms;

	pFnCenterMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCenterMap, &CenterMap_Parms, NULL );

	pFnCenterMap->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.OnZoom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaZoom                     ( CPF_Parm )

void UTgUIHexWidget::OnZoom ( float fDeltaZoom )
{
	static UFunction* pFnOnZoom = NULL;

	if ( ! pFnOnZoom )
		pFnOnZoom = (UFunction*) UObject::GObjObjects()->Data[ 48956 ];

	UTgUIHexWidget_execOnZoom_Parms OnZoom_Parms;
	OnZoom_Parms.fDeltaZoom = fDeltaZoom;

	pFnOnZoom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnZoom, &OnZoom_Parms, NULL );

	pFnOnZoom->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.OnPan
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// int                            pX                             ( CPF_Parm )
// int                            pY                             ( CPF_Parm )

void UTgUIHexWidget::OnPan ( int X, int Y, int pX, int pY )
{
	static UFunction* pFnOnPan = NULL;

	if ( ! pFnOnPan )
		pFnOnPan = (UFunction*) UObject::GObjObjects()->Data[ 48951 ];

	UTgUIHexWidget_execOnPan_Parms OnPan_Parms;
	OnPan_Parms.X = X;
	OnPan_Parms.Y = Y;
	OnPan_Parms.pX = pX;
	OnPan_Parms.pY = pY;

	pFnOnPan->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPan, &OnPan_Parms, NULL );

	pFnOnPan->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.OnClick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )

void UTgUIHexWidget::OnClick ( int X, int Y )
{
	static UFunction* pFnOnClick = NULL;

	if ( ! pFnOnClick )
		pFnOnClick = (UFunction*) UObject::GObjObjects()->Data[ 48948 ];

	UTgUIHexWidget_execOnClick_Parms OnClick_Parms;
	OnClick_Parms.X = X;
	OnClick_Parms.Y = Y;

	pFnOnClick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnClick, &OnClick_Parms, NULL );

	pFnOnClick->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.OnHover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )

void UTgUIHexWidget::OnHover ( int X, int Y )
{
	static UFunction* pFnOnHover = NULL;

	if ( ! pFnOnHover )
		pFnOnHover = (UFunction*) UObject::GObjObjects()->Data[ 48945 ];

	UTgUIHexWidget_execOnHover_Parms OnHover_Parms;
	OnHover_Parms.X = X;
	OnHover_Parms.Y = Y;

	pFnOnHover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnHover, &OnHover_Parms, NULL );

	pFnOnHover->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateFilters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateFilters ( int nIndex )
{
	static UFunction* pFnUpdateFilters = NULL;

	if ( ! pFnUpdateFilters )
		pFnUpdateFilters = (UFunction*) UObject::GObjObjects()->Data[ 48943 ];

	UTgUIHexWidget_execUpdateFilters_Parms UpdateFilters_Parms;
	UpdateFilters_Parms.nIndex = nIndex;

	pFnUpdateFilters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFilters, &UpdateFilters_Parms, NULL );

	pFnUpdateFilters->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateIndicators
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateIndicators ( int nIndex )
{
	static UFunction* pFnUpdateIndicators = NULL;

	if ( ! pFnUpdateIndicators )
		pFnUpdateIndicators = (UFunction*) UObject::GObjObjects()->Data[ 48941 ];

	UTgUIHexWidget_execUpdateIndicators_Parms UpdateIndicators_Parms;
	UpdateIndicators_Parms.nIndex = nIndex;

	pFnUpdateIndicators->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateIndicators, &UpdateIndicators_Parms, NULL );

	pFnUpdateIndicators->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateOverlays
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateOverlays ( int nIndex )
{
	static UFunction* pFnUpdateOverlays = NULL;

	if ( ! pFnUpdateOverlays )
		pFnUpdateOverlays = (UFunction*) UObject::GObjObjects()->Data[ 48939 ];

	UTgUIHexWidget_execUpdateOverlays_Parms UpdateOverlays_Parms;
	UpdateOverlays_Parms.nIndex = nIndex;

	pFnUpdateOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateOverlays, &UpdateOverlays_Parms, NULL );

	pFnUpdateOverlays->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateButtons
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateButtons ( int nIndex )
{
	static UFunction* pFnUpdateButtons = NULL;

	if ( ! pFnUpdateButtons )
		pFnUpdateButtons = (UFunction*) UObject::GObjObjects()->Data[ 48937 ];

	UTgUIHexWidget_execUpdateButtons_Parms UpdateButtons_Parms;
	UpdateButtons_Parms.nIndex = nIndex;

	pFnUpdateButtons->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateButtons, &UpdateButtons_Parms, NULL );

	pFnUpdateButtons->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateTiles
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateTiles ( int nIndex )
{
	static UFunction* pFnUpdateTiles = NULL;

	if ( ! pFnUpdateTiles )
		pFnUpdateTiles = (UFunction*) UObject::GObjObjects()->Data[ 48935 ];

	UTgUIHexWidget_execUpdateTiles_Parms UpdateTiles_Parms;
	UpdateTiles_Parms.nIndex = nIndex;

	pFnUpdateTiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTiles, &UpdateTiles_Parms, NULL );

	pFnUpdateTiles->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateUnderlays
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateUnderlays ( int nIndex )
{
	static UFunction* pFnUpdateUnderlays = NULL;

	if ( ! pFnUpdateUnderlays )
		pFnUpdateUnderlays = (UFunction*) UObject::GObjObjects()->Data[ 48933 ];

	UTgUIHexWidget_execUpdateUnderlays_Parms UpdateUnderlays_Parms;
	UpdateUnderlays_Parms.nIndex = nIndex;

	pFnUpdateUnderlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateUnderlays, &UpdateUnderlays_Parms, NULL );

	pFnUpdateUnderlays->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateMICs
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget::UpdateMICs ( int nIndex )
{
	static UFunction* pFnUpdateMICs = NULL;

	if ( ! pFnUpdateMICs )
		pFnUpdateMICs = (UFunction*) UObject::GObjObjects()->Data[ 48931 ];

	UTgUIHexWidget_execUpdateMICs_Parms UpdateMICs_Parms;
	UpdateMICs_Parms.nIndex = nIndex;

	pFnUpdateMICs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMICs, &UpdateMICs_Parms, NULL );

	pFnUpdateMICs->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.UpdateBackground
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIHexWidget::UpdateBackground ( )
{
	static UFunction* pFnUpdateBackground = NULL;

	if ( ! pFnUpdateBackground )
		pFnUpdateBackground = (UFunction*) UObject::GObjObjects()->Data[ 48930 ];

	UTgUIHexWidget_execUpdateBackground_Parms UpdateBackground_Parms;

	pFnUpdateBackground->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBackground, &UpdateBackground_Parms, NULL );

	pFnUpdateBackground->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget.TickComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void UTgUIHexWidget::TickComponents ( float DeltaSeconds )
{
	static UFunction* pFnTickComponents = NULL;

	if ( ! pFnTickComponents )
		pFnTickComponents = (UFunction*) UObject::GObjObjects()->Data[ 48928 ];

	UTgUIHexWidget_execTickComponents_Parms TickComponents_Parms;
	TickComponents_Parms.DeltaSeconds = DeltaSeconds;

	pFnTickComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickComponents, &TickComponents_Parms, NULL );

	pFnTickComponents->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.UpdateFilters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UTgUIHexWidget_Zone::UpdateFilters ( int nIndex )
{
	static UFunction* pFnUpdateFilters = NULL;

	if ( ! pFnUpdateFilters )
		pFnUpdateFilters = (UFunction*) UObject::GObjObjects()->Data[ 49065 ];

	UTgUIHexWidget_Zone_execUpdateFilters_Parms UpdateFilters_Parms;
	UpdateFilters_Parms.nIndex = nIndex;

	pFnUpdateFilters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFilters, &UpdateFilters_Parms, NULL );

	pFnUpdateFilters->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.GetMICParams
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FHexMICParams           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

struct FHexMICParams UTgUIHexWidget_Zone::GetMICParams ( int nIndex )
{
	static UFunction* pFnGetMICParams = NULL;

	if ( ! pFnGetMICParams )
		pFnGetMICParams = (UFunction*) UObject::GObjObjects()->Data[ 49062 ];

	UTgUIHexWidget_Zone_execGetMICParams_Parms GetMICParams_Parms;
	GetMICParams_Parms.nIndex = nIndex;

	pFnGetMICParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMICParams, &GetMICParams_Parms, NULL );

	pFnGetMICParams->FunctionFlags |= 0x400;

	return GetMICParams_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget_Zone.SetRegionHighlightRegion
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nRegionId                      ( CPF_Parm )
// unsigned long                  bEnabled                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIHexWidget_Zone::SetRegionHighlightRegion ( int nRegionId, unsigned long bEnabled )
{
	static UFunction* pFnSetRegionHighlightRegion = NULL;

	if ( ! pFnSetRegionHighlightRegion )
		pFnSetRegionHighlightRegion = (UFunction*) UObject::GObjObjects()->Data[ 49059 ];

	UTgUIHexWidget_Zone_execSetRegionHighlightRegion_Parms SetRegionHighlightRegion_Parms;
	SetRegionHighlightRegion_Parms.nRegionId = nRegionId;
	SetRegionHighlightRegion_Parms.bEnabled = bEnabled;

	pFnSetRegionHighlightRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRegionHighlightRegion, &SetRegionHighlightRegion_Parms, NULL );

	pFnSetRegionHighlightRegion->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.SetRegionHighlightAgency
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nAgencyId                      ( CPF_Parm )
// unsigned long                  bEnabled                       ( CPF_OptionalParm | CPF_Parm )

void UTgUIHexWidget_Zone::SetRegionHighlightAgency ( int nAgencyId, unsigned long bEnabled )
{
	static UFunction* pFnSetRegionHighlightAgency = NULL;

	if ( ! pFnSetRegionHighlightAgency )
		pFnSetRegionHighlightAgency = (UFunction*) UObject::GObjObjects()->Data[ 49056 ];

	UTgUIHexWidget_Zone_execSetRegionHighlightAgency_Parms SetRegionHighlightAgency_Parms;
	SetRegionHighlightAgency_Parms.nAgencyId = nAgencyId;
	SetRegionHighlightAgency_Parms.bEnabled = bEnabled;

	pFnSetRegionHighlightAgency->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRegionHighlightAgency, &SetRegionHighlightAgency_Parms, NULL );

	pFnSetRegionHighlightAgency->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.ClearRegionHighlight
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIHexWidget_Zone::ClearRegionHighlight ( )
{
	static UFunction* pFnClearRegionHighlight = NULL;

	if ( ! pFnClearRegionHighlight )
		pFnClearRegionHighlight = (UFunction*) UObject::GObjObjects()->Data[ 49055 ];

	UTgUIHexWidget_Zone_execClearRegionHighlight_Parms ClearRegionHighlight_Parms;

	pFnClearRegionHighlight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearRegionHighlight, &ClearRegionHighlight_Parms, NULL );

	pFnClearRegionHighlight->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.OnClick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )

void UTgUIHexWidget_Zone::OnClick ( int X, int Y )
{
	static UFunction* pFnOnClick = NULL;

	if ( ! pFnOnClick )
		pFnOnClick = (UFunction*) UObject::GObjObjects()->Data[ 49052 ];

	UTgUIHexWidget_Zone_execOnClick_Parms OnClick_Parms;
	OnClick_Parms.X = X;
	OnClick_Parms.Y = Y;

	pFnOnClick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnClick, &OnClick_Parms, NULL );

	pFnOnClick->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIHexWidget_Zone.GetAgencyData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nAgencyId                      ( CPF_Parm )
// struct FHexAgencyData          Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UTgUIHexWidget_Zone::GetAgencyData ( int nAgencyId, struct FHexAgencyData* Data )
{
	static UFunction* pFnGetAgencyData = NULL;

	if ( ! pFnGetAgencyData )
		pFnGetAgencyData = (UFunction*) UObject::GObjObjects()->Data[ 49048 ];

	UTgUIHexWidget_Zone_execGetAgencyData_Parms GetAgencyData_Parms;
	GetAgencyData_Parms.nAgencyId = nAgencyId;

	pFnGetAgencyData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAgencyData, &GetAgencyData_Parms, NULL );

	pFnGetAgencyData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetAgencyData_Parms.Data, 0x20 );

	return GetAgencyData_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget_Zone.IsHexFriendlyWithLocalPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

bool UTgUIHexWidget_Zone::IsHexFriendlyWithLocalPlayer ( int nIndex )
{
	static UFunction* pFnIsHexFriendlyWithLocalPlayer = NULL;

	if ( ! pFnIsHexFriendlyWithLocalPlayer )
		pFnIsHexFriendlyWithLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 49045 ];

	UTgUIHexWidget_Zone_execIsHexFriendlyWithLocalPlayer_Parms IsHexFriendlyWithLocalPlayer_Parms;
	IsHexFriendlyWithLocalPlayer_Parms.nIndex = nIndex;

	pFnIsHexFriendlyWithLocalPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHexFriendlyWithLocalPlayer, &IsHexFriendlyWithLocalPlayer_Parms, NULL );

	pFnIsHexFriendlyWithLocalPlayer->FunctionFlags |= 0x400;

	return IsHexFriendlyWithLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgUIHexWidget_Zone.IsFriendlyWithLocalPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nAgencyId                      ( CPF_Parm )

bool UTgUIHexWidget_Zone::IsFriendlyWithLocalPlayer ( int nAgencyId )
{
	static UFunction* pFnIsFriendlyWithLocalPlayer = NULL;

	if ( ! pFnIsFriendlyWithLocalPlayer )
		pFnIsFriendlyWithLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 49042 ];

	UTgUIHexWidget_Zone_execIsFriendlyWithLocalPlayer_Parms IsFriendlyWithLocalPlayer_Parms;
	IsFriendlyWithLocalPlayer_Parms.nAgencyId = nAgencyId;

	pFnIsFriendlyWithLocalPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPlayer, &IsFriendlyWithLocalPlayer_Parms, NULL );

	pFnIsFriendlyWithLocalPlayer->FunctionFlags |= 0x400;

	return IsFriendlyWithLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgUIMapWidget.GetObjectiveIconSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Obj                            ( CPF_Parm )

int UTgUIMapWidget::GetObjectiveIconSize ( class ATgMissionObjective* Obj )
{
	static UFunction* pFnGetObjectiveIconSize = NULL;

	if ( ! pFnGetObjectiveIconSize )
		pFnGetObjectiveIconSize = (UFunction*) UObject::GObjObjects()->Data[ 49200 ];

	UTgUIMapWidget_execGetObjectiveIconSize_Parms GetObjectiveIconSize_Parms;
	GetObjectiveIconSize_Parms.Obj = Obj;

	pFnGetObjectiveIconSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectiveIconSize, &GetObjectiveIconSize_Parms, NULL );

	pFnGetObjectiveIconSize->FunctionFlags |= 0x400;

	return GetObjectiveIconSize_Parms.ReturnValue;
};

// Function TgGame.TgUIMapWidget.CalcMapFromObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIMapWidget::CalcMapFromObjectives ( )
{
	static UFunction* pFnCalcMapFromObjectives = NULL;

	if ( ! pFnCalcMapFromObjectives )
		pFnCalcMapFromObjectives = (UFunction*) UObject::GObjObjects()->Data[ 49199 ];

	UTgUIMapWidget_execCalcMapFromObjectives_Parms CalcMapFromObjectives_Parms;

	pFnCalcMapFromObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcMapFromObjectives, &CalcMapFromObjectives_Parms, NULL );

	pFnCalcMapFromObjectives->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIMapWidget.GetScreenScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UTgUIMapWidget::GetScreenScale ( )
{
	static UFunction* pFnGetScreenScale = NULL;

	if ( ! pFnGetScreenScale )
		pFnGetScreenScale = (UFunction*) UObject::GObjObjects()->Data[ 49197 ];

	UTgUIMapWidget_execGetScreenScale_Parms GetScreenScale_Parms;

	pFnGetScreenScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScreenScale, &GetScreenScale_Parms, NULL );

	pFnGetScreenScale->FunctionFlags |= 0x400;

	return GetScreenScale_Parms.ReturnValue;
};

// Function TgGame.TgUIMapWidget.GetScreenLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

struct FVector UTgUIMapWidget::GetScreenLocation ( struct FVector Location )
{
	static UFunction* pFnGetScreenLocation = NULL;

	if ( ! pFnGetScreenLocation )
		pFnGetScreenLocation = (UFunction*) UObject::GObjObjects()->Data[ 49194 ];

	UTgUIMapWidget_execGetScreenLocation_Parms GetScreenLocation_Parms;
	memcpy ( &GetScreenLocation_Parms.Location, &Location, 0xC );

	pFnGetScreenLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScreenLocation, &GetScreenLocation_Parms, NULL );

	pFnGetScreenLocation->FunctionFlags |= 0x400;

	return GetScreenLocation_Parms.ReturnValue;
};

// Function TgGame.TgUIMapWidget.OnClick
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIMapWidget::OnClick ( )
{
	static UFunction* pFnOnClick = NULL;

	if ( ! pFnOnClick )
		pFnOnClick = (UFunction*) UObject::GObjObjects()->Data[ 49193 ];

	UTgUIMapWidget_execOnClick_Parms OnClick_Parms;

	pFnOnClick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnClick, &OnClick_Parms, NULL );

	pFnOnClick->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIMapWidget.OnTick
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIMapWidget::OnTick ( )
{
	static UFunction* pFnOnTick = NULL;

	if ( ! pFnOnTick )
		pFnOnTick = (UFunction*) UObject::GObjObjects()->Data[ 49192 ];

	UTgUIMapWidget_execOnTick_Parms OnTick_Parms;

	pFnOnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTick, &OnTick_Parms, NULL );

	pFnOnTick->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIMapWidget.InitializeMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgPlayerController*     PC                             ( CPF_Parm )

void UTgUIMapWidget::InitializeMap ( class ATgPlayerController* PC )
{
	static UFunction* pFnInitializeMap = NULL;

	if ( ! pFnInitializeMap )
		pFnInitializeMap = (UFunction*) UObject::GObjObjects()->Data[ 49190 ];

	UTgUIMapWidget_execInitializeMap_Parms InitializeMap_Parms;
	InitializeMap_Parms.PC = PC;

	pFnInitializeMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeMap, &InitializeMap_Parms, NULL );

	pFnInitializeMap->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIProgressBar.SetEnemyFillImage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USurface*                NewImage                       ( CPF_Parm )

void UTgUIProgressBar::SetEnemyFillImage ( class USurface* NewImage )
{
	static UFunction* pFnSetEnemyFillImage = NULL;

	if ( ! pFnSetEnemyFillImage )
		pFnSetEnemyFillImage = (UFunction*) UObject::GObjObjects()->Data[ 49229 ];

	UTgUIProgressBar_execSetEnemyFillImage_Parms SetEnemyFillImage_Parms;
	SetEnemyFillImage_Parms.NewImage = NewImage;

	this->ProcessEvent ( pFnSetEnemyFillImage, &SetEnemyFillImage_Parms, NULL );
};

// Function TgGame.TgUIScrollList.GetListEntry
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIPrefabInstance*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nNum                           ( CPF_Parm )

class UUIPrefabInstance* UTgUIScrollList::GetListEntry ( int nNum )
{
	static UFunction* pFnGetListEntry = NULL;

	if ( ! pFnGetListEntry )
		pFnGetListEntry = (UFunction*) UObject::GObjObjects()->Data[ 48701 ];

	UTgUIScrollList_execGetListEntry_Parms GetListEntry_Parms;
	GetListEntry_Parms.nNum = nNum;

	pFnGetListEntry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetListEntry, &GetListEntry_Parms, NULL );

	pFnGetListEntry->FunctionFlags |= 0x400;

	return GetListEntry_Parms.ReturnValue;
};

// Function TgGame.TgUIScrollList.GetListLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTgUIScrollList::GetListLength ( )
{
	static UFunction* pFnGetListLength = NULL;

	if ( ! pFnGetListLength )
		pFnGetListLength = (UFunction*) UObject::GObjObjects()->Data[ 48699 ];

	UTgUIScrollList_execGetListLength_Parms GetListLength_Parms;

	pFnGetListLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetListLength, &GetListLength_Parms, NULL );

	pFnGetListLength->FunctionFlags |= 0x400;

	return GetListLength_Parms.ReturnValue;
};

// Function TgGame.TgUIScrollList.EmptyList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIScrollList::EmptyList ( )
{
	static UFunction* pFnEmptyList = NULL;

	if ( ! pFnEmptyList )
		pFnEmptyList = (UFunction*) UObject::GObjObjects()->Data[ 48698 ];

	UTgUIScrollList_execEmptyList_Parms EmptyList_Parms;

	pFnEmptyList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmptyList, &EmptyList_Parms, NULL );

	pFnEmptyList->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIChatScrollList.SetEntryMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEntryMode                     ( CPF_Parm )

void UTgUIChatScrollList::SetEntryMode ( unsigned long bEntryMode )
{
	static UFunction* pFnSetEntryMode = NULL;

	if ( ! pFnSetEntryMode )
		pFnSetEntryMode = (UFunction*) UObject::GObjObjects()->Data[ 48718 ];

	UTgUIChatScrollList_execSetEntryMode_Parms SetEntryMode_Parms;
	SetEntryMode_Parms.bEntryMode = bEntryMode;

	pFnSetEntryMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEntryMode, &SetEntryMode_Parms, NULL );

	pFnSetEntryMode->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIChatScrollList.AddChatMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 msgString                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  msgColor                       ( CPF_Parm )

void UTgUIChatScrollList::AddChatMessage ( struct FString msgString, struct FColor msgColor )
{
	static UFunction* pFnAddChatMessage = NULL;

	if ( ! pFnAddChatMessage )
		pFnAddChatMessage = (UFunction*) UObject::GObjObjects()->Data[ 48715 ];

	UTgUIChatScrollList_execAddChatMessage_Parms AddChatMessage_Parms;
	memcpy ( &AddChatMessage_Parms.msgString, &msgString, 0xC );
	memcpy ( &AddChatMessage_Parms.msgColor, &msgColor, 0x4 );

	pFnAddChatMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddChatMessage, &AddChatMessage_Parms, NULL );

	pFnAddChatMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgUIChatScrollList.InitializeChatList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUIChatScrollList::InitializeChatList ( )
{
	static UFunction* pFnInitializeChatList = NULL;

	if ( ! pFnInitializeChatList )
		pFnInitializeChatList = (UFunction*) UObject::GObjObjects()->Data[ 48714 ];

	UTgUIChatScrollList_execInitializeChatList_Parms InitializeChatList_Parms;

	pFnInitializeChatList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeChatList, &InitializeChatList_Parms, NULL );

	pFnInitializeChatList->FunctionFlags |= 0x400;
};

// Function TgGame.TgUISkeletalMeshWidget.LoadClientOnlyMeshAssets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTgUISkeletalMeshWidget::LoadClientOnlyMeshAssets ( )
{
	static UFunction* pFnLoadClientOnlyMeshAssets = NULL;

	if ( ! pFnLoadClientOnlyMeshAssets )
		pFnLoadClientOnlyMeshAssets = (UFunction*) UObject::GObjObjects()->Data[ 49260 ];

	UTgUISkeletalMeshWidget_execLoadClientOnlyMeshAssets_Parms LoadClientOnlyMeshAssets_Parms;

	pFnLoadClientOnlyMeshAssets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadClientOnlyMeshAssets, &LoadClientOnlyMeshAssets_Parms, NULL );

	pFnLoadClientOnlyMeshAssets->FunctionFlags |= 0x400;
};

// Function TgGame.TgUISkeletalMeshWidget.TickComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void UTgUISkeletalMeshWidget::TickComponents ( float DeltaSeconds )
{
	static UFunction* pFnTickComponents = NULL;

	if ( ! pFnTickComponents )
		pFnTickComponents = (UFunction*) UObject::GObjObjects()->Data[ 49258 ];

	UTgUISkeletalMeshWidget_execTickComponents_Parms TickComponents_Parms;
	TickComponents_Parms.DeltaSeconds = DeltaSeconds;

	pFnTickComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickComponents, &TickComponents_Parms, NULL );

	pFnTickComponents->FunctionFlags |= 0x400;
};

// Function TgGame.TgUISkeletalMeshWidget.SetSkeletalMeshComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SMC                            ( CPF_Parm | CPF_EditInline )

void UTgUISkeletalMeshWidget::SetSkeletalMeshComponent ( class USkeletalMeshComponent* SMC )
{
	static UFunction* pFnSetSkeletalMeshComponent = NULL;

	if ( ! pFnSetSkeletalMeshComponent )
		pFnSetSkeletalMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 49256 ];

	UTgUISkeletalMeshWidget_execSetSkeletalMeshComponent_Parms SetSkeletalMeshComponent_Parms;
	SetSkeletalMeshComponent_Parms.SMC = SMC;

	pFnSetSkeletalMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMeshComponent, &SetSkeletalMeshComponent_Parms, NULL );

	pFnSetSkeletalMeshComponent->FunctionFlags |= 0x400;
};

// Function TgGame.TgUISkeletalMeshWidget.SetSkeletalMeshActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASkeletalMeshActor*      SMActor                        ( CPF_Parm )

void UTgUISkeletalMeshWidget::SetSkeletalMeshActor ( class ASkeletalMeshActor* SMActor )
{
	static UFunction* pFnSetSkeletalMeshActor = NULL;

	if ( ! pFnSetSkeletalMeshActor )
		pFnSetSkeletalMeshActor = (UFunction*) UObject::GObjObjects()->Data[ 49254 ];

	UTgUISkeletalMeshWidget_execSetSkeletalMeshActor_Parms SetSkeletalMeshActor_Parms;
	SetSkeletalMeshActor_Parms.SMActor = SMActor;

	pFnSetSkeletalMeshActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMeshActor, &SetSkeletalMeshActor_Parms, NULL );

	pFnSetSkeletalMeshActor->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ATgGame::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 38739 ];

	ATgGame_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function TgGame.TgGame.CanSpectate
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool ATgGame::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = (UFunction*) UObject::GObjObjects()->Data[ 38731 ];

	ATgGame_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetMissionTimerStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgGame::eventGetMissionTimerStatus ( )
{
	static UFunction* pFnGetMissionTimerStatus = NULL;

	if ( ! pFnGetMissionTimerStatus )
		pFnGetMissionTimerStatus = (UFunction*) UObject::GObjObjects()->Data[ 38729 ];

	ATgGame_eventGetMissionTimerStatus_Parms GetMissionTimerStatus_Parms;

	this->ProcessEvent ( pFnGetMissionTimerStatus, &GetMissionTimerStatus_Parms, NULL );

	return GetMissionTimerStatus_Parms.ReturnValue;
};

// Function TgGame.TgGame.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 38722 ];

	ATgGame_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame.SetMissionTimerShouldWait
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWait                          ( CPF_Parm )

void ATgGame::SetMissionTimerShouldWait ( unsigned long bWait )
{
	static UFunction* pFnSetMissionTimerShouldWait = NULL;

	if ( ! pFnSetMissionTimerShouldWait )
		pFnSetMissionTimerShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 38720 ];

	ATgGame_execSetMissionTimerShouldWait_Parms SetMissionTimerShouldWait_Parms;
	SetMissionTimerShouldWait_Parms.bWait = bWait;

	this->ProcessEvent ( pFnSetMissionTimerShouldWait, &SetMissionTimerShouldWait_Parms, NULL );
};

// Function TgGame.TgGame.PostCommitMapChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventPostCommitMapChange ( )
{
	static UFunction* pFnPostCommitMapChange = NULL;

	if ( ! pFnPostCommitMapChange )
		pFnPostCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 38719 ];

	ATgGame_eventPostCommitMapChange_Parms PostCommitMapChange_Parms;

	this->ProcessEvent ( pFnPostCommitMapChange, &PostCommitMapChange_Parms, NULL );
};

// Function TgGame.TgGame.SendMissionTimerNotify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eState                         ( CPF_Parm )
// float                          fRemainingSecs                 ( CPF_Parm )

void ATgGame::eventSendMissionTimerNotify ( unsigned char eState, float fRemainingSecs )
{
	static UFunction* pFnSendMissionTimerNotify = NULL;

	if ( ! pFnSendMissionTimerNotify )
		pFnSendMissionTimerNotify = (UFunction*) UObject::GObjObjects()->Data[ 38714 ];

	ATgGame_eventSendMissionTimerNotify_Parms SendMissionTimerNotify_Parms;
	SendMissionTimerNotify_Parms.eState = eState;
	SendMissionTimerNotify_Parms.fRemainingSecs = fRemainingSecs;

	this->ProcessEvent ( pFnSendMissionTimerNotify, &SendMissionTimerNotify_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimerBossIncrement
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventMissionTimerBossIncrement ( )
{
	static UFunction* pFnMissionTimerBossIncrement = NULL;

	if ( ! pFnMissionTimerBossIncrement )
		pFnMissionTimerBossIncrement = (UFunction*) UObject::GObjObjects()->Data[ 38709 ];

	ATgGame_eventMissionTimerBossIncrement_Parms MissionTimerBossIncrement_Parms;

	this->ProcessEvent ( pFnMissionTimerBossIncrement, &MissionTimerBossIncrement_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimeIncrement
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fInc                           ( CPF_Parm )

void ATgGame::eventMissionTimeIncrement ( float fInc )
{
	static UFunction* pFnMissionTimeIncrement = NULL;

	if ( ! pFnMissionTimeIncrement )
		pFnMissionTimeIncrement = (UFunction*) UObject::GObjObjects()->Data[ 38706 ];

	ATgGame_eventMissionTimeIncrement_Parms MissionTimeIncrement_Parms;
	MissionTimeIncrement_Parms.fInc = fInc;

	this->ProcessEvent ( pFnMissionTimeIncrement, &MissionTimeIncrement_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimerModify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )
// int                            nNewTime                       ( CPF_Parm )

void ATgGame::eventMissionTimerModify ( unsigned long bPause, int nNewTime )
{
	static UFunction* pFnMissionTimerModify = NULL;

	if ( ! pFnMissionTimerModify )
		pFnMissionTimerModify = (UFunction*) UObject::GObjObjects()->Data[ 38703 ];

	ATgGame_eventMissionTimerModify_Parms MissionTimerModify_Parms;
	MissionTimerModify_Parms.bPause = bPause;
	MissionTimerModify_Parms.nNewTime = nNewTime;

	this->ProcessEvent ( pFnMissionTimerModify, &MissionTimerModify_Parms, NULL );
};

// Function TgGame.TgGame.ElapsedTime
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame::eventElapsedTime ( )
{
	static UFunction* pFnElapsedTime = NULL;

	if ( ! pFnElapsedTime )
		pFnElapsedTime = (UFunction*) UObject::GObjObjects()->Data[ 38701 ];

	ATgGame_eventElapsedTime_Parms ElapsedTime_Parms;

	this->ProcessEvent ( pFnElapsedTime, &ElapsedTime_Parms, NULL );

	return ElapsedTime_Parms.ReturnValue;
};

// Function TgGame.TgGame.MissionTimerActive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::eventMissionTimerActive ( )
{
	static UFunction* pFnMissionTimerActive = NULL;

	if ( ! pFnMissionTimerActive )
		pFnMissionTimerActive = (UFunction*) UObject::GObjObjects()->Data[ 38699 ];

	ATgGame_eventMissionTimerActive_Parms MissionTimerActive_Parms;

	this->ProcessEvent ( pFnMissionTimerActive, &MissionTimerActive_Parms, NULL );

	return MissionTimerActive_Parms.ReturnValue;
};

// Function TgGame.TgGame.ChangeTimerState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eTimerState                    ( CPF_Parm )

void ATgGame::eventChangeTimerState ( unsigned char eTimerState )
{
	static UFunction* pFnChangeTimerState = NULL;

	if ( ! pFnChangeTimerState )
		pFnChangeTimerState = (UFunction*) UObject::GObjObjects()->Data[ 38691 ];

	ATgGame_eventChangeTimerState_Parms ChangeTimerState_Parms;
	ChangeTimerState_Parms.eTimerState = eTimerState;

	this->ProcessEvent ( pFnChangeTimerState, &ChangeTimerState_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventMissionTimer ( )
{
	static UFunction* pFnMissionTimer = NULL;

	if ( ! pFnMissionTimer )
		pFnMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 38690 ];

	ATgGame_eventMissionTimer_Parms MissionTimer_Parms;

	this->ProcessEvent ( pFnMissionTimer, &MissionTimer_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimerPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventMissionTimerPause ( )
{
	static UFunction* pFnMissionTimerPause = NULL;

	if ( ! pFnMissionTimerPause )
		pFnMissionTimerPause = (UFunction*) UObject::GObjObjects()->Data[ 38689 ];

	ATgGame_eventMissionTimerPause_Parms MissionTimerPause_Parms;

	this->ProcessEvent ( pFnMissionTimerPause, &MissionTimerPause_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimerStop
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventMissionTimerStop ( )
{
	static UFunction* pFnMissionTimerStop = NULL;

	if ( ! pFnMissionTimerStop )
		pFnMissionTimerStop = (UFunction*) UObject::GObjObjects()->Data[ 38688 ];

	ATgGame_eventMissionTimerStop_Parms MissionTimerStop_Parms;

	this->ProcessEvent ( pFnMissionTimerStop, &MissionTimerStop_Parms, NULL );
};

// Function TgGame.TgGame.MissionTimerStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventMissionTimerStart ( )
{
	static UFunction* pFnMissionTimerStart = NULL;

	if ( ! pFnMissionTimerStart )
		pFnMissionTimerStart = (UFunction*) UObject::GObjObjects()->Data[ 38686 ];

	ATgGame_eventMissionTimerStart_Parms MissionTimerStart_Parms;

	this->ProcessEvent ( pFnMissionTimerStart, &MissionTimerStart_Parms, NULL );
};

// Function TgGame.TgGame.SetMissionTime
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fTime                          ( CPF_Parm )

void ATgGame::eventSetMissionTime ( float fTime )
{
	static UFunction* pFnSetMissionTime = NULL;

	if ( ! pFnSetMissionTime )
		pFnSetMissionTime = (UFunction*) UObject::GObjObjects()->Data[ 38684 ];

	ATgGame_eventSetMissionTime_Parms SetMissionTime_Parms;
	SetMissionTime_Parms.fTime = fTime;

	this->ProcessEvent ( pFnSetMissionTime, &SetMissionTime_Parms, NULL );
};

// Function TgGame.TgGame.KeepClientsInSync
// [0x00020002] 
// Parameters infos:

void ATgGame::KeepClientsInSync ( )
{
	static UFunction* pFnKeepClientsInSync = NULL;

	if ( ! pFnKeepClientsInSync )
		pFnKeepClientsInSync = (UFunction*) UObject::GObjObjects()->Data[ 38682 ];

	ATgGame_execKeepClientsInSync_Parms KeepClientsInSync_Parms;

	this->ProcessEvent ( pFnKeepClientsInSync, &KeepClientsInSync_Parms, NULL );
};

// Function TgGame.TgGame.StartGameTimer
// [0x00020002] 
// Parameters infos:

void ATgGame::StartGameTimer ( )
{
	static UFunction* pFnStartGameTimer = NULL;

	if ( ! pFnStartGameTimer )
		pFnStartGameTimer = (UFunction*) UObject::GObjObjects()->Data[ 38680 ];

	ATgGame_execStartGameTimer_Parms StartGameTimer_Parms;

	this->ProcessEvent ( pFnStartGameTimer, &StartGameTimer_Parms, NULL );
};

// Function TgGame.TgGame.AwardMedal
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  newMedalStatus                 ( CPF_Parm )

void ATgGame::eventAwardMedal ( unsigned char newMedalStatus )
{
	static UFunction* pFnAwardMedal = NULL;

	if ( ! pFnAwardMedal )
		pFnAwardMedal = (UFunction*) UObject::GObjObjects()->Data[ 38676 ];

	ATgGame_eventAwardMedal_Parms AwardMedal_Parms;
	AwardMedal_Parms.newMedalStatus = newMedalStatus;

	this->ProcessEvent ( pFnAwardMedal, &AwardMedal_Parms, NULL );
};

// Function TgGame.TgGame.GetAwardStringByType
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  medal                          ( CPF_Parm )

struct FString ATgGame::GetAwardStringByType ( unsigned char medal )
{
	static UFunction* pFnGetAwardStringByType = NULL;

	if ( ! pFnGetAwardStringByType )
		pFnGetAwardStringByType = (UFunction*) UObject::GObjObjects()->Data[ 38672 ];

	ATgGame_execGetAwardStringByType_Parms GetAwardStringByType_Parms;
	GetAwardStringByType_Parms.medal = medal;

	this->ProcessEvent ( pFnGetAwardStringByType, &GetAwardStringByType_Parms, NULL );

	return GetAwardStringByType_Parms.ReturnValue;
};

// Function TgGame.TgGame.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ATgGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 38670 ];

	ATgGame_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function TgGame.TgGame.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool ATgGame::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 38667 ];

	ATgGame_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function TgGame.TgGame.AddInactivePRI
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void ATgGame::AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 38664 ];

	ATgGame_execAddInactivePRI_Parms AddInactivePRI_Parms;
	AddInactivePRI_Parms.PRI = PRI;
	AddInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function TgGame.TgGame.RestartGame
// [0x00020002] 
// Parameters infos:

void ATgGame::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 38663 ];

	ATgGame_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function TgGame.TgGame.PlayClientMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 theMessage                     ( CPF_Parm | CPF_NeedCtorLink )

void ATgGame::PlayClientMessage ( struct FString theMessage )
{
	static UFunction* pFnPlayClientMessage = NULL;

	if ( ! pFnPlayClientMessage )
		pFnPlayClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 38660 ];

	ATgGame_execPlayClientMessage_Parms PlayClientMessage_Parms;
	memcpy ( &PlayClientMessage_Parms.theMessage, &theMessage, 0xC );

	this->ProcessEvent ( pFnPlayClientMessage, &PlayClientMessage_Parms, NULL );
};

// Function TgGame.TgGame.PlayStartupMessage
// [0x00020002] 
// Parameters infos:

void ATgGame::PlayStartupMessage ( )
{
	static UFunction* pFnPlayStartupMessage = NULL;

	if ( ! pFnPlayStartupMessage )
		pFnPlayStartupMessage = (UFunction*) UObject::GObjObjects()->Data[ 38658 ];

	ATgGame_execPlayStartupMessage_Parms PlayStartupMessage_Parms;

	this->ProcessEvent ( pFnPlayStartupMessage, &PlayStartupMessage_Parms, NULL );
};

// Function TgGame.TgGame.GetBotIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::GetBotIndex ( )
{
	static UFunction* pFnGetBotIndex = NULL;

	if ( ! pFnGetBotIndex )
		pFnGetBotIndex = (UFunction*) UObject::GObjObjects()->Data[ 38624 ];

	ATgGame_execGetBotIndex_Parms GetBotIndex_Parms;

	this->ProcessEvent ( pFnGetBotIndex, &GetBotIndex_Parms, NULL );

	return GetBotIndex_Parms.ReturnValue;
};

// Function TgGame.TgGame.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void ATgGame::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 38621 ];

	ATgGame_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function TgGame.TgGame.StartMatch
// [0x00020002] 
// Parameters infos:

void ATgGame::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 38619 ];

	ATgGame_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function TgGame.TgGame.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            Num                            ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool ATgGame::ChangeTeam ( class AController* Other, int Num, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 38614 ];

	ATgGame_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.Num = Num;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function TgGame.TgGame.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ATgGame::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 38608 ];

	ATgGame_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function TgGame.TgGame.RatePlayerStartPoint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float ATgGame::eventRatePlayerStartPoint ( class APlayerStart* P, class AController* Player )
{
	static UFunction* pFnRatePlayerStartPoint = NULL;

	if ( ! pFnRatePlayerStartPoint )
		pFnRatePlayerStartPoint = (UFunction*) UObject::GObjObjects()->Data[ 38604 ];

	ATgGame_eventRatePlayerStartPoint_Parms RatePlayerStartPoint_Parms;
	RatePlayerStartPoint_Parms.P = P;
	RatePlayerStartPoint_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStartPoint, &RatePlayerStartPoint_Parms, NULL );

	return RatePlayerStartPoint_Parms.ReturnValue;
};

// Function TgGame.TgGame.FindPlayerGroupStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// int                            groupNumber                    ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ATgGame::FindPlayerGroupStart ( class AController* Player, int groupNumber, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerGroupStart = NULL;

	if ( ! pFnFindPlayerGroupStart )
		pFnFindPlayerGroupStart = (UFunction*) UObject::GObjObjects()->Data[ 38594 ];

	ATgGame_execFindPlayerGroupStart_Parms FindPlayerGroupStart_Parms;
	FindPlayerGroupStart_Parms.Player = Player;
	FindPlayerGroupStart_Parms.groupNumber = groupNumber;
	FindPlayerGroupStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerGroupStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerGroupStart, &FindPlayerGroupStart_Parms, NULL );

	return FindPlayerGroupStart_Parms.ReturnValue;
};

// Function TgGame.TgGame.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ATgGame::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 38587 ];

	ATgGame_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetReviveLocation
// [0x00420002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

class ANavigationPoint* ATgGame::GetReviveLocation ( class AController* Player, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetReviveLocation = NULL;

	if ( ! pFnGetReviveLocation )
		pFnGetReviveLocation = (UFunction*) UObject::GObjObjects()->Data[ 38581 ];

	ATgGame_execGetReviveLocation_Parms GetReviveLocation_Parms;
	GetReviveLocation_Parms.Player = Player;

	this->ProcessEvent ( pFnGetReviveLocation, &GetReviveLocation_Parms, NULL );

	if ( OutLocation )
		memcpy ( OutLocation, &GetReviveLocation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetReviveLocation_Parms.OutRotation, 0xC );

	return GetReviveLocation_Parms.ReturnValue;
};

// Function TgGame.TgGame.FindPlayerStartPoint
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 SpawnTagName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ATgGame::eventFindPlayerStartPoint ( class AController* Player, struct FString SpawnTagName )
{
	static UFunction* pFnFindPlayerStartPoint = NULL;

	if ( ! pFnFindPlayerStartPoint )
		pFnFindPlayerStartPoint = (UFunction*) UObject::GObjObjects()->Data[ 38577 ];

	ATgGame_eventFindPlayerStartPoint_Parms FindPlayerStartPoint_Parms;
	FindPlayerStartPoint_Parms.Player = Player;
	memcpy ( &FindPlayerStartPoint_Parms.SpawnTagName, &SpawnTagName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStartPoint, &FindPlayerStartPoint_Parms, NULL );

	return FindPlayerStartPoint_Parms.ReturnValue;
};

// Function TgGame.TgGame.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void ATgGame::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = (UFunction*) UObject::GObjObjects()->Data[ 38575 ];

	ATgGame_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function TgGame.TgGame.AddDefaultInventory
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void ATgGame::AddDefaultInventory ( class APawn* PlayerPawn )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 38573 ];

	ATgGame_execAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function TgGame.TgGame.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             aPlayer                        ( CPF_Parm )

void ATgGame::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 38568 ];

	ATgGame_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function TgGame.TgGame.AllPlayersEndGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ACameraActor*            Camera                         ( CPF_Parm )

void ATgGame::eventAllPlayersEndGame ( class ACameraActor* Camera )
{
	static UFunction* pFnAllPlayersEndGame = NULL;

	if ( ! pFnAllPlayersEndGame )
		pFnAllPlayersEndGame = (UFunction*) UObject::GObjObjects()->Data[ 38559 ];

	ATgGame_eventAllPlayersEndGame_Parms AllPlayersEndGame_Parms;
	AllPlayersEndGame_Parms.Camera = Camera;

	this->ProcessEvent ( pFnAllPlayersEndGame, &AllPlayersEndGame_Parms, NULL );
};

// Function TgGame.TgGame.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* ATgGame::eventLogin ( struct FString Portal, struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 38551 ];

	ATgGame_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnDefaultPawnFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* ATgGame::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 38544 ];

	ATgGame_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function TgGame.TgGame.StartBots
// [0x00020000] 
// Parameters infos:

void ATgGame::StartBots ( )
{
	static UFunction* pFnStartBots = NULL;

	if ( ! pFnStartBots )
		pFnStartBots = (UFunction*) UObject::GObjObjects()->Data[ 38543 ];

	ATgGame_execStartBots_Parms StartBots_Parms;

	this->ProcessEvent ( pFnStartBots, &StartBots_Parms, NULL );
};

// Function TgGame.TgGame.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ATgGame::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 38540 ];

	ATgGame_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function TgGame.TgGame.GetSetupTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame::GetSetupTime ( )
{
	static UFunction* pFnGetSetupTime = NULL;

	if ( ! pFnGetSetupTime )
		pFnGetSetupTime = (UFunction*) UObject::GObjObjects()->Data[ 38538 ];

	ATgGame_execGetSetupTime_Parms GetSetupTime_Parms;

	this->ProcessEvent ( pFnGetSetupTime, &GetSetupTime_Parms, NULL );

	return GetSetupTime_Parms.ReturnValue;
};

// Function TgGame.TgGame.SetGameSpeed
// [0x00020002] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void ATgGame::SetGameSpeed ( float T )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 38536 ];

	ATgGame_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.T = T;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function TgGame.TgGame.GeneratePlayerId
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::GeneratePlayerId ( )
{
	static UFunction* pFnGeneratePlayerId = NULL;

	if ( ! pFnGeneratePlayerId )
		pFnGeneratePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 38534 ];

	ATgGame_execGeneratePlayerId_Parms GeneratePlayerId_Parms;

	this->ProcessEvent ( pFnGeneratePlayerId, &GeneratePlayerId_Parms, NULL );

	return GeneratePlayerId_Parms.ReturnValue;
};

// Function TgGame.TgGame.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* ATgGame::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 38529 ];

	ATgGame_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0xC );
	memcpy ( &SetGameType_Parms.Options, &Options, 0xC );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function TgGame.TgGame.Reset
// [0x00020000] 
// Parameters infos:

void ATgGame::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 38528 ];

	ATgGame_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function TgGame.TgGame.GetNextDeviceInstanceId
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::eventGetNextDeviceInstanceId ( )
{
	static UFunction* pFnGetNextDeviceInstanceId = NULL;

	if ( ! pFnGetNextDeviceInstanceId )
		pFnGetNextDeviceInstanceId = (UFunction*) UObject::GObjObjects()->Data[ 38526 ];

	ATgGame_eventGetNextDeviceInstanceId_Parms GetNextDeviceInstanceId_Parms;

	this->ProcessEvent ( pFnGetNextDeviceInstanceId, &GetNextDeviceInstanceId_Parms, NULL );

	return GetNextDeviceInstanceId_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetNextPawnId
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::eventGetNextPawnId ( )
{
	static UFunction* pFnGetNextPawnId = NULL;

	if ( ! pFnGetNextPawnId )
		pFnGetNextPawnId = (UFunction*) UObject::GObjObjects()->Data[ 38524 ];

	ATgGame_eventGetNextPawnId_Parms GetNextPawnId_Parms;

	this->ProcessEvent ( pFnGetNextPawnId, &GetNextPawnId_Parms, NULL );

	return GetNextPawnId_Parms.ReturnValue;
};

// Function TgGame.TgGame.GameHasForceField
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::GameHasForceField ( )
{
	static UFunction* pFnGameHasForceField = NULL;

	if ( ! pFnGameHasForceField )
		pFnGameHasForceField = (UFunction*) UObject::GObjObjects()->Data[ 38522 ];

	ATgGame_execGameHasForceField_Parms GameHasForceField_Parms;

	this->ProcessEvent ( pFnGameHasForceField, &GameHasForceField_Parms, NULL );

	return GameHasForceField_Parms.ReturnValue;
};

// Function TgGame.TgGame.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void ATgGame::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 38521 ];

	ATgGame_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function TgGame.TgGame.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38520 ];

	ATgGame_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame.ResetAlertsForExtendedTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::ResetAlertsForExtendedTime ( )
{
	static UFunction* pFnResetAlertsForExtendedTime = NULL;

	if ( ! pFnResetAlertsForExtendedTime )
		pFnResetAlertsForExtendedTime = (UFunction*) UObject::GObjObjects()->Data[ 38519 ];

	ATgGame_execResetAlertsForExtendedTime_Parms ResetAlertsForExtendedTime_Parms;

	pFnResetAlertsForExtendedTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetAlertsForExtendedTime, &ResetAlertsForExtendedTime_Parms, NULL );

	pFnResetAlertsForExtendedTime->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.GetReviveTimeRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

int ATgGame::GetReviveTimeRemaining ( class AController* C )
{
	static UFunction* pFnGetReviveTimeRemaining = NULL;

	if ( ! pFnGetReviveTimeRemaining )
		pFnGetReviveTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 38516 ];

	ATgGame_execGetReviveTimeRemaining_Parms GetReviveTimeRemaining_Parms;
	GetReviveTimeRemaining_Parms.C = C;

	pFnGetReviveTimeRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReviveTimeRemaining, &GetReviveTimeRemaining_Parms, NULL );

	pFnGetReviveTimeRemaining->FunctionFlags |= 0x400;

	return GetReviveTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgGame.CalcDefenderReviveTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame::CalcDefenderReviveTime ( )
{
	static UFunction* pFnCalcDefenderReviveTime = NULL;

	if ( ! pFnCalcDefenderReviveTime )
		pFnCalcDefenderReviveTime = (UFunction*) UObject::GObjObjects()->Data[ 38514 ];

	ATgGame_execCalcDefenderReviveTime_Parms CalcDefenderReviveTime_Parms;

	pFnCalcDefenderReviveTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcDefenderReviveTime, &CalcDefenderReviveTime_Parms, NULL );

	pFnCalcDefenderReviveTime->FunctionFlags |= 0x400;

	return CalcDefenderReviveTime_Parms.ReturnValue;
};

// Function TgGame.TgGame.CalcAttackerReviveTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame::CalcAttackerReviveTime ( )
{
	static UFunction* pFnCalcAttackerReviveTime = NULL;

	if ( ! pFnCalcAttackerReviveTime )
		pFnCalcAttackerReviveTime = (UFunction*) UObject::GObjObjects()->Data[ 38512 ];

	ATgGame_execCalcAttackerReviveTime_Parms CalcAttackerReviveTime_Parms;

	pFnCalcAttackerReviveTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcAttackerReviveTime, &CalcAttackerReviveTime_Parms, NULL );

	pFnCalcAttackerReviveTime->FunctionFlags |= 0x400;

	return CalcAttackerReviveTime_Parms.ReturnValue;
};

// Function TgGame.TgGame.ReviveDefendersTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::ReviveDefendersTimer ( )
{
	static UFunction* pFnReviveDefendersTimer = NULL;

	if ( ! pFnReviveDefendersTimer )
		pFnReviveDefendersTimer = (UFunction*) UObject::GObjObjects()->Data[ 38511 ];

	ATgGame_execReviveDefendersTimer_Parms ReviveDefendersTimer_Parms;

	pFnReviveDefendersTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReviveDefendersTimer, &ReviveDefendersTimer_Parms, NULL );

	pFnReviveDefendersTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.ReviveAttackersTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::ReviveAttackersTimer ( )
{
	static UFunction* pFnReviveAttackersTimer = NULL;

	if ( ! pFnReviveAttackersTimer )
		pFnReviveAttackersTimer = (UFunction*) UObject::GObjObjects()->Data[ 38510 ];

	ATgGame_execReviveAttackersTimer_Parms ReviveAttackersTimer_Parms;

	pFnReviveAttackersTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReviveAttackersTimer, &ReviveAttackersTimer_Parms, NULL );

	pFnReviveAttackersTimer->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.UnRegisterForWaveRevive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void ATgGame::UnRegisterForWaveRevive ( class AController* C )
{
	static UFunction* pFnUnRegisterForWaveRevive = NULL;

	if ( ! pFnUnRegisterForWaveRevive )
		pFnUnRegisterForWaveRevive = (UFunction*) UObject::GObjObjects()->Data[ 38508 ];

	ATgGame_execUnRegisterForWaveRevive_Parms UnRegisterForWaveRevive_Parms;
	UnRegisterForWaveRevive_Parms.C = C;

	pFnUnRegisterForWaveRevive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterForWaveRevive, &UnRegisterForWaveRevive_Parms, NULL );

	pFnUnRegisterForWaveRevive->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.RegisterForWaveRevive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void ATgGame::RegisterForWaveRevive ( class AController* C )
{
	static UFunction* pFnRegisterForWaveRevive = NULL;

	if ( ! pFnRegisterForWaveRevive )
		pFnRegisterForWaveRevive = (UFunction*) UObject::GObjObjects()->Data[ 38506 ];

	ATgGame_execRegisterForWaveRevive_Parms RegisterForWaveRevive_Parms;
	RegisterForWaveRevive_Parms.C = C;

	pFnRegisterForWaveRevive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterForWaveRevive, &RegisterForWaveRevive_Parms, NULL );

	pFnRegisterForWaveRevive->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.GetRouteNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::GetRouteNumber ( )
{
	static UFunction* pFnGetRouteNumber = NULL;

	if ( ! pFnGetRouteNumber )
		pFnGetRouteNumber = (UFunction*) UObject::GObjObjects()->Data[ 38504 ];

	ATgGame_execGetRouteNumber_Parms GetRouteNumber_Parms;

	pFnGetRouteNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRouteNumber, &GetRouteNumber_Parms, NULL );

	pFnGetRouteNumber->FunctionFlags |= 0x400;

	return GetRouteNumber_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetDifficultyModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPriority                      ( CPF_Parm )

float ATgGame::GetDifficultyModifier ( int nPriority )
{
	static UFunction* pFnGetDifficultyModifier = NULL;

	if ( ! pFnGetDifficultyModifier )
		pFnGetDifficultyModifier = (UFunction*) UObject::GObjObjects()->Data[ 38501 ];

	ATgGame_execGetDifficultyModifier_Parms GetDifficultyModifier_Parms;
	GetDifficultyModifier_Parms.nPriority = nPriority;

	pFnGetDifficultyModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDifficultyModifier, &GetDifficultyModifier_Parms, NULL );

	pFnGetDifficultyModifier->FunctionFlags |= 0x400;

	return GetDifficultyModifier_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnAllHenchman
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::SpawnAllHenchman ( )
{
	static UFunction* pFnSpawnAllHenchman = NULL;

	if ( ! pFnSpawnAllHenchman )
		pFnSpawnAllHenchman = (UFunction*) UObject::GObjObjects()->Data[ 38500 ];

	ATgGame_execSpawnAllHenchman_Parms SpawnAllHenchman_Parms;

	pFnSpawnAllHenchman->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnAllHenchman, &SpawnAllHenchman_Parms, NULL );

	pFnSpawnAllHenchman->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.MissionTimeRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame::MissionTimeRemaining ( )
{
	static UFunction* pFnMissionTimeRemaining = NULL;

	if ( ! pFnMissionTimeRemaining )
		pFnMissionTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 38498 ];

	ATgGame_execMissionTimeRemaining_Parms MissionTimeRemaining_Parms;

	pFnMissionTimeRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMissionTimeRemaining, &MissionTimeRemaining_Parms, NULL );

	pFnMissionTimeRemaining->FunctionFlags |= 0x400;

	return MissionTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgGame.SendObjectivesOvertimeNotify
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::SendObjectivesOvertimeNotify ( )
{
	static UFunction* pFnSendObjectivesOvertimeNotify = NULL;

	if ( ! pFnSendObjectivesOvertimeNotify )
		pFnSendObjectivesOvertimeNotify = (UFunction*) UObject::GObjObjects()->Data[ 38497 ];

	ATgGame_execSendObjectivesOvertimeNotify_Parms SendObjectivesOvertimeNotify_Parms;

	pFnSendObjectivesOvertimeNotify->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendObjectivesOvertimeNotify, &SendObjectivesOvertimeNotify_Parms, NULL );

	pFnSendObjectivesOvertimeNotify->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.SetObjectivesInactive
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::SetObjectivesInactive ( )
{
	static UFunction* pFnSetObjectivesInactive = NULL;

	if ( ! pFnSetObjectivesInactive )
		pFnSetObjectivesInactive = (UFunction*) UObject::GObjObjects()->Data[ 38496 ];

	ATgGame_execSetObjectivesInactive_Parms SetObjectivesInactive_Parms;

	pFnSetObjectivesInactive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectivesInactive, &SetObjectivesInactive_Parms, NULL );

	pFnSetObjectivesInactive->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.UpdateMissionTimerEventWinVar
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::UpdateMissionTimerEventWinVar ( )
{
	static UFunction* pFnUpdateMissionTimerEventWinVar = NULL;

	if ( ! pFnUpdateMissionTimerEventWinVar )
		pFnUpdateMissionTimerEventWinVar = (UFunction*) UObject::GObjObjects()->Data[ 38495 ];

	ATgGame_execUpdateMissionTimerEventWinVar_Parms UpdateMissionTimerEventWinVar_Parms;

	pFnUpdateMissionTimerEventWinVar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMissionTimerEventWinVar, &UpdateMissionTimerEventWinVar_Parms, NULL );

	pFnUpdateMissionTimerEventWinVar->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.SendMissionTimerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nEventId                       ( CPF_Parm )

void ATgGame::SendMissionTimerEvent ( int nEventId )
{
	static UFunction* pFnSendMissionTimerEvent = NULL;

	if ( ! pFnSendMissionTimerEvent )
		pFnSendMissionTimerEvent = (UFunction*) UObject::GObjObjects()->Data[ 38493 ];

	ATgGame_execSendMissionTimerEvent_Parms SendMissionTimerEvent_Parms;
	SendMissionTimerEvent_Parms.nEventId = nEventId;

	pFnSendMissionTimerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendMissionTimerEvent, &SendMissionTimerEvent_Parms, NULL );

	pFnSendMissionTimerEvent->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.IsFinalObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame::IsFinalObjective ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnIsFinalObjective = NULL;

	if ( ! pFnIsFinalObjective )
		pFnIsFinalObjective = (UFunction*) UObject::GObjObjects()->Data[ 38490 ];

	ATgGame_execIsFinalObjective_Parms IsFinalObjective_Parms;
	IsFinalObjective_Parms.Objective = Objective;

	pFnIsFinalObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFinalObjective, &IsFinalObjective_Parms, NULL );

	pFnIsFinalObjective->FunctionFlags |= 0x400;

	return IsFinalObjective_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetFinalObjectivesList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class ATgMissionObjective* > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< class ATgMissionObjective* > ATgGame::GetFinalObjectivesList ( )
{
	static UFunction* pFnGetFinalObjectivesList = NULL;

	if ( ! pFnGetFinalObjectivesList )
		pFnGetFinalObjectivesList = (UFunction*) UObject::GObjObjects()->Data[ 38487 ];

	ATgGame_execGetFinalObjectivesList_Parms GetFinalObjectivesList_Parms;

	pFnGetFinalObjectivesList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFinalObjectivesList, &GetFinalObjectivesList_Parms, NULL );

	pFnGetFinalObjectivesList->FunctionFlags |= 0x400;

	return GetFinalObjectivesList_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnLandMarks
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::SpawnLandMarks ( )
{
	static UFunction* pFnSpawnLandMarks = NULL;

	if ( ! pFnSpawnLandMarks )
		pFnSpawnLandMarks = (UFunction*) UObject::GObjObjects()->Data[ 38486 ];

	ATgGame_execSpawnLandMarks_Parms SpawnLandMarks_Parms;

	pFnSpawnLandMarks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnLandMarks, &SpawnLandMarks_Parms, NULL );

	pFnSpawnLandMarks->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.AdjustBeaconForwardSpawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame::AdjustBeaconForwardSpawn ( int nPriority )
{
	static UFunction* pFnAdjustBeaconForwardSpawn = NULL;

	if ( ! pFnAdjustBeaconForwardSpawn )
		pFnAdjustBeaconForwardSpawn = (UFunction*) UObject::GObjObjects()->Data[ 38484 ];

	ATgGame_execAdjustBeaconForwardSpawn_Parms AdjustBeaconForwardSpawn_Parms;
	AdjustBeaconForwardSpawn_Parms.nPriority = nPriority;

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustBeaconForwardSpawn, &AdjustBeaconForwardSpawn_Parms, NULL );

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.LockoutObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame::LockoutObjectives ( int nPriority )
{
	static UFunction* pFnLockoutObjectives = NULL;

	if ( ! pFnLockoutObjectives )
		pFnLockoutObjectives = (UFunction*) UObject::GObjObjects()->Data[ 38482 ];

	ATgGame_execLockoutObjectives_Parms LockoutObjectives_Parms;
	LockoutObjectives_Parms.nPriority = nPriority;

	pFnLockoutObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockoutObjectives, &LockoutObjectives_Parms, NULL );

	pFnLockoutObjectives->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.CheckRandomObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::CheckRandomObjectives ( )
{
	static UFunction* pFnCheckRandomObjectives = NULL;

	if ( ! pFnCheckRandomObjectives )
		pFnCheckRandomObjectives = (UFunction*) UObject::GObjObjects()->Data[ 38481 ];

	ATgGame_execCheckRandomObjectives_Parms CheckRandomObjectives_Parms;

	pFnCheckRandomObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckRandomObjectives, &CheckRandomObjectives_Parms, NULL );

	pFnCheckRandomObjectives->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.UnlockObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPrority                       ( CPF_Parm )

void ATgGame::UnlockObjective ( int nPrority )
{
	static UFunction* pFnUnlockObjective = NULL;

	if ( ! pFnUnlockObjective )
		pFnUnlockObjective = (UFunction*) UObject::GObjObjects()->Data[ 38479 ];

	ATgGame_execUnlockObjective_Parms UnlockObjective_Parms;
	UnlockObjective_Parms.nPrority = nPrority;

	pFnUnlockObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockObjective, &UnlockObjective_Parms, NULL );

	pFnUnlockObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.NotifyPostCommitMapChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::NotifyPostCommitMapChange ( )
{
	static UFunction* pFnNotifyPostCommitMapChange = NULL;

	if ( ! pFnNotifyPostCommitMapChange )
		pFnNotifyPostCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 38478 ];

	ATgGame_execNotifyPostCommitMapChange_Parms NotifyPostCommitMapChange_Parms;

	pFnNotifyPostCommitMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyPostCommitMapChange, &NotifyPostCommitMapChange_Parms, NULL );

	pFnNotifyPostCommitMapChange->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.SetDeployPointAssociation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::SetDeployPointAssociation ( )
{
	static UFunction* pFnSetDeployPointAssociation = NULL;

	if ( ! pFnSetDeployPointAssociation )
		pFnSetDeployPointAssociation = (UFunction*) UObject::GObjObjects()->Data[ 38477 ];

	ATgGame_execSetDeployPointAssociation_Parms SetDeployPointAssociation_Parms;

	pFnSetDeployPointAssociation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDeployPointAssociation, &SetDeployPointAssociation_Parms, NULL );

	pFnSetDeployPointAssociation->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.GetGameVersion
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgGame::GetGameVersion ( )
{
	static UFunction* pFnGetGameVersion = NULL;

	if ( ! pFnGetGameVersion )
		pFnGetGameVersion = (UFunction*) UObject::GObjObjects()->Data[ 38475 ];

	ATgGame_execGetGameVersion_Parms GetGameVersion_Parms;

	pFnGetGameVersion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameVersion, &GetGameVersion_Parms, NULL );

	pFnGetGameVersion->FunctionFlags |= 0x400;

	return GetGameVersion_Parms.ReturnValue;
};

// Function TgGame.TgGame.DeactivateAlarm
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Originator                     ( CPF_Parm )
// int                            nGlobalAlarmId                 ( CPF_Parm )
// struct FString                 sTypeCode                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgGame::DeactivateAlarm ( class AActor* Originator, int nGlobalAlarmId, struct FString sTypeCode )
{
	static UFunction* pFnDeactivateAlarm = NULL;

	if ( ! pFnDeactivateAlarm )
		pFnDeactivateAlarm = (UFunction*) UObject::GObjObjects()->Data[ 38471 ];

	ATgGame_execDeactivateAlarm_Parms DeactivateAlarm_Parms;
	DeactivateAlarm_Parms.Originator = Originator;
	DeactivateAlarm_Parms.nGlobalAlarmId = nGlobalAlarmId;
	memcpy ( &DeactivateAlarm_Parms.sTypeCode, &sTypeCode, 0xC );

	pFnDeactivateAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateAlarm, &DeactivateAlarm_Parms, NULL );

	pFnDeactivateAlarm->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.ActivateAlarm
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Originator                     ( CPF_Parm )
// int                            nGlobalAlarmId                 ( CPF_Parm )
// struct FString                 sTypeCode                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ATgGame::ActivateAlarm ( class AActor* Originator, int nGlobalAlarmId, struct FString sTypeCode )
{
	static UFunction* pFnActivateAlarm = NULL;

	if ( ! pFnActivateAlarm )
		pFnActivateAlarm = (UFunction*) UObject::GObjObjects()->Data[ 38467 ];

	ATgGame_execActivateAlarm_Parms ActivateAlarm_Parms;
	ActivateAlarm_Parms.Originator = Originator;
	ActivateAlarm_Parms.nGlobalAlarmId = nGlobalAlarmId;
	memcpy ( &ActivateAlarm_Parms.sTypeCode, &sTypeCode, 0xC );

	pFnActivateAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateAlarm, &ActivateAlarm_Parms, NULL );

	pFnActivateAlarm->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.BuildAlarmsArray
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::BuildAlarmsArray ( )
{
	static UFunction* pFnBuildAlarmsArray = NULL;

	if ( ! pFnBuildAlarmsArray )
		pFnBuildAlarmsArray = (UFunction*) UObject::GObjObjects()->Data[ 38466 ];

	ATgGame_execBuildAlarmsArray_Parms BuildAlarmsArray_Parms;

	pFnBuildAlarmsArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildAlarmsArray, &BuildAlarmsArray_Parms, NULL );

	pFnBuildAlarmsArray->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.SpawnTemplatePlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPlayerController*     pTgPC                          ( CPF_Parm )
// struct FName                   sName                          ( CPF_Parm )

class APawn* ATgGame::SpawnTemplatePlayer ( class ATgPlayerController* pTgPC, struct FName sName )
{
	static UFunction* pFnSpawnTemplatePlayer = NULL;

	if ( ! pFnSpawnTemplatePlayer )
		pFnSpawnTemplatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 38462 ];

	ATgGame_execSpawnTemplatePlayer_Parms SpawnTemplatePlayer_Parms;
	SpawnTemplatePlayer_Parms.pTgPC = pTgPC;
	memcpy ( &SpawnTemplatePlayer_Parms.sName, &sName, 0x8 );

	pFnSpawnTemplatePlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnTemplatePlayer, &SpawnTemplatePlayer_Parms, NULL );

	pFnSpawnTemplatePlayer->FunctionFlags |= 0x400;

	return SpawnTemplatePlayer_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnBotPawn
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgAIController*         pTgAI                          ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )
// unsigned long                  bIgnoreCollision               ( CPF_OptionalParm | CPF_Parm )
// class ATgPawn*                 pOwnerPawn                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsDecoy                       ( CPF_OptionalParm | CPF_Parm )
// float                          fDeploySecs                    ( CPF_OptionalParm | CPF_Parm )

class APawn* ATgGame::SpawnBotPawn ( class ATgAIController* pTgAI, struct FVector vLocation, struct FRotator rRotation, unsigned long bIgnoreCollision, class ATgPawn* pOwnerPawn, unsigned long bIsDecoy, float fDeploySecs )
{
	static UFunction* pFnSpawnBotPawn = NULL;

	if ( ! pFnSpawnBotPawn )
		pFnSpawnBotPawn = (UFunction*) UObject::GObjObjects()->Data[ 38453 ];

	ATgGame_execSpawnBotPawn_Parms SpawnBotPawn_Parms;
	SpawnBotPawn_Parms.pTgAI = pTgAI;
	memcpy ( &SpawnBotPawn_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &SpawnBotPawn_Parms.rRotation, &rRotation, 0xC );
	SpawnBotPawn_Parms.bIgnoreCollision = bIgnoreCollision;
	SpawnBotPawn_Parms.pOwnerPawn = pOwnerPawn;
	SpawnBotPawn_Parms.bIsDecoy = bIsDecoy;
	SpawnBotPawn_Parms.fDeploySecs = fDeploySecs;

	pFnSpawnBotPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBotPawn, &SpawnBotPawn_Parms, NULL );

	pFnSpawnBotPawn->FunctionFlags |= 0x400;

	return SpawnBotPawn_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnBotById
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nBotId                         ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )
// unsigned long                  bKillController                ( CPF_Parm )
// class ATgBotFactory*           pFactory                       ( CPF_Parm )
// unsigned long                  bIgnoreCollision               ( CPF_OptionalParm | CPF_Parm )
// class ATgPawn*                 pOwnerPawn                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsDecoy                       ( CPF_OptionalParm | CPF_Parm )
// class UTgDeviceFire*           deviceFire                     ( CPF_OptionalParm | CPF_Parm )
// float                          fDeployAnimLength              ( CPF_OptionalParm | CPF_Parm )

class APawn* ATgGame::SpawnBotById ( int nBotId, struct FVector vLocation, struct FRotator rRotation, unsigned long bKillController, class ATgBotFactory* pFactory, unsigned long bIgnoreCollision, class ATgPawn* pOwnerPawn, unsigned long bIsDecoy, class UTgDeviceFire* deviceFire, float fDeployAnimLength )
{
	static UFunction* pFnSpawnBotById = NULL;

	if ( ! pFnSpawnBotById )
		pFnSpawnBotById = (UFunction*) UObject::GObjObjects()->Data[ 38441 ];

	ATgGame_execSpawnBotById_Parms SpawnBotById_Parms;
	SpawnBotById_Parms.nBotId = nBotId;
	memcpy ( &SpawnBotById_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &SpawnBotById_Parms.rRotation, &rRotation, 0xC );
	SpawnBotById_Parms.bKillController = bKillController;
	SpawnBotById_Parms.pFactory = pFactory;
	SpawnBotById_Parms.bIgnoreCollision = bIgnoreCollision;
	SpawnBotById_Parms.pOwnerPawn = pOwnerPawn;
	SpawnBotById_Parms.bIsDecoy = bIsDecoy;
	SpawnBotById_Parms.deviceFire = deviceFire;
	SpawnBotById_Parms.fDeployAnimLength = fDeployAnimLength;

	pFnSpawnBotById->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBotById, &SpawnBotById_Parms, NULL );

	pFnSpawnBotById->FunctionFlags |= 0x400;

	return SpawnBotById_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnBot
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sName                          ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )
// class ATgBotFactory*           pFactory                       ( CPF_Parm )
// unsigned long                  bIgnoreCollision               ( CPF_OptionalParm | CPF_Parm )
// class ATgPawn*                 pOwnerPawn                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsDecoy                       ( CPF_OptionalParm | CPF_Parm )
// class UTgDeviceFire*           deviceFire                     ( CPF_OptionalParm | CPF_Parm )
// float                          fDeploySecs                    ( CPF_OptionalParm | CPF_Parm )

class APawn* ATgGame::SpawnBot ( struct FName sName, struct FVector vLocation, struct FRotator rRotation, class ATgBotFactory* pFactory, unsigned long bIgnoreCollision, class ATgPawn* pOwnerPawn, unsigned long bIsDecoy, class UTgDeviceFire* deviceFire, float fDeploySecs )
{
	static UFunction* pFnSpawnBot = NULL;

	if ( ! pFnSpawnBot )
		pFnSpawnBot = (UFunction*) UObject::GObjObjects()->Data[ 38430 ];

	ATgGame_execSpawnBot_Parms SpawnBot_Parms;
	memcpy ( &SpawnBot_Parms.sName, &sName, 0x8 );
	memcpy ( &SpawnBot_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &SpawnBot_Parms.rRotation, &rRotation, 0xC );
	SpawnBot_Parms.pFactory = pFactory;
	SpawnBot_Parms.bIgnoreCollision = bIgnoreCollision;
	SpawnBot_Parms.pOwnerPawn = pOwnerPawn;
	SpawnBot_Parms.bIsDecoy = bIsDecoy;
	SpawnBot_Parms.deviceFire = deviceFire;
	SpawnBot_Parms.fDeploySecs = fDeploySecs;

	pFnSpawnBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnBot, &SpawnBot_Parms, NULL );

	pFnSpawnBot->FunctionFlags |= 0x400;

	return SpawnBot_Parms.ReturnValue;
};

// Function TgGame.TgGame.IsOpenWorld
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::IsOpenWorld ( )
{
	static UFunction* pFnIsOpenWorld = NULL;

	if ( ! pFnIsOpenWorld )
		pFnIsOpenWorld = (UFunction*) UObject::GObjObjects()->Data[ 38428 ];

	ATgGame_execIsOpenWorld_Parms IsOpenWorld_Parms;

	pFnIsOpenWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOpenWorld, &IsOpenWorld_Parms, NULL );

	pFnIsOpenWorld->FunctionFlags |= 0x400;

	return IsOpenWorld_Parms.ReturnValue;
};

// Function TgGame.TgGame.IsTerritory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::IsTerritory ( )
{
	static UFunction* pFnIsTerritory = NULL;

	if ( ! pFnIsTerritory )
		pFnIsTerritory = (UFunction*) UObject::GObjObjects()->Data[ 38426 ];

	ATgGame_execIsTerritory_Parms IsTerritory_Parms;

	pFnIsTerritory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTerritory, &IsTerritory_Parms, NULL );

	pFnIsTerritory->FunctionFlags |= 0x400;

	return IsTerritory_Parms.ReturnValue;
};

// Function TgGame.TgGame.IsTutorial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::IsTutorial ( )
{
	static UFunction* pFnIsTutorial = NULL;

	if ( ! pFnIsTutorial )
		pFnIsTutorial = (UFunction*) UObject::GObjObjects()->Data[ 38424 ];

	ATgGame_execIsTutorial_Parms IsTutorial_Parms;

	pFnIsTutorial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTutorial, &IsTutorial_Parms, NULL );

	pFnIsTutorial->FunctionFlags |= 0x400;

	return IsTutorial_Parms.ReturnValue;
};

// Function TgGame.TgGame.IsTraining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::IsTraining ( )
{
	static UFunction* pFnIsTraining = NULL;

	if ( ! pFnIsTraining )
		pFnIsTraining = (UFunction*) UObject::GObjObjects()->Data[ 38422 ];

	ATgGame_execIsTraining_Parms IsTraining_Parms;

	pFnIsTraining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTraining, &IsTraining_Parms, NULL );

	pFnIsTraining->FunctionFlags |= 0x400;

	return IsTraining_Parms.ReturnValue;
};

// Function TgGame.TgGame.IsMission
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::IsMission ( )
{
	static UFunction* pFnIsMission = NULL;

	if ( ! pFnIsMission )
		pFnIsMission = (UFunction*) UObject::GObjObjects()->Data[ 38420 ];

	ATgGame_execIsMission_Parms IsMission_Parms;

	pFnIsMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMission, &IsMission_Parms, NULL );

	pFnIsMission->FunctionFlags |= 0x400;

	return IsMission_Parms.ReturnValue;
};

// Function TgGame.TgGame.Loot
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            nLootTableId                   ( CPF_Parm )
// struct FVector                 vBaseLocation                  ( CPF_OptionalParm | CPF_Parm )
// int                            nTaskForce                     ( CPF_OptionalParm | CPF_Parm )

void ATgGame::Loot ( int nLootTableId, struct FVector vBaseLocation, int nTaskForce )
{
	static UFunction* pFnLoot = NULL;

	if ( ! pFnLoot )
		pFnLoot = (UFunction*) UObject::GObjObjects()->Data[ 38416 ];

	ATgGame_execLoot_Parms Loot_Parms;
	Loot_Parms.nLootTableId = nLootTableId;
	memcpy ( &Loot_Parms.vBaseLocation, &vBaseLocation, 0xC );
	Loot_Parms.nTaskForce = nTaskForce;

	pFnLoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoot, &Loot_Parms, NULL );

	pFnLoot->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.DbUpdateQuests
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::DbUpdateQuests ( )
{
	static UFunction* pFnDbUpdateQuests = NULL;

	if ( ! pFnDbUpdateQuests )
		pFnDbUpdateQuests = (UFunction*) UObject::GObjObjects()->Data[ 38415 ];

	ATgGame_execDbUpdateQuests_Parms DbUpdateQuests_Parms;

	pFnDbUpdateQuests->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDbUpdateQuests, &DbUpdateQuests_Parms, NULL );

	pFnDbUpdateQuests->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.DbSaveReward
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::DbSaveReward ( )
{
	static UFunction* pFnDbSaveReward = NULL;

	if ( ! pFnDbSaveReward )
		pFnDbSaveReward = (UFunction*) UObject::GObjObjects()->Data[ 38414 ];

	ATgGame_execDbSaveReward_Parms DbSaveReward_Parms;

	pFnDbSaveReward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDbSaveReward, &DbSaveReward_Parms, NULL );

	pFnDbSaveReward->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.CalcAndAwardMedal
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::CalcAndAwardMedal ( )
{
	static UFunction* pFnCalcAndAwardMedal = NULL;

	if ( ! pFnCalcAndAwardMedal )
		pFnCalcAndAwardMedal = (UFunction*) UObject::GObjObjects()->Data[ 38413 ];

	ATgGame_execCalcAndAwardMedal_Parms CalcAndAwardMedal_Parms;

	pFnCalcAndAwardMedal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcAndAwardMedal, &CalcAndAwardMedal_Parms, NULL );

	pFnCalcAndAwardMedal->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.FinishEndMission
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame::FinishEndMission ( )
{
	static UFunction* pFnFinishEndMission = NULL;

	if ( ! pFnFinishEndMission )
		pFnFinishEndMission = (UFunction*) UObject::GObjObjects()->Data[ 38411 ];

	ATgGame_execFinishEndMission_Parms FinishEndMission_Parms;

	pFnFinishEndMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishEndMission, &FinishEndMission_Parms, NULL );

	pFnFinishEndMission->FunctionFlags |= 0x400;

	return FinishEndMission_Parms.ReturnValue;
};

// Function TgGame.TgGame.BeginEndMission
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClearNextMapGame              ( CPF_OptionalParm | CPF_Parm )
// class ACameraActor*            endMissionCamera               ( CPF_OptionalParm | CPF_Parm )
// float                          fDelayOverride                 ( CPF_OptionalParm | CPF_Parm )

bool ATgGame::BeginEndMission ( unsigned long bClearNextMapGame, class ACameraActor* endMissionCamera, float fDelayOverride )
{
	static UFunction* pFnBeginEndMission = NULL;

	if ( ! pFnBeginEndMission )
		pFnBeginEndMission = (UFunction*) UObject::GObjObjects()->Data[ 38406 ];

	ATgGame_execBeginEndMission_Parms BeginEndMission_Parms;
	BeginEndMission_Parms.bClearNextMapGame = bClearNextMapGame;
	BeginEndMission_Parms.endMissionCamera = endMissionCamera;
	BeginEndMission_Parms.fDelayOverride = fDelayOverride;

	pFnBeginEndMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginEndMission, &BeginEndMission_Parms, NULL );

	pFnBeginEndMission->FunctionFlags |= 0x400;

	return BeginEndMission_Parms.ReturnValue;
};

// Function TgGame.TgGame.GetWinningTaskforce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgGame::GetWinningTaskforce ( )
{
	static UFunction* pFnGetWinningTaskforce = NULL;

	if ( ! pFnGetWinningTaskforce )
		pFnGetWinningTaskforce = (UFunction*) UObject::GObjObjects()->Data[ 38404 ];

	ATgGame_execGetWinningTaskforce_Parms GetWinningTaskforce_Parms;

	pFnGetWinningTaskforce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWinningTaskforce, &GetWinningTaskforce_Parms, NULL );

	pFnGetWinningTaskforce->FunctionFlags |= 0x400;

	return GetWinningTaskforce_Parms.ReturnValue;
};

// Function TgGame.TgGame.SpawnPlayerCharacter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgPlayerController*     pTgPC                          ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

class APawn* ATgGame::SpawnPlayerCharacter ( class ATgPlayerController* pTgPC, struct FVector vLocation )
{
	static UFunction* pFnSpawnPlayerCharacter = NULL;

	if ( ! pFnSpawnPlayerCharacter )
		pFnSpawnPlayerCharacter = (UFunction*) UObject::GObjObjects()->Data[ 38400 ];

	ATgGame_execSpawnPlayerCharacter_Parms SpawnPlayerCharacter_Parms;
	SpawnPlayerCharacter_Parms.pTgPC = pTgPC;
	memcpy ( &SpawnPlayerCharacter_Parms.vLocation, &vLocation, 0xC );

	pFnSpawnPlayerCharacter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPlayerCharacter, &SpawnPlayerCharacter_Parms, NULL );

	pFnSpawnPlayerCharacter->FunctionFlags |= 0x400;

	return SpawnPlayerCharacter_Parms.ReturnValue;
};

// Function TgGame.TgGame.SendCombatMessage
// [0x00026C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            nMsgId                         ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// int                            nAmount1                       ( CPF_OptionalParm | CPF_Parm )
// int                            nAmount2                       ( CPF_OptionalParm | CPF_Parm )

void ATgGame::eventSendCombatMessage ( int nMsgId, class AActor* Source, class AActor* Target, int nAmount1, int nAmount2 )
{
	static UFunction* pFnSendCombatMessage = NULL;

	if ( ! pFnSendCombatMessage )
		pFnSendCombatMessage = (UFunction*) UObject::GObjObjects()->Data[ 38394 ];

	ATgGame_eventSendCombatMessage_Parms SendCombatMessage_Parms;
	SendCombatMessage_Parms.nMsgId = nMsgId;
	SendCombatMessage_Parms.Source = Source;
	SendCombatMessage_Parms.Target = Target;
	SendCombatMessage_Parms.nAmount1 = nAmount1;
	SendCombatMessage_Parms.nAmount2 = nAmount2;

	pFnSendCombatMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCombatMessage, &SendCombatMessage_Parms, NULL );

	pFnSendCombatMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.TgFindPlayerSpawnLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             pPlayer                        ( CPF_Parm )
// struct FVector                 vLoc                           ( CPF_Parm | CPF_OutParm )

bool ATgGame::TgFindPlayerSpawnLocation ( class AController* pPlayer, struct FVector* vLoc )
{
	static UFunction* pFnTgFindPlayerSpawnLocation = NULL;

	if ( ! pFnTgFindPlayerSpawnLocation )
		pFnTgFindPlayerSpawnLocation = (UFunction*) UObject::GObjObjects()->Data[ 38390 ];

	ATgGame_execTgFindPlayerSpawnLocation_Parms TgFindPlayerSpawnLocation_Parms;
	TgFindPlayerSpawnLocation_Parms.pPlayer = pPlayer;

	pFnTgFindPlayerSpawnLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTgFindPlayerSpawnLocation, &TgFindPlayerSpawnLocation_Parms, NULL );

	pFnTgFindPlayerSpawnLocation->FunctionFlags |= 0x400;

	if ( vLoc )
		memcpy ( vLoc, &TgFindPlayerSpawnLocation_Parms.vLoc, 0xC );

	return TgFindPlayerSpawnLocation_Parms.ReturnValue;
};

// Function TgGame.TgGame.TgFindPlayerStart
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             pPlayer                        ( CPF_Parm )
// struct FString                 fsIncomingName                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ATgGame::TgFindPlayerStart ( class AController* pPlayer, struct FString fsIncomingName )
{
	static UFunction* pFnTgFindPlayerStart = NULL;

	if ( ! pFnTgFindPlayerStart )
		pFnTgFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 38386 ];

	ATgGame_execTgFindPlayerStart_Parms TgFindPlayerStart_Parms;
	TgFindPlayerStart_Parms.pPlayer = pPlayer;
	memcpy ( &TgFindPlayerStart_Parms.fsIncomingName, &fsIncomingName, 0xC );

	pFnTgFindPlayerStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTgFindPlayerStart, &TgFindPlayerStart_Parms, NULL );

	pFnTgFindPlayerStart->FunctionFlags |= 0x400;

	return TgFindPlayerStart_Parms.ReturnValue;
};

// Function TgGame.TgGame.InitGameRepInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::InitGameRepInfo ( )
{
	static UFunction* pFnInitGameRepInfo = NULL;

	if ( ! pFnInitGameRepInfo )
		pFnInitGameRepInfo = (UFunction*) UObject::GObjObjects()->Data[ 38385 ];

	ATgGame_execInitGameRepInfo_Parms InitGameRepInfo_Parms;

	pFnInitGameRepInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitGameRepInfo, &InitGameRepInfo_Parms, NULL );

	pFnInitGameRepInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 38384 ];

	ATgGame_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_City.SpawnDefaultPawnFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* ATgGame_City::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 38872 ];

	ATgGame_City_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function TgGame.TgGame_Mission.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool ATgGame_Mission::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 38761 ];

	ATgGame_Mission_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function TgGame.TgGame_Mission.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void ATgGame_Mission::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 38758 ];

	ATgGame_Mission_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function TgGame.TgGame_Mission.AddObjectiveScore
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void ATgGame_Mission::AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnAddObjectiveScore = NULL;

	if ( ! pFnAddObjectiveScore )
		pFnAddObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 38755 ];

	ATgGame_Mission_execAddObjectiveScore_Parms AddObjectiveScore_Parms;
	AddObjectiveScore_Parms.Scorer = Scorer;
	AddObjectiveScore_Parms.Score = Score;

	this->ProcessEvent ( pFnAddObjectiveScore, &AddObjectiveScore_Parms, NULL );
};

// Function TgGame.TgGame_Mission.StartMatch
// [0x00020002] 
// Parameters infos:

void ATgGame_Mission::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 38754 ];

	ATgGame_Mission_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function TgGame.TgGame_Mission.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Mission::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 38753 ];

	ATgGame_Mission_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Arena.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_Arena::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 38868 ];

	ATgGame_Arena_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_Arena.MissionTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventMissionTimer ( )
{
	static UFunction* pFnMissionTimer = NULL;

	if ( ! pFnMissionTimer )
		pFnMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 38865 ];

	ATgGame_Arena_eventMissionTimer_Parms MissionTimer_Parms;

	this->ProcessEvent ( pFnMissionTimer, &MissionTimer_Parms, NULL );
};

// Function TgGame.TgGame_Arena.ResetPlayField
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventResetPlayField ( )
{
	static UFunction* pFnResetPlayField = NULL;

	if ( ! pFnResetPlayField )
		pFnResetPlayField = (UFunction*) UObject::GObjObjects()->Data[ 38863 ];

	ATgGame_Arena_eventResetPlayField_Parms ResetPlayField_Parms;

	this->ProcessEvent ( pFnResetPlayField, &ResetPlayField_Parms, NULL );
};

// Function TgGame.TgGame_Arena.ResetObjectives
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventResetObjectives ( )
{
	static UFunction* pFnResetObjectives = NULL;

	if ( ! pFnResetObjectives )
		pFnResetObjectives = (UFunction*) UObject::GObjObjects()->Data[ 38860 ];

	ATgGame_Arena_eventResetObjectives_Parms ResetObjectives_Parms;

	this->ProcessEvent ( pFnResetObjectives, &ResetObjectives_Parms, NULL );
};

// Function TgGame.TgGame_Arena.RespawnPlayers
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventRespawnPlayers ( )
{
	static UFunction* pFnRespawnPlayers = NULL;

	if ( ! pFnRespawnPlayers )
		pFnRespawnPlayers = (UFunction*) UObject::GObjObjects()->Data[ 38854 ];

	ATgGame_Arena_eventRespawnPlayers_Parms RespawnPlayers_Parms;

	this->ProcessEvent ( pFnRespawnPlayers, &RespawnPlayers_Parms, NULL );
};

// Function TgGame.TgGame_Arena.MissionTimerBossIncrement
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventMissionTimerBossIncrement ( )
{
	static UFunction* pFnMissionTimerBossIncrement = NULL;

	if ( ! pFnMissionTimerBossIncrement )
		pFnMissionTimerBossIncrement = (UFunction*) UObject::GObjObjects()->Data[ 38818 ];

	ATgGame_Arena_eventMissionTimerBossIncrement_Parms MissionTimerBossIncrement_Parms;

	this->ProcessEvent ( pFnMissionTimerBossIncrement, &MissionTimerBossIncrement_Parms, NULL );
};

// Function TgGame.TgGame_Arena.StartGameTimer
// [0x00020002] 
// Parameters infos:

void ATgGame_Arena::StartGameTimer ( )
{
	static UFunction* pFnStartGameTimer = NULL;

	if ( ! pFnStartGameTimer )
		pFnStartGameTimer = (UFunction*) UObject::GObjObjects()->Data[ 38816 ];

	ATgGame_Arena_execStartGameTimer_Parms StartGameTimer_Parms;

	this->ProcessEvent ( pFnStartGameTimer, &StartGameTimer_Parms, NULL );
};

// Function TgGame.TgGame_Arena.ObjectiveUnlock
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventObjectiveUnlock ( )
{
	static UFunction* pFnObjectiveUnlock = NULL;

	if ( ! pFnObjectiveUnlock )
		pFnObjectiveUnlock = (UFunction*) UObject::GObjObjects()->Data[ 38815 ];

	ATgGame_Arena_eventObjectiveUnlock_Parms ObjectiveUnlock_Parms;

	this->ProcessEvent ( pFnObjectiveUnlock, &ObjectiveUnlock_Parms, NULL );
};

// Function TgGame.TgGame_Arena.NextRoundStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventNextRoundStart ( )
{
	static UFunction* pFnNextRoundStart = NULL;

	if ( ! pFnNextRoundStart )
		pFnNextRoundStart = (UFunction*) UObject::GObjObjects()->Data[ 38814 ];

	ATgGame_Arena_eventNextRoundStart_Parms NextRoundStart_Parms;

	this->ProcessEvent ( pFnNextRoundStart, &NextRoundStart_Parms, NULL );
};

// Function TgGame.TgGame_Arena.PreRoundFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventPreRoundFinished ( )
{
	static UFunction* pFnPreRoundFinished = NULL;

	if ( ! pFnPreRoundFinished )
		pFnPreRoundFinished = (UFunction*) UObject::GObjObjects()->Data[ 38813 ];

	ATgGame_Arena_eventPreRoundFinished_Parms PreRoundFinished_Parms;

	this->ProcessEvent ( pFnPreRoundFinished, &PreRoundFinished_Parms, NULL );
};

// Function TgGame.TgGame_Arena.GameStarted
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventGameStarted ( )
{
	static UFunction* pFnGameStarted = NULL;

	if ( ! pFnGameStarted )
		pFnGameStarted = (UFunction*) UObject::GObjObjects()->Data[ 38812 ];

	ATgGame_Arena_eventGameStarted_Parms GameStarted_Parms;

	this->ProcessEvent ( pFnGameStarted, &GameStarted_Parms, NULL );
};

// Function TgGame.TgGame_Arena.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Arena::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38811 ];

	ATgGame_Arena_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_Arena.CheckWinGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceWin                      ( CPF_Parm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_Arena::eventCheckWinGame ( unsigned long bForceWin, class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinGame = NULL;

	if ( ! pFnCheckWinGame )
		pFnCheckWinGame = (UFunction*) UObject::GObjObjects()->Data[ 38798 ];

	ATgGame_Arena_eventCheckWinGame_Parms CheckWinGame_Parms;
	CheckWinGame_Parms.bForceWin = bForceWin;

	this->ProcessEvent ( pFnCheckWinGame, &CheckWinGame_Parms, NULL );

	if ( Winner )
		*Winner = CheckWinGame_Parms.Winner;

	return CheckWinGame_Parms.ReturnValue;
};

// Function TgGame.TgGame_Arena.CheckWinRound
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_Arena::eventCheckWinRound ( class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinRound = NULL;

	if ( ! pFnCheckWinRound )
		pFnCheckWinRound = (UFunction*) UObject::GObjObjects()->Data[ 38782 ];

	ATgGame_Arena_eventCheckWinRound_Parms CheckWinRound_Parms;

	this->ProcessEvent ( pFnCheckWinRound, &CheckWinRound_Parms, NULL );

	if ( Winner )
		*Winner = CheckWinRound_Parms.Winner;

	return CheckWinRound_Parms.ReturnValue;
};

// Function TgGame.TgGame_Arena.FinalizeGameScore
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm )

void ATgGame_Arena::FinalizeGameScore ( class ATgRepInfo_TaskForce* Winner )
{
	static UFunction* pFnFinalizeGameScore = NULL;

	if ( ! pFnFinalizeGameScore )
		pFnFinalizeGameScore = (UFunction*) UObject::GObjObjects()->Data[ 38780 ];

	ATgGame_Arena_execFinalizeGameScore_Parms FinalizeGameScore_Parms;
	FinalizeGameScore_Parms.Winner = Winner;

	pFnFinalizeGameScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalizeGameScore, &FinalizeGameScore_Parms, NULL );

	pFnFinalizeGameScore->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Arena.FinalizeRoundScore
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm )

void ATgGame_Arena::FinalizeRoundScore ( class ATgRepInfo_TaskForce* Winner )
{
	static UFunction* pFnFinalizeRoundScore = NULL;

	if ( ! pFnFinalizeRoundScore )
		pFnFinalizeRoundScore = (UFunction*) UObject::GObjObjects()->Data[ 38778 ];

	ATgGame_Arena_execFinalizeRoundScore_Parms FinalizeRoundScore_Parms;
	FinalizeRoundScore_Parms.Winner = Winner;

	pFnFinalizeRoundScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalizeRoundScore, &FinalizeRoundScore_Parms, NULL );

	pFnFinalizeRoundScore->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Arena.AdjustBeaconForwardSpawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_Arena::AdjustBeaconForwardSpawn ( int nPriority )
{
	static UFunction* pFnAdjustBeaconForwardSpawn = NULL;

	if ( ! pFnAdjustBeaconForwardSpawn )
		pFnAdjustBeaconForwardSpawn = (UFunction*) UObject::GObjObjects()->Data[ 38776 ];

	ATgGame_Arena_execAdjustBeaconForwardSpawn_Parms AdjustBeaconForwardSpawn_Parms;
	AdjustBeaconForwardSpawn_Parms.nPriority = nPriority;

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustBeaconForwardSpawn, &AdjustBeaconForwardSpawn_Parms, NULL );

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Arena.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Arena::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 38775 ];

	ATgGame_Arena_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_CTF.OvertimeIsOverTester
// [0x00020102] 
// Parameters infos:

void ATgGame_CTF::OvertimeIsOverTester ( )
{
	static UFunction* pFnOvertimeIsOverTester = NULL;

	if ( ! pFnOvertimeIsOverTester )
		pFnOvertimeIsOverTester = (UFunction*) UObject::GObjObjects()->Data[ 38935 ];

	ATgGame_CTF_execOvertimeIsOverTester_Parms OvertimeIsOverTester_Parms;

	this->ProcessEvent ( pFnOvertimeIsOverTester, &OvertimeIsOverTester_Parms, NULL );
};

// Function TgGame.TgGame_CTF.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgGame_CTF::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 38933 ];

	ATgGame_CTF_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgGame_CTF.MissionTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_CTF::eventMissionTimer ( )
{
	static UFunction* pFnMissionTimer = NULL;

	if ( ! pFnMissionTimer )
		pFnMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 38928 ];

	ATgGame_CTF_eventMissionTimer_Parms MissionTimer_Parms;

	this->ProcessEvent ( pFnMissionTimer, &MissionTimer_Parms, NULL );
};

// Function TgGame.TgGame_CTF.CheckOvertime
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgGame_CTF::CheckOvertime ( )
{
	static UFunction* pFnCheckOvertime = NULL;

	if ( ! pFnCheckOvertime )
		pFnCheckOvertime = (UFunction*) UObject::GObjObjects()->Data[ 38917 ];

	ATgGame_CTF_execCheckOvertime_Parms CheckOvertime_Parms;

	this->ProcessEvent ( pFnCheckOvertime, &CheckOvertime_Parms, NULL );

	return CheckOvertime_Parms.ReturnValue;
};

// Function TgGame.TgGame_CTF.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_CTF::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 38913 ];

	ATgGame_CTF_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_CTF.CheckWinRound
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_CTF::eventCheckWinRound ( class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinRound = NULL;

	if ( ! pFnCheckWinRound )
		pFnCheckWinRound = (UFunction*) UObject::GObjObjects()->Data[ 38902 ];

	ATgGame_CTF_eventCheckWinRound_Parms CheckWinRound_Parms;

	this->ProcessEvent ( pFnCheckWinRound, &CheckWinRound_Parms, NULL );

	if ( Winner )
		*Winner = CheckWinRound_Parms.Winner;

	return CheckWinRound_Parms.ReturnValue;
};

// Function TgGame.TgGame_Defense.ResetObjectives
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ATgGame_Defense::eventResetObjectives ( )
{
	static UFunction* pFnResetObjectives = NULL;

	if ( ! pFnResetObjectives )
		pFnResetObjectives = (UFunction*) UObject::GObjObjects()->Data[ 38986 ];

	ATgGame_Defense_eventResetObjectives_Parms ResetObjectives_Parms;

	this->ProcessEvent ( pFnResetObjectives, &ResetObjectives_Parms, NULL );
};

// Function TgGame.TgGame_Defense.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_Defense::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 38982 ];

	ATgGame_Defense_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_Defense.RoundTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Defense::eventRoundTimer ( )
{
	static UFunction* pFnRoundTimer = NULL;

	if ( ! pFnRoundTimer )
		pFnRoundTimer = (UFunction*) UObject::GObjObjects()->Data[ 38966 ];

	ATgGame_Defense_eventRoundTimer_Parms RoundTimer_Parms;

	this->ProcessEvent ( pFnRoundTimer, &RoundTimer_Parms, NULL );
};

// Function TgGame.TgGame_Defense.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Defense::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38963 ];

	ATgGame_Defense_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_Defense.GetRoundDuration
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRoundNumber                   ( CPF_Parm )

float ATgGame_Defense::GetRoundDuration ( int nRoundNumber )
{
	static UFunction* pFnGetRoundDuration = NULL;

	if ( ! pFnGetRoundDuration )
		pFnGetRoundDuration = (UFunction*) UObject::GObjObjects()->Data[ 38960 ];

	ATgGame_Defense_execGetRoundDuration_Parms GetRoundDuration_Parms;
	GetRoundDuration_Parms.nRoundNumber = nRoundNumber;

	this->ProcessEvent ( pFnGetRoundDuration, &GetRoundDuration_Parms, NULL );

	return GetRoundDuration_Parms.ReturnValue;
};

// Function TgGame.TgGame_Defense.SendNewRoundMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Defense::SendNewRoundMessage ( )
{
	static UFunction* pFnSendNewRoundMessage = NULL;

	if ( ! pFnSendNewRoundMessage )
		pFnSendNewRoundMessage = (UFunction*) UObject::GObjObjects()->Data[ 38959 ];

	ATgGame_Defense_execSendNewRoundMessage_Parms SendNewRoundMessage_Parms;

	pFnSendNewRoundMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendNewRoundMessage, &SendNewRoundMessage_Parms, NULL );

	pFnSendNewRoundMessage->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.LockoutObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_Defense::LockoutObjectives ( int nPriority )
{
	static UFunction* pFnLockoutObjectives = NULL;

	if ( ! pFnLockoutObjectives )
		pFnLockoutObjectives = (UFunction*) UObject::GObjObjects()->Data[ 38957 ];

	ATgGame_Defense_execLockoutObjectives_Parms LockoutObjectives_Parms;
	LockoutObjectives_Parms.nPriority = nPriority;

	pFnLockoutObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockoutObjectives, &LockoutObjectives_Parms, NULL );

	pFnLockoutObjectives->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.UnlockObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_Defense::UnlockObjective ( int nPriority )
{
	static UFunction* pFnUnlockObjective = NULL;

	if ( ! pFnUnlockObjective )
		pFnUnlockObjective = (UFunction*) UObject::GObjObjects()->Data[ 38955 ];

	ATgGame_Defense_execUnlockObjective_Parms UnlockObjective_Parms;
	UnlockObjective_Parms.nPriority = nPriority;

	pFnUnlockObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockObjective, &UnlockObjective_Parms, NULL );

	pFnUnlockObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.FinalizeRoundScore
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm )

void ATgGame_Defense::FinalizeRoundScore ( class ATgRepInfo_TaskForce* Winner )
{
	static UFunction* pFnFinalizeRoundScore = NULL;

	if ( ! pFnFinalizeRoundScore )
		pFnFinalizeRoundScore = (UFunction*) UObject::GObjObjects()->Data[ 38953 ];

	ATgGame_Defense_execFinalizeRoundScore_Parms FinalizeRoundScore_Parms;
	FinalizeRoundScore_Parms.Winner = Winner;

	pFnFinalizeRoundScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinalizeRoundScore, &FinalizeRoundScore_Parms, NULL );

	pFnFinalizeRoundScore->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Defense::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 38952 ];

	ATgGame_Defense_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.TickWaveNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Defense::TickWaveNodes ( )
{
	static UFunction* pFnTickWaveNodes = NULL;

	if ( ! pFnTickWaveNodes )
		pFnTickWaveNodes = (UFunction*) UObject::GObjObjects()->Data[ 38951 ];

	ATgGame_Defense_execTickWaveNodes_Parms TickWaveNodes_Parms;

	pFnTickWaveNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickWaveNodes, &TickWaveNodes_Parms, NULL );

	pFnTickWaveNodes->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.CacheKismetConfiguration
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Defense::CacheKismetConfiguration ( )
{
	static UFunction* pFnCacheKismetConfiguration = NULL;

	if ( ! pFnCacheKismetConfiguration )
		pFnCacheKismetConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 38950 ];

	ATgGame_Defense_execCacheKismetConfiguration_Parms CacheKismetConfiguration_Parms;

	pFnCacheKismetConfiguration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheKismetConfiguration, &CacheKismetConfiguration_Parms, NULL );

	pFnCacheKismetConfiguration->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Defense.CheckWinRound
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_Defense::eventCheckWinRound ( class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinRound = NULL;

	if ( ! pFnCheckWinRound )
		pFnCheckWinRound = (UFunction*) UObject::GObjObjects()->Data[ 38947 ];

	ATgGame_Defense_eventCheckWinRound_Parms CheckWinRound_Parms;

	pFnCheckWinRound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckWinRound, &CheckWinRound_Parms, NULL );

	pFnCheckWinRound->FunctionFlags |= 0x400;

	if ( Winner )
		*Winner = CheckWinRound_Parms.Winner;

	return CheckWinRound_Parms.ReturnValue;
};

// Function TgGame.TgGame_Defense.CheckWinGame
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceWin                      ( CPF_Parm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_Defense::eventCheckWinGame ( unsigned long bForceWin, class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinGame = NULL;

	if ( ! pFnCheckWinGame )
		pFnCheckWinGame = (UFunction*) UObject::GObjObjects()->Data[ 38943 ];

	ATgGame_Defense_eventCheckWinGame_Parms CheckWinGame_Parms;
	CheckWinGame_Parms.bForceWin = bForceWin;

	pFnCheckWinGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckWinGame, &CheckWinGame_Parms, NULL );

	pFnCheckWinGame->FunctionFlags |= 0x400;

	if ( Winner )
		*Winner = CheckWinGame_Parms.Winner;

	return CheckWinGame_Parms.ReturnValue;
};

// Function TgGame.TgGame_PointRotation.SetMissionTimerShouldWait
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWait                          ( CPF_Parm )

void ATgGame_PointRotation::SetMissionTimerShouldWait ( unsigned long bWait )
{
	static UFunction* pFnSetMissionTimerShouldWait = NULL;

	if ( ! pFnSetMissionTimerShouldWait )
		pFnSetMissionTimerShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 39097 ];

	ATgGame_PointRotation_execSetMissionTimerShouldWait_Parms SetMissionTimerShouldWait_Parms;
	SetMissionTimerShouldWait_Parms.bWait = bWait;

	this->ProcessEvent ( pFnSetMissionTimerShouldWait, &SetMissionTimerShouldWait_Parms, NULL );
};

// Function TgGame.TgGame_PointRotation.UpdateShouldWait
// [0x00020002] 
// Parameters infos:

void ATgGame_PointRotation::UpdateShouldWait ( )
{
	static UFunction* pFnUpdateShouldWait = NULL;

	if ( ! pFnUpdateShouldWait )
		pFnUpdateShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 39096 ];

	ATgGame_PointRotation_execUpdateShouldWait_Parms UpdateShouldWait_Parms;

	this->ProcessEvent ( pFnUpdateShouldWait, &UpdateShouldWait_Parms, NULL );
};

// Function TgGame.TgGame_PointRotation.CheckWinRound
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_TaskForce*    Winner                         ( CPF_Parm | CPF_OutParm )

bool ATgGame_PointRotation::eventCheckWinRound ( class ATgRepInfo_TaskForce** Winner )
{
	static UFunction* pFnCheckWinRound = NULL;

	if ( ! pFnCheckWinRound )
		pFnCheckWinRound = (UFunction*) UObject::GObjObjects()->Data[ 39074 ];

	ATgGame_PointRotation_eventCheckWinRound_Parms CheckWinRound_Parms;

	this->ProcessEvent ( pFnCheckWinRound, &CheckWinRound_Parms, NULL );

	if ( Winner )
		*Winner = CheckWinRound_Parms.Winner;

	return CheckWinRound_Parms.ReturnValue;
};

// Function TgGame.TgGame_PointRotation.UnlockObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_PointRotation::UnlockObjective ( int nPriority )
{
	static UFunction* pFnUnlockObjective = NULL;

	if ( ! pFnUnlockObjective )
		pFnUnlockObjective = (UFunction*) UObject::GObjObjects()->Data[ 39072 ];

	ATgGame_PointRotation_execUnlockObjective_Parms UnlockObjective_Parms;
	UnlockObjective_Parms.nPriority = nPriority;

	pFnUnlockObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockObjective, &UnlockObjective_Parms, NULL );

	pFnUnlockObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_PointRotation.CalcNextObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_PointRotation::CalcNextObjective ( )
{
	static UFunction* pFnCalcNextObjective = NULL;

	if ( ! pFnCalcNextObjective )
		pFnCalcNextObjective = (UFunction*) UObject::GObjObjects()->Data[ 39071 ];

	ATgGame_PointRotation_execCalcNextObjective_Parms CalcNextObjective_Parms;

	pFnCalcNextObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcNextObjective, &CalcNextObjective_Parms, NULL );

	pFnCalcNextObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Control.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgGame_Control::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 38899 ];

	ATgGame_Control_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgGame_Control.SetMissionTimerShouldWait
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWait                          ( CPF_Parm )

void ATgGame_Control::SetMissionTimerShouldWait ( unsigned long bWait )
{
	static UFunction* pFnSetMissionTimerShouldWait = NULL;

	if ( ! pFnSetMissionTimerShouldWait )
		pFnSetMissionTimerShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 38897 ];

	ATgGame_Control_execSetMissionTimerShouldWait_Parms SetMissionTimerShouldWait_Parms;
	SetMissionTimerShouldWait_Parms.bWait = bWait;

	this->ProcessEvent ( pFnSetMissionTimerShouldWait, &SetMissionTimerShouldWait_Parms, NULL );
};

// Function TgGame.TgGame_Control.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_Control::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 38892 ];

	ATgGame_Control_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_Control.SendCountdownRemainingMessages
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          oldTimeRemaining               ( CPF_Parm )
// float                          newTimeRemaining               ( CPF_Parm )

void ATgGame_Control::SendCountdownRemainingMessages ( float oldTimeRemaining, float newTimeRemaining )
{
	static UFunction* pFnSendCountdownRemainingMessages = NULL;

	if ( ! pFnSendCountdownRemainingMessages )
		pFnSendCountdownRemainingMessages = (UFunction*) UObject::GObjObjects()->Data[ 38889 ];

	ATgGame_Control_execSendCountdownRemainingMessages_Parms SendCountdownRemainingMessages_Parms;
	SendCountdownRemainingMessages_Parms.oldTimeRemaining = oldTimeRemaining;
	SendCountdownRemainingMessages_Parms.newTimeRemaining = newTimeRemaining;

	pFnSendCountdownRemainingMessages->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCountdownRemainingMessages, &SendCountdownRemainingMessages_Parms, NULL );

	pFnSendCountdownRemainingMessages->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Control.CalcDefenderReviveTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame_Control::CalcDefenderReviveTime ( )
{
	static UFunction* pFnCalcDefenderReviveTime = NULL;

	if ( ! pFnCalcDefenderReviveTime )
		pFnCalcDefenderReviveTime = (UFunction*) UObject::GObjObjects()->Data[ 38887 ];

	ATgGame_Control_execCalcDefenderReviveTime_Parms CalcDefenderReviveTime_Parms;

	pFnCalcDefenderReviveTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcDefenderReviveTime, &CalcDefenderReviveTime_Parms, NULL );

	pFnCalcDefenderReviveTime->FunctionFlags |= 0x400;

	return CalcDefenderReviveTime_Parms.ReturnValue;
};

// Function TgGame.TgGame_Control.CalcAttackerReviveTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgGame_Control::CalcAttackerReviveTime ( )
{
	static UFunction* pFnCalcAttackerReviveTime = NULL;

	if ( ! pFnCalcAttackerReviveTime )
		pFnCalcAttackerReviveTime = (UFunction*) UObject::GObjObjects()->Data[ 38885 ];

	ATgGame_Control_execCalcAttackerReviveTime_Parms CalcAttackerReviveTime_Parms;

	pFnCalcAttackerReviveTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcAttackerReviveTime, &CalcAttackerReviveTime_Parms, NULL );

	pFnCalcAttackerReviveTime->FunctionFlags |= 0x400;

	return CalcAttackerReviveTime_Parms.ReturnValue;
};

// Function TgGame.TgGame_Control.TickCountdownCalculation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgGame_Control::TickCountdownCalculation ( float DeltaTime )
{
	static UFunction* pFnTickCountdownCalculation = NULL;

	if ( ! pFnTickCountdownCalculation )
		pFnTickCountdownCalculation = (UFunction*) UObject::GObjObjects()->Data[ 38883 ];

	ATgGame_Control_execTickCountdownCalculation_Parms TickCountdownCalculation_Parms;
	TickCountdownCalculation_Parms.DeltaTime = DeltaTime;

	pFnTickCountdownCalculation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickCountdownCalculation, &TickCountdownCalculation_Parms, NULL );

	pFnTickCountdownCalculation->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Ticket.MissionTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_Ticket::eventMissionTimer ( )
{
	static UFunction* pFnMissionTimer = NULL;

	if ( ! pFnMissionTimer )
		pFnMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 39009 ];

	ATgGame_Ticket_eventMissionTimer_Parms MissionTimer_Parms;

	this->ProcessEvent ( pFnMissionTimer, &MissionTimer_Parms, NULL );
};

// Function TgGame.TgGame_Ticket.SetMissionTimerShouldWait
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWait                          ( CPF_Parm )

void ATgGame_Ticket::SetMissionTimerShouldWait ( unsigned long bWait )
{
	static UFunction* pFnSetMissionTimerShouldWait = NULL;

	if ( ! pFnSetMissionTimerShouldWait )
		pFnSetMissionTimerShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 39007 ];

	ATgGame_Ticket_execSetMissionTimerShouldWait_Parms SetMissionTimerShouldWait_Parms;
	SetMissionTimerShouldWait_Parms.bWait = bWait;

	this->ProcessEvent ( pFnSetMissionTimerShouldWait, &SetMissionTimerShouldWait_Parms, NULL );
};

// Function TgGame.TgGame_Ticket.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_Ticket::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 39004 ];

	ATgGame_Ticket_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_Ticket.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgGame_Ticket::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39003 ];

	ATgGame_Ticket_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_Ticket.BeginEndMission
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClearNextMapGame              ( CPF_OptionalParm | CPF_Parm )
// class ACameraActor*            endMissionCamera               ( CPF_OptionalParm | CPF_Parm )
// float                          fDelayOverride                 ( CPF_OptionalParm | CPF_Parm )

bool ATgGame_Ticket::BeginEndMission ( unsigned long bClearNextMapGame, class ACameraActor* endMissionCamera, float fDelayOverride )
{
	static UFunction* pFnBeginEndMission = NULL;

	if ( ! pFnBeginEndMission )
		pFnBeginEndMission = (UFunction*) UObject::GObjObjects()->Data[ 38998 ];

	ATgGame_Ticket_execBeginEndMission_Parms BeginEndMission_Parms;
	BeginEndMission_Parms.bClearNextMapGame = bClearNextMapGame;
	BeginEndMission_Parms.endMissionCamera = endMissionCamera;
	BeginEndMission_Parms.fDelayOverride = fDelayOverride;

	pFnBeginEndMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginEndMission, &BeginEndMission_Parms, NULL );

	pFnBeginEndMission->FunctionFlags |= 0x400;

	return BeginEndMission_Parms.ReturnValue;
};

// Function TgGame.TgGame_Ticket.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Ticket::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 38997 ];

	ATgGame_Ticket_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Ticket.UpdateGameWinState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Ticket::UpdateGameWinState ( )
{
	static UFunction* pFnUpdateGameWinState = NULL;

	if ( ! pFnUpdateGameWinState )
		pFnUpdateGameWinState = (UFunction*) UObject::GObjObjects()->Data[ 38996 ];

	ATgGame_Ticket_execUpdateGameWinState_Parms UpdateGameWinState_Parms;

	pFnUpdateGameWinState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateGameWinState, &UpdateGameWinState_Parms, NULL );

	pFnUpdateGameWinState->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Ticket.AwardTickets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Ticket::AwardTickets ( )
{
	static UFunction* pFnAwardTickets = NULL;

	if ( ! pFnAwardTickets )
		pFnAwardTickets = (UFunction*) UObject::GObjObjects()->Data[ 38995 ];

	ATgGame_Ticket_execAwardTickets_Parms AwardTickets_Parms;

	pFnAwardTickets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardTickets, &AwardTickets_Parms, NULL );

	pFnAwardTickets->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_Ticket.TickTicketsCalculation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_Ticket::TickTicketsCalculation ( )
{
	static UFunction* pFnTickTicketsCalculation = NULL;

	if ( ! pFnTickTicketsCalculation )
		pFnTickTicketsCalculation = (UFunction*) UObject::GObjObjects()->Data[ 38994 ];

	ATgGame_Ticket_execTickTicketsCalculation_Parms TickTicketsCalculation_Parms;

	pFnTickTicketsCalculation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickTicketsCalculation, &TickTicketsCalculation_Parms, NULL );

	pFnTickTicketsCalculation->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_DualCTF.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgGame_DualCTF::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39019 ];

	ATgGame_DualCTF_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgGame_DualCTF.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_DualCTF::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 39015 ];

	ATgGame_DualCTF_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_DualCTF.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgGame_DualCTF::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39014 ];

	ATgGame_DualCTF_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_DualCTF.UpdateGameWinState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_DualCTF::UpdateGameWinState ( )
{
	static UFunction* pFnUpdateGameWinState = NULL;

	if ( ! pFnUpdateGameWinState )
		pFnUpdateGameWinState = (UFunction*) UObject::GObjObjects()->Data[ 39013 ];

	ATgGame_DualCTF_execUpdateGameWinState_Parms UpdateGameWinState_Parms;

	pFnUpdateGameWinState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateGameWinState, &UpdateGameWinState_Parms, NULL );

	pFnUpdateGameWinState->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_DualCTF.AwardTickets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_DualCTF::AwardTickets ( )
{
	static UFunction* pFnAwardTickets = NULL;

	if ( ! pFnAwardTickets )
		pFnAwardTickets = (UFunction*) UObject::GObjObjects()->Data[ 39012 ];

	ATgGame_DualCTF_execAwardTickets_Parms AwardTickets_Parms;

	pFnAwardTickets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardTickets, &AwardTickets_Parms, NULL );

	pFnAwardTickets->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorld.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_OpenWorld::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39040 ];

	ATgGame_OpenWorld_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_OpenWorld.ObjectiveTaken
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_OpenWorld::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 39037 ];

	ATgGame_OpenWorld_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_OpenWorld.TgFindPlayerStart
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             pPlayer                        ( CPF_Parm )
// struct FString                 fsIncomingName                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ATgGame_OpenWorld::TgFindPlayerStart ( class AController* pPlayer, struct FString fsIncomingName )
{
	static UFunction* pFnTgFindPlayerStart = NULL;

	if ( ! pFnTgFindPlayerStart )
		pFnTgFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 39033 ];

	ATgGame_OpenWorld_execTgFindPlayerStart_Parms TgFindPlayerStart_Parms;
	TgFindPlayerStart_Parms.pPlayer = pPlayer;
	memcpy ( &TgFindPlayerStart_Parms.fsIncomingName, &fsIncomingName, 0xC );

	pFnTgFindPlayerStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTgFindPlayerStart, &TgFindPlayerStart_Parms, NULL );

	pFnTgFindPlayerStart->FunctionFlags |= 0x400;

	return TgFindPlayerStart_Parms.ReturnValue;
};

// Function TgGame.TgGame_OpenWorld.InitGameRepInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_OpenWorld::InitGameRepInfo ( )
{
	static UFunction* pFnInitGameRepInfo = NULL;

	if ( ! pFnInitGameRepInfo )
		pFnInitGameRepInfo = (UFunction*) UObject::GObjObjects()->Data[ 39032 ];

	ATgGame_OpenWorld_execInitGameRepInfo_Parms InitGameRepInfo_Parms;

	pFnInitGameRepInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitGameRepInfo, &InitGameRepInfo_Parms, NULL );

	pFnInitGameRepInfo->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorld.AdjustBeaconForwardSpawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_OpenWorld::AdjustBeaconForwardSpawn ( int nPriority )
{
	static UFunction* pFnAdjustBeaconForwardSpawn = NULL;

	if ( ! pFnAdjustBeaconForwardSpawn )
		pFnAdjustBeaconForwardSpawn = (UFunction*) UObject::GObjObjects()->Data[ 39030 ];

	ATgGame_OpenWorld_execAdjustBeaconForwardSpawn_Parms AdjustBeaconForwardSpawn_Parms;
	AdjustBeaconForwardSpawn_Parms.nPriority = nPriority;

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustBeaconForwardSpawn, &AdjustBeaconForwardSpawn_Parms, NULL );

	pFnAdjustBeaconForwardSpawn->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorld.LockoutObjectives
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPriority                      ( CPF_Parm )

void ATgGame_OpenWorld::LockoutObjectives ( int nPriority )
{
	static UFunction* pFnLockoutObjectives = NULL;

	if ( ! pFnLockoutObjectives )
		pFnLockoutObjectives = (UFunction*) UObject::GObjObjects()->Data[ 39028 ];

	ATgGame_OpenWorld_execLockoutObjectives_Parms LockoutObjectives_Parms;
	LockoutObjectives_Parms.nPriority = nPriority;

	pFnLockoutObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockoutObjectives, &LockoutObjectives_Parms, NULL );

	pFnLockoutObjectives->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorld.UnlockObjective
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPrority                       ( CPF_Parm )

void ATgGame_OpenWorld::UnlockObjective ( int nPrority )
{
	static UFunction* pFnUnlockObjective = NULL;

	if ( ! pFnUnlockObjective )
		pFnUnlockObjective = (UFunction*) UObject::GObjObjects()->Data[ 39026 ];

	ATgGame_OpenWorld_execUnlockObjective_Parms UnlockObjective_Parms;
	UnlockObjective_Parms.nPrority = nPrority;

	pFnUnlockObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockObjective, &UnlockObjective_Parms, NULL );

	pFnUnlockObjective->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorldPVP.MissionTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_OpenWorldPVP::eventMissionTimer ( )
{
	static UFunction* pFnMissionTimer = NULL;

	if ( ! pFnMissionTimer )
		pFnMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 39067 ];

	ATgGame_OpenWorldPVP_eventMissionTimer_Parms MissionTimer_Parms;

	this->ProcessEvent ( pFnMissionTimer, &MissionTimer_Parms, NULL );
};

// Function TgGame.TgGame_OpenWorldPVP.SetMissionTimerShouldWait
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWait                          ( CPF_Parm )

void ATgGame_OpenWorldPVP::SetMissionTimerShouldWait ( unsigned long bWait )
{
	static UFunction* pFnSetMissionTimerShouldWait = NULL;

	if ( ! pFnSetMissionTimerShouldWait )
		pFnSetMissionTimerShouldWait = (UFunction*) UObject::GObjObjects()->Data[ 39065 ];

	ATgGame_OpenWorldPVP_execSetMissionTimerShouldWait_Parms SetMissionTimerShouldWait_Parms;
	SetMissionTimerShouldWait_Parms.bWait = bWait;

	this->ProcessEvent ( pFnSetMissionTimerShouldWait, &SetMissionTimerShouldWait_Parms, NULL );
};

// Function TgGame.TgGame_OpenWorldPVP.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgGame_OpenWorldPVP::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39062 ];

	ATgGame_OpenWorldPVP_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgGame_OpenWorldPVP.BeginEndMission
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClearNextMapGame              ( CPF_OptionalParm | CPF_Parm )
// class ACameraActor*            endMissionCamera               ( CPF_OptionalParm | CPF_Parm )
// float                          fDelayOverride                 ( CPF_OptionalParm | CPF_Parm )

bool ATgGame_OpenWorldPVP::BeginEndMission ( unsigned long bClearNextMapGame, class ACameraActor* endMissionCamera, float fDelayOverride )
{
	static UFunction* pFnBeginEndMission = NULL;

	if ( ! pFnBeginEndMission )
		pFnBeginEndMission = (UFunction*) UObject::GObjObjects()->Data[ 39057 ];

	ATgGame_OpenWorldPVP_execBeginEndMission_Parms BeginEndMission_Parms;
	BeginEndMission_Parms.bClearNextMapGame = bClearNextMapGame;
	BeginEndMission_Parms.endMissionCamera = endMissionCamera;
	BeginEndMission_Parms.fDelayOverride = fDelayOverride;

	pFnBeginEndMission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginEndMission, &BeginEndMission_Parms, NULL );

	pFnBeginEndMission->FunctionFlags |= 0x400;

	return BeginEndMission_Parms.ReturnValue;
};

// Function TgGame.TgGame_OpenWorldPVP.ObjectiveTaken
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     Objective                      ( CPF_Parm )

bool ATgGame_OpenWorldPVP::ObjectiveTaken ( class ATgMissionObjective* Objective )
{
	static UFunction* pFnObjectiveTaken = NULL;

	if ( ! pFnObjectiveTaken )
		pFnObjectiveTaken = (UFunction*) UObject::GObjObjects()->Data[ 39054 ];

	ATgGame_OpenWorldPVP_execObjectiveTaken_Parms ObjectiveTaken_Parms;
	ObjectiveTaken_Parms.Objective = Objective;

	pFnObjectiveTaken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObjectiveTaken, &ObjectiveTaken_Parms, NULL );

	pFnObjectiveTaken->FunctionFlags |= 0x400;

	return ObjectiveTaken_Parms.ReturnValue;
};

// Function TgGame.TgGame_OpenWorldPVP.LoadGameConfig
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_OpenWorldPVP::LoadGameConfig ( )
{
	static UFunction* pFnLoadGameConfig = NULL;

	if ( ! pFnLoadGameConfig )
		pFnLoadGameConfig = (UFunction*) UObject::GObjObjects()->Data[ 39053 ];

	ATgGame_OpenWorldPVP_execLoadGameConfig_Parms LoadGameConfig_Parms;

	pFnLoadGameConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameConfig, &LoadGameConfig_Parms, NULL );

	pFnLoadGameConfig->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorldPVP.UpdateGameWinState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_OpenWorldPVP::UpdateGameWinState ( )
{
	static UFunction* pFnUpdateGameWinState = NULL;

	if ( ! pFnUpdateGameWinState )
		pFnUpdateGameWinState = (UFunction*) UObject::GObjObjects()->Data[ 39052 ];

	ATgGame_OpenWorldPVP_execUpdateGameWinState_Parms UpdateGameWinState_Parms;

	pFnUpdateGameWinState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateGameWinState, &UpdateGameWinState_Parms, NULL );

	pFnUpdateGameWinState->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorldPVP.AwardTickets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_OpenWorldPVP::AwardTickets ( )
{
	static UFunction* pFnAwardTickets = NULL;

	if ( ! pFnAwardTickets )
		pFnAwardTickets = (UFunction*) UObject::GObjObjects()->Data[ 39051 ];

	ATgGame_OpenWorldPVP_execAwardTickets_Parms AwardTickets_Parms;

	pFnAwardTickets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAwardTickets, &AwardTickets_Parms, NULL );

	pFnAwardTickets->FunctionFlags |= 0x400;
};

// Function TgGame.TgGame_OpenWorldPVP.TickTicketsCalculation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgGame_OpenWorldPVP::TickTicketsCalculation ( )
{
	static UFunction* pFnTickTicketsCalculation = NULL;

	if ( ! pFnTickTicketsCalculation )
		pFnTickTicketsCalculation = (UFunction*) UObject::GObjObjects()->Data[ 39050 ];

	ATgGame_OpenWorldPVP_execTickTicketsCalculation_Parms TickTicketsCalculation_Parms;

	pFnTickTicketsCalculation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickTicketsCalculation, &TickTicketsCalculation_Parms, NULL );

	pFnTickTicketsCalculation->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Deployable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgRepInfo_Deployable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 46945 ];

	ATgRepInfo_Deployable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgRepInfo_Deployable.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_Deployable::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 46943 ];

	ATgRepInfo_Deployable_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgRepInfo_Deployable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_Deployable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46941 ];

	ATgRepInfo_Deployable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgRepInfo_Deployable.SetTaskForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void ATgRepInfo_Deployable::SetTaskForce ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnSetTaskForce = NULL;

	if ( ! pFnSetTaskForce )
		pFnSetTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 46939 ];

	ATgRepInfo_Deployable_execSetTaskForce_Parms SetTaskForce_Parms;
	SetTaskForce_Parms.tf = tf;

	pFnSetTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTaskForce, &SetTaskForce_Parms, NULL );

	pFnSetTaskForce->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Game.IsOpenPveMission
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_Game::IsOpenPveMission ( )
{
	static UFunction* pFnIsOpenPveMission = NULL;

	if ( ! pFnIsOpenPveMission )
		pFnIsOpenPveMission = (UFunction*) UObject::GObjObjects()->Data[ 47049 ];

	ATgRepInfo_Game_execIsOpenPveMission_Parms IsOpenPveMission_Parms;

	this->ProcessEvent ( pFnIsOpenPveMission, &IsOpenPveMission_Parms, NULL );

	return IsOpenPveMission_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.IsPvPMission
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_Game::eventIsPvPMission ( )
{
	static UFunction* pFnIsPvPMission = NULL;

	if ( ! pFnIsPvPMission )
		pFnIsPvPMission = (UFunction*) UObject::GObjObjects()->Data[ 47047 ];

	ATgRepInfo_Game_eventIsPvPMission_Parms IsPvPMission_Parms;

	this->ProcessEvent ( pFnIsPvPMission, &IsPvPMission_Parms, NULL );

	return IsPvPMission_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.IsPvEMission
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_Game::eventIsPvEMission ( )
{
	static UFunction* pFnIsPvEMission = NULL;

	if ( ! pFnIsPvEMission )
		pFnIsPvEMission = (UFunction*) UObject::GObjObjects()->Data[ 47045 ];

	ATgRepInfo_Game_eventIsPvEMission_Parms IsPvEMission_Parms;

	this->ProcessEvent ( pFnIsPvEMission, &IsPvEMission_Parms, NULL );

	return IsPvEMission_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.RemoveDRI
// [0x00020102] 
// Parameters infos:
// class ATgRepInfo_Deployable*   DRI                            ( CPF_Parm )

void ATgRepInfo_Game::RemoveDRI ( class ATgRepInfo_Deployable* DRI )
{
	static UFunction* pFnRemoveDRI = NULL;

	if ( ! pFnRemoveDRI )
		pFnRemoveDRI = (UFunction*) UObject::GObjObjects()->Data[ 47043 ];

	ATgRepInfo_Game_execRemoveDRI_Parms RemoveDRI_Parms;
	RemoveDRI_Parms.DRI = DRI;

	this->ProcessEvent ( pFnRemoveDRI, &RemoveDRI_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.AssignUniqueDeployableId
// [0x00020002] 
// Parameters infos:
// class ATgRepInfo_Deployable*   DRI                            ( CPF_Parm )

void ATgRepInfo_Game::AssignUniqueDeployableId ( class ATgRepInfo_Deployable* DRI )
{
	static UFunction* pFnAssignUniqueDeployableId = NULL;

	if ( ! pFnAssignUniqueDeployableId )
		pFnAssignUniqueDeployableId = (UFunction*) UObject::GObjObjects()->Data[ 47041 ];

	ATgRepInfo_Game_execAssignUniqueDeployableId_Parms AssignUniqueDeployableId_Parms;
	AssignUniqueDeployableId_Parms.DRI = DRI;

	this->ProcessEvent ( pFnAssignUniqueDeployableId, &AssignUniqueDeployableId_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.AddDRI
// [0x00020102] 
// Parameters infos:
// class ATgRepInfo_Deployable*   DRI                            ( CPF_Parm )

void ATgRepInfo_Game::AddDRI ( class ATgRepInfo_Deployable* DRI )
{
	static UFunction* pFnAddDRI = NULL;

	if ( ! pFnAddDRI )
		pFnAddDRI = (UFunction*) UObject::GObjObjects()->Data[ 47039 ];

	ATgRepInfo_Game_execAddDRI_Parms AddDRI_Parms;
	AddDRI_Parms.DRI = DRI;

	this->ProcessEvent ( pFnAddDRI, &AddDRI_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.MissionTimeUpdateAllClients
// [0x00020002] 
// Parameters infos:

void ATgRepInfo_Game::MissionTimeUpdateAllClients ( )
{
	static UFunction* pFnMissionTimeUpdateAllClients = NULL;

	if ( ! pFnMissionTimeUpdateAllClients )
		pFnMissionTimeUpdateAllClients = (UFunction*) UObject::GObjObjects()->Data[ 47038 ];

	ATgRepInfo_Game_execMissionTimeUpdateAllClients_Parms MissionTimeUpdateAllClients_Parms;

	this->ProcessEvent ( pFnMissionTimeUpdateAllClients, &MissionTimeUpdateAllClients_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.UpdateMissionTimer
// [0x00020102] 
// Parameters infos:

void ATgRepInfo_Game::UpdateMissionTimer ( )
{
	static UFunction* pFnUpdateMissionTimer = NULL;

	if ( ! pFnUpdateMissionTimer )
		pFnUpdateMissionTimer = (UFunction*) UObject::GObjObjects()->Data[ 47037 ];

	ATgRepInfo_Game_execUpdateMissionTimer_Parms UpdateMissionTimer_Parms;

	this->ProcessEvent ( pFnUpdateMissionTimer, &UpdateMissionTimer_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.InitMissionTime
// [0x00020102] 
// Parameters infos:

void ATgRepInfo_Game::InitMissionTime ( )
{
	static UFunction* pFnInitMissionTime = NULL;

	if ( ! pFnInitMissionTime )
		pFnInitMissionTime = (UFunction*) UObject::GObjObjects()->Data[ 47036 ];

	ATgRepInfo_Game_execInitMissionTime_Parms InitMissionTime_Parms;

	this->ProcessEvent ( pFnInitMissionTime, &InitMissionTime_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.ClientRespawnTimerDefenders
// [0x00020100] 
// Parameters infos:

void ATgRepInfo_Game::ClientRespawnTimerDefenders ( )
{
	static UFunction* pFnClientRespawnTimerDefenders = NULL;

	if ( ! pFnClientRespawnTimerDefenders )
		pFnClientRespawnTimerDefenders = (UFunction*) UObject::GObjObjects()->Data[ 47035 ];

	ATgRepInfo_Game_execClientRespawnTimerDefenders_Parms ClientRespawnTimerDefenders_Parms;

	this->ProcessEvent ( pFnClientRespawnTimerDefenders, &ClientRespawnTimerDefenders_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.ClientRespawnTimerAttackers
// [0x00020100] 
// Parameters infos:

void ATgRepInfo_Game::ClientRespawnTimerAttackers ( )
{
	static UFunction* pFnClientRespawnTimerAttackers = NULL;

	if ( ! pFnClientRespawnTimerAttackers )
		pFnClientRespawnTimerAttackers = (UFunction*) UObject::GObjObjects()->Data[ 47034 ];

	ATgRepInfo_Game_execClientRespawnTimerAttackers_Parms ClientRespawnTimerAttackers_Parms;

	this->ProcessEvent ( pFnClientRespawnTimerAttackers, &ClientRespawnTimerAttackers_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.GetApproxRespawnTimeRemaining
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bAttacker                      ( CPF_Parm )

float ATgRepInfo_Game::eventGetApproxRespawnTimeRemaining ( unsigned long bAttacker )
{
	static UFunction* pFnGetApproxRespawnTimeRemaining = NULL;

	if ( ! pFnGetApproxRespawnTimeRemaining )
		pFnGetApproxRespawnTimeRemaining = (UFunction*) UObject::GObjObjects()->Data[ 47031 ];

	ATgRepInfo_Game_eventGetApproxRespawnTimeRemaining_Parms GetApproxRespawnTimeRemaining_Parms;
	GetApproxRespawnTimeRemaining_Parms.bAttacker = bAttacker;

	this->ProcessEvent ( pFnGetApproxRespawnTimeRemaining, &GetApproxRespawnTimeRemaining_Parms, NULL );

	return GetApproxRespawnTimeRemaining_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.ServerUpdateTimer
// [0x00020002] 
// Parameters infos:

void ATgRepInfo_Game::ServerUpdateTimer ( )
{
	static UFunction* pFnServerUpdateTimer = NULL;

	if ( ! pFnServerUpdateTimer )
		pFnServerUpdateTimer = (UFunction*) UObject::GObjObjects()->Data[ 47030 ];

	ATgRepInfo_Game_execServerUpdateTimer_Parms ServerUpdateTimer_Parms;

	this->ProcessEvent ( pFnServerUpdateTimer, &ServerUpdateTimer_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_Game::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47029 ];

	ATgRepInfo_Game_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgRepInfo_Game::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47027 ];

	ATgRepInfo_Game_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgRepInfo_Game.IsObjectiveInList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgMissionObjective*     ObjectivePoint                 ( CPF_Parm )

bool ATgRepInfo_Game::IsObjectiveInList ( class ATgMissionObjective* ObjectivePoint )
{
	static UFunction* pFnIsObjectiveInList = NULL;

	if ( ! pFnIsObjectiveInList )
		pFnIsObjectiveInList = (UFunction*) UObject::GObjObjects()->Data[ 47024 ];

	ATgRepInfo_Game_execIsObjectiveInList_Parms IsObjectiveInList_Parms;
	IsObjectiveInList_Parms.ObjectivePoint = ObjectivePoint;

	pFnIsObjectiveInList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsObjectiveInList, &IsObjectiveInList_Parms, NULL );

	pFnIsObjectiveInList->FunctionFlags |= 0x400;

	return IsObjectiveInList_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.AddObjectivePointToList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgMissionObjective*     ObjectivePoint                 ( CPF_Parm )

void ATgRepInfo_Game::AddObjectivePointToList ( class ATgMissionObjective* ObjectivePoint )
{
	static UFunction* pFnAddObjectivePointToList = NULL;

	if ( ! pFnAddObjectivePointToList )
		pFnAddObjectivePointToList = (UFunction*) UObject::GObjObjects()->Data[ 47022 ];

	ATgRepInfo_Game_execAddObjectivePointToList_Parms AddObjectivePointToList_Parms;
	AddObjectivePointToList_Parms.ObjectivePoint = ObjectivePoint;

	pFnAddObjectivePointToList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddObjectivePointToList, &AddObjectivePointToList_Parms, NULL );

	pFnAddObjectivePointToList->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Game.GetApproximateServerTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgRepInfo_Game::GetApproximateServerTime ( )
{
	static UFunction* pFnGetApproximateServerTime = NULL;

	if ( ! pFnGetApproximateServerTime )
		pFnGetApproximateServerTime = (UFunction*) UObject::GObjObjects()->Data[ 47020 ];

	ATgRepInfo_Game_execGetApproximateServerTime_Parms GetApproximateServerTime_Parms;

	pFnGetApproximateServerTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetApproximateServerTime, &GetApproximateServerTime_Parms, NULL );

	pFnGetApproximateServerTime->FunctionFlags |= 0x400;

	return GetApproximateServerTime_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.UpdateDefenseAlarm
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Game::UpdateDefenseAlarm ( )
{
	static UFunction* pFnUpdateDefenseAlarm = NULL;

	if ( ! pFnUpdateDefenseAlarm )
		pFnUpdateDefenseAlarm = (UFunction*) UObject::GObjObjects()->Data[ 47019 ];

	ATgRepInfo_Game_execUpdateDefenseAlarm_Parms UpdateDefenseAlarm_Parms;

	pFnUpdateDefenseAlarm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDefenseAlarm, &UpdateDefenseAlarm_Parms, NULL );

	pFnUpdateDefenseAlarm->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Game.CheckIsEnemy
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool ATgRepInfo_Game::CheckIsEnemy ( class AActor* A, class AActor* B )
{
	static UFunction* pFnCheckIsEnemy = NULL;

	if ( ! pFnCheckIsEnemy )
		pFnCheckIsEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47015 ];

	ATgRepInfo_Game_execCheckIsEnemy_Parms CheckIsEnemy_Parms;
	CheckIsEnemy_Parms.A = A;
	CheckIsEnemy_Parms.B = B;

	pFnCheckIsEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckIsEnemy, &CheckIsEnemy_Parms, NULL );

	pFnCheckIsEnemy->FunctionFlags |= 0x400;

	return CheckIsEnemy_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.TaskForceEnumerate
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPlayerOnly                    ( CPF_OptionalParm | CPF_Parm )
// class ATgRepInfo_TaskForce*    rpTaskForce                    ( CPF_Parm | CPF_OutParm )
// int                            rnTaskForceNum                 ( CPF_Parm | CPF_OutParm )

bool ATgRepInfo_Game::TaskForceEnumerate ( unsigned long bPlayerOnly, class ATgRepInfo_TaskForce** rpTaskForce, int* rnTaskForceNum )
{
	static UFunction* pFnTaskForceEnumerate = NULL;

	if ( ! pFnTaskForceEnumerate )
		pFnTaskForceEnumerate = (UFunction*) UObject::GObjObjects()->Data[ 47010 ];

	ATgRepInfo_Game_execTaskForceEnumerate_Parms TaskForceEnumerate_Parms;
	TaskForceEnumerate_Parms.bPlayerOnly = bPlayerOnly;

	pFnTaskForceEnumerate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTaskForceEnumerate, &TaskForceEnumerate_Parms, NULL );

	pFnTaskForceEnumerate->FunctionFlags |= 0x400;

	if ( rpTaskForce )
		*rpTaskForce = TaskForceEnumerate_Parms.rpTaskForce;

	if ( rnTaskForceNum )
		*rnTaskForceNum = TaskForceEnumerate_Parms.rnTaskForceNum;

	return TaskForceEnumerate_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.CreateTaskForce
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskForceNum                  ( CPF_Parm )
// int                            nCoalition                     ( CPF_OptionalParm | CPF_Parm )

class ATgRepInfo_TaskForce* ATgRepInfo_Game::CreateTaskForce ( int nTaskForceNum, int nCoalition )
{
	static UFunction* pFnCreateTaskForce = NULL;

	if ( ! pFnCreateTaskForce )
		pFnCreateTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 47006 ];

	ATgRepInfo_Game_execCreateTaskForce_Parms CreateTaskForce_Parms;
	CreateTaskForce_Parms.nTaskForceNum = nTaskForceNum;
	CreateTaskForce_Parms.nCoalition = nCoalition;

	pFnCreateTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTaskForce, &CreateTaskForce_Parms, NULL );

	pFnCreateTaskForce->FunctionFlags |= 0x400;

	return CreateTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.GetTaskForce
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTaskForceNum                  ( CPF_Parm )
// unsigned long                  bCreate                        ( CPF_OptionalParm | CPF_Parm )

class ATgRepInfo_TaskForce* ATgRepInfo_Game::GetTaskForce ( int nTaskForceNum, unsigned long bCreate )
{
	static UFunction* pFnGetTaskForce = NULL;

	if ( ! pFnGetTaskForce )
		pFnGetTaskForce = (UFunction*) UObject::GObjObjects()->Data[ 47002 ];

	ATgRepInfo_Game_execGetTaskForce_Parms GetTaskForce_Parms;
	GetTaskForce_Parms.nTaskForceNum = nTaskForceNum;
	GetTaskForce_Parms.bCreate = bCreate;

	pFnGetTaskForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTaskForce, &GetTaskForce_Parms, NULL );

	pFnGetTaskForce->FunctionFlags |= 0x400;

	return GetTaskForce_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.GetTaskForceFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Actor                          ( CPF_Parm )

class ATgRepInfo_TaskForce* ATgRepInfo_Game::GetTaskForceFor ( class AActor* Actor )
{
	static UFunction* pFnGetTaskForceFor = NULL;

	if ( ! pFnGetTaskForceFor )
		pFnGetTaskForceFor = (UFunction*) UObject::GObjObjects()->Data[ 46999 ];

	ATgRepInfo_Game_execGetTaskForceFor_Parms GetTaskForceFor_Parms;
	GetTaskForceFor_Parms.Actor = Actor;

	pFnGetTaskForceFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTaskForceFor, &GetTaskForceFor_Parms, NULL );

	pFnGetTaskForceFor->FunctionFlags |= 0x400;

	return GetTaskForceFor_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.GetProjectile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgProjectile*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ATgProjectile* ATgRepInfo_Game::GetProjectile ( int nIndex )
{
	static UFunction* pFnGetProjectile = NULL;

	if ( ! pFnGetProjectile )
		pFnGetProjectile = (UFunction*) UObject::GObjObjects()->Data[ 46996 ];

	ATgRepInfo_Game_execGetProjectile_Parms GetProjectile_Parms;
	GetProjectile_Parms.nIndex = nIndex;

	pFnGetProjectile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectile, &GetProjectile_Parms, NULL );

	pFnGetProjectile->FunctionFlags |= 0x400;

	return GetProjectile_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Game.GetDeployable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDeployable*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ATgDeployable* ATgRepInfo_Game::GetDeployable ( int nIndex )
{
	static UFunction* pFnGetDeployable = NULL;

	if ( ! pFnGetDeployable )
		pFnGetDeployable = (UFunction*) UObject::GObjObjects()->Data[ 46993 ];

	ATgRepInfo_Game_execGetDeployable_Parms GetDeployable_Parms;
	GetDeployable_Parms.nIndex = nIndex;

	pFnGetDeployable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeployable, &GetDeployable_Parms, NULL );

	pFnGetDeployable->FunctionFlags |= 0x400;

	return GetDeployable_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_GameOpenWorld.CheckIsEnemy
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool ATgRepInfo_GameOpenWorld::CheckIsEnemy ( class AActor* A, class AActor* B )
{
	static UFunction* pFnCheckIsEnemy = NULL;

	if ( ! pFnCheckIsEnemy )
		pFnCheckIsEnemy = (UFunction*) UObject::GObjObjects()->Data[ 47056 ];

	ATgRepInfo_GameOpenWorld_execCheckIsEnemy_Parms CheckIsEnemy_Parms;
	CheckIsEnemy_Parms.A = A;
	CheckIsEnemy_Parms.B = B;

	pFnCheckIsEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckIsEnemy, &CheckIsEnemy_Parms, NULL );

	pFnCheckIsEnemy->FunctionFlags |= 0x400;

	return CheckIsEnemy_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_GameOpenWorld.GetCoalitionFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Actor                          ( CPF_Parm )

unsigned char ATgRepInfo_GameOpenWorld::GetCoalitionFor ( class AActor* Actor )
{
	static UFunction* pFnGetCoalitionFor = NULL;

	if ( ! pFnGetCoalitionFor )
		pFnGetCoalitionFor = (UFunction*) UObject::GObjObjects()->Data[ 47053 ];

	ATgRepInfo_GameOpenWorld_execGetCoalitionFor_Parms GetCoalitionFor_Parms;
	GetCoalitionFor_Parms.Actor = Actor;

	pFnGetCoalitionFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCoalitionFor, &GetCoalitionFor_Parms, NULL );

	pFnGetCoalitionFor->FunctionFlags |= 0x400;

	return GetCoalitionFor_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.GetLocalPlayerController
// [0x00020102] 
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* ATgRepInfo_Player::GetLocalPlayerController ( )
{
	static UFunction* pFnGetLocalPlayerController = NULL;

	if ( ! pFnGetLocalPlayerController )
		pFnGetLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 47143 ];

	ATgRepInfo_Player_execGetLocalPlayerController_Parms GetLocalPlayerController_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerController, &GetLocalPlayerController_Parms, NULL );

	return GetLocalPlayerController_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.ShouldBroadCastWelcomeMessage
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bExiting                       ( CPF_OptionalParm | CPF_Parm )

bool ATgRepInfo_Player::ShouldBroadCastWelcomeMessage ( unsigned long bExiting )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 47140 ];

	ATgRepInfo_Player_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;
	ShouldBroadCastWelcomeMessage_Parms.bExiting = bExiting;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.FindLocalPlayerPawn
// [0x00020102] 
// Parameters infos:
// class ATgPawn*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPawn* ATgRepInfo_Player::FindLocalPlayerPawn ( )
{
	static UFunction* pFnFindLocalPlayerPawn = NULL;

	if ( ! pFnFindLocalPlayerPawn )
		pFnFindLocalPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 47137 ];

	ATgRepInfo_Player_execFindLocalPlayerPawn_Parms FindLocalPlayerPawn_Parms;

	this->ProcessEvent ( pFnFindLocalPlayerPawn, &FindLocalPlayerPawn_Parms, NULL );

	return FindLocalPlayerPawn_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgRepInfo_Player::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47135 ];

	ATgRepInfo_Player_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.GetTaskForceNumber
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgRepInfo_Player::GetTaskForceNumber ( )
{
	static UFunction* pFnGetTaskForceNumber = NULL;

	if ( ! pFnGetTaskForceNumber )
		pFnGetTaskForceNumber = (UFunction*) UObject::GObjObjects()->Data[ 47133 ];

	ATgRepInfo_Player_execGetTaskForceNumber_Parms GetTaskForceNumber_Parms;

	this->ProcessEvent ( pFnGetTaskForceNumber, &GetTaskForceNumber_Parms, NULL );

	return GetTaskForceNumber_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.PostScore
// [0x00020102] 
// Parameters infos:
// float                          fScore                         ( CPF_Parm )

void ATgRepInfo_Player::PostScore ( float fScore )
{
	static UFunction* pFnPostScore = NULL;

	if ( ! pFnPostScore )
		pFnPostScore = (UFunction*) UObject::GObjObjects()->Data[ 47131 ];

	ATgRepInfo_Player_execPostScore_Parms PostScore_Parms;
	PostScore_Parms.fScore = fScore;

	this->ProcessEvent ( pFnPostScore, &PostScore_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.UpdateHealth
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nCurrentHealth                 ( CPF_Parm )
// int                            nMaxHealth                     ( CPF_Parm )

void ATgRepInfo_Player::eventUpdateHealth ( int nCurrentHealth, int nMaxHealth )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = (UFunction*) UObject::GObjObjects()->Data[ 47127 ];

	ATgRepInfo_Player_eventUpdateHealth_Parms UpdateHealth_Parms;
	UpdateHealth_Parms.nCurrentHealth = nCurrentHealth;
	UpdateHealth_Parms.nMaxHealth = nMaxHealth;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.UpdatePlayerLocation
// [0x00020002] 
// Parameters infos:

void ATgRepInfo_Player::UpdatePlayerLocation ( )
{
	static UFunction* pFnUpdatePlayerLocation = NULL;

	if ( ! pFnUpdatePlayerLocation )
		pFnUpdatePlayerLocation = (UFunction*) UObject::GObjObjects()->Data[ 47125 ];

	ATgRepInfo_Player_execUpdatePlayerLocation_Parms UpdatePlayerLocation_Parms;

	this->ProcessEvent ( pFnUpdatePlayerLocation, &UpdatePlayerLocation_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.UpdateIdAndProfile
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_Player::eventUpdateIdAndProfile ( )
{
	static UFunction* pFnUpdateIdAndProfile = NULL;

	if ( ! pFnUpdateIdAndProfile )
		pFnUpdateIdAndProfile = (UFunction*) UObject::GObjObjects()->Data[ 47123 ];

	ATgRepInfo_Player_eventUpdateIdAndProfile_Parms UpdateIdAndProfile_Parms;

	this->ProcessEvent ( pFnUpdateIdAndProfile, &UpdateIdAndProfile_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_Player::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 47122 ];

	ATgRepInfo_Player_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.ResetPlayerName
// [0x00020002] 
// Parameters infos:

void ATgRepInfo_Player::ResetPlayerName ( )
{
	static UFunction* pFnResetPlayerName = NULL;

	if ( ! pFnResetPlayerName )
		pFnResetPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 47121 ];

	ATgRepInfo_Player_execResetPlayerName_Parms ResetPlayerName_Parms;

	this->ProcessEvent ( pFnResetPlayerName, &ResetPlayerName_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.SetOrigPlayerName
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void ATgRepInfo_Player::SetOrigPlayerName ( struct FString S )
{
	static UFunction* pFnSetOrigPlayerName = NULL;

	if ( ! pFnSetOrigPlayerName )
		pFnSetOrigPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 47119 ];

	ATgRepInfo_Player_execSetOrigPlayerName_Parms SetOrigPlayerName_Parms;
	memcpy ( &SetOrigPlayerName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetOrigPlayerName, &SetOrigPlayerName_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgRepInfo_Player::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47118 ];

	ATgRepInfo_Player_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgRepInfo_Player.OnAllFlairManifestsLoaded
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::OnAllFlairManifestsLoaded ( )
{
	static UFunction* pFnOnAllFlairManifestsLoaded = NULL;

	if ( ! pFnOnAllFlairManifestsLoaded )
		pFnOnAllFlairManifestsLoaded = (UFunction*) UObject::GObjObjects()->Data[ 47117 ];

	ATgRepInfo_Player_execOnAllFlairManifestsLoaded_Parms OnAllFlairManifestsLoaded_Parms;

	pFnOnAllFlairManifestsLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAllFlairManifestsLoaded, &OnAllFlairManifestsLoaded_Parms, NULL );

	pFnOnAllFlairManifestsLoaded->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.UpdateDeviceAssetRefs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::UpdateDeviceAssetRefs ( )
{
	static UFunction* pFnUpdateDeviceAssetRefs = NULL;

	if ( ! pFnUpdateDeviceAssetRefs )
		pFnUpdateDeviceAssetRefs = (UFunction*) UObject::GObjObjects()->Data[ 47116 ];

	ATgRepInfo_Player_execUpdateDeviceAssetRefs_Parms UpdateDeviceAssetRefs_Parms;

	pFnUpdateDeviceAssetRefs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDeviceAssetRefs, &UpdateDeviceAssetRefs_Parms, NULL );

	pFnUpdateDeviceAssetRefs->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.UpdateCharacterAssetRefs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::UpdateCharacterAssetRefs ( )
{
	static UFunction* pFnUpdateCharacterAssetRefs = NULL;

	if ( ! pFnUpdateCharacterAssetRefs )
		pFnUpdateCharacterAssetRefs = (UFunction*) UObject::GObjObjects()->Data[ 47115 ];

	ATgRepInfo_Player_execUpdateCharacterAssetRefs_Parms UpdateCharacterAssetRefs_Parms;

	pFnUpdateCharacterAssetRefs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCharacterAssetRefs, &UpdateCharacterAssetRefs_Parms, NULL );

	pFnUpdateCharacterAssetRefs->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.GetPlayerNameForMsgDisplay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATgRepInfo_Player::GetPlayerNameForMsgDisplay ( )
{
	static UFunction* pFnGetPlayerNameForMsgDisplay = NULL;

	if ( ! pFnGetPlayerNameForMsgDisplay )
		pFnGetPlayerNameForMsgDisplay = (UFunction*) UObject::GObjObjects()->Data[ 47113 ];

	ATgRepInfo_Player_execGetPlayerNameForMsgDisplay_Parms GetPlayerNameForMsgDisplay_Parms;

	pFnGetPlayerNameForMsgDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerNameForMsgDisplay, &GetPlayerNameForMsgDisplay_Parms, NULL );

	pFnGetPlayerNameForMsgDisplay->FunctionFlags |= 0x400;

	return GetPlayerNameForMsgDisplay_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.GetCurrentLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ATgRepInfo_Player::GetCurrentLocation ( )
{
	static UFunction* pFnGetCurrentLocation = NULL;

	if ( ! pFnGetCurrentLocation )
		pFnGetCurrentLocation = (UFunction*) UObject::GObjObjects()->Data[ 47111 ];

	ATgRepInfo_Player_execGetCurrentLocation_Parms GetCurrentLocation_Parms;

	pFnGetCurrentLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLocation, &GetCurrentLocation_Parms, NULL );

	pFnGetCurrentLocation->FunctionFlags |= 0x400;

	return GetCurrentLocation_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.GetCurrentHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgRepInfo_Player::GetCurrentHealth ( )
{
	static UFunction* pFnGetCurrentHealth = NULL;

	if ( ! pFnGetCurrentHealth )
		pFnGetCurrentHealth = (UFunction*) UObject::GObjObjects()->Data[ 47109 ];

	ATgRepInfo_Player_execGetCurrentHealth_Parms GetCurrentHealth_Parms;

	pFnGetCurrentHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentHealth, &GetCurrentHealth_Parms, NULL );

	pFnGetCurrentHealth->FunctionFlags |= 0x400;

	return GetCurrentHealth_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.CheckMembership
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::CheckMembership ( )
{
	static UFunction* pFnCheckMembership = NULL;

	if ( ! pFnCheckMembership )
		pFnCheckMembership = (UFunction*) UObject::GObjObjects()->Data[ 47108 ];

	ATgRepInfo_Player_execCheckMembership_Parms CheckMembership_Parms;

	pFnCheckMembership->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckMembership, &CheckMembership_Parms, NULL );

	pFnCheckMembership->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.RemoveMinion
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AReplicationInfo*        pRepInfo                       ( CPF_Parm )

void ATgRepInfo_Player::RemoveMinion ( class AReplicationInfo* pRepInfo )
{
	static UFunction* pFnRemoveMinion = NULL;

	if ( ! pFnRemoveMinion )
		pFnRemoveMinion = (UFunction*) UObject::GObjObjects()->Data[ 47106 ];

	ATgRepInfo_Player_execRemoveMinion_Parms RemoveMinion_Parms;
	RemoveMinion_Parms.pRepInfo = pRepInfo;

	pFnRemoveMinion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMinion, &RemoveMinion_Parms, NULL );

	pFnRemoveMinion->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.AddMinion
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AReplicationInfo*        pRepInfo                       ( CPF_Parm )

void ATgRepInfo_Player::AddMinion ( class AReplicationInfo* pRepInfo )
{
	static UFunction* pFnAddMinion = NULL;

	if ( ! pFnAddMinion )
		pFnAddMinion = (UFunction*) UObject::GObjObjects()->Data[ 47104 ];

	ATgRepInfo_Player_execAddMinion_Parms AddMinion_Parms;
	AddMinion_Parms.pRepInfo = pRepInfo;

	pFnAddMinion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMinion, &AddMinion_Parms, NULL );

	pFnAddMinion->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.SetTeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_TaskForce*    pNewTeamRep                    ( CPF_Parm )

void ATgRepInfo_Player::SetTeam ( class ATgRepInfo_TaskForce* pNewTeamRep )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 47102 ];

	ATgRepInfo_Player_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.pNewTeamRep = pNewTeamRep;

	pFnSetTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );

	pFnSetTeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.UpdateLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::UpdateLevel ( )
{
	static UFunction* pFnUpdateLevel = NULL;

	if ( ! pFnUpdateLevel )
		pFnUpdateLevel = (UFunction*) UObject::GObjObjects()->Data[ 47101 ];

	ATgRepInfo_Player_execUpdateLevel_Parms UpdateLevel_Parms;

	pFnUpdateLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLevel, &UpdateLevel_Parms, NULL );

	pFnUpdateLevel->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.UpdateScoreBoard
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::UpdateScoreBoard ( )
{
	static UFunction* pFnUpdateScoreBoard = NULL;

	if ( ! pFnUpdateScoreBoard )
		pFnUpdateScoreBoard = (UFunction*) UObject::GObjObjects()->Data[ 47100 ];

	ATgRepInfo_Player_execUpdateScoreBoard_Parms UpdateScoreBoard_Parms;

	pFnUpdateScoreBoard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateScoreBoard, &UpdateScoreBoard_Parms, NULL );

	pFnUpdateScoreBoard->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.OnProfileChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_Player::OnProfileChanged ( )
{
	static UFunction* pFnOnProfileChanged = NULL;

	if ( ! pFnOnProfileChanged )
		pFnOnProfileChanged = (UFunction*) UObject::GObjObjects()->Data[ 47099 ];

	ATgRepInfo_Player_execOnProfileChanged_Parms OnProfileChanged_Parms;

	pFnOnProfileChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnProfileChanged, &OnProfileChanged_Parms, NULL );

	pFnOnProfileChanged->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_Player.GetCharacterId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgRepInfo_Player::GetCharacterId ( )
{
	static UFunction* pFnGetCharacterId = NULL;

	if ( ! pFnGetCharacterId )
		pFnGetCharacterId = (UFunction*) UObject::GObjObjects()->Data[ 47097 ];

	ATgRepInfo_Player_execGetCharacterId_Parms GetCharacterId_Parms;

	pFnGetCharacterId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCharacterId, &GetCharacterId_Parms, NULL );

	pFnGetCharacterId->FunctionFlags |= 0x400;

	return GetCharacterId_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.IsBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_Player::IsBot ( )
{
	static UFunction* pFnIsBot = NULL;

	if ( ! pFnIsBot )
		pFnIsBot = (UFunction*) UObject::GObjObjects()->Data[ 47095 ];

	ATgRepInfo_Player_execIsBot_Parms IsBot_Parms;

	pFnIsBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBot, &IsBot_Parms, NULL );

	pFnIsBot->FunctionFlags |= 0x400;

	return IsBot_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_Player.IsFriendlyWithLocalPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_Player::IsFriendlyWithLocalPlayer ( )
{
	static UFunction* pFnIsFriendlyWithLocalPlayer = NULL;

	if ( ! pFnIsFriendlyWithLocalPlayer )
		pFnIsFriendlyWithLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 47093 ];

	ATgRepInfo_Player_execIsFriendlyWithLocalPlayer_Parms IsFriendlyWithLocalPlayer_Parms;

	pFnIsFriendlyWithLocalPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendlyWithLocalPlayer, &IsFriendlyWithLocalPlayer_Parms, NULL );

	pFnIsFriendlyWithLocalPlayer->FunctionFlags |= 0x400;

	return IsFriendlyWithLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.NotifyInactive
// [0x00020002] 
// Parameters infos:

void ATgRepInfo_TaskForce::NotifyInactive ( )
{
	static UFunction* pFnNotifyInactive = NULL;

	if ( ! pFnNotifyInactive )
		pFnNotifyInactive = (UFunction*) UObject::GObjObjects()->Data[ 47226 ];

	ATgRepInfo_TaskForce_execNotifyInactive_Parms NotifyInactive_Parms;

	this->ProcessEvent ( pFnNotifyInactive, &NotifyInactive_Parms, NULL );
};

// Function TgGame.TgRepInfo_TaskForce.FindLocalPlayerController
// [0x00020102] 
// Parameters infos:
// class ATgPlayerController*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgPlayerController* ATgRepInfo_TaskForce::FindLocalPlayerController ( )
{
	static UFunction* pFnFindLocalPlayerController = NULL;

	if ( ! pFnFindLocalPlayerController )
		pFnFindLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 47223 ];

	ATgRepInfo_TaskForce_execFindLocalPlayerController_Parms FindLocalPlayerController_Parms;

	this->ProcessEvent ( pFnFindLocalPlayerController, &FindLocalPlayerController_Parms, NULL );

	return FindLocalPlayerController_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgRepInfo_TaskForce::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 47221 ];

	ATgRepInfo_TaskForce_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgRepInfo_TaskForce.HasActivePlayers
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_TaskForce::HasActivePlayers ( )
{
	static UFunction* pFnHasActivePlayers = NULL;

	if ( ! pFnHasActivePlayers )
		pFnHasActivePlayers = (UFunction*) UObject::GObjObjects()->Data[ 47217 ];

	ATgRepInfo_TaskForce_execHasActivePlayers_Parms HasActivePlayers_Parms;

	this->ProcessEvent ( pFnHasActivePlayers, &HasActivePlayers_Parms, NULL );

	return HasActivePlayers_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.RemoveFromTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATgRepInfo_TaskForce::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = (UFunction*) UObject::GObjObjects()->Data[ 47215 ];

	ATgRepInfo_TaskForce_execRemoveFromTeam_Parms RemoveFromTeam_Parms;
	RemoveFromTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function TgGame.TgRepInfo_TaskForce.PostInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgRepInfo_TaskForce::eventPostInit ( )
{
	static UFunction* pFnPostInit = NULL;

	if ( ! pFnPostInit )
		pFnPostInit = (UFunction*) UObject::GObjObjects()->Data[ 47214 ];

	ATgRepInfo_TaskForce_eventPostInit_Parms PostInit_Parms;

	this->ProcessEvent ( pFnPostInit, &PostInit_Parms, NULL );
};

// Function TgGame.TgRepInfo_TaskForce.UpdateHexFactoryList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_TaskForce::UpdateHexFactoryList ( )
{
	static UFunction* pFnUpdateHexFactoryList = NULL;

	if ( ! pFnUpdateHexFactoryList )
		pFnUpdateHexFactoryList = (UFunction*) UObject::GObjObjects()->Data[ 47213 ];

	ATgRepInfo_TaskForce_execUpdateHexFactoryList_Parms UpdateHexFactoryList_Parms;

	pFnUpdateHexFactoryList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHexFactoryList, &UpdateHexFactoryList_Parms, NULL );

	pFnUpdateHexFactoryList->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_TaskForce.PopulateHexFactoryList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_TaskForce::PopulateHexFactoryList ( )
{
	static UFunction* pFnPopulateHexFactoryList = NULL;

	if ( ! pFnPopulateHexFactoryList )
		pFnPopulateHexFactoryList = (UFunction*) UObject::GObjObjects()->Data[ 47212 ];

	ATgRepInfo_TaskForce_execPopulateHexFactoryList_Parms PopulateHexFactoryList_Parms;

	pFnPopulateHexFactoryList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateHexFactoryList, &PopulateHexFactoryList_Parms, NULL );

	pFnPopulateHexFactoryList->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_TaskForce.GetBeaconManager
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgTeamBeaconManager*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgTeamBeaconManager* ATgRepInfo_TaskForce::GetBeaconManager ( )
{
	static UFunction* pFnGetBeaconManager = NULL;

	if ( ! pFnGetBeaconManager )
		pFnGetBeaconManager = (UFunction*) UObject::GObjObjects()->Data[ 47210 ];

	ATgRepInfo_TaskForce_execGetBeaconManager_Parms GetBeaconManager_Parms;

	pFnGetBeaconManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBeaconManager, &GetBeaconManager_Parms, NULL );

	pFnGetBeaconManager->FunctionFlags |= 0x400;

	return GetBeaconManager_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.GetOpenPlayerSlots
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgRepInfo_TaskForce::GetOpenPlayerSlots ( )
{
	static UFunction* pFnGetOpenPlayerSlots = NULL;

	if ( ! pFnGetOpenPlayerSlots )
		pFnGetOpenPlayerSlots = (UFunction*) UObject::GObjObjects()->Data[ 47208 ];

	ATgRepInfo_TaskForce_execGetOpenPlayerSlots_Parms GetOpenPlayerSlots_Parms;

	pFnGetOpenPlayerSlots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOpenPlayerSlots, &GetOpenPlayerSlots_Parms, NULL );

	pFnGetOpenPlayerSlots->FunctionFlags |= 0x400;

	return GetOpenPlayerSlots_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.TeamRemoveFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATgRepInfo_TaskForce::TeamRemoveFrom ( class AController* Other )
{
	static UFunction* pFnTeamRemoveFrom = NULL;

	if ( ! pFnTeamRemoveFrom )
		pFnTeamRemoveFrom = (UFunction*) UObject::GObjObjects()->Data[ 47206 ];

	ATgRepInfo_TaskForce_execTeamRemoveFrom_Parms TeamRemoveFrom_Parms;
	TeamRemoveFrom_Parms.Other = Other;

	pFnTeamRemoveFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTeamRemoveFrom, &TeamRemoveFrom_Parms, NULL );

	pFnTeamRemoveFrom->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_TaskForce.IsLeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_Player*       pTgPri                         ( CPF_Parm )

bool ATgRepInfo_TaskForce::IsLeader ( class ATgRepInfo_Player* pTgPri )
{
	static UFunction* pFnIsLeader = NULL;

	if ( ! pFnIsLeader )
		pFnIsLeader = (UFunction*) UObject::GObjObjects()->Data[ 47203 ];

	ATgRepInfo_TaskForce_execIsLeader_Parms IsLeader_Parms;
	IsLeader_Parms.pTgPri = pTgPri;

	pFnIsLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLeader, &IsLeader_Parms, NULL );

	pFnIsLeader->FunctionFlags |= 0x400;

	return IsLeader_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.GetBot
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_Player*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ATgRepInfo_Player* ATgRepInfo_TaskForce::GetBot ( int nIndex )
{
	static UFunction* pFnGetBot = NULL;

	if ( ! pFnGetBot )
		pFnGetBot = (UFunction*) UObject::GObjObjects()->Data[ 47200 ];

	ATgRepInfo_TaskForce_execGetBot_Parms GetBot_Parms;
	GetBot_Parms.nIndex = nIndex;

	pFnGetBot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBot, &GetBot_Parms, NULL );

	pFnGetBot->FunctionFlags |= 0x400;

	return GetBot_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.GetPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_Player*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ATgRepInfo_Player* ATgRepInfo_TaskForce::GetPlayer ( int nIndex )
{
	static UFunction* pFnGetPlayer = NULL;

	if ( ! pFnGetPlayer )
		pFnGetPlayer = (UFunction*) UObject::GObjObjects()->Data[ 47197 ];

	ATgRepInfo_TaskForce_execGetPlayer_Parms GetPlayer_Parms;
	GetPlayer_Parms.nIndex = nIndex;

	pFnGetPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayer, &GetPlayer_Parms, NULL );

	pFnGetPlayer->FunctionFlags |= 0x400;

	return GetPlayer_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.GetBotCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgRepInfo_TaskForce::GetBotCount ( )
{
	static UFunction* pFnGetBotCount = NULL;

	if ( ! pFnGetBotCount )
		pFnGetBotCount = (UFunction*) UObject::GObjObjects()->Data[ 47195 ];

	ATgRepInfo_TaskForce_execGetBotCount_Parms GetBotCount_Parms;

	pFnGetBotCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBotCount, &GetBotCount_Parms, NULL );

	pFnGetBotCount->FunctionFlags |= 0x400;

	return GetBotCount_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.GetPlayerCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgRepInfo_TaskForce::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 47193 ];

	ATgRepInfo_TaskForce_execGetPlayerCount_Parms GetPlayerCount_Parms;

	pFnGetPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	pFnGetPlayerCount->FunctionFlags |= 0x400;

	return GetPlayerCount_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.AddDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgRepInfo_TaskForce::AddDeath ( )
{
	static UFunction* pFnAddDeath = NULL;

	if ( ! pFnAddDeath )
		pFnAddDeath = (UFunction*) UObject::GObjObjects()->Data[ 47192 ];

	ATgRepInfo_TaskForce_execAddDeath_Parms AddDeath_Parms;

	pFnAddDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDeath, &AddDeath_Parms, NULL );

	pFnAddDeath->FunctionFlags |= 0x400;
};

// Function TgGame.TgRepInfo_TaskForce.RepEvent
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   VarName                        ( CPF_Parm )

bool ATgRepInfo_TaskForce::RepEvent ( struct FName VarName )
{
	static UFunction* pFnRepEvent = NULL;

	if ( ! pFnRepEvent )
		pFnRepEvent = (UFunction*) UObject::GObjObjects()->Data[ 47189 ];

	ATgRepInfo_TaskForce_execRepEvent_Parms RepEvent_Parms;
	memcpy ( &RepEvent_Parms.VarName, &VarName, 0x8 );

	pFnRepEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRepEvent, &RepEvent_Parms, NULL );

	pFnRepEvent->FunctionFlags |= 0x400;

	return RepEvent_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.IsDefender
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_TaskForce::IsDefender ( )
{
	static UFunction* pFnIsDefender = NULL;

	if ( ! pFnIsDefender )
		pFnIsDefender = (UFunction*) UObject::GObjObjects()->Data[ 47187 ];

	ATgRepInfo_TaskForce_execIsDefender_Parms IsDefender_Parms;

	pFnIsDefender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDefender, &IsDefender_Parms, NULL );

	pFnIsDefender->FunctionFlags |= 0x400;

	return IsDefender_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.IsAttacker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgRepInfo_TaskForce::IsAttacker ( )
{
	static UFunction* pFnIsAttacker = NULL;

	if ( ! pFnIsAttacker )
		pFnIsAttacker = (UFunction*) UObject::GObjObjects()->Data[ 47185 ];

	ATgRepInfo_TaskForce_execIsAttacker_Parms IsAttacker_Parms;

	pFnIsAttacker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAttacker, &IsAttacker_Parms, NULL );

	pFnIsAttacker->FunctionFlags |= 0x400;

	return IsAttacker_Parms.ReturnValue;
};

// Function TgGame.TgRepInfo_TaskForce.CycleFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgRepInfo_Player*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgRepInfo_Player*       pFrom                          ( CPF_Parm )
// unsigned long                  bForward                       ( CPF_Parm )

class ATgRepInfo_Player* ATgRepInfo_TaskForce::CycleFrom ( class ATgRepInfo_Player* pFrom, unsigned long bForward )
{
	static UFunction* pFnCycleFrom = NULL;

	if ( ! pFnCycleFrom )
		pFnCycleFrom = (UFunction*) UObject::GObjObjects()->Data[ 47181 ];

	ATgRepInfo_TaskForce_execCycleFrom_Parms CycleFrom_Parms;
	CycleFrom_Parms.pFrom = pFrom;
	CycleFrom_Parms.bForward = bForward;

	pFnCycleFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCycleFrom, &CycleFrom_Parms, NULL );

	pFnCycleFrom->FunctionFlags |= 0x400;

	return CycleFrom_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgTeamBeaconManager::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 48473 ];

	ATgTeamBeaconManager_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgTeamBeaconManager.InitFor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ATgRepInfo_TaskForce*    tf                             ( CPF_Parm )

void ATgTeamBeaconManager::eventInitFor ( class ATgRepInfo_TaskForce* tf )
{
	static UFunction* pFnInitFor = NULL;

	if ( ! pFnInitFor )
		pFnInitFor = (UFunction*) UObject::GObjObjects()->Data[ 48471 ];

	ATgTeamBeaconManager_eventInitFor_Parms InitFor_Parms;
	InitFor_Parms.tf = tf;

	this->ProcessEvent ( pFnInitFor, &InitFor_Parms, NULL );
};

// Function TgGame.TgTeamBeaconManager.SetHealthPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPercent                       ( CPF_Parm )

void ATgTeamBeaconManager::SetHealthPercent ( float fPercent )
{
	static UFunction* pFnSetHealthPercent = NULL;

	if ( ! pFnSetHealthPercent )
		pFnSetHealthPercent = (UFunction*) UObject::GObjObjects()->Data[ 48469 ];

	ATgTeamBeaconManager_execSetHealthPercent_Parms SetHealthPercent_Parms;
	SetHealthPercent_Parms.fPercent = fPercent;

	pFnSetHealthPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHealthPercent, &SetHealthPercent_Parms, NULL );

	pFnSetHealthPercent->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamBeaconManager.SetHexItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UTgHexItemInstance*      newHexItem                     ( CPF_Parm )

void ATgTeamBeaconManager::SetHexItem ( class UTgHexItemInstance* newHexItem )
{
	static UFunction* pFnSetHexItem = NULL;

	if ( ! pFnSetHexItem )
		pFnSetHexItem = (UFunction*) UObject::GObjObjects()->Data[ 48467 ];

	ATgTeamBeaconManager_execSetHexItem_Parms SetHexItem_Parms;
	SetHexItem_Parms.newHexItem = newHexItem;

	pFnSetHexItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHexItem, &SetHexItem_Parms, NULL );

	pFnSetHexItem->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamBeaconManager.LoadInventoryBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgTeamBeaconManager::LoadInventoryBeacon ( )
{
	static UFunction* pFnLoadInventoryBeacon = NULL;

	if ( ! pFnLoadInventoryBeacon )
		pFnLoadInventoryBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48465 ];

	ATgTeamBeaconManager_execLoadInventoryBeacon_Parms LoadInventoryBeacon_Parms;

	pFnLoadInventoryBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadInventoryBeacon, &LoadInventoryBeacon_Parms, NULL );

	pFnLoadInventoryBeacon->FunctionFlags |= 0x400;

	return LoadInventoryBeacon_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.GetExitDeployableId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgTeamBeaconManager::GetExitDeployableId ( )
{
	static UFunction* pFnGetExitDeployableId = NULL;

	if ( ! pFnGetExitDeployableId )
		pFnGetExitDeployableId = (UFunction*) UObject::GObjObjects()->Data[ 48463 ];

	ATgTeamBeaconManager_execGetExitDeployableId_Parms GetExitDeployableId_Parms;

	pFnGetExitDeployableId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetExitDeployableId, &GetExitDeployableId_Parms, NULL );

	pFnGetExitDeployableId->FunctionFlags |= 0x400;

	return GetExitDeployableId_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.GetEntranceDeployableId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ATgTeamBeaconManager::GetEntranceDeployableId ( )
{
	static UFunction* pFnGetEntranceDeployableId = NULL;

	if ( ! pFnGetEntranceDeployableId )
		pFnGetEntranceDeployableId = (UFunction*) UObject::GObjObjects()->Data[ 48461 ];

	ATgTeamBeaconManager_execGetEntranceDeployableId_Parms GetEntranceDeployableId_Parms;

	pFnGetEntranceDeployableId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEntranceDeployableId, &GetEntranceDeployableId_Parms, NULL );

	pFnGetEntranceDeployableId->FunctionFlags |= 0x400;

	return GetEntranceDeployableId_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.BeaconDestroyedClient
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgTeamBeaconManager::BeaconDestroyedClient ( )
{
	static UFunction* pFnBeaconDestroyedClient = NULL;

	if ( ! pFnBeaconDestroyedClient )
		pFnBeaconDestroyedClient = (UFunction*) UObject::GObjObjects()->Data[ 48460 ];

	ATgTeamBeaconManager_execBeaconDestroyedClient_Parms BeaconDestroyedClient_Parms;

	pFnBeaconDestroyedClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeaconDestroyedClient, &BeaconDestroyedClient_Parms, NULL );

	pFnBeaconDestroyedClient->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamBeaconManager.PopulateBeaconFactoryList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgTeamBeaconManager::PopulateBeaconFactoryList ( )
{
	static UFunction* pFnPopulateBeaconFactoryList = NULL;

	if ( ! pFnPopulateBeaconFactoryList )
		pFnPopulateBeaconFactoryList = (UFunction*) UObject::GObjObjects()->Data[ 48459 ];

	ATgTeamBeaconManager_execPopulateBeaconFactoryList_Parms PopulateBeaconFactoryList_Parms;

	pFnPopulateBeaconFactoryList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateBeaconFactoryList, &PopulateBeaconFactoryList_Parms, NULL );

	pFnPopulateBeaconFactoryList->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamBeaconManager.UnRegisterBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDeploy_Beacon*        pBeacon                        ( CPF_Parm )

bool ATgTeamBeaconManager::UnRegisterBeacon ( class ATgDeploy_Beacon* pBeacon )
{
	static UFunction* pFnUnRegisterBeacon = NULL;

	if ( ! pFnUnRegisterBeacon )
		pFnUnRegisterBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48456 ];

	ATgTeamBeaconManager_execUnRegisterBeacon_Parms UnRegisterBeacon_Parms;
	UnRegisterBeacon_Parms.pBeacon = pBeacon;

	pFnUnRegisterBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterBeacon, &UnRegisterBeacon_Parms, NULL );

	pFnUnRegisterBeacon->FunctionFlags |= 0x400;

	return UnRegisterBeacon_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.RegisterBeacon
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDeploy_Beacon*        pBeacon                        ( CPF_Parm )
// unsigned long                  bDeployed                      ( CPF_OptionalParm | CPF_Parm )

bool ATgTeamBeaconManager::RegisterBeacon ( class ATgDeploy_Beacon* pBeacon, unsigned long bDeployed )
{
	static UFunction* pFnRegisterBeacon = NULL;

	if ( ! pFnRegisterBeacon )
		pFnRegisterBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48452 ];

	ATgTeamBeaconManager_execRegisterBeacon_Parms RegisterBeacon_Parms;
	RegisterBeacon_Parms.pBeacon = pBeacon;
	RegisterBeacon_Parms.bDeployed = bDeployed;

	pFnRegisterBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterBeacon, &RegisterBeacon_Parms, NULL );

	pFnRegisterBeacon->FunctionFlags |= 0x400;

	return RegisterBeacon_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.CheckBeacon
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bAttemptRespawn                ( CPF_OptionalParm | CPF_Parm )

bool ATgTeamBeaconManager::CheckBeacon ( unsigned long bAttemptRespawn )
{
	static UFunction* pFnCheckBeacon = NULL;

	if ( ! pFnCheckBeacon )
		pFnCheckBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48449 ];

	ATgTeamBeaconManager_execCheckBeacon_Parms CheckBeacon_Parms;
	CheckBeacon_Parms.bAttemptRespawn = bAttemptRespawn;

	pFnCheckBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckBeacon, &CheckBeacon_Parms, NULL );

	pFnCheckBeacon->FunctionFlags |= 0x400;

	return CheckBeacon_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.ShouldSpawnBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgTeamBeaconManager::ShouldSpawnBeacon ( )
{
	static UFunction* pFnShouldSpawnBeacon = NULL;

	if ( ! pFnShouldSpawnBeacon )
		pFnShouldSpawnBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48447 ];

	ATgTeamBeaconManager_execShouldSpawnBeacon_Parms ShouldSpawnBeacon_Parms;

	pFnShouldSpawnBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldSpawnBeacon, &ShouldSpawnBeacon_Parms, NULL );

	pFnShouldSpawnBeacon->FunctionFlags |= 0x400;

	return ShouldSpawnBeacon_Parms.ReturnValue;
};

// Function TgGame.TgTeamBeaconManager.SpawnNewBeaconForTeam
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ATgTeamBeaconManager::SpawnNewBeaconForTeam ( )
{
	static UFunction* pFnSpawnNewBeaconForTeam = NULL;

	if ( ! pFnSpawnNewBeaconForTeam )
		pFnSpawnNewBeaconForTeam = (UFunction*) UObject::GObjObjects()->Data[ 48446 ];

	ATgTeamBeaconManager_execSpawnNewBeaconForTeam_Parms SpawnNewBeaconForTeam_Parms;

	pFnSpawnNewBeaconForTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnNewBeaconForTeam, &SpawnNewBeaconForTeam_Parms, NULL );

	pFnSpawnNewBeaconForTeam->FunctionFlags |= 0x400;
};

// Function TgGame.TgTeamBeaconManager.GetBeacon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ATgDeploy_Beacon*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATgDeploy_Beacon* ATgTeamBeaconManager::GetBeacon ( )
{
	static UFunction* pFnGetBeacon = NULL;

	if ( ! pFnGetBeacon )
		pFnGetBeacon = (UFunction*) UObject::GObjObjects()->Data[ 48444 ];

	ATgTeamBeaconManager_execGetBeacon_Parms GetBeacon_Parms;

	pFnGetBeacon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBeacon, &GetBeacon_Parms, NULL );

	pFnGetBeacon->FunctionFlags |= 0x400;

	return GetBeacon_Parms.ReturnValue;
};

// Function TgGame.TgSkeletalMeshActorNPCVendor.PawnEnteredPresence
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class ATgPawn*                 P                              ( CPF_Parm )

void ATgSkeletalMeshActorNPCVendor::eventPawnEnteredPresence ( class ATgPawn* P )
{
	static UFunction* pFnPawnEnteredPresence = NULL;

	if ( ! pFnPawnEnteredPresence )
		pFnPawnEnteredPresence = (UFunction*) UObject::GObjObjects()->Data[ 48155 ];

	ATgSkeletalMeshActorNPCVendor_eventPawnEnteredPresence_Parms PawnEnteredPresence_Parms;
	PawnEnteredPresence_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredPresence, &PawnEnteredPresence_Parms, NULL );
};

// Function TgGame.TgSkeletalMeshActorNPCVendor.ClientHasFinishedPurchasing
// [0x00020102] 
// Parameters infos:

void ATgSkeletalMeshActorNPCVendor::ClientHasFinishedPurchasing ( )
{
	static UFunction* pFnClientHasFinishedPurchasing = NULL;

	if ( ! pFnClientHasFinishedPurchasing )
		pFnClientHasFinishedPurchasing = (UFunction*) UObject::GObjObjects()->Data[ 48154 ];

	ATgSkeletalMeshActorNPCVendor_execClientHasFinishedPurchasing_Parms ClientHasFinishedPurchasing_Parms;

	this->ProcessEvent ( pFnClientHasFinishedPurchasing, &ClientHasFinishedPurchasing_Parms, NULL );
};

// Function TgGame.TgAnimBlendByNPC.OnBecomeRelevant
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgAnimBlendByNPC::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 33396 ];

	UTgAnimBlendByNPC_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByAFK.OnChildAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       Child                          ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UTgAnimNodeBlendByAFK::eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnChildAnimEnd = NULL;

	if ( ! pFnOnChildAnimEnd )
		pFnOnChildAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 33588 ];

	UTgAnimNodeBlendByAFK_eventOnChildAnimEnd_Parms OnChildAnimEnd_Parms;
	OnChildAnimEnd_Parms.Child = Child;
	OnChildAnimEnd_Parms.PlayedTime = PlayedTime;
	OnChildAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnChildAnimEnd, &OnChildAnimEnd_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByAFK.StopAFK
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendByAFK::StopAFK ( )
{
	static UFunction* pFnStopAFK = NULL;

	if ( ! pFnStopAFK )
		pFnStopAFK = (UFunction*) UObject::GObjObjects()->Data[ 33587 ];

	UTgAnimNodeBlendByAFK_execStopAFK_Parms StopAFK_Parms;

	this->ProcessEvent ( pFnStopAFK, &StopAFK_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendByAFK.PlayAFK
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendByAFK::PlayAFK ( )
{
	static UFunction* pFnPlayAFK = NULL;

	if ( ! pFnPlayAFK )
		pFnPlayAFK = (UFunction*) UObject::GObjObjects()->Data[ 33586 ];

	UTgAnimNodeBlendByAFK_execPlayAFK_Parms PlayAFK_Parms;

	this->ProcessEvent ( pFnPlayAFK, &PlayAFK_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.OnChildAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       Child                          ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UTgAnimNodeBlendNPC::eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnChildAnimEnd = NULL;

	if ( ! pFnOnChildAnimEnd )
		pFnOnChildAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 33797 ];

	UTgAnimNodeBlendNPC_eventOnChildAnimEnd_Parms OnChildAnimEnd_Parms;
	OnChildAnimEnd_Parms.Child = Child;
	OnChildAnimEnd_Parms.PlayedTime = PlayedTime;
	OnChildAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnChildAnimEnd, &OnChildAnimEnd_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlaySaleAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlaySaleAnimation ( )
{
	static UFunction* pFnPlaySaleAnimation = NULL;

	if ( ! pFnPlaySaleAnimation )
		pFnPlaySaleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33796 ];

	UTgAnimNodeBlendNPC_execPlaySaleAnimation_Parms PlaySaleAnimation_Parms;

	this->ProcessEvent ( pFnPlaySaleAnimation, &PlaySaleAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlayNoSaleAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlayNoSaleAnimation ( )
{
	static UFunction* pFnPlayNoSaleAnimation = NULL;

	if ( ! pFnPlayNoSaleAnimation )
		pFnPlayNoSaleAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33795 ];

	UTgAnimNodeBlendNPC_execPlayNoSaleAnimation_Parms PlayNoSaleAnimation_Parms;

	this->ProcessEvent ( pFnPlayNoSaleAnimation, &PlayNoSaleAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlayCallOutAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlayCallOutAnimation ( )
{
	static UFunction* pFnPlayCallOutAnimation = NULL;

	if ( ! pFnPlayCallOutAnimation )
		pFnPlayCallOutAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33794 ];

	UTgAnimNodeBlendNPC_execPlayCallOutAnimation_Parms PlayCallOutAnimation_Parms;

	this->ProcessEvent ( pFnPlayCallOutAnimation, &PlayCallOutAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlayCustomerPresentAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlayCustomerPresentAnimation ( )
{
	static UFunction* pFnPlayCustomerPresentAnimation = NULL;

	if ( ! pFnPlayCustomerPresentAnimation )
		pFnPlayCustomerPresentAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33793 ];

	UTgAnimNodeBlendNPC_execPlayCustomerPresentAnimation_Parms PlayCustomerPresentAnimation_Parms;

	this->ProcessEvent ( pFnPlayCustomerPresentAnimation, &PlayCustomerPresentAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlayGreetingAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlayGreetingAnimation ( )
{
	static UFunction* pFnPlayGreetingAnimation = NULL;

	if ( ! pFnPlayGreetingAnimation )
		pFnPlayGreetingAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33792 ];

	UTgAnimNodeBlendNPC_execPlayGreetingAnimation_Parms PlayGreetingAnimation_Parms;

	this->ProcessEvent ( pFnPlayGreetingAnimation, &PlayGreetingAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.PlayNoCustomerPresentAnimation
// [0x00020002] 
// Parameters infos:

void UTgAnimNodeBlendNPC::PlayNoCustomerPresentAnimation ( )
{
	static UFunction* pFnPlayNoCustomerPresentAnimation = NULL;

	if ( ! pFnPlayNoCustomerPresentAnimation )
		pFnPlayNoCustomerPresentAnimation = (UFunction*) UObject::GObjObjects()->Data[ 33791 ];

	UTgAnimNodeBlendNPC_execPlayNoCustomerPresentAnimation_Parms PlayNoCustomerPresentAnimation_Parms;

	this->ProcessEvent ( pFnPlayNoCustomerPresentAnimation, &PlayNoCustomerPresentAnimation_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.QueueActiveChild
// [0x00020002] 
// Parameters infos:
// unsigned char                  QueuedChild                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UTgAnimNodeBlendNPC::QueueActiveChild ( unsigned char QueuedChild, float BlendTime )
{
	static UFunction* pFnQueueActiveChild = NULL;

	if ( ! pFnQueueActiveChild )
		pFnQueueActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 33788 ];

	UTgAnimNodeBlendNPC_execQueueActiveChild_Parms QueueActiveChild_Parms;
	QueueActiveChild_Parms.QueuedChild = QueuedChild;
	QueueActiveChild_Parms.BlendTime = BlendTime;

	this->ProcessEvent ( pFnQueueActiveChild, &QueueActiveChild_Parms, NULL );
};

// Function TgGame.TgAnimNodeBlendNPC.IsAnUninterruptableAnim
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )

bool UTgAnimNodeBlendNPC::IsAnUninterruptableAnim ( struct FName AnimName )
{
	static UFunction* pFnIsAnUninterruptableAnim = NULL;

	if ( ! pFnIsAnUninterruptableAnim )
		pFnIsAnUninterruptableAnim = (UFunction*) UObject::GObjObjects()->Data[ 33784 ];

	UTgAnimNodeBlendNPC_execIsAnUninterruptableAnim_Parms IsAnUninterruptableAnim_Parms;
	memcpy ( &IsAnUninterruptableAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnIsAnUninterruptableAnim, &IsAnUninterruptableAnim_Parms, NULL );

	return IsAnUninterruptableAnim_Parms.ReturnValue;
};

// Function TgGame.TgAnimNodeSequenceByBoneRotation.OnBecomeRelevant
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UTgAnimNodeSequenceByBoneRotation::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 33869 ];

	UTgAnimNodeSequenceByBoneRotation_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function TgGame.TgAnimNotify_ViewShake.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UTgAnimNotify_ViewShake::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 33962 ];

	UTgAnimNotify_ViewShake_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function TgGame.TgAnnouncer.PrecacheAnnouncements
// [0x00020002] 
// Parameters infos:

void ATgAnnouncer::PrecacheAnnouncements ( )
{
	static UFunction* pFnPrecacheAnnouncements = NULL;

	if ( ! pFnPrecacheAnnouncements )
		pFnPrecacheAnnouncements = (UFunction*) UObject::GObjObjects()->Data[ 34086 ];

	ATgAnnouncer_execPrecacheAnnouncements_Parms PrecacheAnnouncements_Parms;

	this->ProcessEvent ( pFnPrecacheAnnouncements, &PrecacheAnnouncements_Parms, NULL );
};

// Function TgGame.TgAnnouncer.PrecacheStatusSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AName                          ( CPF_Parm )

class USoundCue* ATgAnnouncer::PrecacheStatusSound ( struct FName AName )
{
	static UFunction* pFnPrecacheStatusSound = NULL;

	if ( ! pFnPrecacheStatusSound )
		pFnPrecacheStatusSound = (UFunction*) UObject::GObjObjects()->Data[ 34081 ];

	ATgAnnouncer_execPrecacheStatusSound_Parms PrecacheStatusSound_Parms;
	memcpy ( &PrecacheStatusSound_Parms.AName, &AName, 0x8 );

	this->ProcessEvent ( pFnPrecacheStatusSound, &PrecacheStatusSound_Parms, NULL );

	return PrecacheStatusSound_Parms.ReturnValue;
};

// Function TgGame.TgAnnouncer.GetSound
// [0x00020002] 
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AName                          ( CPF_Parm )

class USoundCue* ATgAnnouncer::GetSound ( struct FName AName )
{
	static UFunction* pFnGetSound = NULL;

	if ( ! pFnGetSound )
		pFnGetSound = (UFunction*) UObject::GObjObjects()->Data[ 34075 ];

	ATgAnnouncer_execGetSound_Parms GetSound_Parms;
	memcpy ( &GetSound_Parms.AName, &AName, 0x8 );

	this->ProcessEvent ( pFnGetSound, &GetSound_Parms, NULL );

	return GetSound_Parms.ReturnValue;
};

// Function TgGame.TgAnnouncer.GetFullSoundName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FAnnouncerPackageInfo   Package                        ( CPF_Parm )
// struct FName                   CueName                        ( CPF_Parm )

struct FString ATgAnnouncer::GetFullSoundName ( struct FAnnouncerPackageInfo Package, struct FName CueName )
{
	static UFunction* pFnGetFullSoundName = NULL;

	if ( ! pFnGetFullSoundName )
		pFnGetFullSoundName = (UFunction*) UObject::GObjObjects()->Data[ 34071 ];

	ATgAnnouncer_execGetFullSoundName_Parms GetFullSoundName_Parms;
	memcpy ( &GetFullSoundName_Parms.Package, &Package, 0x10 );
	memcpy ( &GetFullSoundName_Parms.CueName, &CueName, 0x8 );

	this->ProcessEvent ( pFnGetFullSoundName, &GetFullSoundName_Parms, NULL );

	return GetFullSoundName_Parms.ReturnValue;
};

// Function TgGame.TgAnnouncer.PlayAnnouncement
// [0x00020002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

void ATgAnnouncer::PlayAnnouncement ( class UClass* InMessageClass, unsigned char m_byMessageIndex )
{
	static UFunction* pFnPlayAnnouncement = NULL;

	if ( ! pFnPlayAnnouncement )
		pFnPlayAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 34068 ];

	ATgAnnouncer_execPlayAnnouncement_Parms PlayAnnouncement_Parms;
	PlayAnnouncement_Parms.InMessageClass = InMessageClass;
	PlayAnnouncement_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnPlayAnnouncement, &PlayAnnouncement_Parms, NULL );
};

// Function TgGame.TgAnnouncer.PlayAnnouncementNow
// [0x00020002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

void ATgAnnouncer::PlayAnnouncementNow ( class UClass* InMessageClass, unsigned char m_byMessageIndex )
{
	static UFunction* pFnPlayAnnouncementNow = NULL;

	if ( ! pFnPlayAnnouncementNow )
		pFnPlayAnnouncementNow = (UFunction*) UObject::GObjObjects()->Data[ 34064 ];

	ATgAnnouncer_execPlayAnnouncementNow_Parms PlayAnnouncementNow_Parms;
	PlayAnnouncementNow_Parms.InMessageClass = InMessageClass;
	PlayAnnouncementNow_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnPlayAnnouncementNow, &PlayAnnouncementNow_Parms, NULL );
};

// Function TgGame.TgAnnouncer.Timer
// [0x00020002] 
// Parameters infos:

void ATgAnnouncer::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 34060 ];

	ATgAnnouncer_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function TgGame.TgAnnouncer.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ATgAnnouncer::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34059 ];

	ATgAnnouncer_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgAnnouncer.Destroyed
// [0x00020002] 
// Parameters infos:

void ATgAnnouncer::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 34056 ];

	ATgAnnouncer_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgLocalMessage.PrecacheGameAnnouncements
// [0x00022000] 
// Parameters infos:
// class ATgAnnouncer*            Announcer                      ( CPF_Parm )
// class UClass*                  GameClass                      ( CPF_Parm )

void UTgLocalMessage::PrecacheGameAnnouncements ( class ATgAnnouncer* Announcer, class UClass* GameClass )
{
	static UFunction* pFnPrecacheGameAnnouncements = NULL;

	if ( ! pFnPrecacheGameAnnouncements )
		pFnPrecacheGameAnnouncements = (UFunction*) UObject::GObjObjects()->Data[ 40096 ];

	UTgLocalMessage_execPrecacheGameAnnouncements_Parms PrecacheGameAnnouncements_Parms;
	PrecacheGameAnnouncements_Parms.Announcer = Announcer;
	PrecacheGameAnnouncements_Parms.GameClass = GameClass;

	this->ProcessEvent ( pFnPrecacheGameAnnouncements, &PrecacheGameAnnouncements_Parms, NULL );
};

// Function TgGame.TgLocalMessage.AddAnnouncement
// [0x00022002] 
// Parameters infos:
// class ATgAnnouncer*            Announcer                      ( CPF_Parm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

void UTgLocalMessage::AddAnnouncement ( class ATgAnnouncer* Announcer, unsigned char m_byMessageIndex )
{
	static UFunction* pFnAddAnnouncement = NULL;

	if ( ! pFnAddAnnouncement )
		pFnAddAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 40091 ];

	UTgLocalMessage_execAddAnnouncement_Parms AddAnnouncement_Parms;
	AddAnnouncement_Parms.Announcer = Announcer;
	AddAnnouncement_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnAddAnnouncement, &AddAnnouncement_Parms, NULL );
};

// Function TgGame.TgLocalMessage.AnnouncementSound
// [0x00022002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

struct FName UTgLocalMessage::AnnouncementSound ( unsigned char m_byMessageIndex )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = (UFunction*) UObject::GObjObjects()->Data[ 40088 ];

	UTgLocalMessage_execAnnouncementSound_Parms AnnouncementSound_Parms;
	AnnouncementSound_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );

	return AnnouncementSound_Parms.ReturnValue;
};

// Function TgGame.TgLocalMessage.IsRewardAnnouncement
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

bool UTgLocalMessage::IsRewardAnnouncement ( unsigned char m_byMessageIndex )
{
	static UFunction* pFnIsRewardAnnouncement = NULL;

	if ( ! pFnIsRewardAnnouncement )
		pFnIsRewardAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 40085 ];

	UTgLocalMessage_execIsRewardAnnouncement_Parms IsRewardAnnouncement_Parms;
	IsRewardAnnouncement_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnIsRewardAnnouncement, &IsRewardAnnouncement_Parms, NULL );

	return IsRewardAnnouncement_Parms.ReturnValue;
};

// Function TgGame.TgLocalMessage.AnnouncementLevel
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  m_byMessageIndex               ( CPF_Parm )

unsigned char UTgLocalMessage::AnnouncementLevel ( unsigned char m_byMessageIndex )
{
	static UFunction* pFnAnnouncementLevel = NULL;

	if ( ! pFnAnnouncementLevel )
		pFnAnnouncementLevel = (UFunction*) UObject::GObjObjects()->Data[ 40082 ];

	UTgLocalMessage_execAnnouncementLevel_Parms AnnouncementLevel_Parms;
	AnnouncementLevel_Parms.m_byMessageIndex = m_byMessageIndex;

	this->ProcessEvent ( pFnAnnouncementLevel, &AnnouncementLevel_Parms, NULL );

	return AnnouncementLevel_Parms.ReturnValue;
};

// Function TgGame.TgBaseObjective_KOTH.UpdateObjectiveStatus
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eStatus                        ( CPF_Parm )

bool ATgBaseObjective_KOTH::eventUpdateObjectiveStatus ( unsigned char eStatus )
{
	static UFunction* pFnUpdateObjectiveStatus = NULL;

	if ( ! pFnUpdateObjectiveStatus )
		pFnUpdateObjectiveStatus = (UFunction*) UObject::GObjObjects()->Data[ 34549 ];

	ATgBaseObjective_KOTH_eventUpdateObjectiveStatus_Parms UpdateObjectiveStatus_Parms;
	UpdateObjectiveStatus_Parms.eStatus = eStatus;

	this->ProcessEvent ( pFnUpdateObjectiveStatus, &UpdateObjectiveStatus_Parms, NULL );

	return UpdateObjectiveStatus_Parms.ReturnValue;
};

// Function TgGame.TgBaseObjective_KOTH.OnObjectiveStatusChange
// [0x00020102] 
// Parameters infos:

void ATgBaseObjective_KOTH::OnObjectiveStatusChange ( )
{
	static UFunction* pFnOnObjectiveStatusChange = NULL;

	if ( ! pFnOnObjectiveStatusChange )
		pFnOnObjectiveStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 34545 ];

	ATgBaseObjective_KOTH_execOnObjectiveStatusChange_Parms OnObjectiveStatusChange_Parms;

	this->ProcessEvent ( pFnOnObjectiveStatusChange, &OnObjectiveStatusChange_Parms, NULL );
};

// Function TgGame.TgBaseObjective_KOTH.GetDefaultStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATgBaseObjective_KOTH::eventGetDefaultStatus ( )
{
	static UFunction* pFnGetDefaultStatus = NULL;

	if ( ! pFnGetDefaultStatus )
		pFnGetDefaultStatus = (UFunction*) UObject::GObjObjects()->Data[ 34543 ];

	ATgBaseObjective_KOTH_eventGetDefaultStatus_Parms GetDefaultStatus_Parms;

	this->ProcessEvent ( pFnGetDefaultStatus, &GetDefaultStatus_Parms, NULL );

	return GetDefaultStatus_Parms.ReturnValue;
};

// Function TgGame.TgBaseObjective_KOTH.ResetObjective
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgBaseObjective_KOTH::eventResetObjective ( )
{
	static UFunction* pFnResetObjective = NULL;

	if ( ! pFnResetObjective )
		pFnResetObjective = (UFunction*) UObject::GObjObjects()->Data[ 34542 ];

	ATgBaseObjective_KOTH_eventResetObjective_Parms ResetObjective_Parms;

	this->ProcessEvent ( pFnResetObjective, &ResetObjective_Parms, NULL );
};

// Function TgGame.TgDebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ATgDebugCameraController::OnDeactivate ( class APlayerController* PC )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 34910 ];

	ATgDebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;
	OnDeactivate_Parms.PC = PC;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function TgGame.TgDebugCameraController.Camera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   NewMode                        ( CPF_Parm )

void ATgDebugCameraController::Camera ( struct FName NewMode )
{
	static UFunction* pFnCamera = NULL;

	if ( ! pFnCamera )
		pFnCamera = (UFunction*) UObject::GObjObjects()->Data[ 34904 ];

	ATgDebugCameraController_execCamera_Parms Camera_Parms;
	memcpy ( &Camera_Parms.NewMode, &NewMode, 0x8 );

	this->ProcessEvent ( pFnCamera, &Camera_Parms, NULL );
};

// Function TgGame.TgDefensePoint.GetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgDefensePoint::GetMoveTarget ( )
{
	static UFunction* pFnGetMoveTarget = NULL;

	if ( ! pFnGetMoveTarget )
		pFnGetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 34937 ];

	ATgDefensePoint_execGetMoveTarget_Parms GetMoveTarget_Parms;

	this->ProcessEvent ( pFnGetMoveTarget, &GetMoveTarget_Parms, NULL );

	return GetMoveTarget_Parms.ReturnValue;
};

// Function TgGame.TgDefensePoint.HigherPriorityThan
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATgDefensePoint*         S                              ( CPF_Parm )
// class ATgAIController*         B                              ( CPF_Parm )

bool ATgDefensePoint::HigherPriorityThan ( class ATgDefensePoint* S, class ATgAIController* B )
{
	static UFunction* pFnHigherPriorityThan = NULL;

	if ( ! pFnHigherPriorityThan )
		pFnHigherPriorityThan = (UFunction*) UObject::GObjObjects()->Data[ 34933 ];

	ATgDefensePoint_execHigherPriorityThan_Parms HigherPriorityThan_Parms;
	HigherPriorityThan_Parms.S = S;
	HigherPriorityThan_Parms.B = B;

	this->ProcessEvent ( pFnHigherPriorityThan, &HigherPriorityThan_Parms, NULL );

	return HigherPriorityThan_Parms.ReturnValue;
};

// Function TgGame.TgDefensePoint.PreBeginPlay
// [0x00020000] 
// Parameters infos:

void ATgDefensePoint::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34932 ];

	ATgDefensePoint_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function TgGame.TgDefensePoint.FreePoint
// [0x00020002] 
// Parameters infos:

void ATgDefensePoint::FreePoint ( )
{
	static UFunction* pFnFreePoint = NULL;

	if ( ! pFnFreePoint )
		pFnFreePoint = (UFunction*) UObject::GObjObjects()->Data[ 34931 ];

	ATgDefensePoint_execFreePoint_Parms FreePoint_Parms;

	this->ProcessEvent ( pFnFreePoint, &FreePoint_Parms, NULL );
};

// Function TgGame.TgDefensePoint.Reset
// [0x00020002] 
// Parameters infos:

void ATgDefensePoint::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 34930 ];

	ATgDefensePoint_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function TgGame.TgDeviceVolumeInfo.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDeviceVolumeInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 37301 ];

	ATgDeviceVolumeInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function TgGame.TgDeviceVolumeInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgDeviceVolumeInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 37300 ];

	ATgDeviceVolumeInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgEffectBuff.TrackBuffDebuff
// [0x00020002] 
// Parameters infos:
// class AActor*                  Buffer                         ( CPF_Parm )
// class ATgPawn*                 Buffee                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void UTgEffectBuff::TrackBuffDebuff ( class AActor* Buffer, class ATgPawn* Buffee, struct FImpactInfo Impact )
{
	static UFunction* pFnTrackBuffDebuff = NULL;

	if ( ! pFnTrackBuffDebuff )
		pFnTrackBuffDebuff = (UFunction*) UObject::GObjObjects()->Data[ 37662 ];

	UTgEffectBuff_execTrackBuffDebuff_Parms TrackBuffDebuff_Parms;
	TrackBuffDebuff_Parms.Buffer = Buffer;
	TrackBuffDebuff_Parms.Buffee = Buffee;
	memcpy ( &TrackBuffDebuff_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnTrackBuffDebuff, &TrackBuffDebuff_Parms, NULL );
};

// Function TgGame.TgEffectBuff.Remove
// [0x00024002] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bResetToFollow                 ( CPF_OptionalParm | CPF_Parm )

void UTgEffectBuff::Remove ( class AActor* Target, unsigned long bResetToFollow )
{
	static UFunction* pFnRemove = NULL;

	if ( ! pFnRemove )
		pFnRemove = (UFunction*) UObject::GObjObjects()->Data[ 37659 ];

	UTgEffectBuff_execRemove_Parms Remove_Parms;
	Remove_Parms.Target = Target;
	Remove_Parms.bResetToFollow = bResetToFollow;

	this->ProcessEvent ( pFnRemove, &Remove_Parms, NULL );
};

// Function TgGame.TgEffectBuff.ApplyEffect
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bConvertDOT                    ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectBuff::ApplyEffect ( class AActor* Target, struct FImpactInfo Impact, unsigned long bConvertDOT )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 37652 ];

	UTgEffectBuff_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.Target = Target;
	memcpy ( &ApplyEffect_Parms.Impact, &Impact, 0x60 );
	ApplyEffect_Parms.bConvertDOT = bConvertDOT;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	return ApplyEffect_Parms.ReturnValue;
};

// Function TgGame.TgEffectBuff.ApplyBuff
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )
// unsigned long                  bRemove                        ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_OptionalParm | CPF_Parm )

bool UTgEffectBuff::ApplyBuff ( class AActor* Target, unsigned long bRemove, struct FImpactInfo Impact )
{
	static UFunction* pFnApplyBuff = NULL;

	if ( ! pFnApplyBuff )
		pFnApplyBuff = (UFunction*) UObject::GObjObjects()->Data[ 37642 ];

	UTgEffectBuff_execApplyBuff_Parms ApplyBuff_Parms;
	ApplyBuff_Parms.Target = Target;
	ApplyBuff_Parms.bRemove = bRemove;
	memcpy ( &ApplyBuff_Parms.Impact, &Impact, 0x60 );

	this->ProcessEvent ( pFnApplyBuff, &ApplyBuff_Parms, NULL );

	return ApplyBuff_Parms.ReturnValue;
};

// Function TgGame.TgEffectBuff.GetBuffType
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

unsigned char UTgEffectBuff::GetBuffType ( class AActor* Target )
{
	static UFunction* pFnGetBuffType = NULL;

	if ( ! pFnGetBuffType )
		pFnGetBuffType = (UFunction*) UObject::GObjObjects()->Data[ 37631 ];

	UTgEffectBuff_execGetBuffType_Parms GetBuffType_Parms;
	GetBuffType_Parms.Target = Target;

	this->ProcessEvent ( pFnGetBuffType, &GetBuffType_Parms, NULL );

	return GetBuffType_Parms.ReturnValue;
};

// Function TgGame.TgEffectBuff.CanBeApplied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool UTgEffectBuff::CanBeApplied ( class AActor* Target )
{
	static UFunction* pFnCanBeApplied = NULL;

	if ( ! pFnCanBeApplied )
		pFnCanBeApplied = (UFunction*) UObject::GObjObjects()->Data[ 37628 ];

	UTgEffectBuff_execCanBeApplied_Parms CanBeApplied_Parms;
	CanBeApplied_Parms.Target = Target;

	this->ProcessEvent ( pFnCanBeApplied, &CanBeApplied_Parms, NULL );

	return CanBeApplied_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Hunter.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_Hunter::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43508 ];

	ATgPawn_Hunter_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Hunter::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43504 ];

	ATgPawn_Hunter_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.CalcHunterProtection
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fInValue                       ( CPF_Parm )
// class AActor*                  DamageInst                     ( CPF_Parm )

float ATgPawn_Hunter::CalcHunterProtection ( float fInValue, class AActor* DamageInst )
{
	static UFunction* pFnCalcHunterProtection = NULL;

	if ( ! pFnCalcHunterProtection )
		pFnCalcHunterProtection = (UFunction*) UObject::GObjObjects()->Data[ 43498 ];

	ATgPawn_Hunter_execCalcHunterProtection_Parms CalcHunterProtection_Parms;
	CalcHunterProtection_Parms.fInValue = fInValue;
	CalcHunterProtection_Parms.DamageInst = DamageInst;

	this->ProcessEvent ( pFnCalcHunterProtection, &CalcHunterProtection_Parms, NULL );

	return CalcHunterProtection_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Hunter.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Hunter::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43497 ];

	ATgPawn_Hunter_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.ChangeHunterClass
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewClass                       ( CPF_Parm )

void ATgPawn_Hunter::ChangeHunterClass ( unsigned char NewClass )
{
	static UFunction* pFnChangeHunterClass = NULL;

	if ( ! pFnChangeHunterClass )
		pFnChangeHunterClass = (UFunction*) UObject::GObjObjects()->Data[ 43493 ];

	ATgPawn_Hunter_execChangeHunterClass_Parms ChangeHunterClass_Parms;
	ChangeHunterClass_Parms.NewClass = NewClass;

	this->ProcessEvent ( pFnChangeHunterClass, &ChangeHunterClass_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.HandleTransitionIn
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Hunter::HandleTransitionIn ( float DeltaSeconds )
{
	static UFunction* pFnHandleTransitionIn = NULL;

	if ( ! pFnHandleTransitionIn )
		pFnHandleTransitionIn = (UFunction*) UObject::GObjObjects()->Data[ 43488 ];

	ATgPawn_Hunter_execHandleTransitionIn_Parms HandleTransitionIn_Parms;
	HandleTransitionIn_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnHandleTransitionIn, &HandleTransitionIn_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.HandleTransitionOut
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Hunter::HandleTransitionOut ( float DeltaSeconds )
{
	static UFunction* pFnHandleTransitionOut = NULL;

	if ( ! pFnHandleTransitionOut )
		pFnHandleTransitionOut = (UFunction*) UObject::GObjObjects()->Data[ 43482 ];

	ATgPawn_Hunter_execHandleTransitionOut_Parms HandleTransitionOut_Parms;
	HandleTransitionOut_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnHandleTransitionOut, &HandleTransitionOut_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.TransitionOutComplete
// [0x00020102] 
// Parameters infos:

void ATgPawn_Hunter::TransitionOutComplete ( )
{
	static UFunction* pFnTransitionOutComplete = NULL;

	if ( ! pFnTransitionOutComplete )
		pFnTransitionOutComplete = (UFunction*) UObject::GObjObjects()->Data[ 43480 ];

	ATgPawn_Hunter_execTransitionOutComplete_Parms TransitionOutComplete_Parms;

	this->ProcessEvent ( pFnTransitionOutComplete, &TransitionOutComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Hunter::eventTick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43472 ];

	ATgPawn_Hunter_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Hunter.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Hunter::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43470 ];

	ATgPawn_Hunter_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgEmitterCrashlanding.PostImpactComplete
// [0x00020102] 
// Parameters infos:

void ATgEmitterCrashlanding::PostImpactComplete ( )
{
	static UFunction* pFnPostImpactComplete = NULL;

	if ( ! pFnPostImpactComplete )
		pFnPostImpactComplete = (UFunction*) UObject::GObjObjects()->Data[ 38241 ];

	ATgEmitterCrashlanding_execPostImpactComplete_Parms PostImpactComplete_Parms;

	this->ProcessEvent ( pFnPostImpactComplete, &PostImpactComplete_Parms, NULL );
};

// Function TgGame.TgEmitterCrashlanding.OnImpact
// [0x00020102] 
// Parameters infos:

void ATgEmitterCrashlanding::OnImpact ( )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 38240 ];

	ATgEmitterCrashlanding_execOnImpact_Parms OnImpact_Parms;

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );
};

// Function TgGame.TgEmitterCrashlanding.SetAudio
// [0x00020102] 
// Parameters infos:
// class USoundCue*               SoundCueToSet                  ( CPF_Parm )

void ATgEmitterCrashlanding::SetAudio ( class USoundCue* SoundCueToSet )
{
	static UFunction* pFnSetAudio = NULL;

	if ( ! pFnSetAudio )
		pFnSetAudio = (UFunction*) UObject::GObjObjects()->Data[ 38238 ];

	ATgEmitterCrashlanding_execSetAudio_Parms SetAudio_Parms;
	SetAudio_Parms.SoundCueToSet = SoundCueToSet;

	this->ProcessEvent ( pFnSetAudio, &SetAudio_Parms, NULL );
};

// Function TgGame.TgEmitterCrashlanding.SetSecondaryMesh
// [0x00020102] 
// Parameters infos:
// class UStaticMesh*             StaticMeshToSet                ( CPF_Parm )

void ATgEmitterCrashlanding::SetSecondaryMesh ( class UStaticMesh* StaticMeshToSet )
{
	static UFunction* pFnSetSecondaryMesh = NULL;

	if ( ! pFnSetSecondaryMesh )
		pFnSetSecondaryMesh = (UFunction*) UObject::GObjObjects()->Data[ 38236 ];

	ATgEmitterCrashlanding_execSetSecondaryMesh_Parms SetSecondaryMesh_Parms;
	SetSecondaryMesh_Parms.StaticMeshToSet = StaticMeshToSet;

	this->ProcessEvent ( pFnSetSecondaryMesh, &SetSecondaryMesh_Parms, NULL );
};

// Function TgGame.TgEmitterCrashlanding.SetPrimaryMesh
// [0x00020102] 
// Parameters infos:
// class UStaticMesh*             StaticMeshToSet                ( CPF_Parm )

void ATgEmitterCrashlanding::SetPrimaryMesh ( class UStaticMesh* StaticMeshToSet )
{
	static UFunction* pFnSetPrimaryMesh = NULL;

	if ( ! pFnSetPrimaryMesh )
		pFnSetPrimaryMesh = (UFunction*) UObject::GObjObjects()->Data[ 38234 ];

	ATgEmitterCrashlanding_execSetPrimaryMesh_Parms SetPrimaryMesh_Parms;
	SetPrimaryMesh_Parms.StaticMeshToSet = StaticMeshToSet;

	this->ProcessEvent ( pFnSetPrimaryMesh, &SetPrimaryMesh_Parms, NULL );
};

// Function TgGame.TgTeamScoreboard.DrawTaskForceCol
// [0x00020102] 
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// class ATgRepInfo_TaskForce*    taskforce                      ( CPF_Parm )

void ATgTeamScoreboard::DrawTaskForceCol ( float X1, float X2, float Y, class ATgRepInfo_TaskForce* taskforce )
{
	static UFunction* pFnDrawTaskForceCol = NULL;

	if ( ! pFnDrawTaskForceCol )
		pFnDrawTaskForceCol = (UFunction*) UObject::GObjObjects()->Data[ 48529 ];

	ATgTeamScoreboard_execDrawTaskForceCol_Parms DrawTaskForceCol_Parms;
	DrawTaskForceCol_Parms.X1 = X1;
	DrawTaskForceCol_Parms.X2 = X2;
	DrawTaskForceCol_Parms.Y = Y;
	DrawTaskForceCol_Parms.taskforce = taskforce;

	this->ProcessEvent ( pFnDrawTaskForceCol, &DrawTaskForceCol_Parms, NULL );
};

// Function TgGame.TgTeamScoreboard.DrawCol
// [0x00020102] 
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// class ATgRepInfo_Player*       prep                           ( CPF_Parm )

void ATgTeamScoreboard::DrawCol ( float X1, float X2, float Y, class ATgRepInfo_Player* prep )
{
	static UFunction* pFnDrawCol = NULL;

	if ( ! pFnDrawCol )
		pFnDrawCol = (UFunction*) UObject::GObjObjects()->Data[ 48520 ];

	ATgTeamScoreboard_execDrawCol_Parms DrawCol_Parms;
	DrawCol_Parms.X1 = X1;
	DrawCol_Parms.X2 = X2;
	DrawCol_Parms.Y = Y;
	DrawCol_Parms.prep = prep;

	this->ProcessEvent ( pFnDrawCol, &DrawCol_Parms, NULL );
};

// Function TgGame.TgTeamScoreboard.DrawHUD
// [0x00020002] 
// Parameters infos:

void ATgTeamScoreboard::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 48497 ];

	ATgTeamScoreboard_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function TgGame.TgScoreboard.SBInputKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )

bool ATgScoreboard::SBInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed )
{
	static UFunction* pFnSBInputKey = NULL;

	if ( ! pFnSBInputKey )
		pFnSBInputKey = (UFunction*) UObject::GObjObjects()->Data[ 47256 ];

	ATgScoreboard_execSBInputKey_Parms SBInputKey_Parms;
	SBInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &SBInputKey_Parms.Key, &Key, 0x8 );
	SBInputKey_Parms.Event = Event;
	SBInputKey_Parms.AmountDepressed = AmountDepressed;

	this->ProcessEvent ( pFnSBInputKey, &SBInputKey_Parms, NULL );

	return SBInputKey_Parms.ReturnValue;
};

// Function TgGame.TgScoreboard.ChangeState
// [0x00020102] 
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void ATgScoreboard::ChangeState ( unsigned long bIsVisible )
{
	static UFunction* pFnChangeState = NULL;

	if ( ! pFnChangeState )
		pFnChangeState = (UFunction*) UObject::GObjObjects()->Data[ 47253 ];

	ATgScoreboard_execChangeState_Parms ChangeState_Parms;
	ChangeState_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnChangeState, &ChangeState_Parms, NULL );
};

// Function TgGame.TgScoreboard.DrawHUD
// [0x00020002] 
// Parameters infos:

void ATgScoreboard::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 47235 ];

	ATgScoreboard_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function TgGame.TgScoreboard.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgScoreboard::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 47234 ];

	ATgScoreboard_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgHitDisplayActor.LightupSegment
// [0x00020002] 
// Parameters infos:
// unsigned char                  HitDisplayDirection            ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )

void ATgHitDisplayActor::LightupSegment ( unsigned char HitDisplayDirection, int Damage )
{
	static UFunction* pFnLightupSegment = NULL;

	if ( ! pFnLightupSegment )
		pFnLightupSegment = (UFunction*) UObject::GObjObjects()->Data[ 39166 ];

	ATgHitDisplayActor_execLightupSegment_Parms LightupSegment_Parms;
	LightupSegment_Parms.HitDisplayDirection = HitDisplayDirection;
	LightupSegment_Parms.Damage = Damage;

	this->ProcessEvent ( pFnLightupSegment, &LightupSegment_Parms, NULL );
};

// Function TgGame.TgHitDisplayActor.DisplayHit
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitDir                         ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ATgHitDisplayActor::DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType )
{
	static UFunction* pFnDisplayHit = NULL;

	if ( ! pFnDisplayHit )
		pFnDisplayHit = (UFunction*) UObject::GObjObjects()->Data[ 39158 ];

	ATgHitDisplayActor_execDisplayHit_Parms DisplayHit_Parms;
	memcpy ( &DisplayHit_Parms.HitDir, &HitDir, 0xC );
	DisplayHit_Parms.Damage = Damage;
	DisplayHit_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDisplayHit, &DisplayHit_Parms, NULL );
};

// Function TgGame.TgHitDisplayActor.SetOwnerController
// [0x00020002] 
// Parameters infos:
// class AController*             NewOwner                       ( CPF_Parm )

void ATgHitDisplayActor::SetOwnerController ( class AController* NewOwner )
{
	static UFunction* pFnSetOwnerController = NULL;

	if ( ! pFnSetOwnerController )
		pFnSetOwnerController = (UFunction*) UObject::GObjObjects()->Data[ 39156 ];

	ATgHitDisplayActor_execSetOwnerController_Parms SetOwnerController_Parms;
	SetOwnerController_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnSetOwnerController, &SetOwnerController_Parms, NULL );
};

// Function TgGame.TgHitDisplayActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATgHitDisplayActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39153 ];

	ATgHitDisplayActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgHoldSpot.FreePoint
// [0x00020002] 
// Parameters infos:

void ATgHoldSpot::FreePoint ( )
{
	static UFunction* pFnFreePoint = NULL;

	if ( ! pFnFreePoint )
		pFnFreePoint = (UFunction*) UObject::GObjObjects()->Data[ 39184 ];

	ATgHoldSpot_execFreePoint_Parms FreePoint_Parms;

	this->ProcessEvent ( pFnFreePoint, &FreePoint_Parms, NULL );
};

// Function TgGame.TgHoldSpot.GetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ATgHoldSpot::GetMoveTarget ( )
{
	static UFunction* pFnGetMoveTarget = NULL;

	if ( ! pFnGetMoveTarget )
		pFnGetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 39182 ];

	ATgHoldSpot_execGetMoveTarget_Parms GetMoveTarget_Parms;

	this->ProcessEvent ( pFnGetMoveTarget, &GetMoveTarget_Parms, NULL );

	return GetMoveTarget_Parms.ReturnValue;
};

// Function TgGame.TgInterpolatingCameraActor.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgInterpolatingCameraActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39658 ];

	ATgInterpolatingCameraActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgInterpolatingCameraActor.GetCameraView
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ATgInterpolatingCameraActor::GetCameraView ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnGetCameraView = NULL;

	if ( ! pFnGetCameraView )
		pFnGetCameraView = (UFunction*) UObject::GObjObjects()->Data[ 39655 ];

	ATgInterpolatingCameraActor_execGetCameraView_Parms GetCameraView_Parms;
	GetCameraView_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnGetCameraView, &GetCameraView_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &GetCameraView_Parms.OutPOV, 0x1C );
};

// Function TgGame.TgInterpolatingCameraActor.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void ATgInterpolatingCameraActor::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 39652 ];

	ATgInterpolatingCameraActor_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function TgGame.TgKismetTestActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgKismetTestActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 40068 ];

	ATgKismetTestActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.StartTest
// [0x01020142] 
// Parameters infos:
// int                            Num                            ( CPF_Parm )

void ATgKismetTestActor::StartTest ( int Num )
{
	static UFunction* pFnStartTest = NULL;

	if ( ! pFnStartTest )
		pFnStartTest = (UFunction*) UObject::GObjObjects()->Data[ 40065 ];

	ATgKismetTestActor_execStartTest_Parms StartTest_Parms;
	StartTest_Parms.Num = Num;

	this->ProcessEvent ( pFnStartTest, &StartTest_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.FailTest
// [0x01020142] 
// Parameters infos:
// int                            Num                            ( CPF_Parm )

void ATgKismetTestActor::FailTest ( int Num )
{
	static UFunction* pFnFailTest = NULL;

	if ( ! pFnFailTest )
		pFnFailTest = (UFunction*) UObject::GObjObjects()->Data[ 40063 ];

	ATgKismetTestActor_execFailTest_Parms FailTest_Parms;
	FailTest_Parms.Num = Num;

	this->ProcessEvent ( pFnFailTest, &FailTest_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.PassTest
// [0x01020142] 
// Parameters infos:
// int                            Num                            ( CPF_Parm )

void ATgKismetTestActor::PassTest ( int Num )
{
	static UFunction* pFnPassTest = NULL;

	if ( ! pFnPassTest )
		pFnPassTest = (UFunction*) UObject::GObjObjects()->Data[ 40061 ];

	ATgKismetTestActor_execPassTest_Parms PassTest_Parms;
	PassTest_Parms.Num = Num;

	this->ProcessEvent ( pFnPassTest, &PassTest_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgKismetTestActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40059 ];

	ATgKismetTestActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.SetTestColor
// [0x01020142] 
// Parameters infos:
// int                            Num                            ( CPF_Parm )
// struct FLinearColor            Col                            ( CPF_Parm )

void ATgKismetTestActor::SetTestColor ( int Num, struct FLinearColor Col )
{
	static UFunction* pFnSetTestColor = NULL;

	if ( ! pFnSetTestColor )
		pFnSetTestColor = (UFunction*) UObject::GObjObjects()->Data[ 40053 ];

	ATgKismetTestActor_execSetTestColor_Parms SetTestColor_Parms;
	SetTestColor_Parms.Num = Num;
	memcpy ( &SetTestColor_Parms.Col, &Col, 0x10 );

	this->ProcessEvent ( pFnSetTestColor, &SetTestColor_Parms, NULL );
};

// Function TgGame.TgKismetTestActor.GetLocalPlayer
// [0x00020102] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* ATgKismetTestActor::GetLocalPlayer ( )
{
	static UFunction* pFnGetLocalPlayer = NULL;

	if ( ! pFnGetLocalPlayer )
		pFnGetLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 40050 ];

	ATgKismetTestActor_execGetLocalPlayer_Parms GetLocalPlayer_Parms;

	this->ProcessEvent ( pFnGetLocalPlayer, &GetLocalPlayer_Parms, NULL );

	return GetLocalPlayer_Parms.ReturnValue;
};

// Function TgGame.TgKismetTestActor.OnTestResult
// [0x00020102] 
// Parameters infos:
// class UTgSeqAct_TestResult*    Action                         ( CPF_Parm )

void ATgKismetTestActor::OnTestResult ( class UTgSeqAct_TestResult* Action )
{
	static UFunction* pFnOnTestResult = NULL;

	if ( ! pFnOnTestResult )
		pFnOnTestResult = (UFunction*) UObject::GObjObjects()->Data[ 40047 ];

	ATgKismetTestActor_execOnTestResult_Parms OnTestResult_Parms;
	OnTestResult_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTestResult, &OnTestResult_Parms, NULL );
};

// Function TgGame.TgLevelCamera.IsValidCamera
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgLevelCamera::IsValidCamera ( )
{
	static UFunction* pFnIsValidCamera = NULL;

	if ( ! pFnIsValidCamera )
		pFnIsValidCamera = (UFunction*) UObject::GObjObjects()->Data[ 40078 ];

	ATgLevelCamera_execIsValidCamera_Parms IsValidCamera_Parms;

	this->ProcessEvent ( pFnIsValidCamera, &IsValidCamera_Parms, NULL );

	return IsValidCamera_Parms.ReturnValue;
};

// Function TgGame.TgLevelCamera.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ATgLevelCamera::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 40076 ];

	ATgLevelCamera_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function TgGame.TgMorphFX.ChangeMorphNode
// [0x00020102] 
// Parameters infos:
// float                          NewWeight                      ( CPF_Parm )

void ATgMorphFX::ChangeMorphNode ( float NewWeight )
{
	static UFunction* pFnChangeMorphNode = NULL;

	if ( ! pFnChangeMorphNode )
		pFnChangeMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 40195 ];

	ATgMorphFX_execChangeMorphNode_Parms ChangeMorphNode_Parms;
	ChangeMorphNode_Parms.NewWeight = NewWeight;

	this->ProcessEvent ( pFnChangeMorphNode, &ChangeMorphNode_Parms, NULL );
};

// Function TgGame.TgMorphFX.MorphTimer
// [0x00020102] 
// Parameters infos:

void ATgMorphFX::MorphTimer ( )
{
	static UFunction* pFnMorphTimer = NULL;

	if ( ! pFnMorphTimer )
		pFnMorphTimer = (UFunction*) UObject::GObjObjects()->Data[ 40194 ];

	ATgMorphFX_execMorphTimer_Parms MorphTimer_Parms;

	this->ProcessEvent ( pFnMorphTimer, &MorphTimer_Parms, NULL );
};

// Function TgGame.TgMorphFX.Destroyed
// [0x00020102] 
// Parameters infos:

void ATgMorphFX::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 40193 ];

	ATgMorphFX_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function TgGame.TgMorphFX.InitLaserTracer
// [0x00020102] 
// Parameters infos:
// class UMeshComponent*          Mesh                           ( CPF_Parm | CPF_EditInline )
// float                          fDuration                      ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )

void ATgMorphFX::InitLaserTracer ( class UMeshComponent* Mesh, float fDuration, class AActor* HitActor )
{
	static UFunction* pFnInitLaserTracer = NULL;

	if ( ! pFnInitLaserTracer )
		pFnInitLaserTracer = (UFunction*) UObject::GObjObjects()->Data[ 40187 ];

	ATgMorphFX_execInitLaserTracer_Parms InitLaserTracer_Parms;
	InitLaserTracer_Parms.Mesh = Mesh;
	InitLaserTracer_Parms.fDuration = fDuration;
	InitLaserTracer_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnInitLaserTracer, &InitLaserTracer_Parms, NULL );
};

// Function TgGame.TgMorphFX.InitMorphFx
// [0x00020102] 
// Parameters infos:
// class UMeshComponent*          Mesh                           ( CPF_Parm | CPF_EditInline )
// float                          fDuration                      ( CPF_Parm )

void ATgMorphFX::InitMorphFx ( class UMeshComponent* Mesh, float fDuration )
{
	static UFunction* pFnInitMorphFx = NULL;

	if ( ! pFnInitMorphFx )
		pFnInitMorphFx = (UFunction*) UObject::GObjObjects()->Data[ 40184 ];

	ATgMorphFX_execInitMorphFx_Parms InitMorphFx_Parms;
	InitMorphFx_Parms.Mesh = Mesh;
	InitMorphFx_Parms.fDuration = fDuration;

	this->ProcessEvent ( pFnInitMorphFx, &InitMorphFx_Parms, NULL );
};

// Function TgGame.TgSeqAct_MarkSpawnReturn.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UTgSeqAct_MarkSpawnReturn::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 47315 ];

	UTgSeqAct_MarkSpawnReturn_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgPawn_Switchblade::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 43900 ];

	ATgPawn_Switchblade_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Switchblade::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 43897 ];

	ATgPawn_Switchblade_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.EndVortex
// [0x00020102] 
// Parameters infos:

void ATgPawn_Switchblade::EndVortex ( )
{
	static UFunction* pFnEndVortex = NULL;

	if ( ! pFnEndVortex )
		pFnEndVortex = (UFunction*) UObject::GObjObjects()->Data[ 43896 ];

	ATgPawn_Switchblade_execEndVortex_Parms EndVortex_Parms;

	this->ProcessEvent ( pFnEndVortex, &EndVortex_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.StartVortex
// [0x00020102] 
// Parameters infos:

void ATgPawn_Switchblade::StartVortex ( )
{
	static UFunction* pFnStartVortex = NULL;

	if ( ! pFnStartVortex )
		pFnStartVortex = (UFunction*) UObject::GObjObjects()->Data[ 43895 ];

	ATgPawn_Switchblade_execStartVortex_Parms StartVortex_Parms;

	this->ProcessEvent ( pFnStartVortex, &StartVortex_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Switchblade::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43894 ];

	ATgPawn_Switchblade_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.OnPhaseTransitionComplete
// [0x00020102] 
// Parameters infos:

void ATgPawn_Switchblade::OnPhaseTransitionComplete ( )
{
	static UFunction* pFnOnPhaseTransitionComplete = NULL;

	if ( ! pFnOnPhaseTransitionComplete )
		pFnOnPhaseTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 43893 ];

	ATgPawn_Switchblade_execOnPhaseTransitionComplete_Parms OnPhaseTransitionComplete_Parms;

	this->ProcessEvent ( pFnOnPhaseTransitionComplete, &OnPhaseTransitionComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_Switchblade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 43892 ];

	ATgPawn_Switchblade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_Switchblade.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Switchblade::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43890 ];

	ATgPawn_Switchblade_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_AndroidMinion.UpdateMaterialParameters
// [0x00020102] 
// Parameters infos:

void ATgPawn_AndroidMinion::UpdateMaterialParameters ( )
{
	static UFunction* pFnUpdateMaterialParameters = NULL;

	if ( ! pFnUpdateMaterialParameters )
		pFnUpdateMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 42999 ];

	ATgPawn_AndroidMinion_execUpdateMaterialParameters_Parms UpdateMaterialParameters_Parms;

	this->ProcessEvent ( pFnUpdateMaterialParameters, &UpdateMaterialParameters_Parms, NULL );
};

// Function TgGame.TgPawn_AndroidMinion.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_AndroidMinion::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 42997 ];

	ATgPawn_AndroidMinion_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Raptor.DoJump
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool ATgPawn_Raptor::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 43113 ];

	ATgPawn_Raptor_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Raptor.EndCrouch
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ATgPawn_Raptor::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 43111 ];

	ATgPawn_Raptor_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function TgGame.TgPawn_Raptor.StartCrouch
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ATgPawn_Raptor::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 43109 ];

	ATgPawn_Raptor_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function TgGame.TgPawn_Raptor.GetCameraValues
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FTgCameraValues         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTgCameraValues ATgPawn_Raptor::eventGetCameraValues ( )
{
	static UFunction* pFnGetCameraValues = NULL;

	if ( ! pFnGetCameraValues )
		pFnGetCameraValues = (UFunction*) UObject::GObjObjects()->Data[ 43107 ];

	ATgPawn_Raptor_eventGetCameraValues_Parms GetCameraValues_Parms;

	this->ProcessEvent ( pFnGetCameraValues, &GetCameraValues_Parms, NULL );

	return GetCameraValues_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Raptor.UpdateMeshBoneControllers
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_Raptor::eventUpdateMeshBoneControllers ( float DeltaTime )
{
	static UFunction* pFnUpdateMeshBoneControllers = NULL;

	if ( ! pFnUpdateMeshBoneControllers )
		pFnUpdateMeshBoneControllers = (UFunction*) UObject::GObjObjects()->Data[ 43103 ];

	ATgPawn_Raptor_eventUpdateMeshBoneControllers_Parms UpdateMeshBoneControllers_Parms;
	UpdateMeshBoneControllers_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateMeshBoneControllers, &UpdateMeshBoneControllers_Parms, NULL );
};

// Function TgGame.TgPawn_Raptor.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Raptor::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43100 ];

	ATgPawn_Raptor_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Raptor.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Raptor::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43098 ];

	ATgPawn_Raptor_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Boss_Destroyer.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Boss_Destroyer::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43131 ];

	ATgPawn_Boss_Destroyer_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Boss_Destroyer.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Boss_Destroyer::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43129 ];

	ATgPawn_Boss_Destroyer_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Brawler.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Brawler::eventTick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43143 ];

	ATgPawn_Brawler_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Brawler.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Brawler::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43141 ];

	ATgPawn_Brawler_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Destructible.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Destructible::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43218 ];

	ATgPawn_Destructible_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Destructible.PlayDyingPhysicsAndAnimation
// [0x00820102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_Destructible::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 43214 ];

	ATgPawn_Destructible_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_Detonator.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_Detonator::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43245 ];

	ATgPawn_Detonator_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_Detonator.DelayedDied
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Detonator::DelayedDied ( )
{
	static UFunction* pFnDelayedDied = NULL;

	if ( ! pFnDelayedDied )
		pFnDelayedDied = (UFunction*) UObject::GObjObjects()->Data[ 43243 ];

	ATgPawn_Detonator_execDelayedDied_Parms DelayedDied_Parms;

	this->ProcessEvent ( pFnDelayedDied, &DelayedDied_Parms, NULL );

	return DelayedDied_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Detonator.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ATgPawn_Detonator::eventDied ( class AController* Killer, class UClass* dmgType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 43238 ];

	ATgPawn_Detonator_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.dmgType = dmgType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Detonator.SaveDeathInfo
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ATgPawn_Detonator::SaveDeathInfo ( class AController* Killer, class UClass* dmgType, struct FVector HitLocation )
{
	static UFunction* pFnSaveDeathInfo = NULL;

	if ( ! pFnSaveDeathInfo )
		pFnSaveDeathInfo = (UFunction*) UObject::GObjObjects()->Data[ 43234 ];

	ATgPawn_Detonator_execSaveDeathInfo_Parms SaveDeathInfo_Parms;
	SaveDeathInfo_Parms.Killer = Killer;
	SaveDeathInfo_Parms.dmgType = dmgType;
	memcpy ( &SaveDeathInfo_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSaveDeathInfo, &SaveDeathInfo_Parms, NULL );
};

// Function TgGame.TgPawn_Detonator.Detonate
// [0x00020102] 
// Parameters infos:

void ATgPawn_Detonator::Detonate ( )
{
	static UFunction* pFnDetonate = NULL;

	if ( ! pFnDetonate )
		pFnDetonate = (UFunction*) UObject::GObjObjects()->Data[ 43233 ];

	ATgPawn_Detonator_execDetonate_Parms Detonate_Parms;

	this->ProcessEvent ( pFnDetonate, &Detonate_Parms, NULL );
};

// Function TgGame.TgPawn_Detonator.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Detonator::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43230 ];

	ATgPawn_Detonator_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.PlayDeployAnim
// [0x00020102] 
// Parameters infos:

void ATgPawn_DuneCommander::PlayDeployAnim ( )
{
	static UFunction* pFnPlayDeployAnim = NULL;

	if ( ! pFnPlayDeployAnim )
		pFnPlayDeployAnim = (UFunction*) UObject::GObjObjects()->Data[ 43297 ];

	ATgPawn_DuneCommander_execPlayDeployAnim_Parms PlayDeployAnim_Parms;

	this->ProcessEvent ( pFnPlayDeployAnim, &PlayDeployAnim_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.PlayImpact
// [0x00020102] 
// Parameters infos:

void ATgPawn_DuneCommander::PlayImpact ( )
{
	static UFunction* pFnPlayImpact = NULL;

	if ( ! pFnPlayImpact )
		pFnPlayImpact = (UFunction*) UObject::GObjObjects()->Data[ 43296 ];

	ATgPawn_DuneCommander_execPlayImpact_Parms PlayImpact_Parms;

	this->ProcessEvent ( pFnPlayImpact, &PlayImpact_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_DuneCommander::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43291 ];

	ATgPawn_DuneCommander_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.StartCrashLanding
// [0x00820102] 
// Parameters infos:

void ATgPawn_DuneCommander::StartCrashLanding ( )
{
	static UFunction* pFnStartCrashLanding = NULL;

	if ( ! pFnStartCrashLanding )
		pFnStartCrashLanding = (UFunction*) UObject::GObjObjects()->Data[ 43287 ];

	ATgPawn_DuneCommander_execStartCrashLanding_Parms StartCrashLanding_Parms;

	this->ProcessEvent ( pFnStartCrashLanding, &StartCrashLanding_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.EditCrashLanding
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn_DuneCommander::EditCrashLanding ( )
{
	static UFunction* pFnEditCrashLanding = NULL;

	if ( ! pFnEditCrashLanding )
		pFnEditCrashLanding = (UFunction*) UObject::GObjObjects()->Data[ 43286 ];

	ATgPawn_DuneCommander_execEditCrashLanding_Parms EditCrashLanding_Parms;

	this->ProcessEvent ( pFnEditCrashLanding, &EditCrashLanding_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.DoCrashLanding
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ATgPawn_DuneCommander::DoCrashLanding ( )
{
	static UFunction* pFnDoCrashLanding = NULL;

	if ( ! pFnDoCrashLanding )
		pFnDoCrashLanding = (UFunction*) UObject::GObjObjects()->Data[ 43285 ];

	ATgPawn_DuneCommander_execDoCrashLanding_Parms DoCrashLanding_Parms;

	this->ProcessEvent ( pFnDoCrashLanding, &DoCrashLanding_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_DuneCommander::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43283 ];

	ATgPawn_DuneCommander_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_DuneCommander.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPawn_DuneCommander::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 43281 ];

	ATgPawn_DuneCommander_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPawn_DuneCommander.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_DuneCommander::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43279 ];

	ATgPawn_DuneCommander_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Elite_Alchemist.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Elite_Alchemist::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43305 ];

	ATgPawn_Elite_Alchemist_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Elite_Assassin.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Elite_Assassin::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43317 ];

	ATgPawn_Elite_Assassin_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Elite_Assassin.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_Elite_Assassin::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43315 ];

	ATgPawn_Elite_Assassin_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_EscortRobot.PlayDyingPhysicsAndAnimation
// [0x00020102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_EscortRobot::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 43327 ];

	ATgPawn_EscortRobot_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_EscortRobot.PlayTeleportOutFXTimer
// [0x00020102] 
// Parameters infos:

void ATgPawn_EscortRobot::PlayTeleportOutFXTimer ( )
{
	static UFunction* pFnPlayTeleportOutFXTimer = NULL;

	if ( ! pFnPlayTeleportOutFXTimer )
		pFnPlayTeleportOutFXTimer = (UFunction*) UObject::GObjObjects()->Data[ 43326 ];

	ATgPawn_EscortRobot_execPlayTeleportOutFXTimer_Parms PlayTeleportOutFXTimer_Parms;

	this->ProcessEvent ( pFnPlayTeleportOutFXTimer, &PlayTeleportOutFXTimer_Parms, NULL );
};

// Function TgGame.TgPawn_EscortRobot.PlayDyingEffects
// [0x00020102] 
// Parameters infos:

void ATgPawn_EscortRobot::PlayDyingEffects ( )
{
	static UFunction* pFnPlayDyingEffects = NULL;

	if ( ! pFnPlayDyingEffects )
		pFnPlayDyingEffects = (UFunction*) UObject::GObjObjects()->Data[ 43325 ];

	ATgPawn_EscortRobot_execPlayDyingEffects_Parms PlayDyingEffects_Parms;

	this->ProcessEvent ( pFnPlayDyingEffects, &PlayDyingEffects_Parms, NULL );
};

// Function TgGame.TgPawn_GroundPetA.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_GroundPetA::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43382 ];

	ATgPawn_GroundPetA_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_GroundPetA.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_GroundPetA::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43381 ];

	ATgPawn_GroundPetA_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_GroundPetA.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_GroundPetA::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43379 ];

	ATgPawn_GroundPetA_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_GroundPetA.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_GroundPetA::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43377 ];

	ATgPawn_GroundPetA_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Guardian.SetPhysAnimState
// [0x00020300] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )

void ATgPawn_Guardian::SetPhysAnimState ( unsigned char NewState )
{
	static UFunction* pFnSetPhysAnimState = NULL;

	if ( ! pFnSetPhysAnimState )
		pFnSetPhysAnimState = (UFunction*) UObject::GObjObjects()->Data[ 43392 ];

	ATgPawn_Guardian_execSetPhysAnimState_Parms SetPhysAnimState_Parms;
	SetPhysAnimState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnSetPhysAnimState, &SetPhysAnimState_Parms, NULL );
};

// Function TgGame.TgPawn_Guardian.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Guardian::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43390 ];

	ATgPawn_Guardian_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_HoverShieldSphere.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_HoverShieldSphere::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 43442 ];

	ATgPawn_HoverShieldSphere_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_HoverShieldSphere.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_HoverShieldSphere::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43440 ];

	ATgPawn_HoverShieldSphere_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Inquisitor.OnAnimEnd
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPawn_Inquisitor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 43525 ];

	ATgPawn_Inquisitor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPawn_Iris.SensorSweepComplete
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Iris::eventSensorSweepComplete ( )
{
	static UFunction* pFnSensorSweepComplete = NULL;

	if ( ! pFnSensorSweepComplete )
		pFnSensorSweepComplete = (UFunction*) UObject::GObjObjects()->Data[ 43649 ];

	ATgPawn_Iris_eventSensorSweepComplete_Parms SensorSweepComplete_Parms;

	this->ProcessEvent ( pFnSensorSweepComplete, &SensorSweepComplete_Parms, NULL );
};

// Function TgGame.TgPawn_Iris.DoSensorSweep
// [0x00020102] 
// Parameters infos:

void ATgPawn_Iris::DoSensorSweep ( )
{
	static UFunction* pFnDoSensorSweep = NULL;

	if ( ! pFnDoSensorSweep )
		pFnDoSensorSweep = (UFunction*) UObject::GObjObjects()->Data[ 43648 ];

	ATgPawn_Iris_execDoSensorSweep_Parms DoSensorSweep_Parms;

	this->ProcessEvent ( pFnDoSensorSweep, &DoSensorSweep_Parms, NULL );
};

// Function TgGame.TgPawn_Iris.DoClientSideAlarmEffects
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Iris::eventDoClientSideAlarmEffects ( )
{
	static UFunction* pFnDoClientSideAlarmEffects = NULL;

	if ( ! pFnDoClientSideAlarmEffects )
		pFnDoClientSideAlarmEffects = (UFunction*) UObject::GObjObjects()->Data[ 43647 ];

	ATgPawn_Iris_eventDoClientSideAlarmEffects_Parms DoClientSideAlarmEffects_Parms;

	this->ProcessEvent ( pFnDoClientSideAlarmEffects, &DoClientSideAlarmEffects_Parms, NULL );
};

// Function TgGame.TgPawn_Iris.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATgPawn_Iris::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 43645 ];

	ATgPawn_Iris_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function TgGame.TgPawn_Reaper.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Reaper::eventTick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43732 ];

	ATgPawn_Reaper_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Reaper.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Reaper::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43730 ];

	ATgPawn_Reaper_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Reaper.BlendOutBatteryBlend
// [0x00020102] 
// Parameters infos:

void ATgPawn_Reaper::BlendOutBatteryBlend ( )
{
	static UFunction* pFnBlendOutBatteryBlend = NULL;

	if ( ! pFnBlendOutBatteryBlend )
		pFnBlendOutBatteryBlend = (UFunction*) UObject::GObjObjects()->Data[ 43729 ];

	ATgPawn_Reaper_execBlendOutBatteryBlend_Parms BlendOutBatteryBlend_Parms;

	this->ProcessEvent ( pFnBlendOutBatteryBlend, &BlendOutBatteryBlend_Parms, NULL );
};

// Function TgGame.TgPawn_Reaper.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Reaper::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43728 ];

	ATgPawn_Reaper_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Reaper.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Reaper::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43726 ];

	ATgPawn_Reaper_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Reaper.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Reaper::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43724 ];

	ATgPawn_Reaper_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeBarrage.EndExhaustEffect
// [0x00020102] 
// Parameters infos:

void ATgPawn_SiegeBarrage::EndExhaustEffect ( )
{
	static UFunction* pFnEndExhaustEffect = NULL;

	if ( ! pFnEndExhaustEffect )
		pFnEndExhaustEffect = (UFunction*) UObject::GObjObjects()->Data[ 43815 ];

	ATgPawn_SiegeBarrage_execEndExhaustEffect_Parms EndExhaustEffect_Parms;

	this->ProcessEvent ( pFnEndExhaustEffect, &EndExhaustEffect_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeBarrage.PlayExhaustEffect
// [0x00020102] 
// Parameters infos:

void ATgPawn_SiegeBarrage::PlayExhaustEffect ( )
{
	static UFunction* pFnPlayExhaustEffect = NULL;

	if ( ! pFnPlayExhaustEffect )
		pFnPlayExhaustEffect = (UFunction*) UObject::GObjObjects()->Data[ 43813 ];

	ATgPawn_SiegeBarrage_execPlayExhaustEffect_Parms PlayExhaustEffect_Parms;

	this->ProcessEvent ( pFnPlayExhaustEffect, &PlayExhaustEffect_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeBarrage.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_SiegeBarrage::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 43811 ];

	ATgPawn_SiegeBarrage_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeBarrage.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_SiegeBarrage::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43809 ];

	ATgPawn_SiegeBarrage_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeHover.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_SiegeHover::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43823 ];

	ATgPawn_SiegeHover_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_SiegeRapidFire.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_SiegeRapidFire::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 43832 ];

	ATgPawn_SiegeRapidFire_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_SupportForeman.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_SupportForeman::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43879 ];

	ATgPawn_SupportForeman_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_SupportForeman.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_SupportForeman::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 43877 ];

	ATgPawn_SupportForeman_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_SupportForeman.CheckBeingTargeted
// [0x00020102] 
// Parameters infos:

void ATgPawn_SupportForeman::CheckBeingTargeted ( )
{
	static UFunction* pFnCheckBeingTargeted = NULL;

	if ( ! pFnCheckBeingTargeted )
		pFnCheckBeingTargeted = (UFunction*) UObject::GObjObjects()->Data[ 43876 ];

	ATgPawn_SupportForeman_execCheckBeingTargeted_Parms CheckBeingTargeted_Parms;

	this->ProcessEvent ( pFnCheckBeingTargeted, &CheckBeingTargeted_Parms, NULL );
};

// Function TgGame.TgPawn_ThinkTank.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_ThinkTank::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 43917 ];

	ATgPawn_ThinkTank_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_TurretFlak::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 44087 ];

	ATgPawn_TurretFlak_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_TurretFlak::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44085 ];

	ATgPawn_TurretFlak_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.DoFireMaterialEffects
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_TurretFlak::DoFireMaterialEffects ( float DeltaTime )
{
	static UFunction* pFnDoFireMaterialEffects = NULL;

	if ( ! pFnDoFireMaterialEffects )
		pFnDoFireMaterialEffects = (UFunction*) UObject::GObjObjects()->Data[ 44082 ];

	ATgPawn_TurretFlak_execDoFireMaterialEffects_Parms DoFireMaterialEffects_Parms;
	DoFireMaterialEffects_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnDoFireMaterialEffects, &DoFireMaterialEffects_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_TurretFlak::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 44080 ];

	ATgPawn_TurretFlak_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_TurretFlak::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44078 ];

	ATgPawn_TurretFlak_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlak.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TurretFlak::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44076 ];

	ATgPawn_TurretFlak_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_TurretFlame.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_TurretFlame::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44097 ];

	ATgPawn_TurretFlame_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_TurretFlame.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TurretFlame::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44095 ];

	ATgPawn_TurretFlame_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_TurretPlasma.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATgPawn_TurretPlasma::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 44114 ];

	ATgPawn_TurretPlasma_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_TurretPlasma.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_TurretPlasma::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44112 ];

	ATgPawn_TurretPlasma_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_TurretPlasma.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_TurretPlasma::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44110 ];

	ATgPawn_TurretPlasma_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_UberWalker.PlayDyingPhysicsAndAnimation
// [0x00020102] 
// Parameters infos:
// class UClass*                  TgDmgType                      ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ATgPawn_UberWalker::PlayDyingPhysicsAndAnimation ( class UClass* TgDmgType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDyingPhysicsAndAnimation = NULL;

	if ( ! pFnPlayDyingPhysicsAndAnimation )
		pFnPlayDyingPhysicsAndAnimation = (UFunction*) UObject::GObjObjects()->Data[ 44134 ];

	ATgPawn_UberWalker_execPlayDyingPhysicsAndAnimation_Parms PlayDyingPhysicsAndAnimation_Parms;
	PlayDyingPhysicsAndAnimation_Parms.TgDmgType = TgDmgType;
	memcpy ( &PlayDyingPhysicsAndAnimation_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDyingPhysicsAndAnimation, &PlayDyingPhysicsAndAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_UberWalker.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_UberWalker::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 44133 ];

	ATgPawn_UberWalker_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_UberWalker.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_UberWalker::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 44132 ];

	ATgPawn_UberWalker_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_UberWalker.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_UberWalker::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44130 ];

	ATgPawn_UberWalker_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_UberWalker.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_UberWalker::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44128 ];

	ATgPawn_UberWalker_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPawn_Vanguard::eventTick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 44167 ];

	ATgPawn_Vanguard_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.PlayFootstepRecoil
// [0x00020102] 
// Parameters infos:

void ATgPawn_Vanguard::PlayFootstepRecoil ( )
{
	static UFunction* pFnPlayFootstepRecoil = NULL;

	if ( ! pFnPlayFootstepRecoil )
		pFnPlayFootstepRecoil = (UFunction*) UObject::GObjObjects()->Data[ 44166 ];

	ATgPawn_Vanguard_execPlayFootstepRecoil_Parms PlayFootstepRecoil_Parms;

	this->ProcessEvent ( pFnPlayFootstepRecoil, &PlayFootstepRecoil_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Vanguard::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44164 ];

	ATgPawn_Vanguard_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Vanguard.StopGunRecoil
// [0x00020102] 
// Parameters infos:

void ATgPawn_Vanguard::StopGunRecoil ( )
{
	static UFunction* pFnStopGunRecoil = NULL;

	if ( ! pFnStopGunRecoil )
		pFnStopGunRecoil = (UFunction*) UObject::GObjObjects()->Data[ 44163 ];

	ATgPawn_Vanguard_execStopGunRecoil_Parms StopGunRecoil_Parms;

	this->ProcessEvent ( pFnStopGunRecoil, &StopGunRecoil_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.StopTractorBeamFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_Vanguard::StopTractorBeamFire ( )
{
	static UFunction* pFnStopTractorBeamFire = NULL;

	if ( ! pFnStopTractorBeamFire )
		pFnStopTractorBeamFire = (UFunction*) UObject::GObjObjects()->Data[ 44162 ];

	ATgPawn_Vanguard_execStopTractorBeamFire_Parms StopTractorBeamFire_Parms;

	this->ProcessEvent ( pFnStopTractorBeamFire, &StopTractorBeamFire_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.OnDeviceFormStopFire
// [0x00020102] 
// Parameters infos:

void ATgPawn_Vanguard::OnDeviceFormStopFire ( )
{
	static UFunction* pFnOnDeviceFormStopFire = NULL;

	if ( ! pFnOnDeviceFormStopFire )
		pFnOnDeviceFormStopFire = (UFunction*) UObject::GObjObjects()->Data[ 44161 ];

	ATgPawn_Vanguard_execOnDeviceFormStopFire_Parms OnDeviceFormStopFire_Parms;

	this->ProcessEvent ( pFnOnDeviceFormStopFire, &OnDeviceFormStopFire_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.PlayGunRecoil
// [0x00020102] 
// Parameters infos:

void ATgPawn_Vanguard::PlayGunRecoil ( )
{
	static UFunction* pFnPlayGunRecoil = NULL;

	if ( ! pFnPlayGunRecoil )
		pFnPlayGunRecoil = (UFunction*) UObject::GObjObjects()->Data[ 44160 ];

	ATgPawn_Vanguard_execPlayGunRecoil_Parms PlayGunRecoil_Parms;

	this->ProcessEvent ( pFnPlayGunRecoil, &PlayGunRecoil_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Vanguard::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44158 ];

	ATgPawn_Vanguard_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.OnDeviceFormBuildup
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Vanguard::OnDeviceFormBuildup ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormBuildup = NULL;

	if ( ! pFnOnDeviceFormBuildup )
		pFnOnDeviceFormBuildup = (UFunction*) UObject::GObjObjects()->Data[ 44156 ];

	ATgPawn_Vanguard_execOnDeviceFormBuildup_Parms OnDeviceFormBuildup_Parms;
	OnDeviceFormBuildup_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormBuildup, &OnDeviceFormBuildup_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.StopFullBodyAnimation
// [0x00024102] 
// Parameters infos:
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Vanguard::StopFullBodyAnimation ( float BlendOutTime )
{
	static UFunction* pFnStopFullBodyAnimation = NULL;

	if ( ! pFnStopFullBodyAnimation )
		pFnStopFullBodyAnimation = (UFunction*) UObject::GObjObjects()->Data[ 44154 ];

	ATgPawn_Vanguard_execStopFullBodyAnimation_Parms StopFullBodyAnimation_Parms;
	StopFullBodyAnimation_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnStopFullBodyAnimation, &StopFullBodyAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ATgPawn_Vanguard::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 44152 ];

	ATgPawn_Vanguard_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function TgGame.TgPawn_Vanguard.GetCameraValues
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FTgCameraValues         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTgCameraValues ATgPawn_Vanguard::eventGetCameraValues ( )
{
	static UFunction* pFnGetCameraValues = NULL;

	if ( ! pFnGetCameraValues )
		pFnGetCameraValues = (UFunction*) UObject::GObjObjects()->Data[ 44150 ];

	ATgPawn_Vanguard_eventGetCameraValues_Parms GetCameraValues_Parms;

	this->ProcessEvent ( pFnGetCameraValues, &GetCameraValues_Parms, NULL );

	return GetCameraValues_Parms.ReturnValue;
};

// Function TgGame.TgPawn_Vulcan.OnPhaseChange
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATgPawn_Vulcan::eventOnPhaseChange ( )
{
	static UFunction* pFnOnPhaseChange = NULL;

	if ( ! pFnOnPhaseChange )
		pFnOnPhaseChange = (UFunction*) UObject::GObjObjects()->Data[ 44199 ];

	ATgPawn_Vulcan_eventOnPhaseChange_Parms OnPhaseChange_Parms;

	this->ProcessEvent ( pFnOnPhaseChange, &OnPhaseChange_Parms, NULL );
};

// Function TgGame.TgPawn_Warlord.StopFullBodyAnimation
// [0x00024102] 
// Parameters infos:
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void ATgPawn_Warlord::StopFullBodyAnimation ( float BlendOutTime )
{
	static UFunction* pFnStopFullBodyAnimation = NULL;

	if ( ! pFnStopFullBodyAnimation )
		pFnStopFullBodyAnimation = (UFunction*) UObject::GObjObjects()->Data[ 44216 ];

	ATgPawn_Warlord_execStopFullBodyAnimation_Parms StopFullBodyAnimation_Parms;
	StopFullBodyAnimation_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnStopFullBodyAnimation, &StopFullBodyAnimation_Parms, NULL );
};

// Function TgGame.TgPawn_Warlord.OnDeviceFormFire
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Warlord::OnDeviceFormFire ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormFire = NULL;

	if ( ! pFnOnDeviceFormFire )
		pFnOnDeviceFormFire = (UFunction*) UObject::GObjObjects()->Data[ 44214 ];

	ATgPawn_Warlord_execOnDeviceFormFire_Parms OnDeviceFormFire_Parms;
	OnDeviceFormFire_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormFire, &OnDeviceFormFire_Parms, NULL );
};

// Function TgGame.TgPawn_Warlord.OnDeviceFormBuildup
// [0x00020102] 
// Parameters infos:
// int                            nEquipSlot                     ( CPF_Parm )

void ATgPawn_Warlord::OnDeviceFormBuildup ( int nEquipSlot )
{
	static UFunction* pFnOnDeviceFormBuildup = NULL;

	if ( ! pFnOnDeviceFormBuildup )
		pFnOnDeviceFormBuildup = (UFunction*) UObject::GObjObjects()->Data[ 44212 ];

	ATgPawn_Warlord_execOnDeviceFormBuildup_Parms OnDeviceFormBuildup_Parms;
	OnDeviceFormBuildup_Parms.nEquipSlot = nEquipSlot;

	this->ProcessEvent ( pFnOnDeviceFormBuildup, &OnDeviceFormBuildup_Parms, NULL );
};

// Function TgGame.TgPawn_Warlord.PostPawnSetup
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPawn_Warlord::eventPostPawnSetup ( )
{
	static UFunction* pFnPostPawnSetup = NULL;

	if ( ! pFnPostPawnSetup )
		pFnPostPawnSetup = (UFunction*) UObject::GObjObjects()->Data[ 44210 ];

	ATgPawn_Warlord_eventPostPawnSetup_Parms PostPawnSetup_Parms;

	this->ProcessEvent ( pFnPostPawnSetup, &PostPawnSetup_Parms, NULL );

	return PostPawnSetup_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.OnAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ATgPhysAnimTestActor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 44360 ];

	ATgPhysAnimTestActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.Tick
// [0x00820102] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ATgPhysAnimTestActor::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 44355 ];

	ATgPhysAnimTestActor_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.SetAllMotorsAngularDriveStrength
// [0x00020102] 
// Parameters infos:
// float                          InAngularSpringStrength        ( CPF_Parm )
// float                          InAngularDampingStrength       ( CPF_Parm )
// float                          InAngularForceLimitStrength    ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )

void ATgPhysAnimTestActor::SetAllMotorsAngularDriveStrength ( float InAngularSpringStrength, float InAngularDampingStrength, float InAngularForceLimitStrength, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetAllMotorsAngularDriveStrength = NULL;

	if ( ! pFnSetAllMotorsAngularDriveStrength )
		pFnSetAllMotorsAngularDriveStrength = (UFunction*) UObject::GObjObjects()->Data[ 44347 ];

	ATgPhysAnimTestActor_execSetAllMotorsAngularDriveStrength_Parms SetAllMotorsAngularDriveStrength_Parms;
	SetAllMotorsAngularDriveStrength_Parms.InAngularSpringStrength = InAngularSpringStrength;
	SetAllMotorsAngularDriveStrength_Parms.InAngularDampingStrength = InAngularDampingStrength;
	SetAllMotorsAngularDriveStrength_Parms.InAngularForceLimitStrength = InAngularForceLimitStrength;
	SetAllMotorsAngularDriveStrength_Parms.SkelMeshComp = SkelMeshComp;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveStrength, &SetAllMotorsAngularDriveStrength_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.RecoverFromRagdoll
// [0x00820102] 
// Parameters infos:

void ATgPhysAnimTestActor::RecoverFromRagdoll ( )
{
	static UFunction* pFnRecoverFromRagdoll = NULL;

	if ( ! pFnRecoverFromRagdoll )
		pFnRecoverFromRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 44339 ];

	ATgPhysAnimTestActor_execRecoverFromRagdoll_Parms RecoverFromRagdoll_Parms;

	this->ProcessEvent ( pFnRecoverFromRagdoll, &RecoverFromRagdoll_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.SetBoneSprings
// [0x00820102] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void ATgPhysAnimTestActor::SetBoneSprings ( unsigned long bEnabled )
{
	static UFunction* pFnSetBoneSprings = NULL;

	if ( ! pFnSetBoneSprings )
		pFnSetBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 44330 ];

	ATgPhysAnimTestActor_execSetBoneSprings_Parms SetBoneSprings_Parms;
	SetBoneSprings_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetBoneSprings, &SetBoneSprings_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.IsAngularBoneSpringName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPhysAnimTestActor::IsAngularBoneSpringName ( struct FName InName )
{
	static UFunction* pFnIsAngularBoneSpringName = NULL;

	if ( ! pFnIsAngularBoneSpringName )
		pFnIsAngularBoneSpringName = (UFunction*) UObject::GObjObjects()->Data[ 44326 ];

	ATgPhysAnimTestActor_execIsAngularBoneSpringName_Parms IsAngularBoneSpringName_Parms;
	memcpy ( &IsAngularBoneSpringName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsAngularBoneSpringName, &IsAngularBoneSpringName_Parms, NULL );

	return IsAngularBoneSpringName_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.IsLinearBoneSpringName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPhysAnimTestActor::IsLinearBoneSpringName ( struct FName InName )
{
	static UFunction* pFnIsLinearBoneSpringName = NULL;

	if ( ! pFnIsLinearBoneSpringName )
		pFnIsLinearBoneSpringName = (UFunction*) UObject::GObjObjects()->Data[ 44322 ];

	ATgPhysAnimTestActor_execIsLinearBoneSpringName_Parms IsLinearBoneSpringName_Parms;
	memcpy ( &IsLinearBoneSpringName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsLinearBoneSpringName, &IsLinearBoneSpringName_Parms, NULL );

	return IsLinearBoneSpringName_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.SetLowerFixed
// [0x00020102] 
// Parameters infos:

void ATgPhysAnimTestActor::SetLowerFixed ( )
{
	static UFunction* pFnSetLowerFixed = NULL;

	if ( ! pFnSetLowerFixed )
		pFnSetLowerFixed = (UFunction*) UObject::GObjObjects()->Data[ 44318 ];

	ATgPhysAnimTestActor_execSetLowerFixed_Parms SetLowerFixed_Parms;

	this->ProcessEvent ( pFnSetLowerFixed, &SetLowerFixed_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.DetachAttachments
// [0x00020102] 
// Parameters infos:

void ATgPhysAnimTestActor::DetachAttachments ( )
{
	static UFunction* pFnDetachAttachments = NULL;

	if ( ! pFnDetachAttachments )
		pFnDetachAttachments = (UFunction*) UObject::GObjObjects()->Data[ 44313 ];

	ATgPhysAnimTestActor_execDetachAttachments_Parms DetachAttachments_Parms;

	this->ProcessEvent ( pFnDetachAttachments, &DetachAttachments_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.IsLowerBodyName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Parm )

bool ATgPhysAnimTestActor::IsLowerBodyName ( struct FName InName )
{
	static UFunction* pFnIsLowerBodyName = NULL;

	if ( ! pFnIsLowerBodyName )
		pFnIsLowerBodyName = (UFunction*) UObject::GObjObjects()->Data[ 44309 ];

	ATgPhysAnimTestActor_execIsLowerBodyName_Parms IsLowerBodyName_Parms;
	memcpy ( &IsLowerBodyName_Parms.InName, &InName, 0x8 );

	this->ProcessEvent ( pFnIsLowerBodyName, &IsLowerBodyName_Parms, NULL );

	return IsLowerBodyName_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.SetBodiesFixed
// [0x00020102] 
// Parameters infos:
// unsigned long                  InFixed                        ( CPF_Parm )

void ATgPhysAnimTestActor::SetBodiesFixed ( unsigned long InFixed )
{
	static UFunction* pFnSetBodiesFixed = NULL;

	if ( ! pFnSetBodiesFixed )
		pFnSetBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 44307 ];

	ATgPhysAnimTestActor_execSetBodiesFixed_Parms SetBodiesFixed_Parms;
	SetBodiesFixed_Parms.InFixed = InFixed;

	this->ProcessEvent ( pFnSetBodiesFixed, &SetBodiesFixed_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.EnableMotors
// [0x00020102] 
// Parameters infos:
// unsigned long                  InEnabled                      ( CPF_Parm )

void ATgPhysAnimTestActor::EnableMotors ( unsigned long InEnabled )
{
	static UFunction* pFnEnableMotors = NULL;

	if ( ! pFnEnableMotors )
		pFnEnableMotors = (UFunction*) UObject::GObjObjects()->Data[ 44305 ];

	ATgPhysAnimTestActor_execEnableMotors_Parms EnableMotors_Parms;
	EnableMotors_Parms.InEnabled = InEnabled;

	this->ProcessEvent ( pFnEnableMotors, &EnableMotors_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.SetPATAState
// [0x00020102] 
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )

void ATgPhysAnimTestActor::SetPATAState ( unsigned char NewState )
{
	static UFunction* pFnSetPATAState = NULL;

	if ( ! pFnSetPATAState )
		pFnSetPATAState = (UFunction*) UObject::GObjObjects()->Data[ 44303 ];

	ATgPhysAnimTestActor_execSetPATAState_Parms SetPATAState_Parms;
	SetPATAState_Parms.NewState = NewState;

	this->ProcessEvent ( pFnSetPATAState, &SetPATAState_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.EndGrab
// [0x00020102] 
// Parameters infos:

void ATgPhysAnimTestActor::EndGrab ( )
{
	static UFunction* pFnEndGrab = NULL;

	if ( ! pFnEndGrab )
		pFnEndGrab = (UFunction*) UObject::GObjObjects()->Data[ 44302 ];

	ATgPhysAnimTestActor_execEndGrab_Parms EndGrab_Parms;

	this->ProcessEvent ( pFnEndGrab, &EndGrab_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.PreGrab
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATgPhysAnimTestActor::PreGrab ( )
{
	static UFunction* pFnPreGrab = NULL;

	if ( ! pFnPreGrab )
		pFnPreGrab = (UFunction*) UObject::GObjObjects()->Data[ 44300 ];

	ATgPhysAnimTestActor_execPreGrab_Parms PreGrab_Parms;

	this->ProcessEvent ( pFnPreGrab, &PreGrab_Parms, NULL );

	return PreGrab_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.PrePokeActor
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PokeDir                        ( CPF_Parm )

bool ATgPhysAnimTestActor::PrePokeActor ( struct FVector PokeDir )
{
	static UFunction* pFnPrePokeActor = NULL;

	if ( ! pFnPrePokeActor )
		pFnPrePokeActor = (UFunction*) UObject::GObjObjects()->Data[ 44297 ];

	ATgPhysAnimTestActor_execPrePokeActor_Parms PrePokeActor_Parms;
	memcpy ( &PrePokeActor_Parms.PokeDir, &PokeDir, 0xC );

	this->ProcessEvent ( pFnPrePokeActor, &PrePokeActor_Parms, NULL );

	return PrePokeActor_Parms.ReturnValue;
};

// Function TgGame.TgPhysAnimTestActor.BoneImpulse
// [0x00820102] 
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void ATgPhysAnimTestActor::BoneImpulse ( struct FVector Impulse, struct FName BoneName )
{
	static UFunction* pFnBoneImpulse = NULL;

	if ( ! pFnBoneImpulse )
		pFnBoneImpulse = (UFunction*) UObject::GObjObjects()->Data[ 44293 ];

	ATgPhysAnimTestActor_execBoneImpulse_Parms BoneImpulse_Parms;
	memcpy ( &BoneImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &BoneImpulse_Parms.BoneName, &BoneName, 0x8 );

	this->ProcessEvent ( pFnBoneImpulse, &BoneImpulse_Parms, NULL );
};

// Function TgGame.TgPhysAnimTestActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgPhysAnimTestActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 44292 ];

	ATgPhysAnimTestActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgPickupFactory_Item.BotDesireability
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

float ATgPickupFactory_Item::BotDesireability ( class APawn* P )
{
	static UFunction* pFnBotDesireability = NULL;

	if ( ! pFnBotDesireability )
		pFnBotDesireability = (UFunction*) UObject::GObjObjects()->Data[ 44400 ];

	ATgPickupFactory_Item_execBotDesireability_Parms BotDesireability_Parms;
	BotDesireability_Parms.P = P;

	this->ProcessEvent ( pFnBotDesireability, &BotDesireability_Parms, NULL );

	return BotDesireability_Parms.ReturnValue;
};

// Function TgGame.TgPickupFactory_Item.GetRespawnTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ATgPickupFactory_Item::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = (UFunction*) UObject::GObjObjects()->Data[ 44398 ];

	ATgPickupFactory_Item_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );

	return GetRespawnTime_Parms.ReturnValue;
};

// Function TgGame.TgPickupFactory_Item.SetRespawn
// [0x00020002] 
// Parameters infos:

void ATgPickupFactory_Item::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = (UFunction*) UObject::GObjObjects()->Data[ 44397 ];

	ATgPickupFactory_Item_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function TgGame.TgPickupFactory_Item.SpawnCopyFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Recipient                      ( CPF_Parm )

void ATgPickupFactory_Item::SpawnCopyFor ( class APawn* Recipient )
{
	static UFunction* pFnSpawnCopyFor = NULL;

	if ( ! pFnSpawnCopyFor )
		pFnSpawnCopyFor = (UFunction*) UObject::GObjObjects()->Data[ 44395 ];

	ATgPickupFactory_Item_execSpawnCopyFor_Parms SpawnCopyFor_Parms;
	SpawnCopyFor_Parms.Recipient = Recipient;

	this->ProcessEvent ( pFnSpawnCopyFor, &SpawnCopyFor_Parms, NULL );
};

// Function TgGame.TgPickupFactory_Item.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString ATgPickupFactory_Item::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 44390 ];

	ATgPickupFactory_Item_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function TgGame.TgPickupFactory_Item.InitializePickup
// [0x00020100] 
// Parameters infos:

void ATgPickupFactory_Item::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = (UFunction*) UObject::GObjObjects()->Data[ 44389 ];

	ATgPickupFactory_Item_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function TgGame.TgProj_Net.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ATgProj_Net::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46528 ];

	ATgProj_Net_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.TargetReached
// [0x00020002] 
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )

void ATgProj_Teleporter::TargetReached ( struct FVector vLocation )
{
	static UFunction* pFnTargetReached = NULL;

	if ( ! pFnTargetReached )
		pFnTargetReached = (UFunction*) UObject::GObjObjects()->Data[ 46587 ];

	ATgProj_Teleporter_execTargetReached_Parms TargetReached_Parms;
	memcpy ( &TargetReached_Parms.vLocation, &vLocation, 0xC );

	this->ProcessEvent ( pFnTargetReached, &TargetReached_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ATgProj_Teleporter::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 46583 ];

	ATgProj_Teleporter_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ATgProj_Teleporter::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 46580 ];

	ATgProj_Teleporter_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.SpawnExplosionEffects
// [0x00024100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FIMPACT_FX              ImpactFx                       ( CPF_OptionalParm | CPF_Parm )

void ATgProj_Teleporter::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal, struct FIMPACT_FX ImpactFx )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 46576 ];

	ATgProj_Teleporter_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.ImpactFx, &ImpactFx, 0x24 );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.GotoLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 Loc                            ( CPF_Parm )

void ATgProj_Teleporter::GotoLocation ( struct FVector Loc )
{
	static UFunction* pFnGotoLocation = NULL;

	if ( ! pFnGotoLocation )
		pFnGotoLocation = (UFunction*) UObject::GObjObjects()->Data[ 46566 ];

	ATgProj_Teleporter_execGotoLocation_Parms GotoLocation_Parms;
	memcpy ( &GotoLocation_Parms.Loc, &Loc, 0xC );

	this->ProcessEvent ( pFnGotoLocation, &GotoLocation_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.CancelTeleporting
// [0x00020002] 
// Parameters infos:

void ATgProj_Teleporter::CancelTeleporting ( )
{
	static UFunction* pFnCancelTeleporting = NULL;

	if ( ! pFnCancelTeleporting )
		pFnCancelTeleporting = (UFunction*) UObject::GObjObjects()->Data[ 46565 ];

	ATgProj_Teleporter_execCancelTeleporting_Parms CancelTeleporting_Parms;

	this->ProcessEvent ( pFnCancelTeleporting, &CancelTeleporting_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.CheckInterruptTeleport
// [0x00020002] 
// Parameters infos:

void ATgProj_Teleporter::CheckInterruptTeleport ( )
{
	static UFunction* pFnCheckInterruptTeleport = NULL;

	if ( ! pFnCheckInterruptTeleport )
		pFnCheckInterruptTeleport = (UFunction*) UObject::GObjObjects()->Data[ 46561 ];

	ATgProj_Teleporter_execCheckInterruptTeleport_Parms CheckInterruptTeleport_Parms;

	this->ProcessEvent ( pFnCheckInterruptTeleport, &CheckInterruptTeleport_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.RangeReached
// [0x00020002] 
// Parameters infos:

void ATgProj_Teleporter::RangeReached ( )
{
	static UFunction* pFnRangeReached = NULL;

	if ( ! pFnRangeReached )
		pFnRangeReached = (UFunction*) UObject::GObjObjects()->Data[ 46560 ];

	ATgProj_Teleporter_execRangeReached_Parms RangeReached_Parms;

	this->ProcessEvent ( pFnRangeReached, &RangeReached_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.Timer
// [0x00020102] 
// Parameters infos:

void ATgProj_Teleporter::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 46559 ];

	ATgProj_Teleporter_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.SetMeshCollision
// [0x00020102] 
// Parameters infos:

void ATgProj_Teleporter::SetMeshCollision ( )
{
	static UFunction* pFnSetMeshCollision = NULL;

	if ( ! pFnSetMeshCollision )
		pFnSetMeshCollision = (UFunction*) UObject::GObjObjects()->Data[ 46558 ];

	ATgProj_Teleporter_execSetMeshCollision_Parms SetMeshCollision_Parms;

	this->ProcessEvent ( pFnSetMeshCollision, &SetMeshCollision_Parms, NULL );
};

// Function TgGame.TgProj_Teleporter.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ATgProj_Teleporter::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 46557 ];

	ATgProj_Teleporter_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function TgGame.TgSeqAct_SpawnProjectile.Activated
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UTgSeqAct_SpawnProjectile::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 47359 ];

	UTgSeqAct_SpawnProjectile_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function TgGame.TgSoundInsulationVolume.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATgSoundInsulationVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48230 ];

	ATgSoundInsulationVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function TgGame.TgSoundInsulationVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATgSoundInsulationVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 48223 ];

	ATgSoundInsulationVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif